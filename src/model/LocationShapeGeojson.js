/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationShapeGeojson model module.
 * @module model/LocationShapeGeojson
 * @version 3.0.0
 */
class LocationShapeGeojson {
    /**
     * Constructs a new <code>LocationShapeGeojson</code>.
     * @alias module:model/LocationShapeGeojson
     */
    constructor() { 
        
        LocationShapeGeojson.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationShapeGeojson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationShapeGeojson} obj Optional instance to populate.
     * @returns {module:model/LocationShapeGeojson} The populated <code>LocationShapeGeojson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationShapeGeojson();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = ApiClient.convertToType(data['coordinates'], [['Number']]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationShapeGeojson</code>.
     * @param {object} data The plain JavaScript object bearing properties of interest.
     * @returns {boolean} to indicate whether the JSON data is valid with respect to <code>LocationShapeGeojson</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['coordinates'])) {
            throw new Error("Expected the field `coordinates` to be an array in the JSON data but got " + data['coordinates']);
        }

        return true;
    }


}



/**
 * @member {module:model/LocationShapeGeojson.TypeEnum} 
 */
LocationShapeGeojson.prototype['type'] = undefined;

/**
 * @member {Array.<Array.<Number>>} 
 */
LocationShapeGeojson.prototype['coordinates'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LocationShapeGeojson['TypeEnum'] = {

    /**
     * value: "Polygon"
     * @constant
     */
    "Polygon": "Polygon",

    /**
     * value: "MultiPolygon"
     * @constant
     */
    "MultiPolygon": "MultiPolygon"
};



export default LocationShapeGeojson;

