/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemberActivityData1 from './MemberActivityData1';

/**
 * The MemberActivity model module.
 * @module model/MemberActivity
 * @version 3.0.0
 */
class MemberActivity {
    /**
     * Constructs a new <code>MemberActivity</code>.
     * This is an object representing member activity.    This is a general object which presents moments from members&#39; activity. There are all types of different events that members perform during their journey once they participate in a loyalty program. Events describe moments when the members redeem loyalty cards and earn points or rewards. The list of all types of activities is listed below.  The details describing the activity are collected in an array property named &#x60;data&#x60;. In this object, software integrators can find all further information explaining the event context.
     * @alias module:model/MemberActivity
     */
    constructor() { 
        
        MemberActivity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MemberActivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberActivity} obj Optional instance to populate.
     * @returns {module:model/MemberActivity} The populated <code>MemberActivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberActivity();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = MemberActivityData1.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberActivity</code>.
     * @param {object} data The plain JavaScript object bearing properties of interest.
     * @returns {boolean} to indicate whether the JSON data is valid with respect to <code>MemberActivity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          MemberActivityData1.validateJSON(data['data']);
        }
        // ensure the json data is a string
        if (data['group_id'] && !(typeof data['group_id'] === 'string' || data['group_id'] instanceof String)) {
            throw new Error("Expected the field `group_id` to be a primitive type in the JSON string but got " + data['group_id']);
        }

        return true;
    }


}



/**
 * Unique event ID, assigned by Voucherify.
 * @member {String} 
 */
MemberActivity.prototype['id'] = undefined;

/**
 * Event type.
 * @member {module:model/MemberActivity.TypeEnum} 
 */
MemberActivity.prototype['type'] = undefined;

/**
 * @member {module:model/MemberActivityData1} 
 */
MemberActivity.prototype['data'] = undefined;

/**
 * Timestamp representing the date and time when the member activity occurred in ISO 8601 format.
 * @member {Date} 
 */
MemberActivity.prototype['created_at'] = undefined;

/**
 * Unique identifier of the request that caused the event.
 * @member {String} 
 */
MemberActivity.prototype['group_id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MemberActivity['TypeEnum'] = {

    /**
     * value: "customer.loyalty.tier.upgraded"
     * @constant
     */
    "customer.loyalty.tier.upgraded": "customer.loyalty.tier.upgraded",

    /**
     * value: "customer.loyalty.tier.downgraded"
     * @constant
     */
    "customer.loyalty.tier.downgraded": "customer.loyalty.tier.downgraded",

    /**
     * value: "customer.loyalty.tier.prolonged"
     * @constant
     */
    "customer.loyalty.tier.prolonged": "customer.loyalty.tier.prolonged",

    /**
     * value: "customer.loyalty.tier.expiration.changed"
     * @constant
     */
    "customer.loyalty.tier.expiration.changed": "customer.loyalty.tier.expiration.changed",

    /**
     * value: "customer.loyalty.tier.joined"
     * @constant
     */
    "customer.loyalty.tier.joined": "customer.loyalty.tier.joined",

    /**
     * value: "customer.loyalty.tier.left"
     * @constant
     */
    "customer.loyalty.tier.left": "customer.loyalty.tier.left",

    /**
     * value: "customer.publication.succeeded"
     * @constant
     */
    "customer.publication.succeeded": "customer.publication.succeeded",

    /**
     * value: "customer.publication.failed"
     * @constant
     */
    "customer.publication.failed": "customer.publication.failed",

    /**
     * value: "customer.redemption.failed"
     * @constant
     */
    "customer.redemption.failed": "customer.redemption.failed",

    /**
     * value: "customer.redemption.succceeded"
     * @constant
     */
    "customer.redemption.succceeded": "customer.redemption.succceeded",

    /**
     * value: "customer.redemption.rollback.failed"
     * @constant
     */
    "customer.redemption.rollback.failed": "customer.redemption.rollback.failed",

    /**
     * value: "customer.redemption.rollback.succceeded"
     * @constant
     */
    "customer.redemption.rollback.succceeded": "customer.redemption.rollback.succceeded",

    /**
     * value: "customer.rewarded"
     * @constant
     */
    "customer.rewarded": "customer.rewarded",

    /**
     * value: "customer.rewarded.loyalty_points"
     * @constant
     */
    "customer.rewarded.loyalty_points": "customer.rewarded.loyalty_points",

    /**
     * value: "customer.reward_redemptions.created"
     * @constant
     */
    "customer.reward_redemptions.created": "customer.reward_redemptions.created",

    /**
     * value: "customer.reward_redemptions.pending"
     * @constant
     */
    "customer.reward_redemptions.pending": "customer.reward_redemptions.pending",

    /**
     * value: "customer.reward_redemptions.completed"
     * @constant
     */
    "customer.reward_redemptions.completed": "customer.reward_redemptions.completed",

    /**
     * value: "customer.reward_redemptions.rolledback"
     * @constant
     */
    "customer.reward_redemptions.rolledback": "customer.reward_redemptions.rolledback",

    /**
     * value: "customer.voucher.deleted"
     * @constant
     */
    "customer.voucher.deleted": "customer.voucher.deleted",

    /**
     * value: "customer.voucher.loyalty_card.pending_points.activated"
     * @constant
     */
    "customer.voucher.loyalty_card.pending_points.activated": "customer.voucher.loyalty_card.pending_points.activated",

    /**
     * value: "customer.voucher.loyalty_card.pending_points.added"
     * @constant
     */
    "customer.voucher.loyalty_card.pending_points.added": "customer.voucher.loyalty_card.pending_points.added",

    /**
     * value: "customer.voucher.loyalty_card.pending_points.canceled"
     * @constant
     */
    "customer.voucher.loyalty_card.pending_points.canceled": "customer.voucher.loyalty_card.pending_points.canceled",

    /**
     * value: "customer.voucher.loyalty_card.pending_points.updated"
     * @constant
     */
    "customer.voucher.loyalty_card.pending_points.updated": "customer.voucher.loyalty_card.pending_points.updated",

    /**
     * value: "customer.voucher.loyalty_card.points_added"
     * @constant
     */
    "customer.voucher.loyalty_card.points_added": "customer.voucher.loyalty_card.points_added",

    /**
     * value: "customer.voucher.loyalty_card.points_transferred"
     * @constant
     */
    "customer.voucher.loyalty_card.points_transferred": "customer.voucher.loyalty_card.points_transferred",

    /**
     * value: "customer.voucher.loyalty_card.points_expired"
     * @constant
     */
    "customer.voucher.loyalty_card.points_expired": "customer.voucher.loyalty_card.points_expired"
};



export default MemberActivity;

