/**
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OAuthTokenGenerateResponseBody from '../model/OAuthTokenGenerateResponseBody';
import OAuthTokenIntrospectResponseBody from '../model/OAuthTokenIntrospectResponseBody';

/**
* OAuth service.
* @module api/OAuthApi
* @version 3.0.0
*/
export default class OAuthApi {

    /**
    * Constructs a new OAuthApi. 
    * @alias module:api/OAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the generateOauthToken operation.
     * @callback module:api/OAuthApi~generateOauthTokenCallback
     * @param {Error|null} error Error object if failed, null otherwise.
     * @param {module:model/OAuthTokenGenerateResponseBody} [data] The data returned by the service call.
     * @param {Object} [response] Full response object if successful.
     */

    /**
     * Generate OAuth 2.0 Token
     * Generate an OAuth 2.0 token for an API client. The token can be used to authorize access to the Voucherify API. The token inherits the permissions and IP whitelists of the API key that is used to generate the OAuth token. You can define the scope that limits its usage. You can generate up to 1000 OAuth tokens per project. The token expires in 900 seconds (15 minutes). If the API key that is used to generate the OAuth token is deleted or blocked, you cannot generate new OAuth tokens and the existing ones will stop working within one minute. If the API key used to generate an OAuth token is regenerated, the OAuth token can still be used. ðŸš§ Format of scope values Separate the values of the scope property with spaces.
     * @param {{
        grantType?: module:model/String,
        scope?: String,
     }} [opts] Optional parameters
     * @param {module:api/OAuthApi~generateOauthTokenCallback} [callback] The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuthTokenGenerateResponseBody}
     */
    generateOauthToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': opts['grantType'],
        'scope': opts['scope']
      };

      let authNames = ['X-App-Id', 'X-App-Token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = OAuthTokenGenerateResponseBody;
      return this.apiClient.callApi(
        '/v1/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the introspectOauthToken operation.
     * @callback module:api/OAuthApi~introspectOauthTokenCallback
     * @param {Error|null} error Error object if failed, null otherwise.
     * @param {module:model/OAuthTokenIntrospectResponseBody} [data] The data returned by the service call.
     * @param {Object} [response] Full response object if successful.
     */

    /**
     * Introspect OAuth 2.0 Token
     * Introspect an OAuth 2.0 token for an API client.
     * @param {{
        accessToken?: String,
     }} [opts] Optional parameters
     * @param {module:api/OAuthApi~introspectOauthTokenCallback} [callback] The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuthTokenIntrospectResponseBody}
     */
    introspectOauthToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'access_token': opts['accessToken']
      };

      let authNames = ['X-App-Id', 'X-App-Token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = OAuthTokenIntrospectResponseBody;
      return this.apiClient.callApi(
        '/v1/oauth/introspect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeOauthToken operation.
     * @callback module:api/OAuthApi~revokeOauthTokenCallback
     * @param {Error|null} error Error object if failed, null otherwise.
     * @param data This operation does not return a value.
     * @param {Object} [response] Full response object if successful.
     */

    /**
     * Revoke OAuth 2.0 Token
     * Revoke an OAuth 2.0 token for an API client. Once revoked, the token cannot be used anymore.
     * @param {{
        accessToken?: String,
     }} [opts] Optional parameters
     * @param {module:api/OAuthApi~revokeOauthTokenCallback} [callback] The callback function, accepting three arguments: error, data, response
     */
    revokeOauthToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'access_token': opts['accessToken']
      };

      let authNames = ['X-App-Id', 'X-App-Token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/oauth/token/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
