// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compare open-api file python 1`] = `
"{
  "openapi": "3.0.1",
  "info": {
    "title": "Voucherify API",
    "version": "v2018-08-01",
    "description": "Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.",
    "contact": {
      "name": "Voucherify Team",
      "url": "https://www.voucherify.io/contact-support",
      "email": "support@voucherify.io"
    },
    "termsOfService": "https://www.voucherify.io/legal/subscription-agreement",
    "license": {
      "name": "MIT",
      "url": "https://github.com/voucherifyio/voucherify-js-sdk/blob/main/LICENSE"
    }
  },
  "x-readme": {
    "samples-languages": [
      "curl"
    ],
    "headers": [
      {
        "key": "X-Voucherify-Channel",
        "value": "Voucherify Documentation"
      }
    ]
  },
  "servers": [
    {
      "url": "https://{cluster}.voucherify.io",
      "description": "Base URL",
      "variables": {
        "cluster": {
          "default": "api",
          "enum": [
            "api",
            "us1.api",
            "as1.api"
          ]
        }
      }
    },
    {
      "url": "https://download.voucherify.io",
      "description": "EU Download Export Base URL"
    },
    {
      "url": "https://{downloadcluster}.download.voucherify.io",
      "description": "US and AS Download Export Base URL",
      "variables": {
        "downloadcluster": {
          "default": "us1",
          "enum": [
            "us1",
            "as1"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "VOUCHERS API",
      "description": "Manage discount and gift card vouchers."
    },
    {
      "name": "CAMPAIGNS API",
      "description": "Group vouchers or promotion tiers of a specific type."
    },
    {
      "name": "PROMOTIONS API",
      "description": "Manage promotions."
    },
    {
      "name": "REWARDS API",
      "description": "Manage rewards."
    },
    {
      "name": "PUBLICATIONS API",
      "description": "Manage publications."
    },
    {
      "name": "VALIDATIONS API",
      "description": "Validate vouchers and promotions."
    },
    {
      "name": "REDEMPTIONS API",
      "description": "Manage redemptions."
    },
    {
      "name": "STACKABLE DISCOUNTS API",
      "description": "Manage multiple discounts in one request."
    },
    {
      "name": "LOYALTIES API",
      "description": "Manage loyalty campaigns."
    },
    {
      "name": "CUSTOMERS API",
      "description": "Manage customers."
    },
    {
      "name": "ORDERS API",
      "description": "Manage orders."
    },
    {
      "name": "PRODUCTS API",
      "description": "Manage products."
    },
    {
      "name": "PRODUCT COLLECTIONS API",
      "description": "Group products."
    },
    {
      "name": "VALIDATION RULES API",
      "description": "Configure validation rules."
    },
    {
      "name": "SEGMENTS API",
      "description": "Manage customer segments."
    },
    {
      "name": "EVENTS API",
      "description": "Track custom and internal events."
    },
    {
      "name": "CONSENTS API",
      "description": "List marketing opt-in consents."
    },
    {
      "name": "ASYNC ACTIONS API",
      "description": "Track asynchronous operations scheduled in Projects."
    },
    {
      "name": "EXPORTS API",
      "description": "Export data from Voucherify."
    },
    {
      "name": "CATEGORIES API",
      "description": "Manage categories."
    },
    {
      "name": "METADATA SCHEMAS API",
      "description": "List metadata schemas."
    },
    {
      "name": "LOCATIONS API",
      "description": "List locations."
    },
    {
      "name": "QUALIFICATIONS API",
      "description": "List applicable incentives."
    }
  ],
  "components": {
    "securitySchemes": {
      "X-App-Id-1": {
        "type": "apiKey",
        "name": "X-App-Id",
        "in": "header"
      },
      "X-App-Token-1": {
        "type": "apiKey",
        "name": "X-App-Token",
        "in": "header"
      },
      "X-Client-Token-1": {
        "type": "apiKey",
        "name": "X-Client-Token",
        "in": "header"
      },
      "X-Client-Application-Id-1": {
        "type": "apiKey",
        "name": "X-Client-Application-Id",
        "in": "header"
      },
      "Download-Token-1": {
        "type": "apiKey",
        "name": "token",
        "in": "query"
      }
    },
    "parameters": {
      "campaign_type": {
        "name": "campaign_type",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterCampaignType"
        },
        "description": "This attribute allows filtering by campaign type."
      },
      "code": {
        "name": "code",
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/ParameterCode"
        },
        "description": "A **code** that identifies the voucher.",
        "required": true
      },
      "created_at": {
        "name": "created_at",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterCreatedBeforeAfter"
        },
        "description": "A filter on the list based on the object \`created_at\` field. The value is a dictionary with the following options: \`before\`, \`after\`. A date value must be presented in ISO 8601 format (\`2016-11-16T14:14:31Z\` or \`2016-11-16\`). An example: \`[created_at][before]=2017-09-08T13:52:18.227Z\`",
        "style": "deepObject",
        "explode": true
      },
      "end_date": {
        "name": "end_date",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterDate"
        },
        "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterLimit"
        },
        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
      },
      "order": {
        "name": "order",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterOrder"
        },
        "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
      },
      "origin": {
        "name": "origin",
        "in": "header",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ParameterOrigin"
        },
        "description": "Indicates the origin (scheme, hostname, and port)."
      },
      "page": {
        "name": "page",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterPage"
        },
        "description": "Which page of results to return."
      },
      "start_date": {
        "name": "start_date",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterDate"
        },
        "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
      },
      "starting_after": {
        "name": "starting_after",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterDate"
        },
        "description": "Timestamp representing the date and time to use in starting_after cursor to get more data. Represented in ISO 8601 format."
      },
      "updated_at": {
        "name": "updated_at",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterUpdatedBeforeAfter"
        },
        "description": "A filter on the list based on the object \`updated_at\` field. The value is a dictionary with the following options: \`before\`, \`after\`. A date value must be presented in ISO 8601 format (\`2016-11-16T14:14:31Z\` or \`2016-11-16\`). An example: \`[updated_at][before]=2017-09-08T13:52:18.227Z\`",
        "style": "deepObject",
        "explode": true
      }
    },
    "schemas": {
      "18_res_list_consents_GET": {
        "description": "Response body schema for listing consents.",
        "type": "object",
        "title": "List Consents Response Body",
        "properties": {
          "groups": {
            "type": "object",
            "description": "Contains marketing permission groups' definitions.",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "Stores information about marketing permission groups."
              },
              "data_ref": {
                "type": "string",
                "default": "data",
                "description": "Identifies the name of the attribute that contains the array of marketing permission groups."
              },
              "data": {
                "type": "array",
                "description": "An array of marketing permission groups.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Contains a marketing permission group's definition.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "cnstgr_3c7Z3rcOLv51bsXlRtTZPYj8",
                      "description": "Unique group ID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Marketing permission group name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Marketing permission group category."
                    },
                    "consents": {
                      "type": "array",
                      "description": "List of consents that are assigned to the group.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-04-13T09:12:47.743Z",
                      "description": "Timestamp representing the date and time when the group was created in ISO 8601 format."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-05-14T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the group was updated in ISO 8601 format."
                    },
                    "object": {
                      "type": "string",
                      "default": "consent_group",
                      "description": "Stores information about a marketing permission group."
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of groups."
              }
            }
          },
          "consents": {
            "type": "object",
            "description": "Contains opt-in consents' definitions.",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "Stores information about opt-in consents."
              },
              "data_ref": {
                "type": "string",
                "default": "data",
                "description": "Identifies the name of the attribute that contains the array of opt-in consents."
              },
              "data": {
                "type": "array",
                "description": "An array of consents.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Contains an opt-in consent definition.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                      "description": "Unique consent ID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Consent name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Consent description."
                    },
                    "category": {
                      "type": "string",
                      "description": "Consent category."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-04-13T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the consent was created in ISO 8601 format."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-05-14T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the consent was updated in ISO 8601 format."
                    },
                    "object": {
                      "type": "string",
                      "default": "consent",
                      "description": "Stores information about an opt-in consent."
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of consents."
              }
            }
          }
        }
      },
      "CampaignsCreateRequestBody": {
        "type": "object",
        "title": "Campaigns Create Request Body",
        "description": "Request body schema for **POST** \`/campaigns\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateDiscountCouponsCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateReferralCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateGiftCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateLoyaltyCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreatePromotionCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateGiveawayCampaign"
          }
        ]
      },
      "CampaignsCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsDeleteResponseBody": {
        "type": "object",
        "title": "Campaigns Delete Response Body",
        "description": "Response body schema for **DELETE** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsDisableResponseBody": {
        "type": "object",
        "title": "Campaigns Disable Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/disable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmptyJson"
          }
        ]
      },
      "CampaignsEnableResponseBody": {
        "type": "object",
        "title": "Campaigns Enable Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/enable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmptyJson"
          }
        ]
      },
      "CampaignsGetResponseBody": {
        "type": "object",
        "title": "Campaigns Get Response Body",
        "description": "Response body schema for **GET** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsImportCreateRequestBody": {
        "type": "array",
        "title": "Campaigns Import Create Request Body",
        "description": "Request body schema for **POST** \`/campaigns/{campaignId}/import\`.",
        "items": {
          "$ref": "#/components/schemas/CampaignsImportVoucherItem"
        }
      },
      "CampaignsImportCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Import Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/import\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsListResponseBody": {
        "type": "object",
        "description": "Schema model for **GET** \`/campaigns\`.",
        "title": "Campaigns List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about campaigns in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of campaign objects.",
            "default": "campaigns"
          },
          "campaigns": {
            "type": "array",
            "description": "Contains array of campaign objects.",
            "items": {
              "$ref": "#/components/schemas/CampaignBase"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of campaigns."
          }
        }
      },
      "CampaignsUpdateRequestBody": {
        "type": "object",
        "title": "Campaigns Update Request Body",
        "description": "Request body schema for **PUT** \`/campaigns/{campaignId}\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateDiscountCouponsCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateReferralCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateGiftCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateLoyaltyCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdatePromotionCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateGiveawayCampaign"
          }
        ]
      },
      "CampaignsUpdateResponseBody": {
        "type": "object",
        "title": "Campaigns Update Response Body",
        "description": "Response body schema for **PUT** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsVouchersCreateInBulkResponseBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create In Bulk Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/vouchers/{code}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsVouchersCreateRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create Request Body",
        "description": "Request body schema for **POST** \`/campaigns/{campaignId}/vouchers/{code}\` and **POST** \`/campaigns/{campaignId}/vouchers\`.",
        "properties": {
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          }
        }
      },
      "CampaignsVouchersCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/vouchers/{code}\` and **POST** \`/campaigns/{campaignId}/vouchers\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "CampaignsVouchersImportCSVRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Import CSV Request Body",
        "description": "Request body schema for **POST** \`/campaigns/{campaignId}/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "CategoriesCreateRequestBody": {
        "title": "Categories Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/categories\`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          }
        },
        "required": [
          "name",
          "hierarchy"
        ]
      },
      "CategoriesCreateResponseBody": {
        "title": "Categories Create Response Body",
        "description": "Response body schema for **POST** \`/categories\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object"
        ]
      },
      "CategoriesGetResponseBody": {
        "type": "object",
        "title": "Categories Get Response Body",
        "description": "Response body schema for **GET** \`/categories/{categoryId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          }
        ]
      },
      "CategoriesListResponseBody": {
        "title": "Categories List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/categories\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about categories in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of category objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of categories."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CategoriesUpdateRequestBody": {
        "title": "Categories Update Request Body",
        "description": "Request body schema for **PUT** \`/categories/{categoryId}\`.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          }
        },
        "required": [
          "name",
          "hierarchy"
        ]
      },
      "CategoriesUpdateResponseBody": {
        "title": "Categories Update Response Body",
        "description": "Response body schema for **PUT** \`/categories/{categoryId}\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-08-16T10:52:08.094Z",
            "description": "Timestamp representing the date and time when the category was updated in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object",
          "updated_at"
        ]
      },
      "ClientCustomersConsentsUpdateRequestBody": {
        "description": "Request body schema for **PUT** \`/customers/{customerId}/consents\`.",
        "type": "object",
        "title": "Client Customers Consents Update Request Body"
      },
      "ClientEventsCreateRequestBody": {
        "description": "Request body schema for **POST** \`/events\`.",
        "title": "Client Events Create Request Body",
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name. This is the same name that you used to define a custom event in the **Dashboard** > **Project Settings** > **Event Schema**.",
            "minLength": 1,
            "maxLength": 300
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "If a **conversion event** for a referral program is set to a custom event, then you need to send the referral code in the payload to make a record of the conversion event. ",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code through which a new visitor has been referred to a service."
              },
              "referrer_id": {
                "type": "string",
                "description": "Unique ID of the referring person - it is optional and not required if the referral **code** is provided.",
                "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
              }
            },
            "required": [
              "code"
            ]
          },
          "loyalty": {
            "type": "object",
            "description": "If an earning rule in a loyalty program is based on a custom event. This objects let's you specify the loyalty card to which the custom event should be attributed to.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code of the loyalty card to receive points based on the calculation method defined in the related earning rule. An earning rule is triggered for the loyalty card when the event passed in the \`event\` parameter of the request payload gets sent along with this loyalty card code.",
                "example": "L-CARD-BUHuH6g"
              }
            },
            "required": [
              "code"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** > **Project Settings** > **Event Schema** > **Edit particular event** > **Metadata property definition**."
          }
        },
        "required": [
          "event",
          "customer"
        ]
      },
      "ClientEventsCreateResponseBody": {
        "description": "Response body schema for **POST** \`/events\`.",
        "title": "Client Events Create Response Body",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an \`event\`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "A \`null\` referral object.",
            "nullable": true
          },
          "loyalty": {
            "type": "object",
            "description": "A \`null\` loyalty object.",
            "nullable": true
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "ClientQualificationsCheckEligibilityRequestBody": {
        "description": "Request body schema for **POST** \`/qualifications\`.",
        "type": "object",
        "title": "Client Qualifications Check Eligibility Request Body",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "mode": {
            "type": "string",
            "description": "Defines which resources Voucherify will use.\\nThe \`ADVANCED\` mode is available after purchase only.",
            "enum": [
              "BASIC",
              "ADVANCED"
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "scenario": {
            "type": "string",
            "description": "Defines the scenario Voucherify should consider during the qualification process.\\n\\n- \`ALL\` - Scenario that returns all redeemables available for the customer in one API request. This scenario is used by default when no value is selected.\\n- \`CUSTOMER_WALLET\` - returns vouchers applicable to the customer’s cart based on the vouchers assigned to the customer’s profile.\\n- \`AUDIENCE_ONLY\` - returns all vouchers, promotion tiers, and campaigns available to the customer. Voucherify validates the rules based on the customer profile only.\\n- \`PRODUCTS\` - returns all promotions available for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT\` - returns all promotions available for products when a discount is defined as applicable to specific item(s).\\n- \`PROMOTION_STACKS\` - returns the applicable promotion stacks.\\n- \`PRODUCTS_BY_CUSTOMER\` - returns all promotions available for a customer for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT_BY_CUSTOMER\` - returns all promotions available for a customer for products when a discount is defined as applicable to specific item(s).",
            "enum": [
              "ALL",
              "CUSTOMER_WALLET",
              "AUDIENCE_ONLY",
              "PRODUCTS",
              "PRODUCTS_DISCOUNT",
              "PROMOTION_STACKS",
              "PRODUCTS_BY_CUSTOMER",
              "PRODUCTS_DISCOUNT_BY_CUSTOMER"
            ]
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The maximum number of redeemables to be returned in the API request. The actual number of returned redeemables will be determined by the API. The default value is set to 5",
                "maximum": 100
              },
              "starting_after": {
                "type": "string",
                "nullable": true,
                "example": "2021-09-08T13:52:18.227Z",
                "format": "date-time",
                "description": "Cursor used for paging."
              },
              "filters": {
                "type": "object",
                "additionalProperties": false,
                "description": "A set of filters to return only a specific category or type of redeemable.",
                "properties": {
                  "junction": {
                    "$ref": "#/components/schemas/Junction"
                  },
                  "category_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "campaign_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "voucher_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "code": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  }
                }
              },
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"redeemable\\"] | - Returns the redeemables' metadata. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |\\n| [\\"validation_rules\\"] | - Returns an expanded \`validation_rules\` object, showing details about the validation rules. |",
                "items": {
                  "type": "string",
                  "enum": [
                    "redeemable",
                    "category",
                    "validation_rules"
                  ]
                }
              },
              "sorting_rule": {
                "type": "string",
                "description": "Is used to determine the order in which data is displayed in the result array. \\n\\n - \`DEFAULT\` - Sorting descending by \`created_at\` \\n - \`BEST_DEAL\` - Sorting descending by \`total_applied_discount_amount\` \\n - \`LEAST_DEAL\` - Sorting ascending by \`total_applied_discount_amount\`",
                "enum": [
                  "BEST_DEAL",
                  "LEAST_DEAL",
                  "DEFAULT"
                ]
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against redeemables requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "ClientQualificationsCheckEligibilityResponseBody": {
        "description": "Response body schema for **POST** \`/qualifications\`.",
        "title": "Client Qualifications Check Eligibility Response Body",
        "type": "object",
        "properties": {
          "redeemables": {
            "$ref": "#/components/schemas/QualificationsRedeemables"
          },
          "tracking_id": {
            "type": "string",
            "description": "This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "stacking_rules": {
            "$ref": "#/components/schemas/QualificationsStackingRules"
          }
        }
      },
      "ClientRedemptionsRedeemRequestBody": {
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "type": "object",
        "title": "Client Redemptions Redeem Request Body",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "Expand array lets you configure params included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"redeemable\\", \\"redemption\\", \\"category\\"] | - Returns each discount type's \`metadata\` in each child redemption object.<br>- Returns redemption object \`metadata\`.<br>- Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ClientRedemptionsRedeemResponseBody": {
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "type": "object",
        "title": "Client Redemptions Redeem Response Body",
        "properties": {
          "redemptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Redemption"
            }
          },
          "parent_redemption": {
            "$ref": "#/components/schemas/Redemption"
          },
          "order": {
            "description": "Contains the order details associated with the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculated"
              }
            ]
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "ClientValidationsValidateRequestBody": {
        "description": "Response body schema for **POST** \`/validations\`.",
        "title": "Client Validations Validate Request Body",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ClientValidationsValidateResponseBody": {
        "description": "Response body schema for POST \`/validations\`.",
        "title": "Client Validations Validate Response Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidationsValidateAllResponseBody"
          },
          {
            "$ref": "#/components/schemas/ValidationsValidatePartialResponseBody"
          }
        ]
      },
      "CreatePublicationCampaign": {
        "title": "Create Publication Campaign",
        "type": "object",
        "description": "Create publication with campaign.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of voucher's parent campaign or unique campaign ID that was assigned by Voucherify.",
            "example": "camp_dphuwqH7BOVkgh4JmpDtS32l"
          },
          "count": {
            "type": "integer",
            "description": "Number of vouchers to be published to customer.",
            "minimum": 1,
            "maximum": 20
          }
        },
        "required": [
          "name"
        ]
      },
      "Customer": {
        "title": "Customer",
        "allOf": [
          {
            "type": "object",
            "title": "Customer Id And Source Id",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer."
              },
              "source_id": {
                "type": "string",
                "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
              }
            }
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomersActivitiesListResponseBody": {
        "type": "object",
        "title": "Customers Activities List Response Body",
        "description": "Request body schema for **GET** \`/customers/{customerId}/activities\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about customer activities in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of customer activity objects."
          },
          "data": {
            "type": "array",
            "description": "Array of customer activity objects.",
            "items": {
              "$ref": "#/components/schemas/CustomerActivity"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of customer activities."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CustomersConsentsUpdateRequestBody": {
        "type": "object",
        "title": "Customers Consents Update Request Body",
        "description": "Request body schema for **PUT** \`/customers/{customerId}/consents\`."
      },
      "CustomersCreateRequestBody": {
        "title": "Customers Create Request Body",
        "description": "Request body schema for **POST** \`/customers\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Customer"
          }
        ]
      },
      "CustomersCreateResponseBody": {
        "description": "Response bofy for **POST** \`/customers\`.",
        "title": "Customers Create Response Body",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "CustomersGetResponseBody": {
        "title": "Customers Get Response Body",
        "description": "Response body schema for **GET** \`/customers/{customerId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "CustomersImportCSVRequestBody": {
        "type": "object",
        "title": "Customers Import CSV Request Body",
        "description": "Response body schema for **POST** \`/customers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "CustomersImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Customers Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/customers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersListResponseBody": {
        "title": "Customers List Response Body",
        "description": "Response body schema for **GET** \`/customers\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about customers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "customers",
            "description": "Identifies the name of the attribute that contains the array of customer objects."
          },
          "customers": {
            "type": "array",
            "description": "Contains array of customer objects.",
            "items": {
              "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of customers."
          }
        },
        "required": [
          "object",
          "data_ref",
          "customers",
          "total"
        ]
      },
      "CustomersMetadataUpdateInBulkRequestBody": {
        "type": "object",
        "title": "Customers Metadata Update In Bulk Request Body",
        "description": "Request body schema for **POST** \`/customers/metadata/async\`.",
        "properties": {
          "source_ids": {
            "type": "array",
            "description": "An array of customer \`source_id\`'s.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata key value pairs to be updated. A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          }
        },
        "required": [
          "source_ids",
          "metadata"
        ]
      },
      "CustomersMetadataUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Customers Metadata Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/customers/metadata/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersPermanentDeletionCreateResponseBody": {
        "type": "object",
        "title": "Customers Permanent Deletion Create Response Body",
        "description": "Response body schema for **POST** \`/customers/{customerId}/permanent-deletion\`.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique permanent deletion object ID.",
            "example": "del_mgzqZNwUnwnt1Ddw6phEG90Q"
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-02T17:55:47.865Z",
            "description": "Timestamp representing the date and time when the customer was requested to be deleted in ISO 8601 format.",
            "format": "date-time"
          },
          "related_object_id": {
            "type": "string",
            "example": "cust_m557pDDl4IGXexkU6KOQ2Dwi",
            "description": "Unique customer ID that is being deleted."
          },
          "related_object": {
            "type": "string",
            "description": "Object being deleted.",
            "default": "customer"
          },
          "status": {
            "type": "string",
            "description": "Deletion status.",
            "default": "DONE"
          },
          "data_json": {
            "type": "object",
            "description": "Statistics summarizing the number of related information that was deleted.",
            "required": [
              "events",
              "customer_events",
              "daily_events",
              "segments",
              "orders",
              "order_events",
              "customer"
            ],
            "properties": {
              "events": {
                "type": "integer",
                "description": "Number of events deleted."
              },
              "customer_events": {
                "type": "integer",
                "description": "Number of customer events deleted."
              },
              "daily_events": {
                "type": "integer",
                "description": "Number of daily events deleted."
              },
              "segments": {
                "type": "integer",
                "description": "Number of segments deleted."
              },
              "orders": {
                "type": "integer",
                "description": "Number of orders deleted."
              },
              "order_events": {
                "type": "integer",
                "description": "Number of order events deleted."
              },
              "customer": {
                "type": "integer",
                "description": "Number of customers deleted.",
                "default": 1
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "pernament_deletion"
          }
        },
        "required": [
          "id",
          "created_at",
          "related_object_id",
          "related_object",
          "status",
          "data_json",
          "object"
        ]
      },
      "CustomersSegmentsListResponseBody": {
        "type": "object",
        "title": "Customers Segments List Response Body",
        "description": "Response body schema for **GET** \`/customers/{customerId}/segments\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerSegmentsList"
          }
        ]
      },
      "CustomersUpdateInBulkRequestBody": {
        "title": "Customers Update In Bulk Request Body",
        "description": "Request body schema for **POST** \`/customers/bulk/async\`.",
        "allOf": [
          {
            "title": "CustomerSourceId",
            "type": "object",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "Unique customer source ID."
              }
            },
            "required": [
              "source_id"
            ]
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomersUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Customers Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/customers/bulk/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersUpdateRequestBody": {
        "title": "Customers Update Request Body",
        "description": "Request body schema for **PUT** \`/customers/{customerId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomersUpdateResponseBody": {
        "title": "Customers Update Response Body",
        "description": "Response body schema for **PUT** \`/customers/{customerId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "EventsCreateRequestBody": {
        "title": "Events Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/events\`.",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name. This is the same name that you used to define a custom event in the **Dashboard** > **Project Settings** > **Event Schema**.",
            "minLength": 1,
            "maxLength": 300
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "If a **conversion event** for a referral program is set to a custom event, then you need to send the referral code in the payload to make a record of the conversion event. ",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code through which a new visitor has been referred to a service."
              },
              "referrer_id": {
                "type": "string",
                "description": "Unique ID of the referring person - it is optional and not required if the referral **code** is provided.",
                "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
              }
            },
            "required": [
              "code"
            ]
          },
          "loyalty": {
            "type": "object",
            "description": "If an earning rule in a loyalty program is based on a custom event. This objects let's you specify the loyalty card to which the custom event should be attributed to.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code of the loyalty card to receive points based on the calculation method defined in the related earning rule. An earning rule is triggered for the loyalty card when the event passed in the \`event\` parameter of the request payload gets sent along with this loyalty card code.",
                "example": "L-CARD-BUHuH6g"
              }
            },
            "required": [
              "code"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** > **Project Settings** > **Event Schema** > **Edit particular event** > **Metadata property definition**."
          }
        },
        "required": [
          "event",
          "customer"
        ]
      },
      "EventsCreateResponseBody": {
        "title": "Events Create Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/events\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an \`event\`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "A \`null\` referral object.",
            "nullable": true
          },
          "loyalty": {
            "type": "object",
            "description": "A \`null\` loyalty object.",
            "nullable": true
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "ExportsCreateRequestBody": {
        "description": "Request body schema for **POST** \`/exports\`.",
        "title": "Exports Create Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationBase"
          }
        ],
        "type": "object"
      },
      "ExportsCreateResponseBody": {
        "title": "Exports Create Response Body",
        "description": "Response body schema for **POST** \`/exports\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucherScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportOrderScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationScheduled"
          }
        ]
      },
      "ExportsGetResponseBody": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Export"
          }
        ],
        "description": "Response body schema for **GET** \`/exports/{exportId}\`.",
        "title": "Exports Get Response Body"
      },
      "ExportsListResponseBody": {
        "title": "Exports List Response Body",
        "description": "Response body schema for **GET** \`/exports\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about exports."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "exports"
            ],
            "description": "Identifies the name of the attribute that contains the array of exports."
          },
          "exports": {
            "type": "array",
            "description": "An array of export objects.",
            "items": {
              "$ref": "#/components/schemas/Export"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of exports."
          }
        },
        "required": [
          "object",
          "data_ref",
          "exports",
          "total"
        ]
      },
      "LoyaltiesDeleteResponseBody": {
        "type": "object",
        "title": "LoyaltiesDeleteResponseBody",
        "description": "Response body schema for **DELETE** \`/loyalties/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "LoyaltiesEarningRulesDisableResponseBody": {
        "title": "Loyalties Earning Rules Disable Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "default": false,
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date."
              }
            },
            "required": [
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "LoyaltiesEarningRulesEnableResponseBody": {
        "title": "Loyalties Earning Rules Enable Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "default": true,
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date."
              }
            },
            "required": [
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "LoyaltiesEarningRulesGetResponseBody": {
        "type": "object",
        "title": "Loyalties Earning Rules Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/earning-rules/{earningRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRule"
          }
        ]
      },
      "LoyaltiesMembersBalanceUpdateRequestBody": {
        "description": "Request Body schema for **post** \`/loyalties/members/{memberId}/balance\` and **POST** \`/loyalties/{campaignId}/members/{memberId}/balance\`.",
        "title": "Loyalties Members Balance Update Request Body",
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "description": "Incremental balance to be added to/subtracted from the loyalty card.\\n\\n- To add points: 100\\n- To subtract points, add a minus: -100"
          },
          "expiration_type": {
            "description": "Set the type of expiration for added points.\\n\\n\`PROGRAM_RULES\`: Inherit rules from campaign.\\n\`NON_EXPIRING\`: Points never expire.\\n\`CUSTOM_DATE\`: Points expire on a particular date. Requires expiration_date parameter.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PointsExpirationTypes"
              }
            ]
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Set expiration date for added points, i.e. \`YYYY-MM-DD\`. This parameter is required only when expiration_type is set to \`CUSTOM_DATE\`."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transfer."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          }
        },
        "required": [
          "points"
        ]
      },
      "LoyaltiesMembersBalanceUpdateResponseBody": {
        "title": "Loyalties Members Balance Update Response Body",
        "type": "object",
        "description": "Response schema for **POST** \`/loyalties/members/{memberId}/balance\` and for **POST** \`/loyalties/{campaignId}/members/{memberId}/balance\`.",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The incremental points removed or added to the current balance on the loyalty card."
          },
          "total": {
            "type": "integer",
            "description": "The total of points accrued over the lifetime of the loyalty card."
          },
          "balance": {
            "type": "integer",
            "minimum": 0,
            "description": "The balance after adding/removing points."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOYALTY_CARD",
              "GIFT_VOUCHER"
            ],
            "description": "The type of voucher being modified."
          },
          "object": {
            "type": "string",
            "pattern": "balance",
            "enum": [
              "balance"
            ],
            "description": "The type of object represented by JSON. Default is balance."
          },
          "related_object": {
            "type": "object",
            "required": [
              "type",
              "id"
            ],
            "description": "Defines the object that is being modified with the values that are returned in the balance object.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "voucher"
                ],
                "description": "The object being modified."
              },
              "id": {
                "type": "string",
                "description": "Identifies the loyalty card that is being modified, this is the ID that was assigned by the Voucherify API."
              }
            }
          },
          "operation_type": {
            "type": "string",
            "enum": [
              "MANUAL",
              "AUTOMATIC"
            ]
          }
        },
        "required": [
          "points",
          "total",
          "balance",
          "type",
          "object",
          "related_object"
        ]
      },
      "LoyaltiesMembersPointsExpirationListResponseBody": {
        "title": "Loyalties Members Points Expiration List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/members/{memberId}/points-expiration\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "pattern": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty points expiration buckets in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "pattern": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty points expiration bucket objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty points expiration buckets.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique loyalty points bucket ID."
                },
                "voucher_id": {
                  "type": "string",
                  "description": "Unique parent loyalty card ID."
                },
                "campaign_id": {
                  "type": "string",
                  "description": "\\nUnique parent campaign ID."
                },
                "bucket": {
                  "type": "object",
                  "required": [
                    "total_points"
                  ],
                  "description": "Defines the number of points stored in the given loyalty points bucket.",
                  "properties": {
                    "total_points": {
                      "type": "integer",
                      "description": "Total number of points in the loyalty points bucket."
                    }
                  }
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp representing the date and time when the loyalty points bucket object was created in ISO 8601 format.",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Loyalty points bucket point status."
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date when the number of points defined in the bucket object are due to expire."
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp representing the date and time when the loyalty points bucket object was updated in ISO 8601 format."
                },
                "object": {
                  "type": "string",
                  "pattern": "loyalty_points_bucket",
                  "enum": [
                    "loyalty_points_bucket"
                  ],
                  "description": "The type of object represented by JSON. This object stores information about the loyalty points bucket."
                }
              },
              "required": [
                "id",
                "voucher_id",
                "campaign_id",
                "bucket",
                "created_at",
                "status",
                "expires_at",
                "object"
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of point expiration buckets."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesMembersRedemptionRedeemRequestBody": {
        "description": "Request body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/redemption\` and for **POST** and \`/loyalties/members/{memberId}/redemption\`.",
        "type": "object",
        "title": "Loyalties Members Redemption Redeem Request Body",
        "properties": {
          "reward": {
            "type": "object",
            "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward if the reward is a pay with points reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward.",
                "example": "rew_eSi4eYJk7o3tOycvweicR2z7"
              },
              "points": {
                "type": "integer",
                "description": "The number of loyalty points that the user wants to spend in order to fulfill the order. The number of points cannot be higher than the current balance on the loyalty card."
              }
            }
          },
          "order": {
            "description": "Order object that is **required** when redeeming a pay with points reward.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "LoyaltiesMembersRedemptionRedeemResponseBody": {
        "title": "Loyalties Members Redemption Redeem Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/redemption\` and for **POST** \`/loyalties/members/{memberId}/redemption\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Redemption"
          },
          {
            "title": "RedemptionRewardRequired",
            "type": "object",
            "required": [
              "reward"
            ]
          }
        ]
      },
      "LoyaltiesMembersRewardsListResponseBody": {
        "title": "Loyalties Members Rewards List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/members/{memberId}/rewards\`",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of loyalty reward objects.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty reward objects.",
            "items": {
              "type": "object",
              "properties": {
                "reward": {
                  "description": "This is an object representing a reward.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Reward"
                    }
                  ]
                },
                "assignment": {
                  "description": "This is an object representing a reward assignment.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RewardAssignment"
                    }
                  ]
                },
                "object": {
                  "type": "string",
                  "description": "The type of object represented by JSON.",
                  "enum": [
                    "loyalty_reward"
                  ]
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty reward objects.",
            "minimum": 0
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesMembersTiersListResponseBody": {
        "title": "Loyalties Members Tiers List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/members/{memberId}/tiers\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty tier objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltyTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesMembersTransactionsExportCreateRequestBody": {
        "title": "Loyalties Members Transactions Export Create Request Body",
        "description": "Request body schema for **POST** \`/loyalties/members/{memberId}/transactions/export\` and for **POST** \`/loyalties/{campaignId}/members/{memberId}/transactions/export\`.",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "enum": [
              "created_at",
              "-created_at"
            ],
            "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order."
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyCardTransactionsFields"
            }
          }
        }
      },
      "LoyaltiesMembersTransactionsExportCreateResponseBody": {
        "title": "Loyalties Members Transactions Export Create Response Body",
        "description": "Response body schema for **POST** \`/loyalties/members/{memberId}/transactions/export\` and for **POST** \`/loyalties/{campaignId}/members/{memberId}/transactions/export\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "pattern": "export",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "pattern": "SCHEDULED",
            "enum": [
              "SCHEDULED"
            ],
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated."
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "exported_object": {
            "type": "string",
            "pattern": "voucher_transactions",
            "enum": [
              "voucher_transactions"
            ],
            "description": "The type of exported object."
          },
          "parameters": {
            "type": "object",
            "required": [
              "filters"
            ],
            "description": "List of available fields and filters that can be exported with loyalty card transactions along with the sorting order of the returned data.",
            "properties": {
              "order": {
                "type": "string",
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order."
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.\\n\\n\`id\`, \`campaign_id\`, \`voucher_id\`, \`type\`, \`source_id\`, \`reason\`, \`source\`, \`balance\`, \`amount\`, \`related_transaction_id\`, \`created_at\`, \`details\`",
                "items": {
                  "$ref": "#/components/schemas/LoyaltyCardTransactionsFields"
                }
              },
              "filters": {
                "type": "object",
                "required": [
                  "voucher_id"
                ],
                "description": "Filter condition.",
                "properties": {
                  "voucher_id": {
                    "type": "object",
                    "required": [
                      "conditions"
                    ],
                    "description": "Data filters used to narrow the data records to be returned in the result.",
                    "properties": {
                      "conditions": {
                        "type": "object",
                        "required": [
                          "$in"
                        ],
                        "description": "Data filters used to narrow the data records to be returned in the result.",
                        "properties": {
                          "$in": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "result": {
            "type": "object",
            "description": "Contains the URL of the CSV file.",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "channel",
          "exported_object",
          "parameters",
          "result"
        ]
      },
      "LoyaltiesMembersTransactionsListResponseBody": {
        "title": "Loyalties Members Transactions List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/members/{memberId}/transactions\` and \`/loyalties/members/{memberId}/transactions\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "pattern": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "pattern": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of transaction objects."
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of transactions. Each entry in the array is a separate transaction object.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyCardTransaction"
            }
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the has_more flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "has_more"
        ]
      },
      "LoyaltiesMembersTransfersCreateRequestBody": {
        "title": "Loyalties Members Transfers Create Request Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/transfers\`.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LoyaltiesTransferPoints"
        }
      },
      "LoyaltiesMembersTransfersCreateResponseBody": {
        "title": "Loyalties Members Transfers Create Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/transfers\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "nullable": true,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique category ID assigned by Voucherify."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher."
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if type is LOYALTY_CARD.",
            "required": [
              "points",
              "balance"
            ],
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "nullable": true,
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is inactive before this date.",
            "format": "date-time"
          },
          "expiration_date": {
            "type": "string",
            "nullable": true,
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format. Voucher is inactive after this date.",
            "format": "date-time"
          },
          "validity_timeframe": {
            "type": "object",
            "nullable": true,
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.start_date required when including the validity_timeframe.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a duration of PT1H will be valid for a duration of one hour."
              },
              "duration": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an interval of P2D will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "nullable": true,
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\\n\\n- \`0\` Sunday\\n- \`1\` Monday\\n- \`2\` Tuesday\\n- \`3\` Wednesday\\n- \`4\` Thursday\\n- \`5\` Friday\\n- \`6\` Saturday",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 6
            }
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event. A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or publish voucher API method.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "description": "The type of object represented is by default list. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "count": {
                "type": "integer",
                "description": "Publication events counter."
              },
              "entries": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "description": "The endpoint where this list of publications can be accessed using a GET method. /v1/vouchers/{voucher_code}/publications"
              }
            },
            "required": [
              "object"
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A null value means unlimited."
              },
              "redeemed_points": {
                "type": "integer",
                "description": "Total loyalty points redeemed."
              },
              "redeemed_quantity": {
                "type": "integer",
                "description": "How many times a voucher has already been redeemed."
              },
              "redemption_entries": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "description": "The type of object represented is by default list. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. /v1/vouchers/{voucher_code}/redemptions"
              }
            },
            "required": [
              "quantity"
            ]
          },
          "active": {
            "type": "string",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the start_date and expiration_date.\\n\\n- \`true\` indicates an active voucher\\n- \`false\` indicates an inactive voucher"
          },
          "additional_info": {
            "type": "string",
            "nullable": true,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code."
          },
          "holder_id": {
            "type": "string",
            "description": "Unique customer ID of voucher owner."
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format.",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "code",
          "type",
          "loyalty_card",
          "active",
          "metadata",
          "is_referral_code",
          "created_at"
        ]
      },
      "LoyaltiesRewardAssignmentsGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/reward-assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "LoyaltiesRewardAssignmentsRewardGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Reward Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reward"
          }
        ]
      },
      "LoyaltiesRewardsGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/rewards/{assignmentId}\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "LoyaltiesTiersCreateInBulkRequestBody": {
        "title": "Loyalties Tiers Create Request Body",
        "description": "Request body schema for **POST** \`/loyalties/{campaignId}/tiers\`",
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/LoyaltyTierBase"
            },
            {
              "type": "object",
              "properties": {
                "metadata": {
                  "description": "The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format.",
                  "type": "object"
                }
              }
            }
          ]
        }
      },
      "LoyaltiesTiersCreateInBulkResponseBody": {
        "title": "Loyalties Tiers Create Response Body",
        "type": "array",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/tiers\`.",
        "items": {
          "$ref": "#/components/schemas/LoyaltyTier"
        }
      },
      "LoyaltiesTiersEarningRulesListResponseBody": {
        "title": "Loyalties Tiers Earning Rules List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about earning rules in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of earning rule objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of earning rule objects.",
            "items": {
              "$ref": "#/components/schemas/EarningRule"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of earning rule objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesTiersGetResponseBody": {
        "type": "object",
        "title": "Loyalties Tiers Get Response Body",
        "allOf": [
          {
            "$ref": "#/components/schemas/LoyaltyTier"
          }
        ],
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers/{loyaltyTierId}\`."
      },
      "LoyaltiesTiersListResponseBody": {
        "title": "Loyalties Tiers List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty tier objects."
          },
          "data": {
            "type": "array",
            "description": "This is an object representing a loyalty tier. Loyalty tiers are used to create a loyalty program with different levels of membership and varied earning rules and rewards based on customer’s tiers.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesTiersRewardsListResponseBody": {
        "title": "Loyalties Tiers Rewards List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about loyalty tier rewards in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of loyalty tier reward objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty tier reward objects.",
            "items": {
              "$ref": "#/components/schemas/LoyaltiesLoyaltyTierReward"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier reward objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "OrdersCreateRequestBody": {
        "title": "Orders Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/orders\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          }
        ]
      },
      "OrdersCreateResponseBody": {
        "type": "object",
        "title": "Orders Create Response Body",
        "description": "Response body schema for **POST** \`/orders\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculated"
          }
        ]
      },
      "OrdersExportCreateRequestBody": {
        "title": "Orders Export Create Request Body",
        "description": "Request body schema for **POST** \`/orders/export\`.",
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportOrderFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        }
      },
      "OrdersExportCreateResponseBody": {
        "title": "Orders Export Create Response Body",
        "description": "Response body schema for **POST** \`/orders/export\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "OrdersGetResponseBody": {
        "title": "Orders Get Response Body",
        "description": "Response body schema for **GET** \`/orders/{orderId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
          }
        ]
      },
      "OrdersImportCreateRequestBody": {
        "type": "array",
        "title": "Orders Import Create Request Body",
        "description": "Request body schema for POST \`/orders/import\`.",
        "items": {
          "type": "object",
          "allOf": [
            {
              "title": "Order Ids",
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
                }
              }
            },
            {
              "$ref": "#/components/schemas/OrderBase"
            }
          ]
        }
      },
      "OrdersImportCreateResponseBody": {
        "type": "object",
        "title": "Orders Import Create Response Body",
        "description": "Response body schema for **POST** \`/orders/import\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "OrdersListResponseBody": {
        "type": "object",
        "title": "Orders List Response Body",
        "description": "Response body schema representing **GET** \`/orders\`.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about orders in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "orders"
            ],
            "description": "Identifies the name of the attribute that contains the array of order objects."
          },
          "orders": {
            "type": "array",
            "description": "Contains array of order objects.",
            "items": {
              "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of orders."
          }
        },
        "required": [
          "object",
          "data_ref",
          "orders",
          "total"
        ]
      },
      "OrdersUpdateRequestBody": {
        "type": "object",
        "title": "Orders Update Request Body",
        "description": "Request body schema for **PUT** \`/orders/{orderId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderBase"
          }
        ]
      },
      "OrdersUpdateResponseBody": {
        "type": "object",
        "title": "Orders Update Response Body",
        "description": "Response body schema for **PUT** \`/orders/{orderId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculated"
          }
        ]
      },
      "ParameterAsyncActionId": {
        "type": "string",
        "example": "aa_0afb3d009a55814a48"
      },
      "ParameterBoolean": {
        "type": "boolean"
      },
      "ParameterCampaignId": {
        "type": "string",
        "example": "camp_rRsfatlwN7unSeUIJDCYedal"
      },
      "ParameterCampaignType": {
        "type": "string",
        "enum": [
          "PROMOTION",
          "GIFT_VOUCHERS",
          "REFERRAL_PROGRAM",
          "DISCOUNT_COUPONS",
          "LOYALTY_PROGRAM",
          "LUCKY_DRAW"
        ]
      },
      "ParameterCategoryId": {
        "type": "string",
        "example": "cat_0bb81a481615a37b5e"
      },
      "ParameterCode": {
        "type": "string",
        "example": "2CpRCE2c"
      },
      "ParameterCustomerId": {
        "type": "string",
        "example": "cust_nk0N1uNQ1YnupAoJGOgvsODC"
      },
      "ParameterDate": {
        "type": "string",
        "example": "2023-12-22T10:13:06.487Z",
        "format": "date-time"
      },
      "ParameterEarningRuleId": {
        "type": "string",
        "example": "ern_CFuv1O0IDl8Jgph0ojhMu8bH"
      },
      "ParameterExpandListCampaigns": {
        "type": "string",
        "enum": [
          "category"
        ]
      },
      "ParameterExportId": {
        "type": "string",
        "example": "exp_2bYLdY2lQ2886wmYIHyeBWUZ"
      },
      "ParameterFiltersListRedemptions": {
        "type": "object",
        "properties": {
          "voucher_code": {
            "type": "object",
            "description": "Unique voucher code.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "related_object_id": {
            "type": "object",
            "description": "Unique related object ID, i.e. v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "related_object_parent_id": {
            "type": "object",
            "description": "Unique related object parent ID, i.e. camp_22noMlhTADb7Fq2UL3vWu3d1.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "parent_redemption_id": {
            "type": "object",
            "description": "Unique parent redemption ID, i.e. r_0c5952900bcbfd54b6.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "failure_code": {
            "type": "object",
            "description": "Failure code, i.e. quantity_exceeded.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "result": {
            "type": "object",
            "description": "Result, i.e. \`SUCCESS\` or \`FAILURE\`.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "object": {
            "type": "object",
            "description": "Specify which type of object to return, i.e. \`redemption\` or \`redemption_rollback\`.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "customer_id": {
            "type": "object",
            "description": "Unique customer ID, i.e. cust_sehkNIi8Uq2qQuRqSr7xn4Zi.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "campaign_name": {
            "type": "object",
            "description": "Campaign name.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "user_login": {
            "type": "object",
            "description": "User login used to login to Voucherify, i.e. name.lastname@email.com",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          }
        }
      },
      "ParameterInteger": {
        "type": "integer"
      },
      "ParameterLimit": {
        "type": "integer",
        "maximum": 100,
        "minimum": 1
      },
      "ParameterLoyaltyTierId": {
        "type": "string",
        "example": "promo_2EnAik6Jt7dKTOMkRTIgEjZH"
      },
      "ParameterMemberId": {
        "type": "string",
        "example": "MmFAzfDe"
      },
      "ParameterObject": {
        "type": "object"
      },
      "ParameterOrderId": {
        "type": "string",
        "example": "ord_smEh8p1p6W6DgOmeERk092LG"
      },
      "ParameterOrderListAllPromotionStacks": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "name",
          "-name"
        ]
      },
      "ParameterOrderListCampaigns": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListCustomers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "source_id",
          "-source_id"
        ]
      },
      "ParameterOrderListExports": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "status",
          "-status"
        ]
      },
      "ParameterOrderListLoyaltyTiers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListOrders": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListPublications": {
        "type": "string",
        "enum": [
          "id",
          "-id",
          "voucher_code",
          "-voucher_code",
          "tracking_id",
          "-tracking_id",
          "customer_id",
          "-customer_id",
          "created_at",
          "-created_at",
          "channel",
          "-channel"
        ]
      },
      "ParameterOrderListRedemptions": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "id",
          "-id",
          "voucher_code",
          "-voucher_code",
          "tracking_id",
          "-tracking_id",
          "customer_id",
          "-customer_id"
        ]
      },
      "ParameterOrderListValidationRuleAssignments": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at"
        ]
      },
      "ParameterOrderListValidationRules": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "name",
          "-name"
        ]
      },
      "ParameterPage": {
        "type": "integer",
        "maximum": 100
      },
      "ParameterProductCollectionId": {
        "type": "string",
        "example": "pc_41V4DiQQO8YGqj0J2oZD57j4"
      },
      "ParameterProductId": {
        "type": "string",
        "example": "prod_3ttSkdxGuAfcv3"
      },
      "ParameterPromotionStackId": {
        "type": "string",
        "example": "stack_KOIde7AUf08at12lZ1r3OfFL"
      },
      "ParameterPromotionTierId": {
        "type": "string",
        "example": "promo_2EnAik6Jt7dKTOMkRTIgEjZH"
      },
      "ParameterRedemptionId": {
        "type": "string",
        "example": "r_0ba186c4824e4881e1"
      },
      "ParameterResultListPublications": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ]
      },
      "ParameterRewardAssignmentId": {
        "type": "string",
        "example": "rewa_m9hEAu10KsPcLhGXiHG85aY0"
      },
      "ParameterRewardId": {
        "type": "string",
        "example": "rew_2erjvECLs92GYzKbak3QkyTV"
      },
      "ParameterSegmentId": {
        "type": "string",
        "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
      },
      "ParameterSkuId": {
        "type": "string",
        "example": "sku_0b661e41eccd35a8e9"
      },
      "ParameterString": {
        "type": "string"
      },
      "ParameterValidationRuleId": {
        "type": "string",
        "example": "val_TU4de3EP4dlL"
      },
      "ParameterVoucherTypeListPublications": {
        "type": "string",
        "enum": [
          "discount",
          "loyalty",
          "lucky_draw"
        ]
      },
      "ProductCollectionsCreateRequestBody": {
        "title": "Product Collections Create Request Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsCreateStaticRequestBody"
          },
          {
            "$ref": "#/components/schemas/ProductCollectionsCreateDynamicRequestBody"
          }
        ]
      },
      "ProductCollectionsCreateResponseBody": {
        "type": "object",
        "title": "Product Collections Create Response Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsItem"
          }
        ]
      },
      "ProductCollectionsGetResponseBody": {
        "type": "object",
        "title": "Product Collections Get Response Body",
        "description": "Response body schema for **GET** \`/product-collections/{productCollectionId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsItem"
          }
        ]
      },
      "ProductCollectionsListResponseBody": {
        "type": "object",
        "title": "Product Collections List Response Body",
        "description": "Response body schema for **GET** \`/product-collections\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsList"
          }
        ]
      },
      "ProductCollectionsProductsListResponseBody": {
        "type": "object",
        "title": "Product Collections Products List Response Body",
        "description": "Response body schema for **GET** \`/product-collections/{productCollectionId}/products\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsProductsList"
          }
        ]
      },
      "ProductsCreateRequestBody": {
        "type": "object",
        "description": "Request schema for **POST** \`/products\`.",
        "title": "Products Create Request Body",
        "properties": {
          "id": {
            "type": "string",
            "example": "prod_5h0wc453_1",
            "description": "A unique identifier that represents the product and is assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "example": "productSourceID16",
            "description": "Unique product source ID."
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          }
        }
      },
      "ProductsCreateResponseBody": {
        "type": "object",
        "title": "Products Create Response Body",
        "description": "Response body schema for **POST** \`/products\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "ProductsGetResponseBody": {
        "type": "object",
        "title": "Products Get Response Body",
        "description": "Response body schema for **GET** \`/products/{productId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "ProductsImportCSVRequestBody": {
        "type": "object",
        "title": "Products Import CSV Request Body",
        "description": "Response body schema for **POST** \`/products/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "ProductsImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Products Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/products/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ProductsListResponseBody": {
        "type": "object",
        "title": "Products List Response Body",
        "description": "Response body schema for **GET** \`/products\`.",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about products in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of product objects.",
            "default": "products"
          },
          "products": {
            "type": "array",
            "description": "Contains array of product objects.",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of product objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "products",
          "total"
        ]
      },
      "ProductsMetadataUpdateInBulkRequestBody": {
        "type": "object",
        "title": "Products Metadata Update In Bulk Request Body",
        "description": "Request schema for **POST** \`/products/metadata/async\`.",
        "properties": {
          "source_ids": {
            "type": "array",
            "description": "Array of unique product source IDs.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          }
        },
        "required": [
          "source_ids",
          "metadata"
        ]
      },
      "ProductsMetadataUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Products Metadata Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/products/metadata/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ProductsSkusCreateRequestBody": {
        "title": "Products Skus Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/products/{productId}/skus",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique SKU ID.",
            "example": "sku_0c0c0012a9029bccef"
          },
          "source_id": {
            "type": "string",
            "example": "sku_source_id_4",
            "description": "A unique SKU identifier from your inventory system."
          },
          "sku": {
            "type": "string",
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "currency": {
            "type": "string",
            "description": "SKU price currency.",
            "example": "USD"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "ProductsSkusCreateResponseBody": {
        "type": "object",
        "title": "Products Skus Create Response Body",
        "description": "Response body schema for **PUT** \`/products/{productId}/skus\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "ProductsSkusListResponseBody": {
        "type": "object",
        "title": "Products Skus List Response Body",
        "description": "Response body schema for **GET** \`/products/{productId}/skus\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SkusList"
          }
        ]
      },
      "ProductsSkusUpdateRequestBody": {
        "title": "Products Skus Update Request Body",
        "type": "object",
        "description": "Request body schema for **PUT** \`/products/{productId}/skus/{skuId}\`.",
        "properties": {
          "sku": {
            "type": "string",
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "currency": {
            "type": "string",
            "description": "SKU price currency."
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "ProductsSkusUpdateResponseBody": {
        "type": "object",
        "title": "Products Skus Update Response Body",
        "description": "Response body schema for **PUT** \`/products/{productId}/skus/{skuId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "ProductsUpdateInBulkRequestBody": {
        "type": "object",
        "description": "Request schema for **POST** \`/products/bulk/async\`.",
        "title": "Products Update In Bulk Request Body",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "Unique product source ID from your inventory system.",
            "example": "test_prod_id_1"
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          }
        },
        "required": [
          "source_id"
        ]
      },
      "ProductsUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Products Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/products/bulk/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ProductsUpdateRequestBody": {
        "type": "object",
        "description": "Request schema for **PUT** \`/products\`.",
        "title": "Products Update Request Body",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          }
        }
      },
      "ProductsUpdateResponseBody": {
        "type": "object",
        "title": "Products Update Response Body",
        "description": "Response body schema for **PUT** \`/products/{productId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "PromotionsStacksCreateRequestBody": {
        "title": "Promotions Stacks Create Request Body",
        "description": "Request body schema for **POST** \`/promotions/{campaignId}/stacks\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "category_id": {
                "type": "string",
                "description": "Promotion stack category ID."
              }
            }
          }
        ]
      },
      "PromotionsStacksCreateResponseBody": {
        "title": "Promotions Stacks Create Response Body",
        "description": "Response body schema for **POST** \`/promotions/{campaignId}/stacks\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON."
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/PromotionStackBase"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "PromotionsStacksGetResponseBody": {
        "type": "object",
        "title": "Promotions Stacks Get Response Body",
        "description": "Response body schema for **GET** \`/promotions/{campaignId}/stacks/{stackId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStack"
          }
        ]
      },
      "PromotionsStacksListResponseBody": {
        "title": "Promotions Stacks List Response Body",
        "description": "Response body schema for **GET** \`/promotions/stacks\` and for **GET** \`/promotions/{campaignId}/stacks\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about promotion stacks in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of promotion stack objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of promotion stack objects.",
            "items": {
              "$ref": "#/components/schemas/PromotionStack"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of promotion stacks."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "PromotionsStacksUpdateRequestBody": {
        "description": "Request Body schema for **put** \`/promotions/{campaignId}/stacks/{stackId}\`.",
        "title": "Promotions Stacks Update Request Body",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Promotion stack name."
          },
          "tiers": {
            "type": "object",
            "description": "Contains the tier configuration.",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Contains the list of tiers in a pre-defined sequence.",
                "items": {
                  "type": "string"
                }
              },
              "hierarchy_mode": {
                "type": "string",
                "enum": [
                  "MANUAL"
                ],
                "description": "Category hierarchy."
              }
            }
          },
          "category_id": {
            "type": "string",
            "description": "Promotion stack category ID."
          }
        }
      },
      "PromotionsStacksUpdateResponseBody": {
        "title": "Promotions Stacks Update Response Body",
        "description": "Response body schema for **PUT** \`/promotions/{campaignId}/stacks/{stackId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was updated in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON. "
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/PromotionStackBase"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "updated_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "PromotionsTiersDisableResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Disable Response Body",
        "description": "Response body schema for **POST** \`/promotions/tiers/{promotionTierId}/disable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersEnableResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Enable Response Body",
        "description": "Response body schema for **POST** \`/promotions/tiers/{promotionTierId}/enable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersGetResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Get Response Body",
        "description": "Response body schema for **GET** \`/promotions/tiers/{promotionTierId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersListResponseBody": {
        "type": "object",
        "title": "Promotions Tiers List Response Body",
        "description": "Response body schema for **GET** \`/promotions/{campaignId}/tiers\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTiersList"
          }
        ]
      },
      "PublicationsCreateRequestBody": {
        "title": "Publications Create Request Body",
        "description": "Request body schema for **POST** \`/publications\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreatePublicationWithSpecificVoucher"
          },
          {
            "$ref": "#/components/schemas/CreatePublicationWithCampaign"
          }
        ]
      },
      "PublicationsCreateResponseBody": {
        "title": "Publications Create Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/publication\` and **GET** \`/publications/create\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateVoucherResponseBody"
          },
          {
            "$ref": "#/components/schemas/PublicationsCreateVouchersResponseBody"
          }
        ]
      },
      "PublicationsListResponseBody": {
        "type": "object",
        "description": "Response body schema for listing publications using **GET** \`/publications\`.",
        "title": "Publications List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about publications in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "publications",
            "description": "Identifies the name of the attribute that contains the array of publications."
          },
          "publications": {
            "type": "array",
            "description": "Contains array of publication objects, voucher object will be simplified.",
            "items": {
              "description": "Response schema model for publishing vouchers to a specific customer.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ListPublicationsItemValidSingleVoucher"
                },
                {
                  "$ref": "#/components/schemas/ListPublicationsItemValidMultipleVouchers"
                },
                {
                  "$ref": "#/components/schemas/ListPublicationsItemInvalid"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of publications."
          }
        },
        "required": [
          "object",
          "data_ref",
          "publications",
          "total"
        ]
      },
      "QualificationsCheckEligibilityRequestBody": {
        "type": "object",
        "title": "Qualifications Check Eligibility Request Body",
        "description": "Request body schema for **POST** \`/qualifications\`.",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "mode": {
            "type": "string",
            "description": "Defines which resources Voucherify will use.\\nThe \`ADVANCED\` mode is available after purchase only.",
            "enum": [
              "BASIC",
              "ADVANCED"
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "scenario": {
            "type": "string",
            "description": "Defines the scenario Voucherify should consider during the qualification process.\\n\\n- \`ALL\` - Scenario that returns all redeemables available for the customer in one API request. This scenario is used by default when no value is selected.\\n- \`CUSTOMER_WALLET\` - returns vouchers applicable to the customer’s cart based on the vouchers assigned to the customer’s profile.\\n- \`AUDIENCE_ONLY\` - returns all vouchers, promotion tiers, and campaigns available to the customer. Voucherify validates the rules based on the customer profile only.\\n- \`PRODUCTS\` - returns all promotions available for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT\` - returns all promotions available for products when a discount is defined as applicable to specific item(s).\\n- \`PROMOTION_STACKS\` - returns the applicable promotion stacks.\\n- \`PRODUCTS_BY_CUSTOMER\` - returns all promotions available for a customer for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT_BY_CUSTOMER\` - returns all promotions available for a customer for products when a discount is defined as applicable to specific item(s).",
            "enum": [
              "ALL",
              "CUSTOMER_WALLET",
              "AUDIENCE_ONLY",
              "PRODUCTS",
              "PRODUCTS_DISCOUNT",
              "PROMOTION_STACKS",
              "PRODUCTS_BY_CUSTOMER",
              "PRODUCTS_DISCOUNT_BY_CUSTOMER"
            ]
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The maximum number of redeemables to be returned in the API request. The actual number of returned redeemables will be determined by the API. The default value is set to 5",
                "maximum": 100
              },
              "starting_after": {
                "type": "string",
                "nullable": true,
                "example": "2021-09-08T13:52:18.227Z",
                "format": "date-time",
                "description": "Cursor used for paging."
              },
              "filters": {
                "type": "object",
                "additionalProperties": false,
                "description": "A set of filters to return only a specific category or type of redeemable.",
                "properties": {
                  "junction": {
                    "$ref": "#/components/schemas/Junction"
                  },
                  "category_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "campaign_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "voucher_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "code": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  }
                }
              },
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"redeemable\\"] | - Returns the redeemables' metadata. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |\\n| [\\"validation_rules\\"] | - Returns an expanded \`validation_rules\` object, showing details about the validation rules. |",
                "items": {
                  "type": "string",
                  "enum": [
                    "redeemable",
                    "category",
                    "validation_rules"
                  ]
                }
              },
              "sorting_rule": {
                "type": "string",
                "description": "Is used to determine the order in which data is displayed in the result array. \\n\\n - \`DEFAULT\` - Sorting descending by \`created_at\` \\n - \`BEST_DEAL\` - Sorting descending by \`total_applied_discount_amount\` \\n - \`LEAST_DEAL\` - Sorting ascending by \`total_applied_discount_amount\`",
                "enum": [
                  "BEST_DEAL",
                  "LEAST_DEAL",
                  "DEFAULT"
                ]
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against redeemables requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "QualificationsCheckEligibilityResponseBody": {
        "title": "Qualifications Check Eligibility Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/qualifications\`.",
        "properties": {
          "redeemables": {
            "$ref": "#/components/schemas/QualificationsRedeemables"
          },
          "tracking_id": {
            "type": "string",
            "description": "This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "stacking_rules": {
            "$ref": "#/components/schemas/QualificationsStackingRules"
          }
        }
      },
      "RedemptionsGetResponseBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Redemption"
          },
          {
            "$ref": "#/components/schemas/RedemptionRollback"
          }
        ],
        "title": "Get Redemption Response Body",
        "description": "Response body schema for **GET** \`/redemptions/{redemptionId}"
      },
      "RedemptionsListResponseBody": {
        "title": "Redemptions List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/redemptions\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about redemptions in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "redemptions",
            "description": "Identifies the name of the attribute that contains the array of redemption objects."
          },
          "redemptions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Redemption"
                },
                {
                  "$ref": "#/components/schemas/RedemptionRollback"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of redemptions."
          }
        },
        "required": [
          "object",
          "data_ref",
          "redemptions",
          "total"
        ]
      },
      "RedemptionsRedeemRequestBody": {
        "type": "object",
        "title": "Redemptions Redeem Request Body",
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "Expand array lets you configure params included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"redeemable\\", \\"redemption\\", \\"category\\"] | - Returns each discount type's \`metadata\` in each child redemption object.<br>- Returns redemption object \`metadata\`.<br>- Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "RedemptionsRedeemResponseBody": {
        "type": "object",
        "title": "Redemptions Redeem Response Body",
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "properties": {
          "redemptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Redemption"
            }
          },
          "parent_redemption": {
            "$ref": "#/components/schemas/Redemption"
          },
          "order": {
            "description": "Contains the order details associated with the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculated"
              }
            ]
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "RedemptionsRollbackCreateRequestBody": {
        "title": "Redemptions Rollback Create Request Body",
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the rollback."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to update **redemption** metadata."
          }
        },
        "description": "Request body schema for **POST** \`/redemptions/{redemptionId}/rollback\`."
      },
      "RedemptionsRollbackCreateResponseBody": {
        "title": "Redemptions Rollback Create Response Body",
        "description": "Response body schema for **POST** \`/redemptions/{redemptionId}/rollback\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedemptionRollback"
          }
        ]
      },
      "RedemptionsRollbacksCreateRequestBody": {
        "title": "Redemptions Rollbacks Create Request Body",
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the rollback."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to update **redemption** metadata."
          }
        },
        "description": "Request body schema for **POST** \`/redemptions/{parentRedemptionId}/rollbacks\`."
      },
      "RedemptionsRollbacksCreateResponseBody": {
        "title": "Redemptions Rollbacks Create Response Body",
        "description": "Response body schema for POST \`/redemptions/{parentRedemptionID}/rollbacks\`.",
        "type": "object",
        "properties": {
          "rollbacks": {
            "type": "array",
            "description": "Contains the rollback redemption objects of the particular incentives.",
            "items": {
              "$ref": "#/components/schemas/RedemptionRollback"
            }
          },
          "parent_rollback": {
            "$ref": "#/components/schemas/RedemptionRollback"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
          }
        }
      },
      "RewardsAssignmentsCreateRequestBody": {
        "description": "Request body schema for **POST** \`/rewards/{rewardID}/assignments\`.",
        "title": "Rewards Assignments Create Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RewardAssignmentsCreateDigitalOrMaterialRewardRequestBody"
          },
          {
            "$ref": "#/components/schemas/RewardAssignmentsCreateCoinRewardRequestBody"
          }
        ]
      },
      "RewardsAssignmentsCreateResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Create Response Body",
        "description": "Response body schema for **GET** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "RewardsAssignmentsGetResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Get Response Body",
        "description": "Response body schema for **GET** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "RewardsAssignmentsListResponseBody": {
        "type": "object",
        "description": "Response body schema for **GET** \`/rewards/{rewardID}/assignments\`.",
        "title": "Rewards Assignments List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about reward assignments in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of reward assignments.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardAssignment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of reward assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "RewardsAssignmentsUpdateRequestBody": {
        "title": "Rewards Assignments Update Request Body",
        "type": "object",
        "description": "Request body schema for **PUT** \`/loyalties/{campaignId}/rewards/{assignmentId}\` and **PUT** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "properties": {
          "parameters": {
            "type": "object",
            "description": "An object that defines the price of the reward in loyalty points.",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Stores the points parameter.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "Defines how many points are required to obtain the reward."
                  }
                }
              }
            }
          }
        }
      },
      "RewardsAssignmentsUpdateResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Update Response Body",
        "description": "Response body schema for **GET** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "SkusGetResponseBody": {
        "type": "object",
        "title": "Skus Get Response Body",
        "description": "Response body schema for **GET** \`/skus/{skuId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "SkusImportCSVRequestBody": {
        "type": "object",
        "title": "Skus Import Csv Request Body",
        "description": "Response body schema for **POST** \`/skus/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "SkusImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Skus Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/skus/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ValidationRulesAssignmentsListResponseBody": {
        "type": "object",
        "title": "Validation Rules Assignments List Response Body",
        "description": "Response body for **GET** \`/validation-rules-assignments\` and **GET** \`/validation-rules/{validationRuleId}/assignments\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleAssignmentsList"
          }
        ]
      },
      "ValidationRulesCreateRequestBody": {
        "title": "Validation Rules Create Request Body",
        "description": "Request body schema for **POST** \`/validation-rules\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          },
          {
            "type": "object",
            "required": [
              "name"
            ]
          }
        ]
      },
      "ValidationRulesCreateResponseBody": {
        "type": "object",
        "title": "Validation Rules Create Response Body",
        "description": "Response body schema for **POST** \`/validation-rules\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationRulesGetResponseBody": {
        "type": "object",
        "title": "Validation Rules Get Response Body",
        "description": "Response body schema for **GET** \`/validation-rules/{validationRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationRulesListResponseBody": {
        "description": "Response body schema for **GET** \`/validation-rules\`.",
        "type": "object",
        "title": "Validation Rules List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about validation rules.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of validation rules.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "An array of validation rules.",
            "items": {
              "$ref": "#/components/schemas/ValidationRule"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of validation rules in the project."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRulesUpdateRequestBody": {
        "title": "Validation Rules Update Request Body",
        "description": "Response body schema for **PUT** \`/validation-rules/{validationRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          }
        ]
      },
      "ValidationRulesUpdateResponseBody": {
        "type": "object",
        "title": "Validation Rules Update Response Body",
        "description": "Response body schema for **PUT** \`/validation-rules/{validationRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationsValidateRequestBody": {
        "title": "Validations Validate Request Body",
        "description": "Response body schema for **POST** \`/validations\`.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ValidationsValidateResponseBody": {
        "title": "Validations Validate Response Body",
        "description": "Response body schema for POST \`/validations\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidationsValidateAllResponseBody"
          },
          {
            "$ref": "#/components/schemas/ValidationsValidatePartialResponseBody"
          }
        ]
      },
      "VouchersBalanceUpdateRequestBody": {
        "title": "Vouchers Balance Update Request Body",
        "type": "object",
        "description": "Request body schema for \`vouchers/{code}/balance\`.",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amount to be added to or removed from the current balance on the gift card or loyalty card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000. To remove balance, simply add a minus sign before the value, i.e. to remove $20, use -2000."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          },
          "reason": {
            "type": "string",
            "description": "Reason why the transaction occurred."
          }
        },
        "required": [
          "amount"
        ]
      },
      "VouchersBalanceUpdateResponseBody": {
        "description": "Response body schema for \`vouchers/{code}/balance.\`",
        "type": "object",
        "title": "Vouchers Balance Update Response Body",
        "required": [
          "amount",
          "total",
          "balance",
          "type",
          "object",
          "related_object",
          "operation_type"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amount added (positive integer) or subtracted (negative integer) to the current balance on the gift card or loyalty card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "total": {
            "type": "integer",
            "description": "Total income incurred over the lifespan of the gift card or loyalty card."
          },
          "balance": {
            "type": "integer",
            "description": "The balance after adding or subtracting a specified amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "type": {
            "type": "string",
            "description": "The type of voucher being modified.",
            "enum": [
              "gift_voucher",
              "loyalty_card"
            ]
          },
          "operation_type": {
            "type": "string",
            "default": "MANUAL",
            "enum": [
              "MANUAL"
            ]
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is \`balance\`.",
            "default": "balance",
            "enum": [
              "balance"
            ]
          },
          "related_object": {
            "type": "object",
            "description": "Defines the resource that is being modified with the values that are returned in the balance object.",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The object being modified, i.e. \`voucher\`.",
                "default": "voucher",
                "enum": [
                  "voucher"
                ]
              },
              "id": {
                "type": "string",
                "description": "Identifies the voucher that is being modified, this is the ID that was assigned by the Voucherify API.",
                "example": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
              }
            }
          }
        }
      },
      "VouchersDisableResponseBody": {
        "type": "object",
        "title": "Vouchers Disable Response Body",
        "description": "Response body schema for **POST** \`/vouchers/{code}/disable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersEnableResponseBody": {
        "type": "object",
        "title": "Vouchers Enable Response Body",
        "description": "Response body schema for **POST** \`/vouchers/{code}/enable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersGetResponseBody": {
        "type": "object",
        "title": "Vouchers Get Response Body",
        "description": "Response body schema for **GET** \`/vouchers/{code}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersImportCSVRequestBody": {
        "type": "object",
        "title": "Vouchers Import CSV Request Body",
        "description": "Request body schema for **POST** \`/vouchers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "VouchersImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Vouchers Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/vouchers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "VouchersRedemptionGetResponseBody": {
        "type": "object",
        "title": "Vouchers Redemption Get Response Body",
        "description": "Response body schema for **GET** \`/vouchers/{code}/redemption\`.",
        "properties": {
          "quantity": {
            "type": "integer",
            "nullable": true,
            "description": "The maximum number of times a voucher can be redeemed."
          },
          "redeemed_quantity": {
            "type": "integer",
            "description": "The number of times the voucher was redeemed successfully."
          },
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about redemptions in a dictionary."
          },
          "url": {
            "type": "string",
            "example": "/v1/vouchers/PROMO-CODE2/redemptions?page=1&limit=10",
            "description": "URL"
          },
          "data_ref": {
            "type": "string",
            "default": "redemption_entries",
            "description": "Identifies the name of the attribute that contains the array of \`redemption_entries\`."
          },
          "total": {
            "type": "integer",
            "description": "Total number of redemption objects."
          },
          "redemption_entries": {
            "type": "array",
            "description": "Contains the array of successful and failed redemption objects.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Redemption"
                },
                {
                  "$ref": "#/components/schemas/RedemptionRollback"
                }
              ]
            }
          }
        },
        "required": [
          "redeemed_quantity",
          "object",
          "url",
          "data_ref",
          "total",
          "redemption_entries"
        ]
      },
      "VouchersTransactionsExportCreateRequestBody": {
        "description": "Request body schema for **POST** \`/vouchers/transactions/export\`.",
        "type": "object",
        "title": "Vouchers Transactions Export Create Request Body",
        "properties": {
          "parameters": {
            "description": "Contains the parameters that define the data to be exported.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VoucherTransactionsExportParameters"
              }
            ]
          }
        }
      },
      "VouchersTransactionsExportCreateResponseBody": {
        "type": "object",
        "title": "Vouchers Transactions Export Create Response Body",
        "description": "Response body schema for **POST** \`/vouchers/{code}/transactions/export\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VoucherTransactionsExport"
          }
        ]
      },
      "VouchersTransactionsListResponseBody": {
        "title": "Vouchers Transactions List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/vouchers/{code}/transactions\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of transaction objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            },
            "description": "A dictionary that contains an array of transactions. Each entry in the array is a separate transaction object."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the \`has_more\` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "has_more"
        ]
      },
      "ParameterCreatedBeforeAfter": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time before the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "after": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time after the voucher was created in ISO 8601 format.",
            "format": "date-time"
          }
        }
      },
      "ParameterUpdatedBeforeAfter": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time before the voucher was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "after": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time after the voucher was updated in ISO 8601 format.",
            "format": "date-time"
          }
        }
      },
      "ParameterOrigin": {
        "type": "string",
        "format": "hostname"
      },
      "ParameterOrder": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "type",
          "-type",
          "code",
          "-code",
          "campaign",
          "-campaign",
          "category",
          "-category"
        ]
      },
      "AsyncActions": {
        "type": "object",
        "title": "Asynchronous Actions",
        "description": "Response to requests that are processed asynchronously.",
        "additionalProperties": false,
        "properties": {
          "async_action_id": {
            "type": "string",
            "example": "aa_0a875d56c805df6601",
            "description": "The ID of the scheduled asynchronous action."
          }
        },
        "required": [
          "async_action_id"
        ]
      },
      "Campaign": {
        "title": "Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignBase"
          },
          {
            "title": "Campaign Additional Data",
            "type": "object",
            "properties": {
              "promotion": {
                "$ref": "#/components/schemas/PromotionTiersList"
              },
              "validation_rules_assignments": {
                "$ref": "#/components/schemas/ValidationRulesAssignmentsList"
              }
            }
          }
        ]
      },
      "CampaignBase": {
        "type": "object",
        "title": "Campaign Base",
        "description": "This is an object representing a campaign.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_f7fBbQxUuTN7dI7tGOo5XMDA"
          },
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "campaign_type": {
            "type": "string",
            "enum": [
              "LOYALTY_PROGRAM",
              "GIFT_VOUCHERS",
              "DISCOUNT_COUPONS",
              "PROMOTION",
              "REFERRAL_PROGRAM",
              "LUCKY_DRAW"
            ],
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \\n\\n- \`AUTO_UPDATE\`: the campaign is dynamic, i.e. vouchers will generate based on set criteria    \\n-  \`STATIC\`: vouchers need to be manually published",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "voucher": {
            "$ref": "#/components/schemas/CampaignVoucher"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a \`duration\` of \`P24D\` will be valid for a duration of 24 days."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the campaign on or off. You can disable a campaign even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* campaign\\n- \`false\` indicates an *inactive* campaign"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-01T08:00:50.038Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-20T09:18:19.623Z",
            "description": "Timestamp representing the date and time when the voucher was updated in ISO 8601 format."
          },
          "category": {
            "type": "string",
            "description": "Unique category name."
          },
          "creation_status": {
            "type": "string",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ],
            "description": "Indicates the status of the campaign creation."
          },
          "vouchers_generation_status": {
            "type": "string",
            "description": "Indicates the status of the campaign's vouchers.",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ]
          },
          "protected": {
            "type": "boolean",
            "description": "Indicates whether the resource can be deleted."
          },
          "category_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique category ID that this campaign belongs to.",
            "example": "cat_0b688929a2476386a7"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "object": {
            "type": "string",
            "default": "campaign",
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "loyalty_tiers_expiration": {
            "$ref": "#/components/schemas/LoyaltyTiersExpirationAll"
          }
        },
        "required": [
          "id",
          "name",
          "campaign_type",
          "type",
          "auto_join",
          "join_once",
          "use_voucher_metadata_schema",
          "created_at",
          "creation_status",
          "vouchers_generation_status",
          "protected",
          "categories",
          "object",
          "metadata"
        ]
      },
      "CampaignsCreateDiscountCouponsCampaign": {
        "title": "Create Discount Coupons Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Discount Coupons Campaign",
            "description": "Body schema for creating a campaign of discount coupons type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/DiscountCouponsCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreateGiftCampaign": {
        "title": "Create Gift Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Gift Campaign",
            "description": "Body schema for creating a campaign of gift type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/GiftCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreateGiveawayCampaign": {
        "title": "Create Giveaway Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Giveaway Campaign",
            "description": "Body schema for creating a campaign of giveaway type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/GiveawayCampaignVoucher"
              },
              "lucky_draw": {
                "$ref": "#/components/schemas/LuckyDraw"
              }
            }
          }
        ]
      },
      "CampaignsCreateLoyaltyCampaign": {
        "title": "Create Loyalty Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Loyalty Campaign",
            "description": "Body schema for creating a campaign of loyalty type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/CampaignLoyaltyVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreatePromotionCampaign": {
        "title": "Create Promotion Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Promotion Campaign",
            "description": "Body schema for creating a campaign of promotion type using **POST** \`/campaigns\`.",
            "properties": {
              "promotion": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PromotionTierCreateParams"
                }
              }
            }
          }
        ]
      },
      "CampaignsCreateReferralCampaign": {
        "title": "Create Referral Program",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Referral Program",
            "description": "Body schema for creating a campaign of referral type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/ReferralCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsImportVoucherItem": {
        "type": "object",
        "title": "Import Vouchers to Campaign",
        "description": "Import Vouchers to Campaign",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique custom voucher code."
          },
          "type": {
            "type": "string",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER",
              "GIFT_VOUCHER",
              "LOYALTY_CARD",
              "LUCKY_DRAW_CODE"
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* voucher\\n- \`false\` indicates an *inactive* voucher"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "discount": {
            "description": "Defines the voucher discount type and details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Discount"
              }
            ]
          },
          "gift": {
            "description": "Defines the voucher gift details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the voucher loyalty card details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsImportVoucherLoyaltyCard"
              }
            ]
          }
        },
        "required": [
          "code"
        ]
      },
      "CampaignsUpdateDiscountCouponsCampaign": {
        "type": "object",
        "title": "Update Discount Coupons Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Discount Coupons Campaign",
            "description": "Body schema for update a campaign of discount coupons type using **PUT** \`/campaigns\`.",
            "properties": {
              "discount": {
                "description": "Defines the voucher discount type and details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Discount"
                  }
                ]
              }
            }
          }
        ]
      },
      "CampaignsUpdateGiftCampaign": {
        "type": "object",
        "title": "Update Gift Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Gift Campaign",
            "description": "Body schema for update a campaign of give type using **PUT** \`/campaigns\`.",
            "properties": {
              "gift": {
                "description": "Defines the voucher gift details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Gift"
                  }
                ]
              }
            }
          }
        ]
      },
      "CampaignsUpdateGiveawayCampaign": {
        "type": "object",
        "title": "Update Giveaway Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "title": "Properties For Giveaway Campaign",
            "description": "Body schema for update a campaign of giveaway type using **PUT** \`/campaigns\`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LuckyDraw"
              }
            ]
          }
        ]
      },
      "CampaignsUpdateLoyaltyCampaign": {
        "type": "object",
        "title": "Update Loyalty Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Loyalty Campaign",
            "description": "Body schema for update a campaign of loyalty type using **PUT** \`/campaigns\`.",
            "properties": {
              "loyalty_tiers_expiration": {
                "$ref": "#/components/schemas/LoyaltyTiersExpirationAll"
              },
              "options": {
                "type": "object",
                "properties": {
                  "recalculate_tiers": {
                    "type": "boolean",
                    "description": "Determine if tiers should be recalculated or no."
                  }
                }
              }
            }
          }
        ]
      },
      "CampaignsUpdatePromotionCampaign": {
        "type": "object",
        "title": "Update Promotion Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateBase"
          }
        ]
      },
      "CampaignsUpdateReferralCampaign": {
        "type": "object",
        "title": "Update Referral Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Referral Campaign",
            "description": "Body schema for update a campaign of referral type using **PUT** \`/campaigns\`.",
            "properties": {
              "discount": {
                "description": "Defines the voucher discount type and details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Discount"
                  }
                ]
              },
              "referral_program": {
                "$ref": "#/components/schemas/ReferralProgram"
              }
            }
          }
        ]
      },
      "Category": {
        "title": "Category",
        "description": "This is an object representing a category.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the category."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-08-16T10:52:08.094Z",
            "description": "Timestamp representing the date and time when the category was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "stacking_rules_type": {
            "type": "string",
            "description": "The type of the stacking rule eligibility.",
            "enum": [
              "JOINT",
              "EXCLUSIVE"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object"
        ]
      },
      "CodeConfig": {
        "title": "Code Config",
        "type": "object",
        "description": "Schema containing information about config used for voucher. Defines code's pattern (prefix, suffix, length, charset, etc).",
        "properties": {
          "length": {
            "type": "string",
            "description": "Number of characters in a generated code (excluding prefix and postfix)."
          },
          "charset": {
            "type": "string",
            "description": "Characters that can appear in the code.  \\n\\nExamples:\\n\\n- Alphanumeric: \`0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\` \\n- Alphabetic: \`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\` \\n- Alphabetic Lowercase: \`abcdefghijklmnopqrstuvwxyz\` \\n- Alphabetic Uppercase: \`ABCDEFGHIJKLMNOPQRSTUVWXYZ\` \\n- Numbers: \`0123456789\`  \\n- Custom: a custom character set"
          },
          "prefix": {
            "type": "string",
            "description": "A text appended before the code."
          },
          "postfix": {
            "type": "string",
            "description": "A text appended after the code."
          },
          "pattern": {
            "type": "string",
            "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides \`length\`."
          },
          "initial_count": {
            "type": "integer",
            "description": "The initial count"
          }
        }
      },
      "CreatePublicationWithCampaign": {
        "title": "Create Publication With Campaign",
        "type": "object",
        "description": "Create publication with campaign.",
        "allOf": [
          {
            "title": "Campaign",
            "type": "object",
            "properties": {
              "campaign": {
                "$ref": "#/components/schemas/CreatePublicationCampaign"
              }
            },
            "required": [
              "campaign"
            ]
          },
          {
            "$ref": "#/components/schemas/CreatePublicationBase"
          }
        ]
      },
      "CreatePublicationWithSpecificVoucher": {
        "title": "Create Publication With Specific Voucher",
        "type": "object",
        "description": "Create publication with specific voucher.",
        "allOf": [
          {
            "title": "Voucher code",
            "type": "object",
            "properties": {
              "voucher": {
                "description": "Code of voucher being published.",
                "type": "string"
              }
            },
            "required": [
              "voucher"
            ]
          },
          {
            "$ref": "#/components/schemas/CreatePublicationBase"
          }
        ]
      },
      "CustomerActivity": {
        "title": "Customer Activity",
        "type": "object",
        "description": "This is an object representing customer activity.  \\n\\nThis is a general object which presents moments from customers' activity. There are all types of different events that customers perform during their journey once they participate in Promotions. Events describe moments when customers redeem coupons and earn points or rewards. The list of all types of activities is listed below.\\n\\nThe details describing the activity are collected in a property named \`data\`. In this object, software integrators will find all further information explaining the event context.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique event ID, assigned by Voucherify.",
            "example": "evcus_0c150c51730c6b60b1"
          },
          "type": {
            "type": "string",
            "description": "Event type.",
            "enum": [
              "customer.confirmed",
              "customer.created",
              "customer.updated",
              "customer.deleted",
              "customer.referred",
              "customer.custom_event",
              "customer.segment.entered",
              "customer.segment.left",
              "customer.sms.sent",
              "customer.sms.recovered",
              "customer.sms.failed",
              "customer.email.sent",
              "customer.email.recovered",
              "customer.email.failed",
              "customer.activecampaign.sent",
              "customer.activecampaign.recovered",
              "customer.activecampaign.failed",
              "customer.braze.sent",
              "customer.braze.recovered",
              "customer.braze.failed",
              "customer.mailchimp.sent",
              "customer.mailchimp.recovered",
              "customer.mailchimp.failed",
              "customer.intercom.sent",
              "customer.intercom.recovered",
              "customer.intercom.failed",
              "customer.shopify.sent",
              "customer.shopify.recovered",
              "customer.shopify.failed",
              "customer.klaviyo.sent",
              "customer.klaviyo.recovered",
              "customer.klaviyo.failed",
              "customer.batch.sent",
              "customer.batch.recovered",
              "customer.batch.failed",
              "customer.rewarded",
              "customer.rewarded.loyalty_points",
              "customer.voucher.gift.balance_added",
              "customer.voucher.loyalty_card.points_added",
              "customer.voucher.loyalty_card.points_transferred",
              "customer.voucher.loyalty_card.points_expired",
              "customer.voucher.deleted",
              "customer.publication.succeeded",
              "customer.publication.failed",
              "customer.validation.succeeded",
              "customer.validation.failed",
              "customer.redemption.failed",
              "customer.redemption.succeeded",
              "customer.redemption.rollback.failed",
              "customer.redemption.rollback.succeeded",
              "customer.consents.given",
              "customer.consents.revoked",
              "customer.order.canceled",
              "customer.order.created",
              "customer.order.fulfilled",
              "customer.order.paid",
              "customer.order.processing",
              "customer.order.updated",
              "customer.reward_redemptions.created",
              "customer.reward_redemptions.pending",
              "customer.reward_redemptions.completed",
              "customer.reward_redemptions.rolledback",
              "customer.loyalty.updated",
              "customer.loyalty.tier.upgraded",
              "customer.loyalty.tier.downgraded",
              "customer.loyalty.tier.prolonged",
              "customer.loyalty.tier.expiration.changed",
              "customer.loyalty.tier.joined",
              "customer.loyalty.tier.left"
            ]
          },
          "data": {
            "type": "array",
            "description": "Contains details about the event. The objects that are returned in the data attribute differ based on the context of the event type.",
            "items": {
              "$ref": "#/components/schemas/CustomerActivityData"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the customer activity occurred in ISO 8601 format.",
            "example": "2022-08-30T09:14:07.660Z",
            "format": "date-time"
          }
        }
      },
      "CustomerBase": {
        "title": "Customer Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone number. This parameter is mandatory when you try to send out codes to customers via an SMS channel."
          },
          "birthday": {
            "type": "string",
            "description": "*Deprecated* Customer's birthdate; format YYYY-MM-DD.",
            "format": "date"
          },
          "birthdate": {
            "type": "string",
            "description": "Customer's birthdate; format YYYY-MM-DD.",
            "format": "date"
          },
          "address": {
            "type": "object",
            "nullable": true,
            "description": "Customer's address.",
            "properties": {
              "city": {
                "type": "string",
                "description": "City"
              },
              "state": {
                "type": "string",
                "description": "State"
              },
              "line_1": {
                "type": "string",
                "description": "First line of address."
              },
              "line_2": {
                "type": "string",
                "description": "Second line of address."
              },
              "country": {
                "type": "string",
                "description": "Country."
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          }
        }
      },
      "CustomerSegmentsList": {
        "type": "object",
        "title": "Customer Segments List",
        "description": "List of customer's segments",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about customer segments.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of segment IDs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of segment IDs and names.",
            "items": {
              "$ref": "#/components/schemas/SimpleSegment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of segments the customer belongs to."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CustomerWithSummaryLoyaltyReferrals": {
        "title": "Customer With Summary Loyalty Referrals",
        "allOf": [
          {
            "type": "object",
            "title": "Customer Response Data",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer that will be linked to redemption in this request."
              },
              "source_id": {
                "type": "string",
                "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
              },
              "summary": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerSummary"
                  }
                ]
              },
              "loyalty": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerLoyalty"
                  }
                ]
              },
              "referrals": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerReferrals"
                  }
                ]
              },
              "system_metadata": {
                "type": "object",
                "description": "Object used to store system metadata information."
              },
              "created_at": {
                "type": "string",
                "description": "Timestamp representing the date and time when the customer was created in ISO 8601 format.",
                "example": "2022-08-30T06:32:07.380Z",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "description": "Timestamp representing the date and time when the customer was updated in ISO 8601 format.",
                "example": "2022-08-31T06:32:07.380Z",
                "format": "date-time"
              },
              "assets": {
                "type": "object",
                "description": "Contains information about the customer's cockpit.",
                "properties": {
                  "cockpit_url": {
                    "type": "string",
                    "description": "Customer's cockpit URL address."
                  }
                }
              },
              "object": {
                "type": "string",
                "description": "The type of object represented by JSON.",
                "default": "customer",
                "enum": [
                  "customer"
                ]
              }
            },
            "required": [
              "summary",
              "loyalty",
              "referrals",
              "object"
            ]
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "EarningRule": {
        "title": "Earning Rule",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "validation_rule_id": {
                "type": "string",
                "nullable": true,
                "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date.\\n\\n- \`true\` indicates an active earning rule\\n- \`false\` indicates an inactive earning rule"
              }
            },
            "required": [
              "validation_rule_id",
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "EarningRuleBase": {
        "title": "EarningRuleBase",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format."
          },
          "loyalty": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EarningRuleFixed"
              },
              {
                "$ref": "#/components/schemas/EarningRuleProportional"
              }
            ]
          },
          "event": {
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EarningRuleEvent"
              }
            ]
          },
          "custom_event": {
            "type": "object",
            "properties": {
              "schema_id": {
                "type": "string"
              }
            },
            "required": [
              "schema_id"
            ]
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. Required for the customer.segment.entered option in event.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            },
            "required": [
              "id"
            ]
          },
          "source": {
            "type": "object",
            "required": [
              "object_id",
              "object_type"
            ],
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "description": "Defines the object associated with the earning rule. Defaults to \`campaign\`.",
                "enum": [
                  "campaign"
                ]
              }
            }
          },
          "object": {
            "type": "string",
            "enum": [
              "earning_rule"
            ],
            "description": "The type of object represented by JSON. Default is earning_rule."
          },
          "automation_id": {
            "type": "string",
            "description": "For internal use by Voucherify."
          },
          "start_date": {
            "type": "string",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is inactive before this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format. Earning rule is inactive after this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.start_date required when including the \`validity_timeframe\`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a duration of PT1H will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an interval of P2D will be valid every other day."
              }
            },
            "required": [
              "duration",
              "interval"
            ]
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\\n\\n- \`0\` Sunday\\n- \`1\` Monday\\n- \`2\` Tuesday\\n- \`3\` Wednesday\\n- \`4\` Thursday\\n- \`5\` Friday\\n- \`6\` Saturday",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 6
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        },
        "required": [
          "id",
          "created_at",
          "loyalty",
          "source",
          "object",
          "automation_id",
          "metadata"
        ]
      },
      "EmptyJson": {
        "type": "object",
        "description": "Schema model for an empty json.",
        "title": "Empty JSON"
      },
      "Export": {
        "title": "Export",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucher"
          },
          {
            "$ref": "#/components/schemas/ExportRedemption"
          },
          {
            "$ref": "#/components/schemas/ExportCustomer"
          },
          {
            "$ref": "#/components/schemas/ExportPublication"
          },
          {
            "$ref": "#/components/schemas/ExportOrder"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpiration"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpiration"
          }
        ]
      },
      "ExportCustomerBase": {
        "title": "Export Customers",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "customer"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportCustomerOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportCustomerFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportCustomerFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportCustomerScheduled": {
        "title": "Export Customers Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          }
        ]
      },
      "ExportOrderBase": {
        "title": "Export Orders",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "order"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportOrderFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportOrderFields": {
        "title": "Export Order Fields",
        "type": "string",
        "enum": [
          "id",
          "source_id",
          "created_at",
          "updated_at",
          "status",
          "amount",
          "discount_amount",
          "items_discount_amount",
          "total_discount_amount",
          "total_amount",
          "customer_id",
          "referrer_id",
          "metadata"
        ]
      },
      "ExportOrderFilters": {
        "title": "Export Order Filters",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "updated_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "status": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "items_discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "total_discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "total_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "referrer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportOrderOrder": {
        "title": "Export Order Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "source_id",
          "-source_id",
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "status",
          "-status",
          "amount",
          "-amount",
          "discount_amount",
          "-discount_amount",
          "items_discount_amount",
          "-items_discount_amount",
          "total_discount_amount",
          "-total_discount_amount",
          "total_amount",
          "-total_amount",
          "customer_id",
          "-customer_id",
          "referrer_id",
          "-referrer_id",
          "metadata",
          "-metadata"
        ]
      },
      "ExportOrderScheduled": {
        "title": "Export Orders Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "ExportPointsExpirationBase": {
        "title": "Export Points Expiration",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "points_expiration"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPointsExpirationOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportPointsExpirationFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPointsExpirationFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportPointsExpirationScheduled": {
        "title": "Export Points Expiration Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          }
        ]
      },
      "ExportPublicationBase": {
        "title": "Export Publications",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "publication"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPublicationOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportPublicationFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPublicationFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportPublicationScheduled": {
        "title": "Export Publications Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          }
        ]
      },
      "ExportRedemptionBase": {
        "title": "Export Redemptions",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "redemption"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportRedemptionOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportRedemptionFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportRedemptionFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportRedemptionScheduled": {
        "title": "Export Redemptions Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          }
        ]
      },
      "ExportScheduledBase": {
        "title": "Export Scheduled Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.",
            "enum": [
              "SCHEDULED"
            ]
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "result": {
            "type": "object",
            "description": "Contains the URL of the CSV file.",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "result",
          "user_id"
        ]
      },
      "ExportVoucherBase": {
        "title": "Export Vouchers",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "voucher"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportVoucherFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherFilters"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportVoucherScheduled": {
        "title": "Export Vouchers Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          }
        ]
      },
      "ExportVoucherTransactionsExpirationBase": {
        "title": "Export Vouchers Transactions Expiration",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "voucher_transactions"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportVoucherTransactionsFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportVoucherTransactionsExpirationScheduled": {
        "title": "Export Vouchers Transactions Expiration Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationBase"
          }
        ]
      },
      "FilterConditionsString": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "$in": {
            "type": "array",
            "description": "Array of resource values that should be included in the results. (multiple values)",
            "items": {
              "type": "string"
            }
          },
          "$not_in": {
            "type": "array",
            "description": "Array of resource values that should be included in the results. (multiple values)",
            "items": {
              "type": "string"
            }
          },
          "$is": {
            "type": "string",
            "description": "Value is exactly this value. (single value)"
          },
          "$is_not": {
            "type": "string",
            "description": "Results omit this value. (single value)"
          },
          "$has_value": {
            "type": "string",
            "description": "Value is NOT null. The value for this parameter is an empty string."
          },
          "$is_unknown": {
            "type": "string",
            "description": "Value is null. The value for this parameter is an empty string."
          },
          "$starts_with": {
            "type": "string",
            "description": "Value starts with the specified string."
          },
          "$ends_with": {
            "type": "string",
            "description": "Value ends with the specified string."
          }
        }
      },
      "ImportCSVRequestBody": {
        "type": "object",
        "title": "Import CSV file",
        "description": "Request body schema for importing data using a CSV file.",
        "format": "binary",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File path."
          }
        },
        "required": [
          "file"
        ]
      },
      "Junction": {
        "title": "Junction",
        "description": "Logical Operator Between Filters. Filter by conditions set on the \`junction\` parameter indicating how the \`conditions\` should be accounted for in the query. An \`AND\` is an all-inclusive logical operator, meaning the \`AND\` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an \`OR\` operator displays a record if **ANY** of the conditions separated by OR is TRUE.",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      },
      "ListPublicationsItemInvalid": {
        "title": "Invalid",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "FAILURE"
                ],
                "description": "Status of the publication attempt."
              },
              "failure_code": {
                "type": "string",
                "description": "Generic reason as to why the create publication operation failed."
              },
              "failure_message": {
                "type": "string",
                "description": "This parameter will provide more expanded reason as to why the create publication operation failed."
              }
            },
            "required": [
              "result",
              "vouchers"
            ]
          }
        ]
      },
      "ListPublicationsItemValidMultipleVouchers": {
        "title": "Valid Multiple Vouchers",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "SUCCESS"
                ],
                "description": "Status of the publication attempt."
              },
              "vouchers": {
                "type": "array",
                "description": "Contains the unique voucher codes that was assigned by Voucherify.",
                "items": {
                  "type": "string",
                  "example": "Q1K4XT5S"
                }
              }
            },
            "required": [
              "result",
              "vouchers"
            ]
          }
        ]
      },
      "ListPublicationsItemValidSingleVoucher": {
        "title": "Valid Single Voucher",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "SUCCESS"
                ],
                "description": "Status of the publication attempt."
              },
              "voucher": {
                "$ref": "#/components/schemas/ListPublicationsItemVoucher"
              }
            },
            "required": [
              "result",
              "voucher"
            ]
          }
        ]
      },
      "LoyaltiesLoyaltyTierReward": {
        "title": "Loyalty Tier Reward Object",
        "type": "object",
        "description": "This is an object representing a loyalty tier reward.",
        "properties": {
          "reward": {
            "$ref": "#/components/schemas/Reward"
          },
          "assignment": {
            "$ref": "#/components/schemas/RewardAssignment"
          },
          "object": {
            "description": "The type of object represented by JSON. This object stores information about the loyalty tier reward.",
            "enum": [
              "loyalty_tier_reward"
            ]
          }
        },
        "required": [
          "reward",
          "assignment",
          "object"
        ]
      },
      "LoyaltiesTransferPoints": {
        "title": "Loyalties Transfer Points",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique loyalty card code from which the user wants to transfer loyalty points (source)."
          },
          "points": {
            "type": "integer",
            "description": "The number of loyalty points that the user wants to transfer to another loyalty card. The number of points cannot be higher than the current balance on the loyalty card (source)."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transfer."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          }
        },
        "required": [
          "code",
          "points",
          "source_id"
        ]
      },
      "LoyaltyCardTransaction": {
        "title": "Loyalty Card Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        ]
      },
      "LoyaltyCardTransactionsFields": {
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "type",
          "source_id",
          "reason",
          "source",
          "balance",
          "amount",
          "related_transaction_id",
          "created_at",
          "details"
        ]
      },
      "LoyaltyTier": {
        "title": "Loyalty Tier",
        "allOf": [
          {
            "$ref": "#/components/schemas/LoyaltyTierBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique loyalty tier ID."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique parent campaign ID."
              },
              "metadata": {
                "type": "object",
                "nullable": true,
                "description": "The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the loyalty tier was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the loyalty tier was updated in ISO 8601 format."
              },
              "config": {
                "type": "object",
                "description": "Defines loyalty tier range in points.",
                "required": [
                  "points"
                ],
                "properties": {
                  "points": {
                    "type": "object",
                    "description": "Defines range of loyalty tier in points.",
                    "properties": {
                      "from": {
                        "type": "integer",
                        "description": "Bottom points threshold value."
                      },
                      "to": {
                        "type": "integer",
                        "description": "Top points threshold value."
                      }
                    }
                  }
                }
              },
              "expiration": {
                "$ref": "#/components/schemas/LoyaltyTierExpiration"
              },
              "object": {
                "type": "string",
                "enum": [
                  "loyalty_tier"
                ],
                "description": "The type of object represented by JSON. This object stores information about the loyalty."
              }
            },
            "required": [
              "id",
              "campaign_id",
              "metadata",
              "created_at",
              "config",
              "object"
            ]
          }
        ]
      },
      "LoyaltyTierBase": {
        "title": "Loyalty Tier Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Loyalty Tier name."
          },
          "earning_rules": {
            "type": "object",
            "description": "Contains a list of earning rule IDs and their points mapping for the given earning rule."
          },
          "rewards": {
            "type": "object",
            "description": "Contains a list of reward IDs and their points mapping for the given reward."
          },
          "points": {
            "type": "object",
            "description": "Defines range of loyalty tier in points.",
            "properties": {
              "from": {
                "type": "integer",
                "description": "Bottom points threshold value."
              },
              "to": {
                "type": "integer",
                "description": "Top points threshold value."
              }
            }
          }
        },
        "required": [
          "name",
          "points"
        ]
      },
      "Order": {
        "title": "Order",
        "allOf": [
          {
            "title": "Order Ids",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request."
              },
              "source_id": {
                "type": "string",
                "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
              }
            }
          },
          {
            "$ref": "#/components/schemas/OrderBase"
          }
        ]
      },
      "OrderBase": {
        "title": "Order Base",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.\\n\\n"
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "customer": {
            "description": "This is an object containing information about the customer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer": {
            "description": "This is an object containing information about the referrer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Referrer"
              }
            ]
          },
          "referrer_id": {
            "type": "string",
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          }
        }
      },
      "OrderCalculated": {
        "title": "Order Calculated",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedBase"
          },
          {
            "title": "Order Calculated",
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "customer": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerId"
                  }
                ]
              },
              "referrer": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ReferrerWithSummaryLoyaltyReferrals"
                  },
                  {
                    "$ref": "#/components/schemas/ReferrerId"
                  }
                ]
              }
            }
          }
        ]
      },
      "OrderCalculatedNoCustomerData": {
        "title": "Order Calculated No Customer Data",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedBase"
          },
          {
            "title": "Order Customer And Referrer Ids Objects",
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "customer": {
                "description": "If only \`customer_id\` was provided, customer return data will be limited.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerId"
                  }
                ]
              },
              "referrer": {
                "description": "If only \`referrer_id\` was provided, referrer return data will be limited.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferrerId"
                  }
                ]
              }
            }
          }
        ]
      },
      "PointsExpirationTypes": {
        "title": "Points Expiration Types",
        "type": "string",
        "enum": [
          "PROGRAM_RULES",
          "CUSTOM_DATE",
          "NON_EXPIRING"
        ]
      },
      "Product": {
        "type": "object",
        "description": "This is an object representing a product.  \\n\\nThis entity should be used to map product items from your inventory management system. The aim of products is to build which reflect product-specific campaigns.",
        "title": "Product",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductWithoutSkus"
          },
          {
            "type": "object",
            "properties": {
              "skus": {
                "$ref": "#/components/schemas/SkusListForProduct"
              }
            }
          }
        ]
      },
      "ProductCollectionsCreateDynamicRequestBody": {
        "title": "Product Collections Create Dynamic (Auto Update) Request Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Show that the product collection is dynamic (products come in and leave based on set criteria).",
            "enum": [
              "AUTO_UPDATE"
            ]
          },
          "name": {
            "description": "Unique user-defined product collection name.",
            "type": "string"
          },
          "filter": {
            "type": "object",
            "description": "Defines a set of criteria and boundary conditions for an \`AUTO_UPDATE\` product collection type.",
            "additionalProperties": false,
            "required": [
              "junction"
            ],
            "properties": {
              "junction": {
                "$ref": "#/components/schemas/Junction"
              },
              "id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "product_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "source_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "name": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "price": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "object": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "attributes": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "metadata": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "image_url": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "skus": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "created_at": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "updated_at": {
                "$ref": "#/components/schemas/FieldConditions"
              }
            }
          }
        },
        "required": [
          "type",
          "name",
          "filter"
        ]
      },
      "ProductCollectionsCreateStaticRequestBody": {
        "title": "Product Collections Create Dynamic Request Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Show that the product collection is static (manually selected products).",
            "enum": [
              "STATIC"
            ]
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product collection name."
          },
          "products": {
            "type": "array",
            "description": "Defines a set of products for a \`STATIC\` product collection type.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "prod_0a41bcf807c5fcaaf6",
                  "description": "The product ID."
                },
                "product_id": {
                  "type": "string",
                  "description": "Product ID for SKUs."
                },
                "object": {
                  "description": "Denotes the type of object represented by the ID.",
                  "enum": [
                    "sku",
                    "product"
                  ]
                }
              },
              "required": [
                "id",
                "object"
              ]
            }
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ProductCollectionsItem": {
        "title": "Product Collection Base",
        "description": "This is an object representing a product collection base. ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product collection ID."
          },
          "name": {
            "type": "string",
            "example": "All Products",
            "description": "Unique user-defined product collection name."
          },
          "type": {
            "type": "string",
            "description": "Describes whether the product collection is dynamic (products come in and leave based on set criteria) or static (manually selected products).",
            "enum": [
              "STATIC",
              "AUTO_UPDATE"
            ]
          },
          "filter": {
            "type": "object",
            "description": "Defines a set of criteria and boundary conditions for an \`AUTO_UPDATE\` product collection type.",
            "additionalProperties": false,
            "required": [
              "junction"
            ],
            "properties": {
              "junction": {
                "$ref": "#/components/schemas/Junction"
              },
              "id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "product_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "source_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "name": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "price": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "object": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "attributes": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "metadata": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "image_url": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "skus": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "created_at": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "updated_at": {
                "$ref": "#/components/schemas/FieldConditions"
              }
            }
          },
          "products": {
            "description": "Defines a set of products for a \`STATIC\` product collection type.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "prod_0a41bcf807c5fcaaf6",
                  "description": "The product ID."
                },
                "product_id": {
                  "type": "string",
                  "description": "Product ID for SKUs."
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "sku",
                    "product"
                  ],
                  "description": "Denotes the type of object represented by the ID."
                }
              },
              "required": [
                "id",
                "object"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-09T12:51:29.898Z",
            "description": "Timestamp representing the date and time when the product collection was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about the static product collection.",
            "enum": [
              "products_collection"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "created_at",
          "object"
        ]
      },
      "ProductCollectionsList": {
        "type": "object",
        "title": "List Product Collections",
        "description": "Schema representing list of product collections",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about product collections.",
            "default": "list",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the JSON property that contains the array of product collections.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "description": "A dictionary that contains an array of product collections and their details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCollectionsItem"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of product collections."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ProductCollectionsProductsList": {
        "type": "object",
        "description": "Response body schema for **GET** /product-collections/{productCollectionID}/products.",
        "title": "List Products in Collection Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about products and SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of products and SKUs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of products and SKUs.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ProductWithoutSkus"
                },
                {
                  "$ref": "#/components/schemas/SkuWithProduct"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of products & SKUs in the product collection."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "PromotionStack": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was updated in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON. "
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "PromotionStackBase": {
        "title": "Promotion Stack Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Promotion stack name."
          },
          "tiers": {
            "type": "object",
            "required": [
              "ids"
            ],
            "description": "Contains the tier configuration.",
            "properties": {
              "ids": {
                "type": "array",
                "minItems": 1,
                "description": "Contains the list of tiers in a pre-defined sequence.",
                "items": {
                  "type": "string"
                }
              },
              "hierarchy_mode": {
                "type": "string",
                "enum": [
                  "MANUAL"
                ]
              }
            }
          }
        },
        "required": [
          "name",
          "tiers"
        ]
      },
      "PromotionTier": {
        "type": "object",
        "description": "This is an object representing a promotion tier. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "title": "Promotion Tier",
        "properties": {
          "id": {
            "type": "string",
            "example": "promo_63fYCt81Aw0h7lzyRkrGZh9p",
            "description": "Unique promotion tier ID."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-15T11:34:01.333Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the promotion tier was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "example": "2022-02-09T09:20:05.603Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the promotion tier was updated in ISO 8601 format."
          },
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "$ref": "#/components/schemas/Discount"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "promotion_id": {
            "type": "string",
            "description": "Promotion unique ID."
          },
          "campaign": {
            "type": "object",
            "description": "Contains details about promotion tier's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID."
              },
              "start_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
                "format": "date-time",
                "example": "2022-09-22T00:00:00.000Z"
              },
              "expiration_date": {
                "type": "string",
                "format": "date-time",
                "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
                "example": "2022-09-30T00:00:00.000Z"
              },
              "validity_timeframe": {
                "type": "object",
                "description": "Recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.",
                "properties": {
                  "interval": {
                    "type": "string",
                    "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
                  },
                  "duration": {
                    "type": "string",
                    "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
                  }
                }
              },
              "validity_day_of_week": {
                "type": "array",
                "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
                "items": {
                  "type": "integer"
                }
              },
              "active": {
                "type": "boolean",
                "description": "A flag indicating whether the campaign is active or not active. A campaign can be disabled even though it's within the active period defined by the \`start_date\` and \`expiration_date\` using the <!-- [Disable Campaign](OpenAPI.json/paths/~1campaigns~1{campaignId}~1disable) -->[Disable Campaign](ref:disable-campaign) endpoint.  \\n\\n- \`true\` indicates an *active* campaign\\n- \`false\` indicates an *inactive* campaign"
              },
              "category_id": {
                "type": "string",
                "example": "cat_0b688929a2476386a6",
                "description": "Unique category ID that this campaign belongs to."
              },
              "object": {
                "type": "string",
                "description": "The type of object represented by the campaign object. This object stores information about the campaign.",
                "default": "campaign"
              }
            }
          },
          "campaign_id": {
            "type": "string",
            "description": "Promotion tier's parent campaign's unique ID."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* promotion tier\\n- \`false\` indicates an *inactive* promotion tier"
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "summary": {
            "type": "object",
            "description": "Contains statistics about promotion tier redemptions and orders.",
            "properties": {
              "redemptions": {
                "type": "object",
                "description": "Contains statistics about promotion tier redemptions.",
                "properties": {
                  "total_redeemed": {
                    "type": "integer",
                    "description": "Number of times the promotion tier was redeemed."
                  }
                }
              },
              "orders": {
                "type": "object",
                "description": "Contains statistics about orders related to the promotion tier.",
                "properties": {
                  "total_amount": {
                    "type": "integer",
                    "description": "Sum of order totals."
                  },
                  "total_discount_amount": {
                    "type": "integer",
                    "description": "Sum of total discount applied using the promotion tier."
                  }
                }
              }
            }
          },
          "object": {
            "type": "string",
            "default": "promotion_tier",
            "description": "The type of object represented by JSON. This object stores information about the promotion tier."
          },
          "validation_rule_assignments": {
            "$ref": "#/components/schemas/ValidationRuleAssignmentsList"
          },
          "category_id": {
            "type": "string",
            "description": "Promotion tier category ID.",
            "example": "cat_0c9da30e7116ba6bba"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "PromotionTiersList": {
        "type": "object",
        "description": "Promotion Tiers",
        "title": "Promotion Tiers",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about promotion tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "tiers",
            "description": "Identifies the name of the attribute that contains the array of promotion tier objects."
          },
          "tiers": {
            "type": "array",
            "description": "Contains array of promotion tier objects.",
            "items": {
              "$ref": "#/components/schemas/PromotionTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of promotion tiers."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the \`has_more\` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        }
      },
      "PublicationsCreateVoucherResponseBody": {
        "title": "Publications Create Voucher Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/publication\` and **GET** \`/publications/create\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateBaseResponseBody"
          },
          {
            "type": "object",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/Voucher"
              }
            },
            "required": [
              "voucher"
            ]
          }
        ]
      },
      "PublicationsCreateVouchersResponseBody": {
        "title": "Publications Create Vouchers Response Body",
        "description": "Response body schema for **POST** \`/publication\` and **GET** \`/publications/create\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateBaseResponseBody"
          },
          {
            "type": "object",
            "properties": {
              "vouchers": {
                "type": "array",
                "description": "Contains the unique voucher codes that was assigned by Voucherify.",
                "items": {
                  "type": "string",
                  "example": "Q1K4XT5S"
                }
              }
            },
            "required": [
              "vouchers"
            ]
          }
        ]
      },
      "QualificationsFieldConditions": {
        "title": "Qualifications Field Conditions",
        "type": "object",
        "properties": {
          "conditions": {
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "allOf": [
              {
                "$ref": "#/components/schemas/QualificationsFiltersCondition"
              }
            ]
          }
        }
      },
      "QualificationsRedeemables": {
        "title": "Redeemables",
        "type": "object",
        "description": "List of redeemables for examine qualification.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. Default is \`list\`.",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of qualified redeemables.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "type": "array",
            "description": "Array of qualified redeemables.",
            "items": {
              "$ref": "#/components/schemas/QualificationsRedeemable"
            }
          },
          "total": {
            "type": "integer",
            "example": 5,
            "description": "The number of redeemables returned in the API request."
          },
          "has_more": {
            "type": "boolean",
            "description": "As results are always limited, the \`has_more\` flag indicates whether there are more records for given parameters. This let's you know if you are able to run another request (with different options) to get more records returned in the results."
          },
          "more_starting_after": {
            "type": "string",
            "description": "Timestamp representing the date and time to use in starting_after cursor to get more redeemables.",
            "format": "date-time",
            "example": "2023-10-31T12:13:16.374Z"
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total",
          "has_more"
        ]
      },
      "QualificationsStackingRules": {
        "type": "object",
        "title": "Examine Qualification Stacking Rules",
        "description": "Defines stacking rules for redeemables. Read more in the [Help Center](https://support.voucherify.io/article/604-stacking-rules)",
        "properties": {
          "redeemables_limit": {
            "type": "integer",
            "description": "Defines how many redeemables can be sent in one stacking request (note: more redeemables means more processing time!).",
            "default": 30,
            "maximum": 30,
            "minimum": 1
          },
          "applicable_redeemables_limit": {
            "type": "integer",
            "description": "Defines how many of the sent redeemables will be applied to the order. For example, a user can select 30 discounts but only 5 will be applied to the order and the remaining will be labelled as SKIPPED.",
            "default": 5,
            "maximum": 30,
            "minimum": 1
          },
          "applicable_exclusive_redeemables_limit": {
            "type": "integer",
            "description": "Defines how many redeemables with an exclusive category can be applied in one request.",
            "default": 1,
            "maximum": 30,
            "minimum": 1
          },
          "exclusive_categories": {
            "type": "array",
            "description": "Lists all exclusive categories. A redeemable from a campaign with an exclusive category is the only redeemable to be redeemed when applied with redeemables from other campaigns unless these campaigns are exclusive or joint.",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "joint_categories": {
            "type": "array",
            "description": "Lists all joint categories. A campaign with a joint category is always applied regardless of the exclusivity of other campaigns.",
            "default": [],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "redeemables_limit",
          "applicable_redeemables_limit",
          "applicable_exclusive_redeemables_limit",
          "exclusive_categories",
          "joint_categories"
        ]
      },
      "Redemption": {
        "title": "Redemption",
        "type": "object",
        "description": "This is an object representing a redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON",
            "enum": [
              "redemption"
            ]
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "nullable": true,
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED",
              "ROLLED_BACK"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is \`FAILURE\`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is \`FAILURE\`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A \`USER\` corresponds to the Voucherify Dashboard and an \`API\` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier",
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being added back to the loyalty card for the reward redemption rollback."
              }
            }
          }
        },
        "required": [
          "id",
          "object",
          "date",
          "redemption",
          "result",
          "status",
          "channel",
          "related_object_type",
          "related_object_id"
        ]
      },
      "RedemptionRollback": {
        "title": "Redemption Rollback",
        "type": "object",
        "description": "This is an object representing a redemption rollback.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON",
            "enum": [
              "redemption_rollback"
            ]
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "nullable": true,
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the redemption being invalid in the context of the provided parameters."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is \`FAILURE\`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is \`FAILURE\`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A \`USER\` corresponds to the Voucherify Dashboard and an \`API\` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier",
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being added back to the loyalty card for the reward redemption rollback."
              }
            }
          }
        },
        "required": [
          "id",
          "object",
          "date",
          "redemption",
          "result",
          "status",
          "channel",
          "related_object_type",
          "related_object_id"
        ]
      },
      "Reward": {
        "type": "object",
        "title": "Reward",
        "properties": {
          "id": {
            "type": "string",
            "example": "rew_nIy4gHpQHle2c3pNMwuj7G6j",
            "description": "Unique reward ID, assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "stock": {
            "type": "integer",
            "nullable": true,
            "description": "Configurable for **material rewards**. The number of units of the product that you want to share as reward."
          },
          "redeemed": {
            "type": "integer",
            "nullable": true,
            "description": "Defines the number of already invoked (successful) reward redemptions.\\t"
          },
          "attributes": {
            "type": "object",
            "description": "These properties are configurable for **material rewards**.",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "The HTTPS URL pointing to the .png or .jpg file."
              },
              "description": {
                "type": "string",
                "description": "An arbitrary string that you can attach to a material reward."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          },
          "parameters": {
            "description": "Defines how the reward is generated.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardType"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "object": {
            "description": "The type of object represented by the JSON. This object stores information about the reward.",
            "enum": [
              "reward"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "metadata",
          "created_at",
          "object"
        ]
      },
      "RewardAssignment": {
        "title": "Reward Assignment",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignmentBase"
          },
          {
            "$ref": "#/components/schemas/RewardAssignmentParameters"
          }
        ],
        "type": "object"
      },
      "RewardAssignmentsCreateCoinRewardRequestBody": {
        "description": "Request body schema for **POST** \`/rewards/{rewardID}/assignments\`.",
        "title": "Pay with Points Reward",
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "The campaign ID of the campaign to which the reward is to be assigned."
          },
          "validation_rules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "campaign"
        ]
      },
      "RewardAssignmentsCreateDigitalOrMaterialRewardRequestBody": {
        "description": "Request body schema for **POST** \`/rewards/{rewardID}/assignments\`.",
        "title": "Digital Or Material Reward",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "The campaign ID of the campaign to which the reward is to be assigned."
          },
          "parameters": {
            "type": "object",
            "description": "Defines the cost of the reward.",
            "required": [
              "loyalty"
            ],
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Defines the equivalent points value of the reward.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "Number of points that will be subtracted from the loyalty card points balance if the reward is redeemed."
                  }
                }
              }
            }
          }
        },
        "required": [
          "campaign",
          "parameters"
        ]
      },
      "SimpleCustomerRequiredObjectType": {
        "type": "object",
        "description": "This is an object representing a customer with limited properties used in Event Tracking endpoints.",
        "title": "Customer Object Required Object Type",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of a customer that is assigned by Voucherify.",
            "example": "cust_CSnYd37MXmrbS19XCrghjBsv"
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments. "
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the customer.",
            "default": "customer"
          }
        },
        "required": [
          "object"
        ]
      },
      "Sku": {
        "title": "SKU Object",
        "type": "object",
        "description": "This is an object representing a product SKU.",
        "properties": {
          "id": {
            "type": "string",
            "example": "sku_0b1621b319d248b79f",
            "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "example": "sku_source_id_4",
            "description": "A unique SKU identifier from your inventory system."
          },
          "product_id": {
            "type": "string",
            "example": "prod_0b15f6b9f650c16990",
            "description": "The parent product's unique ID."
          },
          "sku": {
            "type": "string",
            "nullable": true,
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "nullable": true,
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
          },
          "currency": {
            "type": "string",
            "nullable": true,
            "description": "SKU price currency.",
            "example": "USD"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          },
          "created_at": {
            "type": "string",
            "example": "2022-05-17T10:36:30.187Z",
            "description": "Timestamp representing the date and time when the SKU was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "example": "2022-05-17T10:55:09.137Z",
            "description": "Timestamp representing the date and time when the SKU was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "sku",
            "description": "The type of object represented by JSON. This object stores information about the \`SKU\`.",
            "enum": [
              "sku"
            ]
          }
        },
        "required": [
          "id",
          "product_id",
          "attributes",
          "metadata",
          "created_at",
          "object"
        ]
      },
      "SkusList": {
        "type": "object",
        "description": "Contains information about SKUs.",
        "title": "SKUs List",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of SKUs.",
            "default": "data"
          },
          "skus": {
            "type": "array",
            "description": "A dictionary that contains an array of SKUs.",
            "items": {
              "$ref": "#/components/schemas/Sku"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of SKUs in the product."
          }
        },
        "required": [
          "object",
          "data_ref",
          "skus",
          "total"
        ]
      },
      "StackableValidateRedeemBase": {
        "title": "Stackable Validate Redeem Base",
        "type": "object",
        "properties": {
          "redeemables": {
            "type": "array",
            "minItems": 1,
            "maxItems": 5,
            "description": "An array of redeemables. You can combine \`voucher\`(s) and \`promotion_tier\`(s). Alternatively, send one unique\`promotion_stack\` in the array.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RedeemVoucher"
                },
                {
                  "$ref": "#/components/schemas/RedeemPromotionTier"
                },
                {
                  "$ref": "#/components/schemas/RedeemPromotionStack"
                },
                {
                  "$ref": "#/components/schemas/RedeemGiftCard"
                },
                {
                  "$ref": "#/components/schemas/RedeemLoyaltyCard"
                }
              ]
            }
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "session": {
            "description": "Schema model for session lock object. The session object is required to establish a session between multiple parallel validation and redemption requests. If you only send the type parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a validation session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can attach to a redemption object. It can be useful for storing additional information about the redemption in a structured format."
          }
        },
        "required": [
          "redeemables"
        ]
      },
      "ValidationRule": {
        "title": "Validation Rule",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          },
          {
            "title": "Validation Rule",
            "type": "object",
            "description": "This is an object representing a response validation rule.",
            "properties": {
              "id": {
                "type": "string",
                "example": "val_eR1c41hu0vUU",
                "description": "Unique validation rule ID."
              },
              "created_at": {
                "type": "string",
                "example": "2022-03-23T07:44:00.444Z",
                "description": "Timestamp representing the date and time when the validation rule was created in ISO 8601 format.",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "example": "2022-04-26T08:35:54.960Z",
                "description": "Timestamp representing the date and time when the validation rule was updated in ISO 8601 format.",
                "format": "date-time"
              },
              "assignments_count": {
                "description": "The number of instances the validation rule has been assigned to different types of redeemables.",
                "type": "integer"
              },
              "object": {
                "type": "string",
                "default": "validation_rules",
                "description": "The type of object represented by JSON. This object stores information about the validation rule."
              }
            },
            "required": [
              "id",
              "name",
              "rules",
              "applicable_to",
              "created_at",
              "type",
              "context_type",
              "object"
            ]
          }
        ]
      },
      "ValidationRuleAssignmentsList": {
        "type": "object",
        "description": "Validation Rule Assignments List",
        "title": "Validation Rule Assignments List",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about validation rule assignments.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of validation rule assignments.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of validation rule assignments.",
            "items": {
              "$ref": "#/components/schemas/ValidationRuleAssignment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of validation rule assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRuleBase": {
        "title": "Validation Rule Base",
        "type": "object",
        "description": "This is an object representing a request validation rule.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Custom, unique name for set of validation rules.",
            "example": "Business Validation Rule"
          },
          "rules": {
            "$ref": "#/components/schemas/ValidationRuleRules"
          },
          "error": {
            "type": "object",
            "description": "Contains the error message returned from API when validation / redemption fails to meet requirements of defined rules.",
            "properties": {
              "message": {
                "type": "string",
                "description": "The error message returned from API when validation / redemption fails to meet requirements of defined rules."
              }
            }
          },
          "applicable_to": {
            "type": "object",
            "properties": {
              "excluded": {
                "type": "array",
                "description": "Defines which items are excluded from a discount.",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTo"
                }
              },
              "included": {
                "type": "array",
                "description": "Defines which items are included in a discount.",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTo"
                }
              },
              "included_all": {
                "type": "boolean",
                "description": "Indicates whether all items are included in the discount."
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "expression",
              "basic",
              "advanced",
              "complex"
            ],
            "default": "expression",
            "description": "Type of validation rule."
          },
          "context_type": {
            "type": "string",
            "default": "global",
            "enum": [
              "earning_rule.order.paid",
              "earning_rule.custom_event",
              "earning_rule.customer.segment.entered",
              "earning_rule.customer.tier.joined",
              "earning_rule.customer.tier.left",
              "earning_rule.customer.tier.upgraded",
              "earning_rule.customer.tier.downgraded",
              "earning_rule.customer.tier.prolonged",
              "campaign.discount_coupons",
              "campaign.discount_coupons.discount.apply_to_order",
              "campaign.discount_coupons.discount.apply_to_items",
              "campaign.discount_coupons.discount.apply_to_items_proportionally",
              "campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity",
              "campaign.discount_coupons.discount.apply_to_items_by_quantity",
              "campaign.discount_coupons.discount.fixed.apply_to_items",
              "campaign.discount_coupons.discount.percent.apply_to_items",
              "campaign.gift_vouchers",
              "campaign.gift_vouchers.gift.apply_to_order",
              "campaign.gift_vouchers.gift.apply_to_items",
              "campaign.referral_program",
              "campaign.referral_program.discount.apply_to_order",
              "campaign.referral_program.discount.apply_to_items",
              "campaign.referral_program.discount.apply_to_items_proportionally",
              "campaign.referral_program.discount.apply_to_items_proportionally_by_quantity",
              "campaign.referral_program.discount.apply_to_items_by_quantity",
              "campaign.referral_program.discount.fixed.apply_to_items",
              "campaign.referral_program.discount.percent.apply_to_items",
              "campaign.promotion",
              "campaign.promotion.discount.apply_to_order",
              "campaign.promotion.discount.apply_to_items",
              "campaign.promotion.discount.apply_to_items_proportionally",
              "campaign.promotion.discount.apply_to_items_proportionally_by_quantity",
              "campaign.promotion.discount.apply_to_items_by_quantity",
              "campaign.promotion.discount.fixed.apply_to_items",
              "campaign.promotion.discount.percent.apply_to_items",
              "campaign.loyalty_program",
              "campaign.lucky_draw",
              "voucher.discount_voucher",
              "voucher.discount_voucher.discount.apply_to_order",
              "voucher.discount_voucher.discount.apply_to_items",
              "voucher.discount_voucher.discount.apply_to_items_proportionally",
              "voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity",
              "voucher.discount_voucher.discount.apply_to_items_by_quantity",
              "voucher.discount_voucher.discount.fixed.apply_to_items",
              "voucher.discount_voucher.discount.percent.apply_to_items",
              "voucher.gift_voucher",
              "voucher.gift_voucher.gift.apply_to_order",
              "voucher.gift_voucher.gift.apply_to_items",
              "voucher.loyalty_card",
              "voucher.lucky_draw_code",
              "distribution.custom_event",
              "distribution.order.paid",
              "distribution.order.created",
              "distribution.order.canceled",
              "distribution.order.updated",
              "reward_assignment.pay_with_points",
              "global"
            ],
            "description": "Validation rule context type.  \\n\\n| **Context Type** | **Definition** |\\n|:---|:---|\\n| earning_rule.order.paid |  |\\n| earning_rule.custom_event |  |\\n| earning_rule.customer.segment.entered |  |\\n| campaign.discount_coupons |  |\\n| campaign.discount_coupons.discount.apply_to_order |  |\\n| campaign.discount_coupons.discount.apply_to_items |  |\\n| campaign.discount_coupons.discount.apply_to_items_proportionally |  |\\n| campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity |  |\\n| campaign.discount_coupons.discount.fixed.apply_to_items |  |\\n| campaign.gift_vouchers |  |\\n| campaign.gift_vouchers.gift.apply_to_order |  |\\n| campaign.gift_vouchers.gift.apply_to_items |  |\\n| campaign.referral_program |  |\\n| campaign.referral_program.discount.apply_to_order |  |\\n| campaign.referral_program.discount.apply_to_items |  |\\n| campaign.referral_program.discount.apply_to_items_proportionally |  |\\n| campaign.referral_program.discount.apply_to_items_proportionally_by_quantity |  |\\n| campaign.referral_program.discount.fixed.apply_to_items |  |\\n| campaign.promotion |  |\\n| campaign.promotion.discount.apply_to_order |  |\\n| campaign.promotion.discount.apply_to_items |  |\\n| campaign.promotion.discount.apply_to_items_proportionally |  |\\n| campaign.promotion.discount.apply_to_items_proportionally_by_quantity |  |\\n| campaign.promotion.discount.fixed.apply_to_items |  |\\n| campaign.loyalty_program |  |\\n| campaign.lucky_draw |  |\\n| voucher.discount_voucher |  |\\n| voucher.discount_voucher.discount.apply_to_order |  |\\n| voucher.discount_voucher.discount.apply_to_items |  |\\n| voucher.discount_voucher.discount.apply_to_items_proportionally |  |\\n| voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity |  |\\n| voucher.discount_voucher.discount.fixed.apply_to_items |  |\\n| voucher.gift_voucher |  |\\n| voucher.gift_voucher.gift.apply_to_order |  |\\n| voucher.gift_voucher.gift.apply_to_items |  |\\n| voucher.loyalty_card |  |\\n| voucher.lucky_draw_code |  |\\n| distribution.custom_event |  |\\n| reward_assignment.pay_with_points |  |\\n| global |  |"
          }
        }
      },
      "ValidationsRedeemableInapplicable": {
        "type": "object",
        "title": "Inapplicable Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "INAPPLICABLE"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "result": {
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      },
      "ValidationsRedeemableSkipped": {
        "type": "object",
        "title": "Skipped Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SKIPPED"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "result": {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          }
        }
      },
      "ValidationsValidateAllResponseBody": {
        "title": "Validations Validate All Response Body",
        "description": "Response body schema for POST \`/validations\` where all promotion must be valid",
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "The result of the validation. It takes all of the redeemables into account and returns a \`false\` if at least one redeemable is inapplicable. Returns \`true\` if all redeemables are applicable."
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
                },
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
                },
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
                }
              ]
            }
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "tracking_id": {
            "type": "string",
            "example": "track_VAVo1/z+G2GI2LPw==",
            "description": "Hashed customer source ID."
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "application_mode": {
            "type": "string",
            "enum": [
              "ALL"
            ]
          }
        },
        "required": [
          "valid",
          "redeemables",
          "application_mode"
        ]
      },
      "ValidationsValidatePartialResponseBody": {
        "title": "Validations Validate Partial Response Body",
        "description": "Response body schema for POST \`/validations\` where at least one promotion must be valid",
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "The result of the validation. It takes all of the redeemables into account and returns a \`false\` if at least one redeemable is inapplicable. Returns \`true\` if all redeemables are applicable."
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
                }
              ]
            }
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
                }
              ]
            }
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "tracking_id": {
            "type": "string",
            "example": "track_VAVo1/z+G2GI2LPw==",
            "description": "Hashed customer source ID."
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "application_mode": {
            "type": "string",
            "enum": [
              "PARTIAL"
            ]
          }
        },
        "required": [
          "valid",
          "redeemables",
          "inapplicable_redeemables",
          "application_mode"
        ]
      },
      "Voucher": {
        "title": "Voucher",
        "type": "object",
        "description": "This is an object representing a voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify.",
            "example": "cat_0bb343dee3cdb5ec0c"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "gift": {
            "type": "object",
            "description": "Object representing gift parameters. Child attributes are present only if \`type\` is \`GIFT_VOUCHER\`. Defaults to \`null\`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "balance": {
                "type": "integer",
                "example": 500,
                "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if \`type\` is \`LOYALTY_CARD\`. Defaults to \`null\`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "format": "date",
                "example": "2023-05-30",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date. "
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a \`duration\` of \`PT1H\` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an \`interval\` of \`P2D\` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* voucher\\n- \`false\` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "$ref": "#/components/schemas/VoucherAssets"
          },
          "is_referral_code": {
            "type": "boolean",
            "nullable": true,
            "description": "Flag indicating whether this voucher is a referral code."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of voucher owner."
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is \`voucher\`.",
            "default": "voucher"
          },
          "distributions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is deleted."
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or <!-- [publish voucher](OpenAPI.json/paths/~1publications/post) -->[publish voucher](ref:create-publication) API method. \\n\\n<!-- title: My Table Title -->\\n\\n| Required | Optional |\\n| -------- | :------: |\\n| \`type\`:\`LOYALTY_CARD\` |  \`type\`:\`DISCOUNT_VOUCHER\`   | \\n| \`is_referral_code\`:\`true\`      |    \`type\`:\`GIFT_VOUCHER\`   |\\n",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default \`list\`. To get this list, you need to make a call to the endpoint returned in the \`url\` attribute."
              },
              "count": {
                "type": "integer",
                "example": 0,
                "description": "Publication events counter."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10",
                "description": "The endpoint where this list of publications can be accessed using a GET method. \`/v1/vouchers/{voucher_code}/publications\`"
              }
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1,
                "description": "How many times a voucher has already been redeemed."
              },
              "redeemed_amount": {
                "type": "integer",
                "example": 100000,
                "description": "Total amount redeemed. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 balance is written as 10000."
              },
              "redeemed_points": {
                "type": "integer",
                "example": 100000,
                "description": "Total loyalty points redeemed."
              },
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default \`list\`. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. \`/v1/vouchers/{voucher_code}/redemptions\`"
              }
            }
          }
        }
      },
      "VoucherTransaction": {
        "title": "Voucher Transaction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique transaction ID."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service. In case of a redemption, this value is null."
          },
          "voucher_id": {
            "type": "string",
            "description": "Unique voucher ID."
          },
          "campaign_id": {
            "type": "string",
            "description": "Unqiue campaign ID of the voucher's parent campaign if it is part of campaign that generates bulk codes."
          },
          "source": {
            "type": "string",
            "nullable": true,
            "description": "The channel through which the transaction took place, whether through the API or the the Dashboard. In case of a redemption, this value is null."
          },
          "reason": {
            "type": "string",
            "nullable": true,
            "description": "Reason why the transaction occurred. In case of a redemption, this value is null."
          },
          "type": {
            "description": "Type of transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoyaltyCardTransactionsType"
              }
            ]
          },
          "details": {
            "type": "object",
            "description": "Contains the detailed information about the transaction.",
            "properties": {
              "balance": {
                "type": "object",
                "description": "Contains information on how the balance was affected by the transaction.",
                "properties": {
                  "type": {
                    "type": "string",
                    "pattern": "loyalty_card",
                    "enum": [
                      "loyalty_card"
                    ],
                    "description": "The type of voucher whose balance is being adjusted due to the transaction."
                  },
                  "total": {
                    "type": "integer",
                    "description": "The available points prior to the transaction."
                  },
                  "object": {
                    "type": "string",
                    "pattern": "balance",
                    "enum": [
                      "balance"
                    ],
                    "description": "The type of object represented by the JSON."
                  },
                  "points": {
                    "type": "integer",
                    "description": "The amount of points being used up in the transaction."
                  },
                  "balance": {
                    "type": "integer",
                    "description": "The points balance on the loyalty card after the points in the transaction are subtracted from the loyalty card."
                  },
                  "related_object": {
                    "type": "object",
                    "required": [
                      "id",
                      "type"
                    ],
                    "description": "Defines the resource that is being modified with the values that are returned in the balance object.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Identifies the voucher that is being modified, this is the ID that was assigned by the Voucherify API."
                      },
                      "type": {
                        "type": "string",
                        "pattern": "voucher",
                        "enum": [
                          "voucher"
                        ],
                        "description": "The object being modified, i.e. voucher."
                      }
                    }
                  }
                },
                "required": [
                  "type",
                  "total",
                  "object",
                  "points",
                  "balance",
                  "related_object"
                ]
              },
              "order": {
                "type": "object",
                "description": "Contains information about the original order.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique order ID."
                  },
                  "source_id": {
                    "type": "string",
                    "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
                  }
                },
                "required": [
                  "id",
                  "source_id"
                ]
              },
              "event": {
                "type": "object",
                "description": "Contains information about the event that triggers the point accrual.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique event ID."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of event."
                  }
                },
                "required": [
                  "id",
                  "type"
                ]
              },
              "earning_rule": {
                "type": "object",
                "description": "Contains information about the earning rule.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique earning rule ID."
                  },
                  "source": {
                    "type": "object",
                    "required": [
                      "banner"
                    ],
                    "description": "Contains the custom earning rule name.",
                    "properties": {
                      "banner": {
                        "type": "string",
                        "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "source"
                ]
              },
              "segment": {
                "type": "object",
                "description": "Contains information about the segment.",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "loyalty_tier": {
                "type": "object",
                "description": "Contains information about the loyalty tier.",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "redemption": {
                "type": "object",
                "description": "Contains information about the original redemption.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique redemption ID."
                  }
                },
                "required": [
                  "id"
                ]
              },
              "rollback": {
                "type": "object",
                "description": "Contains information about the redemption rollback.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique redemption rollback ID."
                  }
                },
                "required": [
                  "id"
                ]
              },
              "custom_event": {
                "type": "object",
                "description": "Contains information about the custom event that triggers the point accrual.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique event ID."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of custom event."
                  }
                },
                "required": [
                  "id",
                  "type"
                ]
              },
              "event_schema": {
                "type": "object",
                "description": "Contains information about the custom event metadata schema.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique metadata schema ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "Type of custom event."
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "reward": {
                "type": "object",
                "description": "Contains information about the pay with points reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique reward ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "Reward name."
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "source_voucher": {
                "description": "Contains information on how the balance on the donor loyalty card was affected by the transaction.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SimpleVoucher"
                  }
                ]
              },
              "destination_voucher": {
                "description": "Contains information on how the balance on the receiving loyalty card was affected by the transaction.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SimpleVoucher"
                  }
                ]
              }
            }
          },
          "related_transaction_id": {
            "type": "string",
            "nullable": true,
            "description": "The related transaction ID on the receiving card."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the transaction was created in ISO 8601 format."
          }
        },
        "required": [
          "id",
          "voucher_id",
          "campaign_id",
          "type",
          "details",
          "created_at"
        ]
      },
      "VoucherTransactionsExport": {
        "title": "Voucher Transactions Export",
        "type": "object",
        "description": "This is an object representing an export. \\n\\n Using this endpoint, you can export voucher transactions as a CSV file. This functionality works asynchronously and comes down to the following steps: create an export object and return its id so you can track its status, trigger a CSV file generation, change the status to SCHEDULED when the generation is over, store the file in S3 and change the status to DONE. Now you can download it.\\n\\nWith parameters you can select which fields will be exported. An export request will almost always result in a single file being generated by the system. However, when your volume of data is large, the system may split the results into multiple chunks.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID.",
            "example": "exp_FFfp9o7daWuJqJCKp5xqqli4"
          },
          "object": {
            "type": "string",
            "default": "export",
            "description": "The type of object being represented. This object stores information about the \`export\`.",
            "enum": [
              "export"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2022-04-28T11:23:20.922Z",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.",
            "enum": [
              "SCHEDULED"
            ]
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered.",
            "default": "API"
          },
          "exported_object": {
            "type": "string",
            "description": "The type of exported object.",
            "default": "voucher_transactions",
            "enum": [
              "voucher_transactions"
            ]
          },
          "parameters": {
            "$ref": "#/components/schemas/VoucherTransactionsFilters"
          },
          "result": {
            "type": "object",
            "nullable": true,
            "description": "Contains the URL of the CSV file.",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the CSV file location. It contains the \`token\` used for authorization in the <!-- [Download export](OpenAPI.json/paths/~1exports~1{export_Id}/get) -->[Download export](ref:download-export) method."
              }
            }
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the \`channel\` value is \`WEBSITE\`.",
            "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH"
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "channel",
          "exported_object",
          "parameters"
        ]
      },
      "VoucherTransactionsExportParameters": {
        "description": "List of available fields and filters that can be exported with a gift card or loyalty card transactions export along with the sorting order of the returned data.",
        "title": "Export Transactions",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash \`-\` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_CANCELLATION\` <br> - \`POINTS_REDEMPTION\`<br> - \`POINTS_REFUND\`<br> - \`POINTS_ADDITION\`<br> - \`POINTS_REMOVAL\`<br> - \`POINTS_EXPIRATION\`<br> - \`POINTS_TRANSFER_IN\`<br> - \`POINTS_TRANSFER_OUT\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "type",
                "source_id",
                "reason",
                "balance",
                "amount",
                "created_at",
                "voucher_id",
                "campaign_id",
                "source",
                "details",
                "related_transaction_id"
              ]
            }
          }
        }
      },
      "ApplicableTo": {
        "title": "Applicable To",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "product",
              "sku",
              "products_collection"
            ],
            "description": "This object stores information about the product collection."
          },
          "id": {
            "type": "string",
            "description": "Unique product collection ID assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "The source ID from your inventory system."
          },
          "product_id": {
            "type": "string",
            "description": "Parent product's unique ID assigned by Voucherify."
          },
          "product_source_id": {
            "type": "string",
            "description": "Parent product's source ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "price": {
            "type": "number",
            "description": "New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the price_formula parameter is present in the fixed price definition, this value becomes the fallback value. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price."
          },
          "price_formula": {
            "type": "number",
            "description": "Formula used to calculate the discounted price of an item."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicableToEffect"
              }
            ]
          },
          "quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted per order line item."
          },
          "aggregated_quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted combined across all matched order line items."
          },
          "amount_limit": {
            "type": "integer",
            "description": "Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects:\\n- \`APPLY_TO_ITEMS\` (each item subtotal is discounted equally)\\n- \`APPLY_TO_ITEMS_BY_QUANTITY\` (each unit of matched products has the same discount value)"
          },
          "order_item_indices": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "object",
          "id",
          "strict",
          "effect"
        ]
      },
      "CampaignLoyaltyVoucher": {
        "type": "object",
        "description": "Schema model for a discount voucher.",
        "title": "Campaign Loyalty Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "description": "Type of voucher.",
            "enum": [
              "LOYALTY_CARD"
            ]
          },
          "loyalty_card": {
            "$ref": "#/components/schemas/CampaignLoyaltyCard"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          }
        },
        "required": [
          "type",
          "loyalty_card"
        ]
      },
      "CampaignVoucher": {
        "type": "object",
        "description": "Schema model for a campaign voucher.",
        "title": "Campaign Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher."
          },
          "discount": {
            "description": "Defines the voucher discount type and details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Discount"
              }
            ]
          },
          "gift": {
            "description": "Defines the voucher gift details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the voucher loyalty card details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignLoyaltyCard"
              }
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            },
            "required": [
              "quantity"
            ]
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfigRequiredLengthCharsetPattern"
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          }
        },
        "required": [
          "type",
          "redemption",
          "code_config",
          "is_referral_code"
        ]
      },
      "CampaignsCreateBase": {
        "type": "object",
        "title": "Campaign Create Schema Base",
        "description": "Base body schema for creating a campaign using **POST** \`/campaigns\`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "campaign_type": {
            "type": "string",
            "default": "DISCOUNT_COUPONS",
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \\n\\n- \`AUTO_UPDATE\`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \\n-  \`STATIC\`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign (size of campaign)."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a \`duration\` of \`P24D\` will be valid for a duration of 24 days."
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the promotion tier.",
            "items": {
              "type": "string"
            },
            "maxItems": 1
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the \`category\`.",
            "example": "cat_0b688929a2476386a7"
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          }
        }
      },
      "CampaignsImportVoucherLoyaltyCard": {
        "type": "object",
        "description": "Schema model for a campaign loyalty card.",
        "title": "Campaigns Import Voucher Loyalty Card",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The initial number of points to assign to the loyalty card. This is the current loyalty card score i.e. the number of loyalty points on the card."
          }
        },
        "required": [
          "points"
        ]
      },
      "CampaignsUpdateBase": {
        "type": "object",
        "title": "Campaign Update Schema Base",
        "description": "Base body schema for creating a campaign using **PUT** \`/campaigns\`.",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "unset_metadata_fields": {
            "type": "array",
            "nullable": true,
            "description": "Determine which metadata should be removed from campaign.",
            "items": {
              "type": "string"
            }
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the \`category\`.",
            "example": "cat_0b688929a2476386a7"
          }
        }
      },
      "CampaignsUpdateCouponCampaignBase": {
        "type": "object",
        "title": "Update Coupon Campaign Schema Base",
        "description": "Base body schema for updating a campaign which contains coupon codes using **PUT** \`/campaigns\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateBase"
          },
          {
            "type": "object",
            "title": "",
            "properties": {
              "activity_duration_after_publishing": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a \`duration\` of \`P24D\` will be valid for a duration of 24 days."
              },
              "join_once": {
                "type": "boolean",
                "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
              },
              "auto_join": {
                "type": "boolean",
                "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
              },
              "type": {
                "type": "string",
                "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \\n\\n- \`AUTO_UPDATE\`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \\n-  \`STATIC\`: vouchers need to be manually published.",
                "enum": [
                  "AUTO_UPDATE",
                  "STATIC"
                ]
              }
            }
          }
        ]
      },
      "CreatePublicationBase": {
        "title": "Create Publication Base",
        "type": "object",
        "description": "Create publication",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service.\\nIf \`source_id\` is provided only 1 voucher can be published per request."
          },
          "customer": {
            "description": "Contains information about the customer to whom the publication was directed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          }
        },
        "required": [
          "customer"
        ]
      },
      "CustomerActivityData": {
        "title": "Customer Activity Data",
        "description": "Event data object schema.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConfirmed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerDeleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerReferred"
          },
          {
            "$ref": "#/components/schemas/EventCustomerCustomEvent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSegmentEntered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSegmentLeft"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifySent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifyRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifyFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewarded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardedLoyaltyPoints"
          },
          {
            "$ref": "#/components/schemas/EventCustomerGiftVoucherBalanceAdded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyCardPointsAdded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyCardPointsTransferred"
          },
          {
            "$ref": "#/components/schemas/EventCustomerVouchersLoyaltyPointsExpired"
          },
          {
            "$ref": "#/components/schemas/EventCustomerVoucherDeleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerPublicationSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerPublicationFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerValidationSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerValidationFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionRollbackSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionRollbackFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerConsentsGiven"
          },
          {
            "$ref": "#/components/schemas/EventCustomerConsentsRevoked"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderCanceled"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderFulfilled"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderPaid"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderProcessing"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsPending"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsCompleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsRolledBack"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierUpgraded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierDowngraded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierProlonged"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierExpirationChanged"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierJoined"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierLeft"
          }
        ]
      },
      "CustomerId": {
        "title": "Customer Id",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier of an existing customer."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "customer",
            "enum": [
              "customer"
            ]
          }
        },
        "required": [
          "id",
          "object"
        ]
      },
      "CustomerLoyalty": {
        "title": "Customer Loyalty",
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "description": "Customer's loyalty points."
          },
          "referred_customers": {
            "type": "integer",
            "description": "Total number of customers referred by the customer."
          },
          "campaigns": {
            "type": "object",
            "description": "Contains campaigns with details about point balances and how many customers were referred by the customer."
          }
        },
        "required": [
          "points",
          "referred_customers",
          "campaigns"
        ]
      },
      "CustomerReferrals": {
        "title": "Customer Referrals",
        "type": "object",
        "description": "Summary of customer's referrals, in this case, the customer being the referee, i.e. information about the source of referrals and number of times the customer was referred by other customers.",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of times this customer received a referral, i.e. was referred by another customer."
          },
          "campaigns": {
            "type": "array",
            "description": "Contains an array of campaigns that served as the source of a referral for the customer.",
            "items": {
              "type": "object",
              "description": "Contains information about the source of the referral.",
              "properties": {
                "campaign_id": {
                  "type": "string",
                  "description": "Unique campaign ID, assigned by Voucherify.",
                  "example": "camp_rRsfatlwN7unSeUIJDCYedal"
                },
                "referrer_id": {
                  "type": "string",
                  "example": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                  "description": "Unique referrer ID, assigned by Voucherify. This is the customer ID of a customer that is referring this customer."
                },
                "related_object_id": {
                  "type": "string",
                  "description": "Related object id",
                  "example": "r_0b9d4cc4aa164dd073"
                },
                "related_object_type": {
                  "type": "string",
                  "description": "Related object type, i.e. \`redemption\`."
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-08-30T10:19:39.196Z",
                  "description": "Timestamp representing the date and time when the customer was referred in ISO 8601 format."
                }
              },
              "required": [
                "campaign_id",
                "referrer_id",
                "related_object_id",
                "related_object_type",
                "date"
              ]
            }
          }
        },
        "required": [
          "total",
          "campaigns"
        ]
      },
      "CustomerSummary": {
        "title": "Customer Summary",
        "type": "object",
        "properties": {
          "redemptions": {
            "$ref": "#/components/schemas/CustomerSummaryRedemptions"
          },
          "orders": {
            "$ref": "#/components/schemas/CustomerSummaryOrders"
          }
        },
        "required": [
          "redemptions",
          "orders"
        ]
      },
      "Discount": {
        "title": "Discount",
        "type": "object",
        "description": "Contains information about discount.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DiscountAmount"
          },
          {
            "$ref": "#/components/schemas/DiscountUnit"
          },
          {
            "$ref": "#/components/schemas/DiscountUnitMultiple"
          },
          {
            "$ref": "#/components/schemas/DiscountPercent"
          },
          {
            "$ref": "#/components/schemas/DiscountFixed"
          }
        ]
      },
      "DiscountCouponsCampaignVoucher": {
        "title": "Object representing voucher property for Discount Coupons Campaign",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          }
        },
        "required": [
          "type",
          "discount"
        ]
      },
      "EarningRuleEvent": {
        "title": "Earning Rule Event",
        "type": "string",
        "enum": [
          "order.paid",
          "customer.segment.entered",
          "custom_event",
          "customer.loyalty.tier.upgraded",
          "customer.loyalty.tier.downgraded",
          "customer.loyalty.tier.prolonged",
          "customer.loyalty.tier.joined",
          "customer.loyalty.tier.left"
        ]
      },
      "EarningRuleFixed": {
        "title": "Define fixed amount of points",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FIXED"
            ],
            "description": "The number of points to be added to the loyalty card."
          },
          "points": {
            "type": "integer",
            "description": "Defines how the points will be added to the loyalty card. FIXED adds a fixed number of points."
          }
        }
      },
      "EarningRuleProportional": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrder"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItems"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalCustomerMetadata"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalCustomEvent"
          }
        ],
        "title": "Calculate points proportionally"
      },
      "Error": {
        "title": "Error Object",
        "type": "object",
        "description": "Error details",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "resource_id": {
            "type": "string",
            "description": "Unique resource ID that can be used in another endpoint to get more details.",
            "example": "rf_0c5d710a87c8a31f86"
          },
          "resource_type": {
            "type": "string",
            "description": "The resource type.",
            "example": "voucher"
          }
        },
        "required": [
          "code",
          "key",
          "message",
          "details",
          "request_id"
        ]
      },
      "ExportCustomer": {
        "title": "Export Customers",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          }
        ]
      },
      "ExportCustomerFields": {
        "type": "string",
        "enum": [
          "name",
          "id",
          "description",
          "email",
          "source_id",
          "created_at",
          "address_city",
          "address_state",
          "address_line_1",
          "address_line_2",
          "address_country",
          "address_postal_code",
          "redemptions_total_redeemed",
          "redemptions_total_failed",
          "redemptions_total_succeeded",
          "redemptions_total_rolled_back",
          "redemptions_total_rollback_failed",
          "redemptions_total_rollback_succeeded",
          "orders_total_amount",
          "orders_total_count",
          "orders_average_amount",
          "orders_last_order_amount",
          "orders_last_order_date",
          "loyalty_points",
          "loyalty_referred_customers",
          "updated_at",
          "phone",
          "birthday",
          "metadata",
          "birthdate"
        ],
        "title": "Export Customer Fields"
      },
      "ExportCustomerFilters": {
        "title": "Export Customer Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "name": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "description": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "email": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_city": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_state": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_line_1": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_line_2": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_country": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_postal_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_redeemed": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_failed": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_succeeded": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_rolled_back": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_rollback_failed": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_rollback_succeeded": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_total_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_total_count": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_average_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_last_order_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_last_order_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_points": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_referred_customers": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "updated_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "phone": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "birthday": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "birthdate": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportCustomerOrder": {
        "title": "Export Customer Order",
        "type": "string",
        "enum": [
          "name",
          "-name",
          "id",
          "-id",
          "description",
          "-description",
          "email",
          "-email",
          "source_id",
          "-source_id",
          "created_at",
          "-created_at",
          "address_city",
          "-address_city",
          "address_state",
          "-address_state",
          "address_line_1",
          "-address_line_1",
          "address_line_2",
          "-address_line_2",
          "address_country",
          "-address_country",
          "address_postal_code",
          "-address_postal_code",
          "redemptions_total_redeemed",
          "-redemptions_total_redeemed",
          "redemptions_total_failed",
          "-redemptions_total_failed",
          "redemptions_total_succeeded",
          "-redemptions_total_succeeded",
          "redemptions_total_rolled_back",
          "-redemptions_total_rolled_back",
          "redemptions_total_rollback_failed",
          "-redemptions_total_rollback_failed",
          "redemptions_total_rollback_succeeded",
          "-redemptions_total_rollback_succeeded",
          "orders_total_amount",
          "-orders_total_amount",
          "orders_total_count",
          "-orders_total_count",
          "orders_average_amount",
          "-orders_average_amount",
          "orders_last_order_amount",
          "-orders_last_order_amount",
          "orders_last_order_date",
          "-orders_last_order_date",
          "loyalty_points",
          "-loyalty_points",
          "loyalty_referred_customers",
          "-loyalty_referred_customers",
          "updated_at",
          "-updated_at",
          "phone",
          "-phone",
          "birthday",
          "-birthday",
          "metadata",
          "-metadata",
          "birthdate",
          "-birthdate"
        ]
      },
      "ExportOrder": {
        "title": "Export Orders",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "ExportPointsExpiration": {
        "title": "Export Points Expiration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          }
        ]
      },
      "ExportPointsExpirationFields": {
        "title": "Export Points Expiration Fields",
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "points",
          "status",
          "expires_at"
        ]
      },
      "ExportPointsExpirationFilters": {
        "title": "Export Points Expiration Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "points": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "status": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "expires_at": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportPointsExpirationOrder": {
        "title": "Export Points Expiration Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "campaign_id",
          "-campaign_id",
          "voucher_id",
          "-voucher_id",
          "points",
          "-points",
          "status",
          "-status",
          "expires_at",
          "-expires_at"
        ]
      },
      "ExportPublication": {
        "title": "Export Publication",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          }
        ]
      },
      "ExportPublicationFields": {
        "title": "Export Publication Fields",
        "type": "string",
        "enum": [
          "voucher_code",
          "customer_id",
          "customer_source_id",
          "date",
          "channel",
          "campaign",
          "is_winner",
          "metadata"
        ]
      },
      "ExportPublicationFilters": {
        "title": "Export Publication Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "voucher_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "channel": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "is_winner": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportPublicationOrder": {
        "title": "Export Publication Order",
        "type": "string",
        "enum": [
          "voucher_code",
          "-voucher_code",
          "customer_id",
          "-customer_id",
          "customer_source_id",
          "-customer_source_id",
          "date",
          "-date",
          "channel",
          "-channel",
          "campaign",
          "-campaign",
          "is_winner",
          "-is_winner",
          "metadata",
          "-metadata"
        ]
      },
      "ExportRedemption": {
        "title": "Export Redemption",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          }
        ]
      },
      "ExportRedemptionFields": {
        "title": "Export Redemption Fields",
        "type": "string",
        "enum": [
          "id",
          "object",
          "date",
          "voucher_code",
          "campaign",
          "promotion_tier_id",
          "customer_id",
          "customer_source_id",
          "customer_name",
          "tracking_id",
          "order_amount",
          "gift_amount",
          "loyalty_points",
          "result",
          "failure_code",
          "failure_message",
          "metadata"
        ]
      },
      "ExportRedemptionFilters": {
        "title": "Export Redemption Filters",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "object": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "promotion_tier_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_name": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "tracking_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "order_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "gift_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_points": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "result": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "failure_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "failure_message": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportRedemptionOrder": {
        "title": "Export Redemption Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "object",
          "-object",
          "date",
          "-date",
          "voucher_code",
          "-voucher_code",
          "campaign",
          "-campaign",
          "promotion_tier_id",
          "-promotion_tier_id",
          "customer_id",
          "-customer_id",
          "customer_source_id",
          "-customer_source_id",
          "customer_name",
          "-customer_name",
          "tracking_id",
          "-tracking_id",
          "order_amount",
          "-order_amount",
          "gift_amount",
          "-gift_amount",
          "loyalty_points",
          "-loyalty_points",
          "result",
          "-result",
          "failure_code",
          "-failure_code",
          "failure_message",
          "-failure_message",
          "metadata",
          "-metadata"
        ]
      },
      "ExportVoucher": {
        "title": "Export Voucher",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          }
        ]
      },
      "ExportVoucherFields": {
        "title": "Export Voucher Fields",
        "type": "string",
        "enum": [
          "code",
          "voucher_type",
          "value",
          "discount_type",
          "campaign",
          "category",
          "start_date",
          "expiration_date",
          "gift_balance",
          "loyalty_balance",
          "redemption_quantity",
          "redemption_count",
          "active",
          "qr_code",
          "bar_code",
          "metadata",
          "id",
          "is_referral_code",
          "created_at",
          "updated_at",
          "validity_timeframe_interval",
          "validity_timeframe_duration",
          "validity_day_of_week",
          "discount_amount_limit",
          "campaign_id",
          "additional_info",
          "customer_id",
          "discount_unit_type",
          "discount_unit_effect",
          "customer_source_id"
        ]
      },
      "ExportVoucherFilters": {
        "title": "Export Voucher Filters",
        "type": "object",
        "properties": {
          "junction": {
            "description": "Filter by conditions set on the junction parameter indicating how the conditions should be accounted for in the query. An AND is an all-inclusive logical operator, meaning the AND operator displays a record if ALL the conditions separated by AND are TRUE, while an OR operator displays a record if ANY of the conditions separated by OR is TRUE.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Junction"
              }
            ]
          },
          "code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "value": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "category": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "start_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "gift_balance": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_balance": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemption_quantity": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemption_count": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "active": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "qr_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "bar_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "is_referral_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "updated_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_timeframe_interval": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_timeframe_duration": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_day_of_week": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_amount_limit": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "additional_info": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_unit_type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_unit_effect": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportVoucherOrder": {
        "title": "Export Voucher Order",
        "type": "string",
        "enum": [
          "code",
          "-code",
          "voucher_type",
          "-voucher_type",
          "value",
          "-value",
          "discount_type",
          "-discount_type",
          "campaign",
          "-campaign",
          "category",
          "-category",
          "start_date",
          "-start_date",
          "expiration_date",
          "-expiration_date",
          "gift_balance",
          "-gift_balance",
          "loyalty_balance",
          "-loyalty_balance",
          "redemption_quantity",
          "-redemption_quantity",
          "redemption_count",
          "-redemption_count",
          "active",
          "-active",
          "qr_code",
          "-qr_code",
          "bar_code",
          "-bar_code",
          "metadata",
          "-metadata",
          "id",
          "-id",
          "is_referral_code",
          "-is_referral_code",
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "validity_timeframe_interval",
          "-validity_timeframe_interval",
          "validity_timeframe_duration",
          "-validity_timeframe_duration",
          "validity_day_of_week",
          "-validity_day_of_week",
          "discount_amount_limit",
          "-discount_amount_limit",
          "campaign_id",
          "-campaign_id",
          "additional_info",
          "-additional_info",
          "customer_id",
          "-customer_id",
          "discount_unit_type",
          "-discount_unit_type",
          "discount_unit_effect",
          "-discount_unit_effect",
          "customer_source_id",
          "-customer_source_id"
        ]
      },
      "ExportVoucherTransactionsExpiration": {
        "title": "Export Vouchers Transactions Expiration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationBase"
          }
        ]
      },
      "ExportVoucherTransactionsFields": {
        "title": "Export Voucher Transactions Fields",
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "type",
          "source_id",
          "reason",
          "source",
          "balance",
          "amount",
          "related_transaction_id",
          "created_at",
          "details"
        ]
      },
      "ExportVoucherTransactionsFilters": {
        "title": "Export Voucher Transactions Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "reason": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "balance": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "related_transaction_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "details": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportVoucherTransactionsOrder": {
        "title": "Export Voucher Transactions Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "campaign_id",
          "-campaign_id",
          "voucher_id",
          "-voucher_id",
          "type",
          "-type",
          "source_id",
          "-source_id",
          "reason",
          "-reason",
          "source",
          "-source",
          "balance",
          "-balance",
          "amount",
          "-amount",
          "related_transaction_id",
          "-related_transaction_id",
          "created_at",
          "-created_at",
          "details",
          "-details"
        ]
      },
      "FieldConditions": {
        "title": "Field Conditions",
        "type": "object",
        "properties": {
          "conditions": {
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FiltersCondition"
              }
            ]
          }
        }
      },
      "Gift": {
        "title": "Gift",
        "type": "object",
        "additionalProperties": false,
        "description": "Contains current gift card balance information.",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "balance": {
            "type": "number",
            "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "effect": {
            "type": "string",
            "description": "Defines how the credits are applied to the customer's order.",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ]
          }
        },
        "required": [
          "amount",
          "balance"
        ]
      },
      "GiftCampaignVoucher": {
        "type": "object",
        "description": "Schema model for a discount voucher.",
        "title": "Discount Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "GIFT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "GIFT_VOUCHER"
            ]
          },
          "gift": {
            "$ref": "#/components/schemas/Gift"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          }
        },
        "required": [
          "type",
          "gift"
        ]
      },
      "GiveawayCampaignVoucher": {
        "title": "Object representing voucher property for Giveaway Campaign",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          }
        },
        "required": [
          "type",
          "discount"
        ]
      },
      "ListPublicationsItemBase": {
        "title": "List Publications Item Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pub_BbjAXnmm8e0SIm3zG8qvvFCP0KuLywtp",
            "description": "Unique publication ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "enum": [
              "publication"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the \`publication\`."
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-23T09:57:00.434Z",
            "description": "Timestamp representing the date and time when the publication was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of the customer receiving the publication."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          },
          "channel": {
            "type": "string",
            "description": "How the publication was originated. It can be your own custom channel or an example value provided here."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. "
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "vouchers_id": {
            "type": "array",
            "description": "Contains the unique internal voucher ID that was assigned by Voucherify.",
            "items": {
              "type": "string",
              "example": "v_Bw3qWZWv47yb1Onra8F2LlFI1enLakfA"
            }
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "customer_id",
          "metadata",
          "channel",
          "customer",
          "vouchers_id"
        ]
      },
      "ListPublicationsItemVoucher": {
        "type": "object",
        "title": "List Publications Item Voucher",
        "properties": {
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "voucher"
            ]
          },
          "campaign": {
            "description": "Campaign name",
            "type": "string"
          },
          "gift": {
            "description": "Gift object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object"
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          }
        },
        "required": [
          "code",
          "object",
          "campaign"
        ]
      },
      "LoyaltyCardTransactionsType": {
        "title": "LoyaltyCardTransactionsType",
        "type": "string",
        "enum": [
          "POINTS_ACCRUAL",
          "POINTS_CANCELLATION",
          "POINTS_REDEMPTION",
          "POINTS_REFUND",
          "POINTS_ADDITION",
          "POINTS_REMOVAL",
          "POINTS_EXPIRATION",
          "POINTS_TRANSFER_IN",
          "POINTS_TRANSFER_OUT"
        ]
      },
      "LoyaltyTierExpiration": {
        "title": "Loyalty Tier Expiration",
        "description": "Defines loyalty tier expiration date.",
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "campaign_id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_rRsfatlwN7unSeUIJDCYedal"
          },
          "tier_id": {
            "type": "string",
            "description": "Unique tier ID, assigned by Voucherify."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the loyalty tier starts to be active in ISO 8601 format. Loyalty tier is inactive before this date."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration timestamp defines when the loyalty tier expires in ISO 8601 format. Loyalty tier is inactive after this date."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the loyalty tier was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the loyalty tier was updated in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "customer_id",
          "campaign_id",
          "tier_id",
          "created_at"
        ]
      },
      "LoyaltyTiersExpirationAll": {
        "title": "Loyalty Tiers Expiration",
        "type": "object",
        "description": "Defines the Loyalty Tiers Expiration.",
        "properties": {
          "qualification_type": {
            "type": "string",
            "enum": [
              "BALANCE",
              "POINTS_IN_PERIOD"
            ],
            "description": "Tier qualification.   \\n\\n\`BALANCE\`: Points balance is based on the customer's current points balance. Customers qualify for the tier if their points balance is in the points range of the tier. \\n \`POINTS_IN_PERIOD\`: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold."
          },
          "qualification_period": {
            "type": "string",
            "description": "Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.    \\n\\n| **Period** | **Definition** |\\n|:---|:---|\\n| **Calendar Month** | Points collected in one calendar month<br>January, February, March, etc. |\\n| **Calendar Quarter** | Points collected in the quarter<br>- January - March<br>- April - June<br>- July - September<br>- October - December |\\n| **Calendar Half-year** | Points collected in the half-year<br>- January - June<br>- July - December |\\n| **Calendar Year** | Points collected in one calendar year<br>January - December |",
            "enum": [
              "MONTH",
              "QUARTER",
              "HALF_YEAR",
              "YEAR"
            ]
          },
          "start_date": {
            "type": "object",
            "description": "Defines the conditions for the start date of the tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IMMEDIATE",
                  "NEXT_PERIOD"
                ],
                "description": "What triggers the tier to be valid for a customer.    \\n\`IMMEDIATE\`: After reaching the minimum required points. \\n\`NEXT_PERIOD\`: When the next qualification period starts."
              }
            },
            "required": [
              "type"
            ]
          },
          "expiration_date": {
            "type": "object",
            "description": "Defines the conditions for the expiration date of a tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "END_OF_PERIOD",
                  "END_OF_NEXT_PERIOD",
                  "BALANCE_DROP",
                  "CUSTOM"
                ],
                "description": "What triggers the tier to expire for a customer.    \\n\`END_OF_PERIOD\`: Expire tier at the end of the period.    \\n\`END_OF_NEXT_PERIOD\`:  Expire tier at the end of the next period. \\n \`BALANCE_DROP\`: Tier expires when the points balance drops below the required range of the tier. \\n \`CUSTOM\`: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier."
              },
              "extend": {
                "type": "string",
                "description": "Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of \`P3M\` will be valid for an additional duration of 3 months and a tier with a duration of \`P1D\` will be valid for an additional duration of 1 day."
              },
              "rounding": {
                "description": "Defines the rounding mechanism for tier expiration.",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "MONTH",
                      "QUARTER",
                      "HALF_YEAR",
                      "YEAR",
                      "CUSTOM"
                    ],
                    "description": "This mechanism describes a custom rounding for the expiration date."
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "START",
                      "END"
                    ],
                    "description": "This mechanism describes a rounding strategy for the expiration date."
                  },
                  "unit": {
                    "type": "string",
                    "description": "Defines the type of unit of time in which the rounding period is counted.",
                    "enum": [
                      "MONTH"
                    ]
                  },
                  "value": {
                    "type": "integer",
                    "description": "Value for the unit of time that the rounding applies to. Units for this parameter are defined by the \`rounding.unit\` parameter.    \\n- \`0\`: January\\n- \`1\`: February\\n- \`2\`: March\\n- \`3\`: April\\n- \`4\`: May\\n- \`5\`: June\\n- \`6\`: July\\n- \`7\`: August\\n- \`8\`: September\\n- \`9\`: October\\n- \`10\`: November\\n- \`11\`: December"
                  }
                }
              }
            },
            "required": [
              "type",
              "extend"
            ]
          }
        },
        "required": [
          "qualification_type",
          "start_date",
          "expiration_date"
        ]
      },
      "LuckyDraw": {
        "type": "object",
        "title": "Lucky Draw",
        "description": "Object for defining detailed information about lucky draw should be applied",
        "properties": {
          "winners_count": {
            "description": "It represents the total number of winners in a lucky draw.",
            "minimum": 1,
            "type": "string"
          },
          "unique_winners_per_draw": {
            "description": "It indicates whether each winner in a draw is unique or not.",
            "type": "string"
          },
          "unique_winners": {
            "description": "Specifies whether each participant can win only once across multiple draws.",
            "type": "string"
          }
        }
      },
      "OrderCalculatedBase": {
        "title": "Order Response Base",
        "type": "object",
        "additionalProperties": false,
        "description": "Order information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the order was last updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order."
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied in a particular request.  \\n\`sum(items, i => i.applied_discount_amount)\`"
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \\n\`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\`"
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/OrderItemCalculated"
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "order"
            ]
          },
          "redemptions": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "object"
        ]
      },
      "OrderItem": {
        "type": "object",
        "title": "Order Item",
        "properties": {
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "initial_quantity": {
            "type": "integer",
            "description": "A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items' quantity."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "\\nSum of all order-item-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "product": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the product and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s product ID (if it is different than Voucherify's product ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a product. It can be useful for storing additional information about the product in a structured format."
              },
              "price": {
                "type": "number",
                "description": "Product price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "sku": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related SKU.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s SKU ID (if it is different than Voucherify's SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "sku": {
                "type": "string",
                "description": "The SKU name."
              },
              "price": {
                "type": "number",
                "description": "SKU price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "ProductWithoutSkus": {
        "title": "Product without Skus Object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID assigned by Voucherify.",
            "example": "prod_0b1da8105693710357"
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "example": "productSourceID16",
            "description": "Unique product source ID."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "nullable": true,
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the product was created in ISO 8601 format.",
            "example": "2022-05-23T06:52:55.008Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the product was updated in ISO 8601 format.",
            "example": "2022-05-23T09:24:07.405Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about the product.",
            "default": "product",
            "enum": [
              "product"
            ]
          }
        },
        "required": [
          "id",
          "attributes",
          "metadata",
          "object"
        ]
      },
      "PromotionTierCreateParams": {
        "type": "object",
        "description": "This is an object representing a promotion tier create params. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "title": "Promotion Tier Create Params",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "$ref": "#/components/schemas/Discount"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the promotion tier.",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* promotion tier\\n- \`false\` indicates an *inactive* promotion tier"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "category": {
            "type": "string",
            "description": "Assign category to the promotion tier."
          },
          "category_id": {
            "type": "string",
            "description": "Instead of using the category name, you can alternatively assign a new category to a promotion tier using a unique category ID, i.e. \`cat_0c9da30e7116ba6bba\`.",
            "example": "cat_0c9da30e7116ba6bba"
          }
        },
        "required": [
          "name"
        ]
      },
      "PublicationsCreateBaseResponseBody": {
        "title": "Publications Create Base Response Body",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pub_BbjAXnmm8e0SIm3zG8qvvFCP0KuLywtp",
            "description": "Unique publication ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "enum": [
              "publication"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the \`publication\`."
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-23T09:57:00.434Z",
            "description": "Timestamp representing the date and time when the publication was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of the customer receiving the publication."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          },
          "channel": {
            "type": "string",
            "description": "How the publication was originated. It can be your own custom channel or an example value provided here.",
            "enum": [
              "API"
            ]
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. "
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS"
            ],
            "description": "Status of the publication attempt."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "vouchers_id": {
            "type": "array",
            "description": "Contains the unique internal voucher ID that was assigned by Voucherify.",
            "items": {
              "type": "string",
              "example": "v_Bw3qWZWv47yb1Onra8F2LlFI1enLakfA"
            }
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "customer_id",
          "metadata",
          "channel",
          "result",
          "customer",
          "vouchers_id"
        ]
      },
      "QualificationsFiltersCondition": {
        "title": "Qualifications Filters Condition\\n",
        "type": "object",
        "properties": {
          "$is": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_not": {
            "$ref": "#/components/schemas/Any"
          },
          "$has_value": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_unknown": {
            "$ref": "#/components/schemas/Any"
          },
          "$in": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_in": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "QualificationsRedeemable": {
        "title": "Combined response of redeemable object and multiple redeemables within",
        "allOf": [
          {
            "$ref": "#/components/schemas/QualificationsRedeemableBase"
          },
          {
            "type": "object",
            "title": "",
            "properties": {
              "redeemables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QualificationsRedeemableBase"
                }
              }
            }
          }
        ]
      },
      "RedeemGiftCard": {
        "title": "Redeem Gift Card",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedeemVoucher"
          },
          {
            "type": "object",
            "properties": {
              "gift": {
                "type": "object",
                "description": "Contains information on the number of gift card credits that the customer wants to apply to the order.",
                "properties": {
                  "credits": {
                    "type": "integer",
                    "description": "The number of credits that the user wants to use from the gift card to fulfill the order. The value of credits cannot be higher than the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
                  }
                }
              }
            }
          }
        ]
      },
      "RedeemLoyaltyCard": {
        "title": "Redeem Loyalty Card",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedeemVoucher"
          },
          {
            "type": "object",
            "properties": {
              "reward": {
                "type": "object",
                "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward.",
                    "example": "rew_EPx1hCTpqzF0HW1z9NKckZH4"
                  },
                  "points": {
                    "type": "integer",
                    "description": "The number of loyalty points that the user wants to spend in order to fulfill the order using a **pay with points** reward. The number of points cannot be higher than the current balance on the loyalty card."
                  }
                }
              }
            }
          }
        ]
      },
      "RedeemPromotionStack": {
        "title": "Redeem Promotion Stack",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "enum": [
              "promotion_stack"
            ],
            "default": "promotion_stack"
          },
          "id": {
            "type": "string",
            "description": "Promotion stack unique id, such as: stack_KxSD0GahLUg9ULB6TseGfUHJ"
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedeemPromotionTier": {
        "title": "Redeem Promotion Tier",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "enum": [
              "promotion_tier"
            ],
            "default": "promotion_tier"
          },
          "id": {
            "type": "string",
            "description": "Promotion tier unique id, such as: promo_Mwy9XpA0TLctSGriM5kum0qp"
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedeemVoucher": {
        "title": "Redeem Voucher",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "enum": [
              "voucher"
            ],
            "default": "voucher"
          },
          "id": {
            "type": "string",
            "description": "Redeemable code."
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedemptionRewardResult": {
        "title": "Redemption Reward Result",
        "type": "object",
        "properties": {
          "reward": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Reward"
              }
            ]
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "assignment_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique reward assignment ID assigned by Voucherify."
          },
          "voucher": {
            "nullable": true,
            "description": "Defines of the voucher.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "product": {
            "nullable": true,
            "description": "Defines of the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "sku": {
            "nullable": true,
            "description": "Defines of the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Sku"
              }
            ]
          },
          "loyalty_tier_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique loyalty tier ID assigned by Voucherify."
          }
        },
        "required": [
          "reward",
          "customer",
          "assignment_id",
          "voucher",
          "product",
          "sku",
          "loyalty_tier_id"
        ]
      },
      "ReferralCampaignVoucher": {
        "title": "Object representing voucher property for Referal Program",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          }
        },
        "required": [
          "type",
          "discount",
          "is_referral_code"
        ]
      },
      "ReferralProgram": {
        "title": "Referral Program",
        "description": "Defines the referee reward and the way a referral is triggered. Context: \`REFERRAL_PROGRAM\`.",
        "type": "object",
        "properties": {
          "conversion_event_type": {
            "type": "string",
            "enum": [
              "redemption",
              "custom_event"
            ],
            "description": "Define how a referral is triggered."
          },
          "custom_event": {
            "type": "object",
            "description": "Contains details about the custom event.",
            "properties": {
              "id": {
                "type": "string",
                "example": "ms_Ll9enAm2BCN0M1s4VxWobLFM",
                "description": "Unique custom event ID."
              },
              "name": {
                "type": "string",
                "description": "Custom event name."
              }
            }
          },
          "referee_reward": {
            "type": "object",
            "description": "Defines the referee reward.",
            "properties": {
              "related_object_parent": {
                "type": "object",
                "description": "Details of the resource from which the reward originates.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                    "description": "Unique ID of the reward source."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the reward source."
                  },
                  "object": {
                    "type": "string",
                    "enum": [
                      "CAMPAIGN"
                    ],
                    "description": "Type of resource represented by the source of the reward."
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "DISCOUNT_VOUCHER",
                  "LOYALTY_CARD",
                  "GIFT_VOUCHER",
                  "LUCKY_DRAW_CODE"
                ],
                "description": "Type of reward."
              },
              "amount": {
                "type": "string",
                "description": "Define the number of \`points\` to add to a loyalty card or \`credits\` to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              }
            }
          }
        }
      },
      "Referrer": {
        "title": "Referrer",
        "allOf": [
          {
            "$ref": "#/components/schemas/Customer"
          }
        ]
      },
      "ReferrerId": {
        "title": "Referrer Id",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerId"
          }
        ]
      },
      "ReferrerWithSummaryLoyaltyReferrals": {
        "title": "Referrer With Summary Loyalty Referrals",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "RewardAssignmentBase": {
        "title": "Reward Assignment Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "rewa_PbIRoMXpwe5QhobW4JKu0VjH",
            "description": "Unique reward assignment ID, assigned by Voucherify."
          },
          "reward_id": {
            "type": "string",
            "description": "Associated reward ID.",
            "example": "rew_C7wS9eHFDN4CIbXI5PpLSkGY"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward assignment was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward assignment was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the reward assignment.",
            "enum": [
              "reward_assignment"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Related object ID to which the reward was assigned.",
            "example": "camp_wciTvaOfYmAa3EmIIW3QpXXZ"
          },
          "related_object_type": {
            "type": "string",
            "description": "Related object type to which the reward was assigned.",
            "enum": [
              "campaign"
            ]
          }
        },
        "required": [
          "related_object_id",
          "related_object_type",
          "id",
          "reward_id",
          "created_at",
          "object"
        ]
      },
      "RewardAssignmentParameters": {
        "title": "Digital or Material Reward - Parameters",
        "type": "object",
        "properties": {
          "parameters": {
            "description": "Defines the cost of the reward.",
            "type": "object",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Defines the equivalent points value of the reward.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "The number of points required to redeem the reward."
                  }
                }
              }
            },
            "required": [
              "loyalty"
            ]
          }
        }
      },
      "RewardType": {
        "title": "Reward type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RewardTypeCampaign"
          },
          {
            "$ref": "#/components/schemas/RewardTypeCoin"
          },
          {
            "$ref": "#/components/schemas/RewardTypeMaterial"
          }
        ]
      },
      "Session": {
        "type": "object",
        "title": "Session",
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "LOCK"
            ],
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCK"
            ],
            "description": "This parameter is required to establish a new session. The session locks the redemption quantity by 1."
          },
          "ttl": {
            "type": "number",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter."
          },
          "ttl_unit": {
            "type": "string",
            "enum": [
              "DAYS",
              "HOURS",
              "MICROSECONDS",
              "MILLISECONDS",
              "MINUTES",
              "NANOSECONDS",
              "SECONDS"
            ],
            "description": "Defines the type of unit in which the session time is counted."
          }
        }
      },
      "SimpleCustomer": {
        "type": "object",
        "title": "Simple Customer",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of an existing customer that will be linked to redemption in this request."
          },
          "source_id": {
            "type": "string",
            "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "customer",
            "enum": [
              "customer"
            ]
          }
        }
      },
      "SimpleSegment": {
        "title": "Simple Segment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique segment ID.",
            "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
          },
          "name": {
            "type": "string",
            "description": "Segment name."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the ID.",
            "default": "segment",
            "enum": [
              "segment"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "object"
        ]
      },
      "SimpleVoucher": {
        "type": "object",
        "title": "Simple Voucher",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier that represents the voucher assigned by Voucherify."
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "gift": {
            "description": "Gift object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object"
          },
          "type": {
            "type": "string",
            "description": "Type of the object.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "campaign": {
            "description": "Campaign object",
            "type": "object"
          },
          "campaign_id": {
            "type": "string",
            "description": "Campaign unique ID."
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of campaign owner."
          },
          "referrer_id": {
            "type": "string",
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "voucher"
            ]
          }
        },
        "required": [
          "valid",
          "code",
          "applicable_to",
          "inapplicable_to",
          "metadata",
          "tracking_id"
        ]
      },
      "SkuWithProduct": {
        "title": "SKU with parent product.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          },
          {
            "type": "object",
            "properties": {
              "product": {
                "$ref": "#/components/schemas/ProductWithoutSkus"
              }
            }
          }
        ]
      },
      "SkusListForProduct": {
        "type": "object",
        "description": "Contains information about child SKUs.",
        "title": "Skus List For Product",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of SKUs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of SKUs.",
            "items": {
              "$ref": "#/components/schemas/Sku"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of SKUs in the product."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRuleAssignment": {
        "title": "Validation Rule Assignment",
        "type": "object",
        "description": "This is an object representing a validation rule assignment.",
        "properties": {
          "id": {
            "type": "string",
            "example": "asgm_74F7QZoYbUoljwQO",
            "description": "Validation rule assignment ID."
          },
          "rule_id": {
            "type": "string",
            "example": "val_4j7DCRm2IS59",
            "description": "Validation rule ID."
          },
          "related_object_id": {
            "type": "string",
            "example": "v_JtWunK6jUo7X2qOFj0SyRHq4p9tgENlT",
            "description": "The resource ID to which the validation rule was assigned."
          },
          "related_object_type": {
            "type": "string",
            "description": "The type of resource to which the validation rule was assigned.",
            "enum": [
              "voucher",
              "campaign",
              "earning_rule",
              "reward_assignment",
              "promotion_tier",
              "distribution"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-17T08:18:15.085Z",
            "description": "Timestamp representing the date and time when the validation rule assignment was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "validation_rules_assignment",
            "description": "The type of object represented by the ID.",
            "enum": [
              "validation_rules_assignment"
            ]
          }
        },
        "required": [
          "id",
          "rule_id",
          "related_object_id",
          "related_object_type",
          "created_at",
          "object"
        ]
      },
      "ValidationRuleRules": {
        "title": "Validation Rule Rules",
        "type": "object",
        "description": "Contains all the rule definitions for the validation rule. It is a set of key value pairs representing the rules and logic between the rules. The keys are numbered consequtively beginning from \`1\`. The values are objects containing the rule conditions."
      },
      "ValidationRulesAssignmentsList": {
        "title": "Validation Rules Assignments List",
        "description": "List of Validation Rules Assignments",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about validation rules assignments."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of validation rules assignments."
          },
          "data": {
            "type": "array",
            "description": "Contains array of validation rules assignments.",
            "items": {
              "$ref": "#/components/schemas/BusValRuleAssignment"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of validation rules assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationsRedeemableApplicable": {
        "type": "object",
        "title": "Applicable Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "APPLICABLE"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "applicable_to": {
            "$ref": "#/components/schemas/ApplicableTo"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/InapplicableTo"
          },
          "result": {
            "description": "Specifies the redeemable's end effect on the order. This object is unique to each type of redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RedeemableResultVoucherCode"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultGiftCard"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultLoyaltyCard"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultPromotionTier"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultPromotionStack"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redeemable."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "VoucherAssets": {
        "title": "Voucher Assets",
        "type": "object",
        "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
        "properties": {
          "qr": {
            "type": "object",
            "description": "Stores Quick Response (QR) representation of encrypted code.",
            "properties": {
              "id": {
                "type": "string",
                "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                "description": "Encrypted voucher code ID."
              },
              "url": {
                "type": "string",
                "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                "description": "URL to QR code  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
              }
            }
          },
          "barcode": {
            "type": "object",
            "description": "Stores barcode representation of encrypted code.",
            "properties": {
              "id": {
                "type": "string",
                "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                "description": "Encrypted voucher code ID."
              },
              "url": {
                "type": "string",
                "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                "description": "URL to barcode  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
              }
            }
          }
        }
      },
      "VoucherTransactionsFilters": {
        "description": "List of available fields and filters that can be exported with gift card or loyalty card transactions along with the sorting order of the returned data.",
        "title": "Voucher Transactions",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash \`-\` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_CANCELLATION\` <br> - \`POINTS_REDEMPTION\`<br> - \`POINTS_REFUND\`<br> - \`POINTS_ADDITION\`<br> - \`POINTS_REMOVAL\`<br> - \`POINTS_EXPIRATION\`<br> - \`POINTS_TRANSFER_IN\`<br> - \`POINTS_TRANSFER_OUT\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "type",
                "source_id",
                "reason",
                "balance",
                "amount",
                "created_at",
                "voucher_id",
                "campaign_id",
                "source",
                "details",
                "related_transaction_id"
              ]
            }
          },
          "filters": {
            "$ref": "#/components/schemas/VoucherTransactionsExportFilterConditions"
          }
        },
        "required": [
          "filters"
        ]
      },
      "Any": {
        "oneOf": [
          {
            "title": "array",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "title": "string",
                  "type": "string"
                },
                {
                  "title": "number",
                  "type": "number"
                },
                {
                  "title": "object",
                  "type": "object"
                }
              ]
            }
          },
          {
            "title": "string",
            "type": "string"
          },
          {
            "title": "number",
            "type": "number"
          },
          {
            "title": "object",
            "type": "object"
          }
        ],
        "title": "Any"
      },
      "ApplicableToEffect": {
        "title": "Applicable To Effect",
        "type": "string",
        "enum": [
          "APPLY_TO_EVERY",
          "APPLY_TO_CHEAPEST",
          "APPLY_TO_MOST_EXPENSIVE"
        ]
      },
      "BusValRuleAssignment": {
        "title": "Business Validation Rule Assignment",
        "description": "Assignments of business validation rule",
        "example": {
          "id": "asgm_LnY1g7UNFA9KyDrD",
          "rule_id": "val_3gPNA6SnH4ae",
          "related_object_id": "camp_CZOnEGiZfwIKWmSjhIoIT7Ol",
          "related_object_type": "campaign",
          "object": "validation_rules_assignment",
          "validation_status": "PARTIALLY_VALID",
          "validation_omitted_rules": [
            "1"
          ]
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for a assignment"
          },
          "rule_id": {
            "type": "string",
            "description": "The unique identifier for a rule"
          },
          "related_object_id": {
            "type": "string",
            "description": "The unique identifier for a related object"
          },
          "related_object_type": {
            "type": "string",
            "description": "The type of related object"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was last updated in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "validation_rules_assignment"
            ]
          },
          "validation_status": {
            "type": "string",
            "description": "The validation status of the assignment",
            "enum": [
              "VALID",
              "PARTIALLY_VALID",
              "INVALID"
            ]
          },
          "validation_omitted_rules": {
            "type": "array",
            "description": "The list of omitted rules",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "rule_id",
          "related_object_id",
          "related_object_type",
          "object",
          "validation_status",
          "validation_omitted_rules"
        ]
      },
      "CampaignLoyaltyCard": {
        "type": "object",
        "description": "Schema model for a campaign loyalty card.",
        "title": "Campaign Loyalty Card",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The initial number of points to assign to the loyalty card. This is the current loyalty card score i.e. the number of loyalty points on the card."
          },
          "expiration_rules": {
            "type": "object",
            "properties": {
              "period_type": {
                "type": "string",
                "description": "Type of period"
              },
              "period_value": {
                "type": "integer",
                "description": "Value of the period"
              },
              "rounding_type": {
                "type": "string",
                "description": "Type of rounding"
              },
              "rounding_value": {
                "type": "integer",
                "description": "Value of rounding"
              }
            },
            "required": [
              "period_type",
              "period_value",
              "rounding_type",
              "rounding_value"
            ]
          }
        },
        "required": [
          "points"
        ]
      },
      "CodeConfigRequiredLengthCharsetPattern": {
        "title": "Code Config Required Length Charset Pattern",
        "allOf": [
          {
            "$ref": "#/components/schemas/CodeConfig"
          }
        ],
        "required": [
          "length",
          "charset",
          "pattern"
        ]
      },
      "CustomerSummaryOrders": {
        "title": "Customer Summary Orders",
        "type": "object",
        "properties": {
          "total_amount": {
            "type": "integer",
            "description": "The total amount spent by the customer. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "total_count": {
            "type": "integer",
            "description": "Total number of orders made by the customer."
          },
          "average_amount": {
            "type": "integer",
            "description": "Average amount spent on orders. \`total_amount\` &divide; \`total_count\`. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "last_order_amount": {
            "type": "integer",
            "description": "Amount spent on last order. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "last_order_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-30T11:51:08.029Z",
            "description": "Timestamp representing the date and time of the customer's last order in ISO 8601 format."
          }
        },
        "required": [
          "total_amount",
          "total_count",
          "average_amount",
          "last_order_amount"
        ]
      },
      "CustomerSummaryRedemptions": {
        "title": "Customer Summary Redemptions",
        "type": "object",
        "properties": {
          "total_redeemed": {
            "type": "integer",
            "description": "Total number of redemptions made by the customer."
          },
          "total_failed": {
            "type": "integer",
            "description": "Total number of redemptions that failed."
          },
          "total_succeeded": {
            "type": "integer",
            "description": "Total number of redemptions that succeeded."
          },
          "total_rolled_back": {
            "type": "integer",
            "description": "Total number of redemptions that were rolled back for the customer."
          },
          "total_rollback_failed": {
            "type": "integer",
            "description": "Total number of redemption rollbacks that failed."
          },
          "total_rollback_succeeded": {
            "type": "integer",
            "description": "Total number of redemption rollbacks that succeeded."
          },
          "gift": {
            "type": "object",
            "description": "Summary of gift card credits.",
            "required": [
              "redeemed_amount",
              "amount_to_go"
            ],
            "properties": {
              "redeemed_amount": {
                "type": "integer",
                "description": "Total amount of gift card credits redeemed by customer. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`.",
                "default": 0
              },
              "amount_to_go": {
                "type": "integer",
                "description": "Remaining gift card balance across all gift cards. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`.",
                "default": 0
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Summary of loyalty points.",
            "required": [
              "redeemed_points",
              "points_to_go"
            ],
            "properties": {
              "redeemed_points": {
                "type": "integer",
                "description": "Total number of loyalty points redeemed by the customer."
              },
              "points_to_go": {
                "type": "integer",
                "description": "Sum of remaining available point balance across all loyalty cards."
              }
            }
          }
        },
        "required": [
          "total_redeemed",
          "total_failed",
          "total_succeeded",
          "total_rolled_back",
          "total_rollback_failed",
          "total_rollback_succeeded",
          "gift",
          "loyalty_card"
        ]
      },
      "DiscountAmount": {
        "type": "object",
        "title": "Amount",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AMOUNT"
            ],
            "description": "Defines the type of the voucher."
          },
          "amount_off": {
            "type": "number",
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
          },
          "amount_off_formula": {
            "type": "string"
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountAmountVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "DiscountFixed": {
        "title": "Fixed",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FIXED"
            ],
            "description": "Defines the type of the voucher."
          },
          "fixed_amount": {
            "type": "number",
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the \`fixed_amount_formula\` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value."
          },
          "fixed_amount_formula": {
            "type": "string"
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountFixedVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "DiscountPercent": {
        "type": "object",
        "title": "Percent",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PERCENT"
            ],
            "description": "Defines the type of the voucher."
          },
          "percent_off": {
            "type": "number",
            "description": "The percent discount that the customer will receive."
          },
          "percent_off_formula": {
            "type": "string"
          },
          "amount_limit": {
            "type": "number",
            "description": "Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountPercentVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "DiscountUnit": {
        "type": "object",
        "title": "Unit",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UNIT"
            ],
            "description": "Discount type."
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_off_formula": {
            "type": "string"
          },
          "effect": {
            "description": "Defines how the unit is added to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountUnitVouchersEffectTypes"
              }
            ]
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "description": "Contains information about the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProductDiscountUnit"
              }
            ]
          },
          "sku": {
            "$ref": "#/components/schemas/SimpleSkuDiscountUnit"
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "unit_type"
        ]
      },
      "DiscountUnitMultiple": {
        "type": "object",
        "title": "Unit Multiple",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UNIT"
            ],
            "description": "Discount type."
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MANY_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountUnitMultipleOneUnit"
            }
          }
        },
        "required": [
          "type",
          "units"
        ]
      },
      "EarningRuleProportionalCustomEvent": {
        "title": "Earning Rule Proportional Custom Event",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "CUSTOM_EVENT_METADATA"
            ],
            "description": "CUSTOM_EVENT_METADATA: Custom event metadata (X points for every Y in metadata attribute)."
          },
          "custom_event": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the customer metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "\\nCustom event metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "custom_event"
        ]
      },
      "EarningRuleProportionalCustomerMetadata": {
        "title": "Customer Metadata",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "CUSTOMER_METADATA"
            ],
            "description": "CUSTOMER_METADATA: Customer Metadata (X points for every Y in metadata attribute, defined in the property key under the customer.metadata object)"
          },
          "customer": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the customer metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "Customer metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "customer"
        ]
      },
      "EarningRuleProportionalOrder": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderTotalAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderMetadata"
          }
        ],
        "title": "Order"
      },
      "EarningRuleProportionalOrderItems": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsQuantity"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsSubtotalAmount"
          }
        ],
        "title": "Order Items"
      },
      "EventCustomerActiveCampaignFailed": {
        "title": "Event Customer ActiveCampaign Failed",
        "description": "Event data object schema for \`customer.activecampaign.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerActiveCampaignRecovered": {
        "title": "Event Customer ActiveCampaign Recovered",
        "description": "Event data object schema for \`customer.activecampaign.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerActiveCampaignSent": {
        "title": "Event Customer ActiveCampaign Sent",
        "description": "Event data object schema for \`customer.activecampaign.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerBatchFailed": {
        "title": "Event Customer Batch Failed",
        "description": "Event data object schema for \`customer.batch.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerBatchRecovered": {
        "title": "Event Customer Batch Recovered",
        "description": "Event data object schema for \`customer.batch.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerBatchSent": {
        "title": "Event Customer Batch Sent",
        "description": "Event data object schema for \`customer.batch.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerBrazeFailed": {
        "title": "Event Customer Braze Failed",
        "description": "Event data object schema for \`customer.braze.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerBrazeRecovered": {
        "title": "Event Customer Braze Recovered",
        "description": "Event data object schema for \`customer.braze.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerBrazeSent": {
        "title": "Event Customer Braze Sent",
        "description": "Event data object schema for \`customer.braze.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerConfirmed": {
        "title": "Event Customer Confirmed",
        "description": "Event data object schema for \`customer.confirmed\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "unconfirmed_customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ucust_1qa70mVfYkl11Ab0ZxDPdWNa"
              }
            }
          }
        }
      },
      "EventCustomerConsentsGiven": {
        "title": "Event Customer Consents Given",
        "description": "Event data object schema for \`customer.consents.given\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConsents"
          }
        ]
      },
      "EventCustomerConsentsRevoked": {
        "title": "Event Customer Consents Revoked",
        "description": "Event data object schema for \`customer.consents.revoked\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConsents"
          }
        ]
      },
      "EventCustomerCreated": {
        "title": "Event Customer Created",
        "description": "Event data object schema for \`customer.created\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerCustomEvent": {
        "title": "Event Customer Custom Event",
        "description": "Event data object schema for \`customer.custom_event\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        },
        "additionalProperties": true,
        "required": [
          "customer"
        ]
      },
      "EventCustomerDeleted": {
        "title": "Event Customer Deleted",
        "description": "Event data object schema for \`customer.deleted\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerEmailFailed": {
        "title": "Event Customer Email Failed",
        "description": "Event data object schema for \`customer.email.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerEmailRecovered": {
        "title": "Event Customer Email Recovered",
        "description": "Event data object schema for \`customer.email.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerEmailSent": {
        "title": "Event Customer Email Sent",
        "description": "Event data object schema for \`customer.email.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerGiftVoucherBalanceAdded": {
        "title": "Event Customer Gift Voucher Balance Added",
        "description": "Event data object schema for \`customer.voucher.gift.balance_added\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerIntercomFailed": {
        "title": "Event Customer Intercom Failed",
        "description": "Event data object schema for \`customer.intercom.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerIntercomRecovered": {
        "title": "Event Customer Intercom Recovered",
        "description": "Event data object schema for \`customer.intercom.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerIntercomSent": {
        "title": "Event Customer Intercom Sent",
        "description": "Event data object schema for \`customer.intercom.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerKlaviyoFailed": {
        "title": "Event Customer Klaviyo Failed",
        "description": "Event data object schema for \`customer.klaviyo.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerKlaviyoRecovered": {
        "title": "Event Customer Klaviyo Recovered",
        "description": "Event data object schema for \`customer.klaviyo.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerKlaviyoSent": {
        "title": "Event Customer Klaviyo Sent",
        "description": "Event data object schema for \`customer.klaviyo.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerLoyaltyCardPointsAdded": {
        "title": "Event Customer Loyalty Card Points Added",
        "description": "Event data object schema for \`customer.voucher.loyalty_card.points_added\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerLoyaltyCardPointsTransferred": {
        "title": "Event Customer Loyalty Card Points Transferred",
        "description": "Event data object schema for \`customer.voucher.loyalty_card.points_transferred\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "source_voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "destination_voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerLoyaltyTierDowngraded": {
        "title": "Event Customer Loyalty Tier Downgraded",
        "description": "Event data object schema for \`customer.loyalty.tier.downgraded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Downgraded",
            "type": "object",
            "properties": {
              "loyalty_tier_from": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "loyalty_tier_to": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier_from"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierExpirationChanged": {
        "title": "Event Customer Loyalty Tier Expiration Changed",
        "description": "Event data object schema for \`customer.loyalty.tier.expiration.changed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Expiration Changed",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              },
              "expiration_date": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier",
              "expiration_date"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierJoined": {
        "title": "Event Customer Loyalty Tier Joined",
        "description": "Event data object schema for \`customer.loyalty.tier.joined\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Joined",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierLeft": {
        "title": "Event Customer Loyalty Tier Left",
        "description": "Event data object schema for \`customer.loyalty.tier.left\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Left",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierProlonged": {
        "title": "Event Customer Loyalty Tier Prolonged",
        "description": "Event data object schema for \`customer.loyalty.tier.prolonged\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Prolonged",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierUpgraded": {
        "title": "Event Customer Loyalty Tier Upgraded",
        "description": "Event data object schema for \`customer.loyalty.tier.upgraded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Upgraded",
            "type": "object",
            "properties": {
              "loyalty_tier_from": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "loyalty_tier_to": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier_to"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyUpdated": {
        "title": "Event Customer Loyalty Updated",
        "description": "Event data object schema for \`customer.loyalty.updated\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "loyalty": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-25T13:32:08.734Z",
            "format": "date-time"
          }
        },
        "required": [
          "created_at"
        ]
      },
      "EventCustomerMailchimpFailed": {
        "title": "Event Customer Mailchimp Failed",
        "description": "Event data object schema for \`customer.mailchimp.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerMailchimpRecovered": {
        "title": "Event Customer Mailchimp Recovered",
        "description": "Event data object schema for \`customer.mailchimp.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerMailchimpSent": {
        "title": "Event Customer Mailchimp Sent",
        "description": "Event data object schema for \`customer.mailchimp.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerOrderCanceled": {
        "title": "Event Customer Order Canceled",
        "description": "Event data object schema for \`customer.order.canceled\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderCreated": {
        "title": "Event Customer Order Created",
        "description": "Event data object schema for \`customer.order.created\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderFulfilled": {
        "title": "Event Customer Order Fulfilled",
        "description": "Event data object schema for \`customer.order.fulfilled\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderPaid": {
        "title": "Event Customer Order Paid",
        "description": "Event data object schema for \`customer.order.paid\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderProcessing": {
        "title": "Event Customer Order Processing",
        "description": "Event data object schema for \`customer.order.processing\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderUpdated": {
        "title": "Event Customer Order Updated",
        "description": "Event data object schema for \`customer.order.updated\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerPublicationFailed": {
        "title": "Event Customer Publication Failed",
        "description": "Event data object schema for \`customer.publication.failed\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "publication": {
            "type": "object"
          }
        }
      },
      "EventCustomerPublicationSucceeded": {
        "title": "Event Customer Publication Succeeded",
        "description": "Event data object schema for \`customer.publication.succeeded\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "publication": {
            "type": "object"
          }
        }
      },
      "EventCustomerRedemptionFailed": {
        "title": "Event Customer Redemption Failed",
        "description": "Event data object schema for \`customer.redemption.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          }
        ]
      },
      "EventCustomerRedemptionRollbackFailed": {
        "title": "Event Customer Redemption Rollback Failed",
        "description": "Event data object schema for \`customer.redemption.rollback.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          },
          {
            "type": "object",
            "properties": {
              "redemption_rollback": {
                "$ref": "#/components/schemas/SimpleRedemption"
              }
            }
          }
        ]
      },
      "EventCustomerRedemptionRollbackSucceeded": {
        "title": "Event Customer Redemption Rollback Succeeded",
        "description": "Event data object schema for \`customer.redemption.rollback.succeeded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          },
          {
            "type": "object",
            "properties": {
              "redemption_rollback": {
                "$ref": "#/components/schemas/SimpleRedemption"
              }
            }
          }
        ]
      },
      "EventCustomerRedemptionSucceeded": {
        "title": "Event Customer Redemption Succeeded",
        "description": "Event data object schema for \`customer.redemption.succeeded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          }
        ]
      },
      "EventCustomerReferred": {
        "title": "Event Customer Referred",
        "description": "Event data object schema for \`customer.referred\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "referrer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "custom_event": {
            "$ref": "#/components/schemas/CustomEvent"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          }
        },
        "required": [
          "referrer",
          "campaign",
          "voucher",
          "custom_event"
        ]
      },
      "EventCustomerRewardRedemptionsCompleted": {
        "title": "Event Customer Reward Redemptions Completed",
        "description": "Event data object schema for \`customer.reward_redemptions.completed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsCreated": {
        "title": "Event Customer Reward Redemptions Created",
        "description": "Event data object schema for \`customer.reward_redemptions.created\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsPending": {
        "title": "Event Customer Reward Redemptions Pending",
        "description": "Event data object schema for \`customer.reward_redemptions.pending\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsRolledBack": {
        "title": "Event Customer Reward Redemptions Rolled Back",
        "description": "Event data object schema for \`customer.reward_redemptions.rolledback\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewarded": {
        "title": "Event Customer Rewarded",
        "description": "Event data object schema for \`customer.rewarded\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "referral_tier": {
            "$ref": "#/components/schemas/SimpleReferralTier"
          },
          "balance": {
            "type": "integer"
          },
          "custom_event": {
            "$ref": "#/components/schemas/CustomEvent"
          },
          "customer_event": {
            "type": "object"
          }
        }
      },
      "EventCustomerRewardedLoyaltyPoints": {
        "title": "Event Customer Rewarded Loyalty Points",
        "description": "Event data object schema for \`customer.rewarded.loyalty_points\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "loyalty_tier": {
            "$ref": "#/components/schemas/LoyaltyTier"
          },
          "earning_rule": {
            "$ref": "#/components/schemas/EarningRule"
          },
          "balance": {
            "type": "integer"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "event": {
            "type": "object"
          }
        }
      },
      "EventCustomerSegmentEntered": {
        "title": "Event Customer Segment Entered",
        "description": "Event data object schema for \`customer.segment.entered\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "segment": {
            "$ref": "#/components/schemas/SimpleSegment"
          }
        },
        "required": [
          "customer",
          "segment"
        ]
      },
      "EventCustomerSegmentLeft": {
        "title": "Event Customer Segment Left",
        "description": "Event data object schema for \`customer.segment.left\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "segment": {
            "$ref": "#/components/schemas/SimpleSegment"
          }
        },
        "required": [
          "customer",
          "segment"
        ]
      },
      "EventCustomerShopifyFailed": {
        "title": "Event Customer Shopify Failed",
        "description": "Event data object schema for \`customer.shopify.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerShopifyRecovered": {
        "title": "Event Customer Shopify Recovered",
        "description": "Event data object schema for \`customer.shopify.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerShopifySent": {
        "title": "Event Customer Shopify Sent",
        "description": "Event data object schema for \`customer.shopify.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerSmsFailed": {
        "title": "Event Customer SMS Failed",
        "description": "Event data object schema for \`customer.sms.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerSmsRecovered": {
        "title": "Event Customer SMS Recovered",
        "description": "Event data object schema for \`customer.sms.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerSmsSent": {
        "title": "Event Customer SMS Sent",
        "description": "Event data object schema for \`customer.sms.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerUpdated": {
        "title": "Event Customer Updated",
        "description": "Event data object schema for \`customer.updated\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerValidationFailed": {
        "title": "Event Customer Validation Failed",
        "description": "Event data object schema for \`customer.validation.failed\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "validation": {
            "$ref": "#/components/schemas/ValidationEntity"
          }
        }
      },
      "EventCustomerValidationSucceeded": {
        "title": "Event Customer Validation Succeeded",
        "description": "Event data object schema for \`customer.validation.succeeded\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "validation": {
            "$ref": "#/components/schemas/ValidationEntity"
          }
        }
      },
      "EventCustomerVoucherDeleted": {
        "title": "Event Customer Voucher Deleted",
        "description": "Event data object schema for \`customer.voucher.deleted\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          }
        }
      },
      "EventCustomerVouchersLoyaltyPointsExpired": {
        "title": "Event Customer Loyalty Card Points Expired",
        "description": "Event data object schema for \`customer.voucher.loyalty_card.points_expired\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "points": {
            "type": "integer"
          },
          "buckets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            }
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "ExportBase": {
        "title": "Export Base",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format."
          },
          "status": {
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "DONE",
              "ERROR"
            ],
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated."
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "result": {
            "type": "object",
            "nullable": true,
            "description": "Contains the URL of the CSV file.",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the CSV file location. It contains the token used for authorization in the Download export method."
              }
            },
            "required": [
              "url"
            ]
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status"
        ]
      },
      "FiltersCondition": {
        "title": "Filters Condition",
        "type": "object",
        "properties": {
          "$in": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_in": {
            "$ref": "#/components/schemas/Any"
          },
          "$is": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_days_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_days_in_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_not": {
            "$ref": "#/components/schemas/Any"
          },
          "$has_value": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_unknown": {
            "$ref": "#/components/schemas/Any"
          },
          "$contains": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_contain": {
            "$ref": "#/components/schemas/Any"
          },
          "$starts_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$ends_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$after": {
            "$ref": "#/components/schemas/Any"
          },
          "$before": {
            "$ref": "#/components/schemas/Any"
          },
          "$count": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_less": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_more": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "InapplicableTo": {
        "title": "Inapplicable To",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicableTo"
          }
        ]
      },
      "OrderItemCalculated": {
        "type": "object",
        "title": "Order Item Calculated",
        "properties": {
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "initial_quantity": {
            "type": "integer",
            "description": "A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items' quantity."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "\\nSum of all order-item-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \\n\`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\`"
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "subtotal_amount": {
            "type": "integer",
            "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the \`amount\`.   \\n\`subtotal_amount\`=\`amount\`-\`applied_discount_amount\`"
          },
          "product": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the product and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s product ID (if it is different than Voucherify's product ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a product. It can be useful for storing additional information about the product in a structured format."
              },
              "price": {
                "type": "number",
                "description": "Product price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "sku": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related SKU.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s SKU ID (if it is different than Voucherify's SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "sku": {
                "type": "string",
                "description": "The SKU name."
              },
              "price": {
                "type": "number",
                "description": "SKU price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "object": {
            "type": "string",
            "enum": [
              "order_item"
            ],
            "description": "The type of object represented by JSON."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format."
          }
        },
        "required": [
          "object"
        ]
      },
      "QualificationsRedeemableBase": {
        "title": "Single redeemable",
        "description": "Data of single redeemable which was properly qualified.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the redeemable."
          },
          "object": {
            "type": "string",
            "description": "Object type of the redeemable.",
            "enum": [
              "campaign",
              "promotion_tier",
              "promotion_stack",
              "voucher"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "result": {
            "$ref": "#/components/schemas/RedeemableResult"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "validation_rule_id": {
            "type": "string",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "applicable_to": {
            "description": "Contains list of items that qualify in the scope of the discount. These are definitions of included products, SKUs, and product collections. These can be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicableToResultList"
              }
            ]
          },
          "inapplicable_to": {
            "description": "Contains list of items that do not qualify in the scope of the discount. These are definitions of excluded products, SKUs, and product collections. These CANNOT be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InapplicableToResultList"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "categories": {
            "type": "array",
            "description": "List of category information.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "banner": {
            "type": "string",
            "example": "Order Paid - You will get 100 points",
            "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
          },
          "name": {
            "type": "string",
            "example": "promotion_tier_get_points",
            "description": "Name of the redeemable."
          },
          "campaign_name": {
            "type": "string",
            "example": "PromotionCampaign",
            "description": "Name of the campaign associated to the redeemable. This field is available only if object is not \`campaign\`"
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_Mow7u4gSxagLlZ2oDQ01ZS5N",
            "description": "Id of the campaign associated to the redeemable. This field is available only if object is not \`campaign\`"
          },
          "validation_rules_assignments": {
            "$ref": "#/components/schemas/ValidationRulesAssignmentsList"
          }
        }
      },
      "RedeemableResultGiftCard": {
        "type": "object",
        "title": "Gift Card",
        "description": "This is a \`result\` object representing the results for a gift card.",
        "properties": {
          "gift": {
            "description": "Stores the amount of gift card credits to be applied in the redemption.",
            "type": "object",
            "properties": {
              "credits": {
                "type": "integer",
                "description": "Total number of gift card credits to be applied in the redemption expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          }
        }
      },
      "RedeemableResultLoyaltyCard": {
        "type": "object",
        "title": "Loyalty Card",
        "description": "This is a \`result\` object representing the results for a loyalty card.",
        "properties": {
          "loyalty_card": {
            "description": "Stores the amount of loyalty card points to be applied in the redemption.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total number of loyalty points to be applied in the redemption."
              }
            }
          }
        }
      },
      "RedeemableResultPromotionStack": {
        "type": "object",
        "title": "Promotion Stack",
        "description": "This is a \`result\` object representing the results for a promotion stack.",
        "properties": {
          "loyalty_card": {
            "description": "Stores the amount of loyalty card points to be applied in the redemption.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total number of loyalty points to be applied in the redemption."
              }
            }
          }
        }
      },
      "RedeemableResultPromotionTier": {
        "type": "object",
        "title": "Redeemable Result Promotion Tier",
        "description": "This is a \`result\` object representing the results for a promotion tier.",
        "properties": {
          "discount": {
            "description": "Discount details about the type of discount to be applied for the redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DiscountAmount"
              },
              {
                "$ref": "#/components/schemas/DiscountUnit"
              },
              {
                "$ref": "#/components/schemas/DiscountUnitMultiple"
              },
              {
                "$ref": "#/components/schemas/DiscountPercent"
              },
              {
                "$ref": "#/components/schemas/DiscountFixed"
              }
            ]
          }
        }
      },
      "RedeemableResultVoucherCode": {
        "type": "object",
        "title": "Coupon Code",
        "description": "This is a \`result\` object representing the results for a coupon code.",
        "properties": {
          "discount": {
            "description": "Discount details about the type of discount to be applied for the redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DiscountAmount"
              },
              {
                "$ref": "#/components/schemas/DiscountUnit"
              },
              {
                "$ref": "#/components/schemas/DiscountUnitMultiple"
              },
              {
                "$ref": "#/components/schemas/DiscountPercent"
              },
              {
                "$ref": "#/components/schemas/DiscountFixed"
              }
            ]
          }
        }
      },
      "RewardTypeCampaign": {
        "title": "Digital",
        "type": "object",
        "properties": {
          "campaign": {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "description": "Objects stores information about the campaign related to the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID, assigned by Voucherify."
              },
              "balance": {
                "type": "integer",
                "description": "The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "type": {
                "type": "string",
                "enum": [
                  "DISCOUNT_COUPONS",
                  "PROMOTION",
                  "GIFT_VOUCHERS",
                  "REFERRAL_PROGRAM",
                  "LOYALTY_PROGRAM"
                ],
                "description": "Campaign type."
              }
            }
          }
        },
        "required": [
          "campaign"
        ]
      },
      "RewardTypeCoin": {
        "title": "Pay with Points",
        "type": "object",
        "properties": {
          "coin": {
            "type": "object",
            "required": [
              "exchange_ratio"
            ],
            "description": "Defines the ratio by mapping the number of loyalty points in points_ratio to a predefined cash amount in exchange_ratio.",
            "properties": {
              "exchange_ratio": {
                "type": "number",
                "description": "The cash equivalent of the points defined in the points_ratio property."
              },
              "points_ratio": {
                "type": "integer",
                "description": "The number of loyalty points that will map to the predefined cash amount defined by the exchange_ratio property."
              }
            }
          }
        },
        "required": [
          "coin"
        ]
      },
      "RewardTypeMaterial": {
        "title": "Material",
        "type": "object",
        "properties": {
          "product": {
            "type": "object",
            "required": [
              "id"
            ],
            "description": "Contains information about the product given as a reward.",
            "properties": {
              "id": {
                "type": "string",
                "example": "prod_0b7d7dfb05cbe5c616",
                "description": "Unique product ID, assigned by Voucherify."
              },
              "sku_id": {
                "type": "string",
                "nullable": true,
                "example": "sku_0b7d7dfb090be5c619",
                "description": "Unique SKU ID, assigned by Voucherify, of the SKU given as a reward."
              }
            }
          }
        },
        "required": [
          "product"
        ]
      },
      "VoucherTransactionsExportFilterConditions": {
        "description": "Filter condition.",
        "title": "Filter by voucher ID",
        "type": "object",
        "required": [
          "voucher_id"
        ],
        "properties": {
          "voucher_id": {
            "type": "object",
            "required": [
              "conditions"
            ],
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "conditions": {
                "type": "object",
                "required": [
                  "$in"
                ],
                "description": "Data filters used to narrow the data records to be returned in the result.",
                "properties": {
                  "$in": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1,
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ApplicableToResultList": {
        "title": "Applicable To Result List",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains array of items to which the discount can apply.",
            "items": {
              "$ref": "#/components/schemas/ApplicableTo"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of objects defining included products, SKUs, or product collections."
          },
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "data"
            ]
          }
        },
        "required": [
          "data",
          "total",
          "object",
          "data_ref"
        ]
      },
      "CustomEvent": {
        "title": "Custom Event",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique custom event ID."
          },
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an \`event\`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "Referral object.",
            "properties": {
              "referrer_id": {
                "type": "string",
                "description": "Unique referrer ID.",
                "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
              },
              "code": {
                "type": "string",
                "description": "Voucher code."
              },
              "id": {
                "type": "string",
                "description": "Unique voucher ID."
              }
            }
          },
          "loyalty": {
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the custom event."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the custom event was created in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "DiscountAmountVouchersEffectTypes": {
        "title": "Discount Amount Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS",
          "APPLY_TO_ITEMS_PROPORTIONALLY",
          "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
          "APPLY_TO_ITEMS_BY_QUANTITY"
        ],
        "type": "string"
      },
      "DiscountFixedVouchersEffectTypes": {
        "title": "Discount Fixed Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS"
        ],
        "type": "string"
      },
      "DiscountPercentVouchersEffectTypes": {
        "title": "Discount Percent Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS"
        ],
        "type": "string"
      },
      "DiscountUnitMultipleOneUnit": {
        "type": "object",
        "title": "One Unit",
        "properties": {
          "unit_off": {
            "type": "number",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_off_formula": {
            "type": "string"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_NEW_ITEMS",
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order.\\n\\n"
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "description": "Contains information about the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProductDiscountUnit"
              }
            ]
          },
          "sku": {
            "description": "Contains information about the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleSkuDiscountUnit"
              }
            ]
          }
        },
        "required": [
          "effect",
          "unit_type"
        ]
      },
      "DiscountUnitVouchersEffectTypes": {
        "title": "Discount Unit Vouchers Effect Types",
        "enum": [
          "ADD_MISSING_ITEMS",
          "ADD_NEW_ITEMS",
          "ADD_MANY_ITEMS"
        ],
        "type": "string"
      },
      "EarningRuleProportionalOrderAmount": {
        "title": "Order Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_AMOUNT"
            ],
            "description": "\`ORDER_AMOUNT\`: Pre-discount order amount (X points for every Y spent excluding discounts)"
          },
          "order": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "object",
                "required": [
                  "every",
                  "points"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EarningRuleProportionalOrderItemsAmount": {
        "title": "Order Items Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_ITEMS_AMOUNT"
            ],
            "description": "ORDER_ITEMS_AMOUNT; Pre-discount amount spent on items defined in the order_items.amount.object & .id (X points for every Y spent on items excluding discounts)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderItemsQuantity": {
        "title": "Order Items Quantity",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_ITEMS_QUANTITY"
            ],
            "description": "\`ORDER_ITEMS_QUANTITY\`: Quantity of items defined in order_items.quantity.object & .id (X points for every Y items excluding free items)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "quantity"
            ],
            "properties": {
              "quantity": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderItemsSubtotalAmount": {
        "title": "Order Items Subtotal Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_ITEMS_SUBTOTAL_AMOUNT"
            ],
            "description": "ORDER_ITEMS_SUBTOTAL_AMOUNT; Amount spent on items defined in the order_items.subtotal_amount.object & .id (X points for every Y spent on items including discounts)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "subtotal_amount"
            ],
            "properties": {
              "subtotal_amount": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderMetadata": {
        "title": "Order Metadata",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_METADATA"
            ],
            "description": "\`ORDER_METADATA\`: Order Metadata (X points for every Y in metadata attribute, defined in the property key under the order.metadata object)"
          },
          "order": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "description": "Defines the formula for calculating points proportionally.",
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the order metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "Order metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EarningRuleProportionalOrderTotalAmount": {
        "title": "Order Total Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_TOTAL_AMOUNT"
            ],
            "description": "\`ORDER_TOTAL_AMOUNT\`: Total order amount (X points for every Y spent including discount)"
          },
          "order": {
            "type": "object",
            "required": [
              "total_amount"
            ],
            "properties": {
              "total_amount": {
                "type": "object",
                "required": [
                  "every",
                  "points"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EventCustomerConsents": {
        "title": "Event Customer Consents",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "consents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleConsent"
            }
          }
        }
      },
      "EventCustomerFailed": {
        "title": "Event Customer Failed",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "failed_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution failed in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "failed_at"
        ]
      },
      "EventCustomerLoyaltyTierBase": {
        "title": "Event Customer Loyalty Tier Base",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          }
        },
        "required": [
          "created_at",
          "loyalty_tier_to"
        ]
      },
      "EventCustomerOrder": {
        "title": "Event Customer Order",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "referrer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          }
        }
      },
      "EventCustomerRecovered": {
        "title": "Event Customer Recovered",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "recovered_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution was recovered in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "recovered_at"
        ]
      },
      "EventCustomerRedemption": {
        "title": "Event Customer Redemption",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "order": {
            "$ref": "#/components/schemas/SimpleOrder"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "promotion_tier": {
            "$ref": "#/components/schemas/SimplePromotionTier"
          },
          "redemption": {
            "$ref": "#/components/schemas/SimpleRedemption"
          }
        }
      },
      "EventCustomerRewardRedemptions": {
        "title": "Event Customer Reward Redemptions",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "reward_redemption": {
            "type": "object"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "reward_assignment": {
            "$ref": "#/components/schemas/RewardAssignment"
          },
          "source": {
            "type": "string"
          },
          "balance": {
            "type": "integer"
          }
        }
      },
      "EventCustomerSent": {
        "title": "Event Customer Sent",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "sent_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution was sent in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "sent_at"
        ]
      },
      "InapplicableToResultList": {
        "title": "Inapplicable To Result List",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains array of items to which the discount cannot apply.",
            "items": {
              "$ref": "#/components/schemas/InapplicableTo"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of objects defining included products, SKUs, or product collections."
          },
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "data"
            ]
          }
        },
        "required": [
          "data",
          "total",
          "object",
          "data_ref"
        ]
      },
      "RedeemableResult": {
        "title": "Redeemable Result",
        "description": "Information about redeemable result.",
        "properties": {
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "gift": {
            "$ref": "#/components/schemas/RedeemableGift"
          },
          "loyalty_card": {
            "description": "Loyalty Card object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/RedeemableLoyaltyCard"
              }
            ]
          },
          "error": {
            "description": "Error in result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Error"
              }
            ]
          }
        }
      },
      "RedemptionInternal": {
        "title": "Redemption Internal",
        "description": "Model Used for internal communication",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the \`redemption\`.",
            "default": "redemption"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "format": "date-time"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "channel_type": {
            "type": "string",
            "description": "The source of the channel for the redemption rollback. A \`USER\` corresponds to the Voucherify Dashboard and an \`API\` corresponds to the API.",
            "enum": [
              "USER",
              "API"
            ]
          },
          "channel_id": {
            "type": "string",
            "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
            "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is \`FAILURE\`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is \`FAILURE\`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "previous_order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the redemption being invalid in the context of the provided parameters."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "parent_redemption_id": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "related_object_parent_id": {
            "type": "string",
            "description": "Unique related parent object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "campaign_name": {
            "type": "string",
            "description": "Campaign name"
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          }
        }
      },
      "SimpleCampaign": {
        "title": "Simple Campaign",
        "type": "object",
        "description": "Request body schema for creating a discount voucher campaign using **POST** \`/campaigns\`.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Campaign name."
          },
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "campaign_type": {
            "type": "string",
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.\\n- \`AUTO_UPDATE\`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).\\n-  \`STATIC\`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code."
          },
          "voucher": {
            "type": "object"
          },
          "lucky_draw": {
            "type": "object"
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether campaign is active"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "enum": [
              "campaign"
            ],
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          }
        }
      },
      "SimpleProductDiscountUnit": {
        "type": "object",
        "title": "Simple Product Discount Unit",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "Product's source ID."
          },
          "name": {
            "type": "string",
            "description": "Product name."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SimpleRedemption": {
        "type": "object",
        "title": "Simple Redemption",
        "description": "This is an object representing a simple redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "format": "date-time"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "order": {
            "$ref": "#/components/schemas/SimpleOrder"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleVoucher"
              }
            ]
          },
          "promotion_tier": {
            "$ref": "#/components/schemas/SimplePromotionTier"
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the \`redemption\`.",
            "default": "redemption"
          }
        }
      },
      "SimpleRedemptionRewardResult": {
        "title": "Simple Redemption Reward Result",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "assignment_id": {
            "type": "string",
            "description": "Unique reward assignment ID assigned by Voucherify."
          },
          "voucher": {
            "description": "Defines of the voucher.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleVoucher"
              }
            ]
          },
          "product": {
            "description": "Defines of the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProduct"
              }
            ]
          },
          "sku": {
            "description": "Defines of the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleSku"
              }
            ]
          },
          "loyalty_tier_id": {
            "type": "string",
            "description": "Unique loyalty tier ID assigned by Voucherify."
          },
          "id": {
            "type": "string",
            "example": "rew_nIy4gHpQHle2c3pNMwuj7G6j",
            "description": "Unique reward ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "enum": [
              "reward"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the reward."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "parameters": {
            "description": "Defines how the reward is generated.",
            "type": "object"
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          }
        }
      },
      "SimpleReferralTier": {
        "title": "Simple Referral Tier",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique referral tier ID.",
            "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
          },
          "campaign_id": {
            "type": "string",
            "description": "Campaign Id."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "parameters": {
            "type": "object",
            "description": "Referral tier parameters"
          }
        }
      },
      "SimpleSkuDiscountUnit": {
        "type": "object",
        "title": "Simple Sku Discount Unit",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique SKU ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "Product variant's source ID."
          },
          "name": {
            "type": "string",
            "description": "Sku name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ValidationEntity": {
        "title": "Validation Entity",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique validation id."
          },
          "session_id": {
            "type": "string",
            "description": "Unique session id."
          },
          "status": {
            "type": "string",
            "description": "The validation status",
            "enum": [
              "VALID",
              "INVALID"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the validation was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "RedeemableGift": {
        "title": "Redeemable Gift",
        "type": "object",
        "additionalProperties": false,
        "description": "Contains current gift card balance information.",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "credits": {
            "type": "number",
            "description": "The number of credits that the user wants to use from the gift card to fulfil the order. The value of credits cannot be higher than the current balance on the gift card. If the user gives more points than he has on the gift card, the application will return an error code in response. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          }
        }
      },
      "RedeemableLoyaltyCard": {
        "type": "object",
        "title": "Redeemable Loyalty Card",
        "description": "Redeemable loyalty card object response",
        "properties": {
          "points": {
            "type": "integer",
            "example": 7000,
            "description": "Total points incurred over lifespan of loyalty card."
          },
          "balance": {
            "type": "integer",
            "example": 6970,
            "description": "Points available for reward redemption."
          },
          "exchange_ratio": {
            "type": "number",
            "description": "The cash equivalent of the points defined in the points_ratio property."
          },
          "points_ratio": {
            "type": "integer",
            "description": "The number of loyalty points that will map to the predefined cash amount defined by the exchange_ratio property."
          },
          "transfers": {
            "title": "Loyalties Transfer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltiesTransferPoints"
            }
          }
        }
      },
      "SimpleConsent": {
        "title": "Simple Consent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "consent"
            ]
          }
        },
        "required": [
          "object"
        ]
      },
      "SimpleOrder": {
        "title": "Simple Order",
        "type": "object",
        "additionalProperties": false,
        "description": "Order information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request.\\n\\n"
          },
          "source_id": {
            "type": "string",
            "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order."
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied in a particular request.  \\n\`sum(items, i => i.applied_discount_amount)\`"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \\n\`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\`"
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/SimpleOrderItem"
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "order"
            ]
          }
        },
        "required": [
          "object"
        ]
      },
      "SimpleProduct": {
        "title": "Simple Product",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID."
          },
          "source_id": {
            "type": "string",
            "description": "Product source id."
          },
          "name": {
            "type": "string",
            "description": "Product name."
          }
        }
      },
      "SimplePromotionTier": {
        "title": "Simple Promotion Tier",
        "type": "object",
        "description": "This is an object representing a simple promotion tier. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "properties": {
          "id": {
            "type": "string",
            "example": "promo_63fYCt81Aw0h7lzyRkrGZh9p",
            "description": "Unique promotion tier ID."
          },
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "campaign": {
            "type": "object",
            "description": "Contains details about promotion tier's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID."
              }
            }
          }
        }
      },
      "SimpleSku": {
        "title": "Simple Sku",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique sku ID."
          },
          "source_id": {
            "type": "string",
            "description": "Sku source id."
          },
          "sku": {
            "type": "string",
            "description": "Sku name."
          }
        }
      },
      "SimpleOrderItem": {
        "type": "object",
        "title": "Simple Order Item",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "order_item"
            ],
            "description": "The type of object represented by JSON. This object stores information about the \`order_item\`."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "\\nSum of all order-item-level discounts applied to the order."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          }
        }
      }
    },
    "examples": {
      "req_vouchers_metadata_1": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "res_async_actions": {
        "value": {
          "async_action_id": "aa_0ab2df092385be5ca5"
        }
      }
    }
  },
  "paths": {
    "/v1/vouchers/{code}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "in": "path",
          "name": "code",
          "description": "A unique **code** that identifies the voucher.",
          "required": true
        }
      ],
      "get": {
        "operationId": "get-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Get Voucher",
        "description": "Retrieves the voucher with the given \`code\` or unique Voucherify ID. You can either pass the voucher ID which was assigned by Voucherify, e.g., \`v_7HxHkf4VAkMuc8u4lZs78lyRwhRze5UE\`, or the \`code\` of the voucher as the path parameter value, e.g., \`7fjWdr\`.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object if a valid identifier was provided. \\n\\nAdditionally, the response returns validation rules related to the voucher object. They can be inherited from a campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersGetResponseBody"
                },
                "examples": {
                  "Loyalty Card": {
                    "value": {
                      "id": "v_hrMBBeT4sOP9VSGPmj5KAgJwX202UjiY",
                      "code": "LOYALTY-CARD-xLPbpbXR",
                      "campaign": "Loyalty Program Fall 2022",
                      "campaign_id": "camp_f7fBbQxUuTN7dI7tGOo5XMDA",
                      "category": "First",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "type": "LOYALTY_CARD",
                      "discount": null,
                      "gift": null,
                      "loyalty_card": {
                        "points": 110,
                        "balance": 100,
                        "next_expiration_date": "2023-12-31",
                        "next_expiration_points": 100
                      },
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX19OrTPNyUztbNretF7tPRL4ZlUDPAUXVGL9e5UCPh6dic8zXEP8/6I6hUEqtz/F6IMIghWz1ljdjzpdizGHG3HZBw4c19fd8SD/DjhBRDSr8APqKGpZTLKe4QC2gislFTeDAq2lmJb6T1oOTBUGkUEwMgEX1Vlco9A=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19OrTPNyUztbNretF7tPRL4ZlUDPAUXVGL9e5UCPh6dic8zXEP8%2F6I6hUEqtz%2FF6IMIghWz1ljdjzpdizGHG3HZBw4c19fd8SD%2FDjhBRDSr8APqKGpZTLKe4QC2gislFTeDAq2lmJb6T1oOTBUGkUEwMgEX1Vlco9A%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/SpYuOrU9wd6/o1wzy6E/04wURHJ1xuMutzkIUx6OBTmHX5BO8XZRmEFHkgjC5eWJ27ArgAruJfwRXWuQfTNFD4raI9YvIiQNEzsZ0ydxwKBqJ/FJtiw69djuzQk1f4HdQo8s5gaZ7fd2U+1zbaeAvi9usyvRHZE4=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FSpYuOrU9wd6%2Fo1wzy6E%2F04wURHJ1xuMutzkIUx6OBTmHX5BO8XZRmEFHkgjC5eWJ27ArgAruJfwRXWuQfTNFD4raI9YvIiQNEzsZ0ydxwKBqJ%2FFJtiw69djuzQk1f4HdQo8s5gaZ7fd2U%2B1zbaeAvi9usyvRHZE4%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-19T07:56:22.355Z",
                      "updated_at": "2022-09-19T08:04:22.458Z",
                      "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 1,
                        "redeemed_points": 10,
                        "object": "list",
                        "url": "/v1/vouchers/LOYALTY-CARD-xLPbpbXR/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/LOYALTY-CARD-xLPbpbXR/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Gift Card": {
                    "value": {
                      "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                      "code": "GIFT-CARD-xwc6X7Tk",
                      "campaign": "Gift Cards",
                      "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                      "category": null,
                      "category_id": null,
                      "type": "GIFT_VOUCHER",
                      "discount": null,
                      "gift": {
                        "amount": 55000,
                        "balance": 44700,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM/aTyHCYfr7kRWb2vv08WIgY/Tv53SJGW+k2keqfsTq/Ohb5shkCN3FTFsaI8gulTp616sEGn/JJoIInIoNkO9Vd1+AfrKiAjmirCmekE6cz2SVCyNAXs=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM%2FaTyHCYfr7kRWb2vv08WIgY%2FTv53SJGW%2Bk2keqfsTq%2FOhb5shkCN3FTFsaI8gulTp616sEGn%2FJJoIInIoNkO9Vd1%2BAfrKiAjmirCmekE6cz2SVCyNAXs%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX18vWc/qplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO/199U+zicnFNWqg/jF5ZCQW+6jO1q8=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18vWc%2FqplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO%2F199U%2BzicnFNWqg%2FjF5ZCQW%2B6jO1q8%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-07-08T09:44:33.179Z",
                      "updated_at": "2022-08-29T09:37:20.185Z",
                      "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 7,
                        "redeemed_amount": 10300,
                        "object": "list",
                        "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Amount Discount": {
                    "value": {
                      "id": "v_OBVfpTVf24DBz0HZmKVZa5UEl1DUg2bn",
                      "code": "AMOUNTDISCOUNTUSINGFORMULA",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "First",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "AMOUNT",
                        "amount_off": 400,
                        "amount_off_formula": "IF(CUSTOMER_METADATA(\\"favorite_brands\\") contains \\"Nike\\";20;CUSTOMER_METADATA(\\"age\\"))",
                        "effect": "APPLY_TO_ORDER"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2022-09-01T00:00:00.000Z",
                      "expiration_date": "2022-10-31T00:00:00.000Z",
                      "validity_timeframe": null,
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": true,
                      "additional_info": "This voucher discount is based on a formula, payment must be using VISA, and order must be over $100.",
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX18tV6jdzxWPwEzjeiX4DoM06JpwaoKUNGMNx4Td5e8FwA68uIHQwPaRpJr9CUCpiP4IsSD8nEJn1YtEv6FnY83wIv7uljYoQOYmMPyhKec8Ct3zH7KurMGuj4Fhws3HNA3bqP5MYEy+aA==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX18tV6jdzxWPwEzjeiX4DoM06JpwaoKUNGMNx4Td5e8FwA68uIHQwPaRpJr9CUCpiP4IsSD8nEJn1YtEv6FnY83wIv7uljYoQOYmMPyhKec8Ct3zH7KurMGuj4Fhws3HNA3bqP5MYEy%2BaA%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX181+WljOgxIt9Jg1Urbuv226+8Ug0DIyZiI0WtThPNYKZZEodzqQpIsGSdrDGXr2chLo+4FH3Ey8G2YXCPM6nUhZRSMF5oL3+uNjcLtBvb7MF5+ynY5fIgpXolwUK0R/BuT4Pa8prhgTg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX181%2BWljOgxIt9Jg1Urbuv226%2B8Ug0DIyZiI0WtThPNYKZZEodzqQpIsGSdrDGXr2chLo%2B4FH3Ey8G2YXCPM6nUhZRSMF5oL3%2BuNjcLtBvb7MF5%2BynY5fIgpXolwUK0R%2FBuT4Pa8prhgTg%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-12T07:51:02.145Z",
                      "updated_at": "2022-09-19T08:29:12.566Z",
                      "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_tO5AuzXIkkNPTC50",
                            "rule_id": "val_5h0wc453_2",
                            "related_object_id": "v_OBVfpTVf24DBz0HZmKVZa5UEl1DUg2bn",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-19T08:27:59.160Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 2,
                        "object": "list",
                        "url": "/v1/vouchers/AMOUNTDISCOUNTUSINGFORMULA/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/AMOUNTDISCOUNTUSINGFORMULA/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Percent Discount": {
                    "value": {
                      "id": "v_2LcXRN4X0TNNgPoBceXIsE4LYs13kta1",
                      "code": "PercentDiscountUsingFormula",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "percent_off": 3,
                        "percent_off_formula": "CUSTOMER_METADATA(\\"age\\")",
                        "effect": "APPLY_TO_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+74dNbbuHNdVR+5SXVrdo6Zp2tUInlseZtheoYEvrayBBDEoJFaeDuC1BzQr+j8ayuFU7+BtCdNe25YRae4Mp+3Y1HsrkVudshKRzMBdS/43GT9Qi6tOXQDsYjHh70zNz13lMOC9bnaX6WZCVU0vRWM/VDXbYNxGZH6V1wpcGOkmkhkEYPSuIXBDF65FsgHOAwIPvKBxa/aQ==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2B74dNbbuHNdVR%2B5SXVrdo6Zp2tUInlseZtheoYEvrayBBDEoJFaeDuC1BzQr%2Bj8ayuFU7%2BBtCdNe25YRae4Mp%2B3Y1HsrkVudshKRzMBdS%2F43GT9Qi6tOXQDsYjHh70zNz13lMOC9bnaX6WZCVU0vRWM%2FVDXbYNxGZH6V1wpcGOkmkhkEYPSuIXBDF65FsgHOAwIPvKBxa%2FaQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19t8/dJWDNnnwPtxt3e0kZTDAELYiQcSHWIEO5wr6uLeDbM2KKbGYUfkKKtZRsWtiKhOQQc7zmNoCqR82UB+p0gzGM0tyXa/npbPUTe0Y5Y/arDPnomb9AaUFjK9Uq5OUBYbxi1ERqEhy/20Owr0m0e0E2I3jQmgAxkNokRm1g31zX4zheea8gTtiFwb6ZrYvGbaOhj5IxYWg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19t8%2FdJWDNnnwPtxt3e0kZTDAELYiQcSHWIEO5wr6uLeDbM2KKbGYUfkKKtZRsWtiKhOQQc7zmNoCqR82UB%2Bp0gzGM0tyXa%2FnpbPUTe0Y5Y%2FarDPnomb9AaUFjK9Uq5OUBYbxi1ERqEhy%2F20Owr0m0e0E2I3jQmgAxkNokRm1g31zX4zheea8gTtiFwb6ZrYvGbaOhj5IxYWg%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-15T10:20:46.467Z",
                      "updated_at": "2022-09-15T10:43:51.116Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_EuYasM5fyDR9G2r4",
                            "rule_id": "val_0k19OQHjNZRT",
                            "related_object_id": "v_2LcXRN4X0TNNgPoBceXIsE4LYs13kta1",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-15T10:20:46.460Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 3,
                        "object": "list",
                        "url": "/v1/vouchers/PercentDiscountUsingFormula/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/PercentDiscountUsingFormula/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Fixed Discount": {
                    "value": {
                      "id": "v_zXQtyi5FYQYoRXv459hmK8M5Gi2lLoDl",
                      "code": "FixedDiscountUsingFormula",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "FIXED",
                        "effect": "APPLY_TO_ORDER",
                        "fixed_amount": 200,
                        "fixed_amount_formula": "IF(ORDER_UNITS_QUANTITY > 3;CUSTOMER_METADATA(\\"age\\") + 2;CUSTOMER_METADATA(\\"age\\") - 2)"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+sY8iWRFMrrPOjY6pS7JZSqJUPIzAgFO5oy5GvTj27KrukNxucE4wrA4n9QL7pua3CfJzGWe0Hc5J6XXU2m5ktik4iUNRO6pxZmL4ZuR96C1XHJAGaIiI7lM17OjJD2b72/hyyDUi8DflzcYixFdXTOR3o1rcaPoY=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BsY8iWRFMrrPOjY6pS7JZSqJUPIzAgFO5oy5GvTj27KrukNxucE4wrA4n9QL7pua3CfJzGWe0Hc5J6XXU2m5ktik4iUNRO6pxZmL4ZuR96C1XHJAGaIiI7lM17OjJD2b72%2FhyyDUi8DflzcYixFdXTOR3o1rcaPoY%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1+af+iouhzUVUL0IocB7BAWR8rB0z8/9/OgYi32EHQ9salEEtE3XYPWtseOAxi5keMRp6K3JLDyx4RvYpw3Fe5SN0ed7PEcWr4fLUoUBntHtH0lOPFOtWxpY3tAjnyWpE/CYTR/S135KZ6GIfCS/+VQNrzbS/bFXgY=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2Baf%2BiouhzUVUL0IocB7BAWR8rB0z8%2F9%2FOgYi32EHQ9salEEtE3XYPWtseOAxi5keMRp6K3JLDyx4RvYpw3Fe5SN0ed7PEcWr4fLUoUBntHtH0lOPFOtWxpY3tAjnyWpE%2FCYTR%2FS135KZ6GIfCS%2F%2BVQNrzbS%2FbFXgY%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-15T12:46:55.818Z",
                      "updated_at": "2022-09-16T10:03:25.057Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 5,
                        "object": "list",
                        "url": "/v1/vouchers/FixedDiscountUsingFormula/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/FixedDiscountUsingFormula/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Unit Discount": {
                    "value": {
                      "id": "v_JkjV4v9OKTsaIuHoqXGrkGijNaRGYNzm",
                      "code": "UnitDiscountUsingFormula",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "unit_off": 1,
                        "unit_off_formula": "IF(ORDER_UNITS_QUANTITY > 3;CUSTOMER_METADATA(\\"age\\") / 5;CUSTOMER_METADATA(\\"age\\") / 10)",
                        "unit_type": "sku_0b661e41eccd35a8e9",
                        "effect": "ADD_MISSING_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+6okuUQBKDcu0jGGg0jOU3kwYUFhX79TdwYKjXyV14BX74z/lehzciL0vdtutoiMVf8Nzl+B278gSHI5TiecPsTXChbGKSjH9gYUxZkdQev0qfmR4frKHjKKHHfT9DEcRWCLwKDJ9V+b89EAmbMouLlaDvkD63bZI=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2B6okuUQBKDcu0jGGg0jOU3kwYUFhX79TdwYKjXyV14BX74z%2FlehzciL0vdtutoiMVf8Nzl%2BB278gSHI5TiecPsTXChbGKSjH9gYUxZkdQev0qfmR4frKHjKKHHfT9DEcRWCLwKDJ9V%2Bb89EAmbMouLlaDvkD63bZI%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19E7POETWB9YO+S4gkbGFQSm4VDNXEvqdlln6cWiyWTplnWkiUbs/2XMIva3q2rHDFP4toeKrLOGeS5mqhJcdd3yVsWXjHaALwCJIis2D4l5soDvz+Ka/vTqJdFWQzqsIl0BqEpr1tLLy8JFMGN7MY5nY3nr/ciSN8=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19E7POETWB9YO%2BS4gkbGFQSm4VDNXEvqdlln6cWiyWTplnWkiUbs%2F2XMIva3q2rHDFP4toeKrLOGeS5mqhJcdd3yVsWXjHaALwCJIis2D4l5soDvz%2BKa%2FvTqJdFWQzqsIl0BqEpr1tLLy8JFMGN7MY5nY3nr%2FciSN8%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-15T13:36:27.838Z",
                      "updated_at": "2022-09-16T10:03:25.057Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 5,
                        "object": "list",
                        "url": "/v1/vouchers/UnitDiscountUsingFormula/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/UnitDiscountUsingFormula/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Multiple Unit Discount": {
                    "value": {
                      "id": "v_5Xgi5ht4sw432LQ7bwmyjKnUAYtOrJAh",
                      "code": "UnitDiscountUsingFormulaForMultipleProductVariants",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "effect": "ADD_MANY_ITEMS",
                        "units": [
                          {
                            "unit_off": 3,
                            "unit_off_formula": "IF(ORDER_AMOUNT > 100;CUSTOMER_METADATA(\\"age\\");CUSTOMER_METADATA(\\"age\\") / 2)",
                            "unit_type": "sku_0b661e41fc8d35a8f7",
                            "effect": "ADD_MISSING_ITEMS"
                          },
                          {
                            "unit_off": 4,
                            "unit_off_formula": "IF(ORDER_AMOUNT > 100;CUSTOMER_METADATA(\\"age\\") + 2;CUSTOMER_METADATA(\\"age\\") - -2)",
                            "unit_type": "sku_0b661e41fc8d35a8f6",
                            "effect": "ADD_NEW_ITEMS"
                          }
                        ]
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+qkwm+Yu29uhfotQxirJftPuWjA1P9WGxHqqmOHsU9esf6R5Ln7AeiqX8l9iIpy+D3yav5GmF2UrY6PD6fS9Y+yu+7yTVQu+agFZqdN1jvWw4DBOCHKPgynaMiNS29Cv4EIOFCY9Ux+4Lp8aVdalItCVCEH25DxWD+HUKq1lE31Y0DfWssg95oO2m73ZeGa8je7zd09eW7cg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bqkwm%2BYu29uhfotQxirJftPuWjA1P9WGxHqqmOHsU9esf6R5Ln7AeiqX8l9iIpy%2BD3yav5GmF2UrY6PD6fS9Y%2Byu%2B7yTVQu%2BagFZqdN1jvWw4DBOCHKPgynaMiNS29Cv4EIOFCY9Ux%2B4Lp8aVdalItCVCEH25DxWD%2BHUKq1lE31Y0DfWssg95oO2m73ZeGa8je7zd09eW7cg%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1+poCeZMw207p8HWtpoeokpaPfUQQoRIxpGXmqi5ic2ZPhQwKrUnujPDW4Sw1ODgHV6nLWQQQ9g7j3S4793YfzHDi1H8L3kZroH0TwWFNBgzQkV/QLqc387xUUckr0fvmhTBCarpsB+dWPOwlaNuVivTVB+Yyh/1FcbGbjvbj1Sm12wVNom2KZ3m1K/lJ6vBoGkXqq0jutytA==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BpoCeZMw207p8HWtpoeokpaPfUQQoRIxpGXmqi5ic2ZPhQwKrUnujPDW4Sw1ODgHV6nLWQQQ9g7j3S4793YfzHDi1H8L3kZroH0TwWFNBgzQkV%2FQLqc387xUUckr0fvmhTBCarpsB%2BdWPOwlaNuVivTVB%2BYyh%2F1FcbGbjvbj1Sm12wVNom2KZ3m1K%2FlJ6vBoGkXqq0jutytA%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-16T05:44:50.722Z",
                      "updated_at": "2022-09-19T09:25:17.303Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 3,
                        "object": "list",
                        "url": "/v1/vouchers/UnitDiscountUsingFormulaForMultipleProductVariants/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/UnitDiscountUsingFormulaForMultipleProductVariants/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Free Shipping": {
                    "value": {
                      "id": "v_gO13ON60WqVmP1DASWuJRF83Xt5KrVNL",
                      "code": "FreeShipping",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "unit_off": 1,
                        "unit_type": "prod_5h1pp1ng",
                        "effect": "ADD_MISSING_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX19R0AaZSL8eog8GYSGvRcADkJ24Hhr52Awb2KNF11CE7oyTHVBq+S3gexrVR8PxHgEz/jR1Hh2YfM5h0k5CYPD24I/pXJYQVTa1CpXFBrrxVET9QyK48z5hxu2nsHHBsV7g0zK1nIVibsw06db8x1F1zaR7Un9oq6A=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19R0AaZSL8eog8GYSGvRcADkJ24Hhr52Awb2KNF11CE7oyTHVBq%2BS3gexrVR8PxHgEz%2FjR1Hh2YfM5h0k5CYPD24I%2FpXJYQVTa1CpXFBrrxVET9QyK48z5hxu2nsHHBsV7g0zK1nIVibsw06db8x1F1zaR7Un9oq6A%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19XHGrCUHCfcSz/VLWmN1UU13QmDsH9ezEYtzHAUAeaLvN12Yv5eBJ7h7R2Og2pNm7mdHxfMR8gBJWEgHuBkodwXch1llhO6hNy9KXebNU+McRx9iEB/DqSzagjaxCiUNB1xitLgXDlUH5cH9naOCOtCHGMrEQW4h0=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19XHGrCUHCfcSz%2FVLWmN1UU13QmDsH9ezEYtzHAUAeaLvN12Yv5eBJ7h7R2Og2pNm7mdHxfMR8gBJWEgHuBkodwXch1llhO6hNy9KXebNU%2BMcRx9iEB%2FDqSzagjaxCiUNB1xitLgXDlUH5cH9naOCOtCHGMrEQW4h0%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-16T07:19:53.945Z",
                      "updated_at": "2022-09-16T07:26:35.361Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 2,
                        "object": "list",
                        "url": "/v1/vouchers/FreeShipping/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/FreeShipping/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Delete Voucher",
        "description": "Deletes a voucher. This operation cannot be undone. Additionally, this operation removes any redemptions on the voucher.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the voucher will be removed permanently. Going forward, the user will be able to create another voucher with exactly the same code."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/vouchers/{code}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`.",
          "required": true
        }
      ],
      "post": {
        "operationId": "enable-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Enable Voucher",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \\n___\\nThe method sets the voucher state to **active**. The voucher can be redeemed - only if the redemption occurs after the start date and the voucher is not expired.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersEnableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                      "code": "2CpRCE2c",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "AMOUNT",
                        "amount_off": 300,
                        "effect": "APPLY_TO_ITEMS_PROPORTIONALLY"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+ro/6HLsfI9E/rz0QEoYv+rcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz+WQtg4nKpjUS0wcA7AuIbz2zb870YfJO/r5UBS5gCqQ==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bro%2F6HLsfI9E%2Frz0QEoYv%2BrcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz%2BWQtg4nKpjUS0wcA7AuIbz2zb870YfJO%2Fr5UBS5gCqQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3/4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ+aTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3%2F4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ%2BaTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-19T10:06:07.932Z",
                      "updated_at": "2022-09-19T11:54:17.248Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_HesdqEzt5e9c0T56",
                            "rule_id": "val_gZft0NKZSUWK",
                            "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-19T10:06:07.934Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/2CpRCE2c/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/2CpRCE2c/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "post": {
        "operationId": "disable-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Disable Voucher",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \\n___\\nThis method sets the voucher state to **inactive**. The voucher cannot be redeemed.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersDisableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                      "code": "2CpRCE2c",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "AMOUNT",
                        "amount_off": 300,
                        "effect": "APPLY_TO_ITEMS_PROPORTIONALLY"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": false,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+ro/6HLsfI9E/rz0QEoYv+rcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz+WQtg4nKpjUS0wcA7AuIbz2zb870YfJO/r5UBS5gCqQ==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bro%2F6HLsfI9E%2Frz0QEoYv%2BrcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz%2BWQtg4nKpjUS0wcA7AuIbz2zb870YfJO%2Fr5UBS5gCqQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3/4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ+aTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3%2F4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ%2BaTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-19T10:06:07.932Z",
                      "updated_at": "2022-09-19T11:53:23.452Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_HesdqEzt5e9c0T56",
                            "rule_id": "val_gZft0NKZSUWK",
                            "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-19T10:06:07.934Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/2CpRCE2c/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/2CpRCE2c/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/balance": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "post": {
        "operationId": "update-voucher-balance",
        "tags": [
          "VOUCHERS API"
        ],
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "summary": "Add or Remove Voucher Balance",
        "description": "Add balance to an existing gift card or loyalty card.",
        "requestBody": {
          "required": true,
          "description": "Provide the amount to be added to/subtracted from the voucher.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VouchersBalanceUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "amount": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a balance object if the operation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersBalanceUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "amount": 10000,
                      "total": 20100,
                      "balance": 20100,
                      "type": "gift_voucher",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/transactions": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "get": {
        "operationId": "list-voucher-transactions",
        "tags": [
          "VOUCHERS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "summary": "List Voucher Transactions",
        "description": "List transactions that are associated with credit movements on a gift card or loyalty card.",
        "responses": {
          "200": {
            "description": "Returns a dictionary of transaction objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersTransactionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "vtx_0c9dccc4d5813e71bd",
                          "source_id": "20230317_subtract_1",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "API",
                          "reason": "Subtracting credits from card",
                          "type": "CREDITS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128020,
                              "amount": -2000,
                              "object": "balance",
                              "balance": 121020,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T15:50:00.786Z"
                        },
                        {
                          "id": "vtx_0c9dcc920ac0e9ef82",
                          "source_id": "20230317_add_1",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "API",
                          "reason": "Adding more points to card",
                          "type": "CREDITS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130020,
                              "amount": 20,
                              "object": "balance",
                              "balance": 123020,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T15:49:08.768Z"
                        },
                        {
                          "id": "vtx_0c94f018d30bef6689",
                          "source_id": "HRwc0oHz_reward",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "voucherify-web-ui",
                          "reason": "cash reward",
                          "type": "CREDITS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130000,
                              "amount": 2000,
                              "object": "balance",
                              "balance": 123000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:38:02.055Z"
                        },
                        {
                          "id": "vtx_0c94edbbaccbef5db6",
                          "source_id": null,
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": null,
                          "reason": null,
                          "type": "CREDITS_REFUND",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128000,
                              "amount": 44,
                              "object": "balance",
                              "balance": 121000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_jj5EzDxDOd2xFPsAJJ18IaZK",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c94ed583fcafc31c1"
                            },
                            "rollback": {
                              "id": "rr_0c94edbb8d0bef5d9e"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:27:42.389Z"
                        },
                        {
                          "id": "vtx_0c94ed584f4afc31da",
                          "source_id": null,
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": null,
                          "reason": null,
                          "type": "CREDITS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128000,
                              "amount": -44,
                              "object": "balance",
                              "balance": 120956,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_jj5EzDxDOd2xFPsAJJ18IaZK",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c94ed583fcafc31c1"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:26:00.640Z"
                        },
                        {
                          "id": "vtx_0c94e9432c4afc2134",
                          "source_id": "HRwc0oHz_removal",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "voucherify-web-ui",
                          "reason": "removal",
                          "type": "CREDITS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128000,
                              "amount": -2000,
                              "object": "balance",
                              "balance": 121000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:08:10.413Z"
                        },
                        {
                          "id": "vtx_0c94e8100f8afc1c6c",
                          "source_id": null,
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": null,
                          "reason": null,
                          "type": "CREDITS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130000,
                              "amount": -7000,
                              "object": "balance",
                              "balance": 123000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_qZX3pEt5rFf5W23qRMDQcVt9",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c94e80fda4afc1c59"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:02:55.935Z"
                        },
                        {
                          "id": "vtx_0c94e6b82a4bef406c",
                          "source_id": "walmart",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "voucherify-web-ui",
                          "reason": "return",
                          "type": "CREDITS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130000,
                              "amount": 5000,
                              "object": "balance",
                              "balance": 130000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T17:57:03.758Z"
                        }
                      ],
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/transactions/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "example": "GIFT-CARD-1",
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "post": {
        "operationId": "export-voucher-transactions",
        "tags": [
          "VOUCHERS API"
        ],
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "summary": "Export Voucher Transactions",
        "description": "Export transactions that are associated with credit movements on a gift card or loyalty card.\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_CANCELLATION\` <br> - \`POINTS_REDEMPTION\`<br> - \`POINTS_REFUND\`<br> - \`POINTS_ADDITION\`<br> - \`POINTS_REMOVAL\`<br> - \`POINTS_EXPIRATION\`<br> - \`POINTS_TRANSFER_IN\`<br> - \`POINTS_TRANSFER_OUT\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "requestBody": {
          "description": "Specify the parameters for the transaction export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VouchersTransactionsExportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "order": "-created_at",
                      "fields": [
                        "id",
                        "type",
                        "source_id",
                        "reason",
                        "balance",
                        "amount",
                        "created_at",
                        "voucher_id",
                        "campaign_id",
                        "details",
                        "source"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an export object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersTransactionsExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_ARi2UbRjgfrHQJoVcKFrBUgA",
                      "object": "export",
                      "created_at": "2023-05-16T08:30:21.496Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "order": "-created_at",
                        "fields": [
                          "id",
                          "type",
                          "source_id",
                          "reason",
                          "balance",
                          "amount",
                          "created_at",
                          "voucher_id",
                          "campaign_id",
                          "details",
                          "related_transaction_id",
                          "source"
                        ],
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  },
                  "No request body": {
                    "value": {
                      "id": "exp_ExEE5A6OIK4tssuNswr5O6SU",
                      "object": "export",
                      "created_at": "2023-03-21T13:34:57.034Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/importCSV": {
      "post": {
        "operationId": "import-vouchers-using-csv",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Import Vouchers using CSV",
        "description": "Import standalone vouchers into the repository using a CSV file.\\n\\nThe CSV file has to include headers in the first line. All properties listed in the file headers that cannot be mapped to standard voucher fields will be added to the metadata object.  \\n\\nYou can find an example CSV file [here](https://support.voucherify.io/article/45-import-codes-and-share-them-digitally#coupons).\\n___\\n<!--\\ntitle: \\"cURL Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL cURL example\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/vouchers/importCSV \\\\\\n  -F file=@/path/to/vouchers.csv \\\\\\n  -H \\"X-App-Id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\" \\\\\\n  -H \\"X-App-Token: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\"\\n\`\`\`\\n\\n<!-- theme: info -->\\n\\n> 📘 Standard voucher fields mapping\\n>\\n> - Go to the <!-- [import vouchers](OpenAPI.json/paths/~1vouchers~1import) -->[import vouchers](ref:import-vouchers) endpoint to see all standard CSV fields description (body params section).\\n> - Supported CSV file headers: Code,Voucher Type,Value,Discount Type,Category,Start Date,Expiration Date,Redemption Limit,Redeemed Quantity, Redeemed Amount,Active,Additional Info,Custom Metadata Property Name\\n>- **Start and expiration dates** need to be provided in compliance with the ISO 8601 norms. For example, 2020-03-11T09:00:00.000Z.  \\n>    - \`YYYY-MM-DD\`\\n>    - \`YYYY-MM-DDTHH\`\\n>    - \`YYYY-MM-DDTHH:mm\`\\n>    - \`YYYY-MM-DDTHH:mm:ss\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ss.SSSZ\`\\n> - Custom code attributes (not supported by-default) need to be added as code **metadata**.\\n> - You **cannot import the same codes** to a single Voucherify Project.\\n\\n<!-- theme: info -->\\n\\n> 📘 Categories\\n>\\n> In the structure representing your data, you can define a category that the voucher belongs to. You can later use the category of a voucher to group and search by specific criteria in the Dashboard and using the [List Vouchers](ref:list-vouchers) endpoint.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VouchersImportCSVRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and vouchers will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the **response** and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersImportCsvCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/sessions/{sessionKey}": {
      "parameters": [
        {
          "name": "code",
          "in": "path",
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify.",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts",
          "name": "sessionKey",
          "in": "path",
          "required": true,
          "description": "A unique session identifier."
        }
      ],
      "delete": {
        "operationId": "release-validation-session",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Release Validation Session",
        "description": "Manually release a validation session that has been set up for the voucher. This method undos the actions that are explained in our guide on how a validation session was established, you can read more [here](doc:locking-validation-session). \\n\\n> 📘 Release Session using Dashboard\\n>\\n> You can also use the Validations Manager in the Dashboard to unlock sessions. [Read more](https://support.voucherify.io/article/16-dashboard-sections#validations).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if the validation session was released successfully."
          }
        }
      }
    },
    "/v1/campaigns": {
      "post": {
        "operationId": "create-campaign",
        "tags": [
          "CAMPAIGNS API",
          "PROMOTIONS API"
        ],
        "summary": "Create Campaign",
        "description": "Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.  \\n<!-- theme: info -->\\n\\n> 📘 Global uniqueness\\n>\\n> All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.  \\n<!-- theme: warning -->\\n> 🚧 Code generation status\\n>\\n> This is an asynchronous action; you can't read or modify a newly created campaign until the code generation is completed. See the \`creation_status\` field in the <!-- [campaign object](OpenAPI.json/components/schemas/Campaign) -->[campaign object](ref:get-campaign) description.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the campaign that you would like to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsCreateRequestBody"
              },
              "examples": {
                "Discount Campaign": {
                  "value": {
                    "name": "Discount Campaign 4",
                    "campaign_type": "DISCOUNT_COUPONS",
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 3,
                    "voucher": {
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "percent_off": 10,
                        "type": "PERCENT"
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "10OFF-#######"
                      }
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "AMER"
                    }
                  }
                },
                "Gift Card Campaign": {
                  "value": {
                    "name": "Gift Card Campaign",
                    "campaign_type": "GIFT_VOUCHERS",
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 2,
                    "voucher": {
                      "type": "GIFT_VOUCHER",
                      "gift": {
                        "amount": 1000,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "GIFT-CARD-#######"
                      }
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                },
                "Loyalty Program": {
                  "value": {
                    "name": "Loyalty Campaign",
                    "campaign_type": "LOYALTY_PROGRAM",
                    "auto_join": true,
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 2,
                    "voucher": {
                      "type": "LOYALTY_CARD",
                      "loyalty_card": {
                        "points": 1000,
                        "expiration_rules": {
                          "period_type": "MONTH",
                          "period_value": 3,
                          "rounding_type": "END_OF_YEAR"
                        }
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "LOYALTY-CARD-#######"
                      }
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                },
                "Promotion": {
                  "value": {
                    "name": "Promotion - API - 4",
                    "campaign_type": "PROMOTION",
                    "type": "STATIC",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "use_voucher_metadata_schema": false,
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "active": false,
                    "promotion": {
                      "tiers": [
                        {
                          "name": "Percent Discount",
                          "banner": "Get 40% off",
                          "action": {
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 40,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {
                            "level": "B"
                          },
                          "active": false,
                          "start_date": "2022-09-21T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": {
                            "interval": "P2D",
                            "duration": "P1D"
                          },
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "validation_rules": [
                            "val_q8qUBMOh5qIQ"
                          ]
                        },
                        {
                          "name": "Order more than $100",
                          "banner": "Get $30 off",
                          "action": {
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 3000,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {
                            "level": "A"
                          },
                          "active": false,
                          "start_date": "2022-09-21T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": {
                            "interval": "P2D",
                            "duration": "P1D"
                          },
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "validation_rules": [
                            "val_q8qUBMOh5qIQ"
                          ]
                        }
                      ]
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                },
                "Referral Program": {
                  "value": {
                    "name": "Referral Campaign 2",
                    "campaign_type": "REFERRAL_PROGRAM",
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 2,
                    "referral_program": {
                      "conversion_event_type": "redemption"
                    },
                    "voucher": {
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "percent_off": 45,
                        "effect": "APPLY_TO_ORDER",
                        "amount_limit": 15
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "REFERRAL-CODE-#######"
                      },
                      "is_referral_code": true
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a campaign object if the call succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsCreateResponseBody"
                },
                "examples": {
                  "Discount Campaign": {
                    "value": {
                      "id": "camp_NdBCAQk1AAZcMcv6kt6X164Q",
                      "name": "Discount Campaign 4",
                      "campaign_type": "DISCOUNT_COUPONS",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "PERCENT",
                          "percent_off": 10
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "10OFF-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": false,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "AMER"
                      },
                      "created_at": "2022-09-21T09:25:49.617Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Gift Card Campaign": {
                    "value": {
                      "id": "camp_B2Gx83JsSbmvj05MOwxYbNm6",
                      "name": "Gift Card Campaign",
                      "campaign_type": "GIFT_VOUCHERS",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "GIFT_VOUCHER",
                        "gift": {
                          "amount": 1000,
                          "effect": "APPLY_TO_ORDER"
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "GIFT-CARD-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": false,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-21T09:31:16.266Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Loyalty Program": {
                    "value": {
                      "id": "camp_FZL4iTTdZw36nZOoXYQ172fQ",
                      "name": "Loyalty Campaign",
                      "campaign_type": "LOYALTY_PROGRAM",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "LOYALTY_CARD",
                        "loyalty_card": {
                          "points": 1000,
                          "expiration_rules": {
                            "period_type": "MONTH",
                            "period_value": 3,
                            "rounding_type": "END_OF_YEAR"
                          }
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "LOYALTY-CARD-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": true,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-21T09:39:45.479Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Promotion": {
                    "value": {
                      "id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                      "name": "Promotion - API - 4",
                      "campaign_type": "PROMOTION",
                      "type": "STATIC",
                      "auto_join": false,
                      "join_once": false,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-23T08:54:38.281Z",
                      "category": "First",
                      "creation_status": "DONE",
                      "vouchers_generation_status": "DONE",
                      "protected": false,
                      "promotion": {
                        "object": "list",
                        "data_ref": "tiers",
                        "tiers": [
                          {
                            "id": "promo_M4OfmMgSUyN12JPAw3l4hWjD",
                            "created_at": "2022-09-23T08:54:38.286Z",
                            "name": "Percent Discount",
                            "banner": "Get 40% off",
                            "action": {
                              "discount": {
                                "type": "PERCENT",
                                "percent_off": 40,
                                "effect": "APPLY_TO_ORDER"
                              }
                            },
                            "metadata": {
                              "level": "B"
                            },
                            "hierarchy": 1,
                            "promotion_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "campaign": {
                              "id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                              "start_date": "2020-08-16T00:00:00.000Z",
                              "expiration_date": "2023-12-26T00:00:00.000Z",
                              "validity_timeframe": {
                                "interval": "P2D",
                                "duration": "P1D"
                              },
                              "validity_day_of_week": [
                                0,
                                1,
                                2
                              ],
                              "active": true,
                              "category_id": "cat_0bb343dee3cdb5ec0c",
                              "object": "campaign"
                            },
                            "campaign_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "active": false,
                            "start_date": "2022-09-21T00:00:00.000Z",
                            "expiration_date": "2022-09-30T00:00:00.000Z",
                            "validity_timeframe": {
                              "interval": "P2D",
                              "duration": "P1D"
                            },
                            "validity_day_of_week": [
                              1,
                              2,
                              3,
                              4
                            ],
                            "summary": {
                              "redemptions": {
                                "total_redeemed": 0
                              },
                              "orders": {
                                "total_amount": 0,
                                "total_discount_amount": 0
                              }
                            },
                            "object": "promotion_tier",
                            "validation_rule_assignments": {
                              "object": "list",
                              "data_ref": "data",
                              "data": [
                                {
                                  "id": "asgm_dr3oXeN98YfiTF60",
                                  "rule_id": "val_q8qUBMOh5qIQ",
                                  "related_object_id": "promo_M4OfmMgSUyN12JPAw3l4hWjD",
                                  "related_object_type": "promotion_tier",
                                  "created_at": "2022-09-23T08:54:38.286Z",
                                  "object": "validation_rules_assignment"
                                }
                              ],
                              "total": 1
                            }
                          },
                          {
                            "id": "promo_uMSxvzhxXDp3Ijs3659npqb2",
                            "created_at": "2022-09-23T08:54:38.314Z",
                            "name": "Order more than $100",
                            "banner": "Get $30 off",
                            "action": {
                              "discount": {
                                "type": "AMOUNT",
                                "amount_off": 3000,
                                "effect": "APPLY_TO_ORDER"
                              }
                            },
                            "metadata": {
                              "level": "A"
                            },
                            "hierarchy": 2,
                            "promotion_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "campaign": {
                              "id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                              "start_date": "2020-08-16T00:00:00.000Z",
                              "expiration_date": "2023-12-26T00:00:00.000Z",
                              "validity_timeframe": {
                                "interval": "P2D",
                                "duration": "P1D"
                              },
                              "validity_day_of_week": [
                                0,
                                1,
                                2
                              ],
                              "active": true,
                              "category_id": "cat_0bb343dee3cdb5ec0c",
                              "object": "campaign"
                            },
                            "campaign_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "active": false,
                            "start_date": "2022-09-21T00:00:00.000Z",
                            "expiration_date": "2022-09-30T00:00:00.000Z",
                            "validity_timeframe": {
                              "interval": "P2D",
                              "duration": "P1D"
                            },
                            "validity_day_of_week": [
                              1,
                              2,
                              3,
                              4
                            ],
                            "summary": {
                              "redemptions": {
                                "total_redeemed": 0
                              },
                              "orders": {
                                "total_amount": 0,
                                "total_discount_amount": 0
                              }
                            },
                            "object": "promotion_tier",
                            "validation_rule_assignments": {
                              "object": "list",
                              "data_ref": "data",
                              "data": [
                                {
                                  "id": "asgm_jgJlWms7GVK59iNR",
                                  "rule_id": "val_q8qUBMOh5qIQ",
                                  "related_object_id": "promo_uMSxvzhxXDp3Ijs3659npqb2",
                                  "related_object_type": "promotion_tier",
                                  "created_at": "2022-09-23T08:54:38.314Z",
                                  "object": "validation_rules_assignment"
                                }
                              ],
                              "total": 1
                            }
                          }
                        ],
                        "total": 2,
                        "has_more": false
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Referral Program": {
                    "value": {
                      "id": "camp_N8rztKAqOYIdFxNLr9eNIjyB",
                      "name": "Referral Campaign 2",
                      "campaign_type": "REFERRAL_PROGRAM",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "PERCENT",
                          "amount_limit": 15,
                          "percent_off": 45,
                          "effect": "APPLY_TO_ORDER"
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "REFERRAL-CODE-#######"
                        },
                        "is_referral_code": true,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "referral_program": {
                        "conversion_event_type": "redemption"
                      },
                      "auto_join": false,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-23T09:06:41.757Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "list-campaigns",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "List Campaigns",
        "description": "Retrieve a list of campaigns in a project. \\n\\nThe campaigns are returned sorted by creation date, with the most recent campaigns appearing first.  \\n\\nWhen you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using \`limit\`, which page of campaigns to return using \`page\`, sort the campaigns using the \`order\` query parameter and filter the results by the \`campaign_type\`.\\n\\nThis method will return an error when trying to return a limit of more than 100 campaigns.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/campaign_type"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterExpandListCampaigns"
            },
            "in": "query",
            "name": "expand",
            "description": "Include an expanded \`categories\` object in the response."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListCampaigns"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a \`campaign\` property that contains an array of campaigns. The maximum number of campaigns returned is determined by the \`limit\` query parameter. Each entry in the array is a separate campaign object. If no more campaigns are available, the resulting array on a given page will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "campaigns",
                      "campaigns": [
                        {
                          "id": "camp_SibPsDRKQvg3SUtptgPZCNZb",
                          "name": "Voucher Metadata",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "PERCENT",
                              "amount_limit": 4400,
                              "percent_off": 30,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 9,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "#########",
                              "prefix": "Discount-",
                              "postfix": "YY"
                            },
                            "is_referral_code": false,
                            "start_date": "2022-09-20T00:00:00.000Z",
                            "expiration_date": "2022-09-30T00:00:00.000Z",
                            "validity_timeframe": {
                              "interval": "P3D",
                              "duration": "P1D"
                            }
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": false,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": {
                            "interval": "P3D",
                            "duration": "P1D"
                          },
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "activity_duration_after_publishing": "P24D",
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {
                            "region": "AMER"
                          },
                          "created_at": "2022-09-20T09:32:29.530Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        },
                        {
                          "id": "camp_HgsbCKauXmEoPnnh8aas0ISe",
                          "name": "Static Campaign",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "STATIC",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 3000,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": 1
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": true,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-09-20T07:52:34.499Z",
                          "updated_at": "2022-09-20T11:38:13.501Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        },
                        {
                          "id": "camp_f7fBbQxUuTN7dI7tGOo5XMDA",
                          "name": "Loyalty Program Fall 2022",
                          "campaign_type": "LOYALTY_PROGRAM",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "LOYALTY_CARD",
                            "loyalty_card": {
                              "points": 0,
                              "expiration_rules": {
                                "period_type": "MONTH",
                                "period_value": 7,
                                "rounding_type": "END_OF_YEAR"
                              }
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "LOYALTY-CARD-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": true,
                          "join_once": true,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-09-19T07:56:22.103Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": "cat_0bb343dee3cdb5ec0c",
                          "object": "campaign"
                        },
                        {
                          "id": "camp_4tHsQEDUOER6PeW8SoMdnHH6",
                          "name": "Dynamic Discounts",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 5,
                              "percent_off_formula": "IF(ORDER_AMOUNT > 300;15;5)",
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "DYNAMIC-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {
                            "marketing_text": "Purchases above $300 are eligible for a 15% discount."
                          },
                          "created_at": "2022-07-12T15:12:02.575Z",
                          "updated_at": "2022-07-20T10:48:05.617Z",
                          "category": "test",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": "cat_0b688929a2476386a8",
                          "object": "campaign"
                        },
                        {
                          "id": "camp_JlsseNSDO7l4neFtev6p6945",
                          "name": "$20 OFF Entire Order",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 2000,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "$20OFFORDER-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-07-11T09:43:36.057Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        },
                        {
                          "id": "camp_Uj3cNbWSgt7Zl4AyHM7Sa5Qk",
                          "name": "3% OFF Entire Order",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 3,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "3%OFFORDER-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-07-11T09:41:12.087Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}": {
      "parameters": [
        {
          "in": "path",
          "name": "campaignId",
          "description": "You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.",
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "get-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Get Campaign",
        "description": "Retrieves the campaign with the given campaign ID or campaign name.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a campaign object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "camp_JlsseNSDO7l4neFtev6p6945",
                      "name": "$20 OFF Entire Order",
                      "campaign_type": "DISCOUNT_COUPONS",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 2000,
                          "effect": "APPLY_TO_ORDER"
                        },
                        "redemption": {
                          "quantity": null
                        },
                        "code_config": {
                          "length": 8,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "########",
                          "prefix": "$20OFFORDER-"
                        },
                        "is_referral_code": false
                      },
                      "auto_join": false,
                      "join_once": false,
                      "use_voucher_metadata_schema": true,
                      "vouchers_count": 1,
                      "active": true,
                      "metadata": {},
                      "created_at": "2022-07-11T09:43:36.057Z",
                      "creation_status": "DONE",
                      "vouchers_generation_status": "DONE",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": null,
                      "object": "campaign"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Update Campaign",
        "description": "Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. \\n\\nFields other than the ones listed in the request body won't be modified. Even if provided, they will be silently skipped.   \\n<!-- theme: warning -->\\n> #### Vouchers will be affected\\n>\\n> This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the campaign parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "description": "New description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the campaign object if the update succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "camp_FZL4iTTdZw36nZOoXYQ172fQ",
                      "name": "Loyalty Campaign",
                      "campaign_type": "LOYALTY_PROGRAM",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "LOYALTY_CARD",
                        "loyalty_card": {
                          "points": 1000,
                          "expiration_rules": {
                            "period_type": "MONTH",
                            "period_value": 3,
                            "rounding_type": "END_OF_YEAR"
                          }
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "LOYALTY-CARD-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": false,
                      "join_once": false,
                      "use_voucher_metadata_schema": false,
                      "description": "New description",
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 2,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-21T09:39:45.479Z",
                      "updated_at": "2022-09-23T09:47:00.205Z",
                      "category": "First",
                      "creation_status": "MODIFYING",
                      "vouchers_generation_status": "MODIFYING",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Delete Campaign",
        "description": "Permanently deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "description": "If this flag is set to \`true\`, the campaign and related vouchers will be removed permanently. Going forward, the user will be able to create the next campaign with exactly the same name.",
            "name": "force"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "202": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsDeleteResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/vouchers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "add-vouchers-to-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Add Voucher to Campaign",
        "description": "This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional \`code_config\` parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterInteger"
            },
            "in": "query",
            "name": "vouchers_count",
            "description": "Number of vouchers that should be added."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the voucher parameters that you would like to overwrite.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsVouchersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "start_date": "2022-09-24T00:00:00Z",
                    "expiration_date": "2022-09-25T23:59:59Z",
                    "active": false,
                    "redemption": {
                      "quantity": null
                    },
                    "code_config": {
                      "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                      "length": 8,
                      "prefix": "Add-",
                      "pattern": null,
                      "postfix": "-API"
                    },
                    "additional_info": "Voucher added using API",
                    "metadata": {
                      "Season": "Fall"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded for a voucher count of 1.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsVouchersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0bb96ebb7ec3720252"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Returns an \`async_action_id\` if the request was made to create more than 1 voucher.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsVouchersCreateInBulkResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/vouchers/{code}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A custom **code** that identifies the voucher."
        }
      ],
      "post": {
        "operationId": "add-voucher-with-specific-code-to-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Add Voucher with Specific Code to Campaign",
        "description": "This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the voucher parameters that you would like to overwrite.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsVouchersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "category_id": "cat_0bb81a481615a37b5e",
                    "start_date": "2022-09-24T00:00:00Z",
                    "expiration_date": "2022-09-25T23:59:59Z",
                    "active": false,
                    "redemption": {
                      "quantity": null
                    },
                    "additional_info": "Voucher added using API",
                    "metadata": {
                      "Season": "Fall"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsVouchersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_EJwB9Wy2aOIsDpWhnl2QBY51OqjQ5Ukg",
                      "code": "Code3",
                      "campaign": "Add Voucher to Campaign",
                      "campaign_id": "camp_xxpmFyWO9h9s5cEe7HtmOK5B",
                      "category": null,
                      "category_id": "cat_0bb81a481615a37b5e",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "amount_limit": 2000,
                        "percent_off": 30,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2022-09-24T00:00:00.000Z",
                      "expiration_date": "2022-09-25T23:59:59.000Z",
                      "validity_timeframe": null,
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": true,
                      "additional_info": "Voucher added using API",
                      "metadata": {
                        "Season": "Fall"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+p2kdatp7KAUZxgSATC1gRWgsb1Q3RQyClNOBrfUrRKpTjSPSzBuUSZzb45TIpfWRISSiaz1QXGh8z9sVSHIWQsGLO6+1N81zXuY6/pnC7gRBa4edwMaRoCAwzqO9JDw148AGk4XrXLg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bp2kdatp7KAUZxgSATC1gRWgsb1Q3RQyClNOBrfUrRKpTjSPSzBuUSZzb45TIpfWRISSiaz1QXGh8z9sVSHIWQsGLO6%2B1N81zXuY6%2FpnC7gRBa4edwMaRoCAwzqO9JDw148AGk4XrXLg%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19wrLVWzIOgoVd9an76OxiJWB5/u9yWGoD7cqN6Qd1K9noNyR1YwvHnBrcN5fa5qtY+sOXonn7WsynAWeR289gA0XobsHHE2VWe8BzNZ7h2kH90SsiW+NCQg6Ts8clYWWP5lrGyV/fzoA==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19wrLVWzIOgoVd9an76OxiJWB5%2Fu9yWGoD7cqN6Qd1K9noNyR1YwvHnBrcN5fa5qtY%2BsOXonn7WsynAWeR289gA0XobsHHE2VWe8BzNZ7h2kH90SsiW%2BNCQg6Ts8clYWWP5lrGyV%2FfzoA%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-21T07:14:28.217Z",
                      "updated_at": null,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/Code3/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/Code3/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/import": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The ID of an existing campaign to which you're importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "import-vouchers-to-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Import Vouchers to Campaign",
        "description": "Imports vouchers to an **existing** campaign.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Discount type, expiration date and the remaining attributes will be taken from the <!-- [Campaign](OpenAPI.json/components/schemas/Campaign) -->[Campaign](ref:get-campaign) settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsImportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "code": "CODE7",
                      "category": "First",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    },
                    {
                      "code": "CODE8",
                      "category": "Second",
                      "redemption": {
                        "quantity": 18
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    },
                    {
                      "code": "CODE9",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "redemption": {
                        "quantity": 4
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    }
                  ]
                },
                "Gift Cards": {
                  "value": [
                    {
                      "code": "CODE13",
                      "category": "First",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "gift": {
                        "amount": 500
                      },
                      "active": true
                    },
                    {
                      "code": "CODE14",
                      "category": "Second",
                      "redemption": {
                        "quantity": 18
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "gift": {
                        "amount": 2000
                      },
                      "active": true
                    },
                    {
                      "code": "CODE15",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "redemption": {
                        "quantity": 4
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": false
                    }
                  ]
                },
                "Loyalty Cards": {
                  "value": [
                    {
                      "code": "CODE10",
                      "category": "First",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "loyalty_card": {
                        "points": 300
                      },
                      "active": true
                    },
                    {
                      "code": "CODE11",
                      "category": "Second",
                      "redemption": {
                        "quantity": 18
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "loyalty_card": {
                        "points": 2000
                      },
                      "active": true
                    },
                    {
                      "code": "CODE12",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "redemption": {
                        "quantity": 4
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the vouchers will be imported to the repository asynchronously. To check the status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsImportCreateResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/importCSV": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "import-vouchers-to-campaign-using-csv",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Import Vouchers to Campaign by CSV",
        "description": "Imports vouchers to an **existing** campaign.  \\n\\n\\nThe CSV file has to include headers in the first line. \\n\\nCurl Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/campaigns/TEST-CAMPAIGN/importCSV \\\\\\n  -F file=@/path/to/campaigns.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n\\nYou can import values for the following fields: \`Code\` (**required**), \`Category\`, \`Active\`. In a gift cards import, you can also include the current card balance using the \`Gift Amount\` header and the amount that was redeemed using the \`Redeemed Amount\` header. In a loyalty cards import, you can also include the current loyalty card score in points using the \`Loyalty Points\` header. Remaining CSV columns will be mapped to metadata properties. \\n\\nDiscount type, time limits, and validation rules will be taken from the <!-- [campaign object](OpenAPI.json/components/schemas/Campaign) -->[campaign object](ref:get-campaign) settings. \\n\\n\\n| **Active** | **Code** | **Loyalty Points** | **Gift Amount** | **Redeemed Amount** | **Redeemed Quantity** | **Category** | **Custom_metadata_property** |\\n|---|---|---|---|---|---|---|---|\\n| Use \`true\` or \`false\` to enable or disable the voucher; this flag can be used to turn off the ability to redeem a voucher even though it is within the campaign's start/end validity timeframe. | The unique voucher code. | The number of points to be added to the loyalty card. If you leave this undefined, then the initial number of points will be set according to the campaign settings.<br>Context: \`LOYALTY_PROGRAM\` | The initial gift card balance.<br>Context: \`GIFT_VOUCHERS\` | The amount that was redeemed from the available balance on a gift card. | The number of times the voucher has been redeemed. | A custom tag for the voucher to help you filter codes; you can either import the category name or a unique Voucherify-assigned category ID. | Any additional data that you would like to store for the given loyalty card as a Custom attribute. Remember to define the metadata schema in the Dashboard prior to importing codes. |\\n|<!-- theme: info -->\\n\\n> 📘 Active\\n>\\n> The CSV file is allowed in two versions; either with or without a column titled \`Active\`. It indicates whether the voucher is enabled after the import event.  \\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsVouchersImportCSVRequestBody"
              }
            }
          },
          "description": "The file path is stored in the form \`file\` header."
        },
        "responses": {
          "200": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the vouchers will be imported to the repository asynchronously. To check the status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsImportCsvCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/res_async_actions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "enable-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Enable Campaign",
        "description": "There are various times when you'll want to manage a campaign's accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.  \\n\\nSets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty json \`{}\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsEnableResponseBody"
                },
                "examples": {
                  "Empty JSON": {
                    "value": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "disable-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Disable Campaign",
        "description": "There are various times when you'll want to manage a campaign's accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.  \\n\\nSets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty json \`{}\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsDisableResponseBody"
                },
                "examples": {
                  "Empty JSON": {
                    "value": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/{campaignId}/tiers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID assigned by Voucherify."
        }
      ],
      "get": {
        "operationId": "list-promotion-tiers-from-campaign",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "List Promotion Tiers from Campaign",
        "description": "This method enables you to list promotion tiers from a specified campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a \`tiers\` property that contains an array of promotion tiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "tiers",
                      "tiers": [
                        {
                          "id": "promo_xyOKjAmysZrwt3aqq1dMUwMU",
                          "created_at": "2022-04-07T08:43:53.730Z",
                          "updated_at": "2022-08-26T05:22:43.220Z",
                          "name": "Amount",
                          "banner": "Get $10 off entire order",
                          "action": {
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 1000,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {},
                          "hierarchy": 2,
                          "promotion_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "campaign": {
                            "id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                            "start_date": null,
                            "expiration_date": null,
                            "active": true,
                            "category_id": "cat_0b5f67863083bf7c05",
                            "object": "campaign"
                          },
                          "campaign_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "active": true,
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 1
                            },
                            "orders": {
                              "total_amount": 2187,
                              "total_discount_amount": 1000
                            }
                          },
                          "object": "promotion_tier",
                          "validation_rule_assignments": null
                        },
                        {
                          "id": "promo_CQonGnrsFAdEJfJQ3oKB3a8G",
                          "created_at": "2022-04-07T08:43:53.581Z",
                          "updated_at": "2022-08-26T05:22:43.008Z",
                          "name": "Percentage",
                          "banner": "Get 10% OFF on entire order",
                          "action": {
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 10,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {},
                          "hierarchy": 1,
                          "promotion_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "campaign": {
                            "id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                            "start_date": null,
                            "expiration_date": null,
                            "active": true,
                            "category_id": "cat_0b5f67863083bf7c05",
                            "object": "campaign"
                          },
                          "campaign_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "active": true,
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 1
                            },
                            "orders": {
                              "total_amount": 71600,
                              "total_discount_amount": 7160
                            }
                          },
                          "object": "promotion_tier",
                          "validation_rule_assignments": null
                        }
                      ],
                      "total": 2,
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ],
      "get": {
        "operationId": "get-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Get Promotion Tier",
        "description": "This method enables you to retrieve a specific promotion tier.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a promotion tier object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersGetResponseBody"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Delete Promotion Tier",
        "description": "This method deletes a promotion tier.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ],
      "post": {
        "operationId": "enable-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Enable Promotion Tier",
        "description": "This method enables a promotion tier, i.e. makes the \`active\` parameter = \`true\`.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the promotion tier object with an updated \`active\` parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersEnableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "promo_NzjTc3ZXTe7md5SziK3uYtei",
                      "created_at": "2022-09-21T11:38:34.962Z",
                      "updated_at": "2022-09-22T10:32:07.712Z",
                      "name": "Order more than $100",
                      "banner": "Order more than $100",
                      "action": {
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 3000,
                          "effect": "APPLY_TO_ORDER"
                        }
                      },
                      "metadata": {},
                      "hierarchy": 1,
                      "campaign": {
                        "id": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                        "start_date": "2022-09-21T00:00:00.000Z",
                        "expiration_date": "2022-09-30T00:00:00.000Z",
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "active": true,
                        "object": "campaign"
                      },
                      "campaign_id": null,
                      "active": true,
                      "start_date": "2022-09-21T00:00:00.000Z",
                      "expiration_date": "2022-09-30T00:00:00.000Z",
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2
                        },
                        "orders": {
                          "total_amount": 37650,
                          "total_discount_amount": 6000
                        }
                      },
                      "object": "promotion_tier",
                      "validation_rule_assignments": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ],
      "post": {
        "operationId": "disable-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Disable Promotion Tier",
        "description": "This method disables a promotion tier, i.e. makes the \`active\` parameter = \`false\`.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the promotion tier object with an updated \`active\` parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersDisableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "promo_NzjTc3ZXTe7md5SziK3uYtei",
                      "created_at": "2022-09-21T11:38:34.962Z",
                      "updated_at": "2022-09-22T10:34:09.529Z",
                      "name": "Order more than $100",
                      "banner": "Order more than $100",
                      "action": {
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 3000,
                          "effect": "APPLY_TO_ORDER"
                        }
                      },
                      "metadata": {},
                      "hierarchy": 1,
                      "campaign": {
                        "id": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                        "start_date": "2022-09-21T00:00:00.000Z",
                        "expiration_date": "2022-09-30T00:00:00.000Z",
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "active": true,
                        "object": "campaign"
                      },
                      "campaign_id": null,
                      "active": false,
                      "start_date": "2022-09-21T00:00:00.000Z",
                      "expiration_date": "2022-09-30T00:00:00.000Z",
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2
                        },
                        "orders": {
                          "total_amount": 37650,
                          "total_discount_amount": 6000
                        }
                      },
                      "object": "promotion_tier",
                      "validation_rule_assignments": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/stacks": {
      "get": {
        "operationId": "list-all-promotion-stacks",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "List Promotion Stacks",
        "description": "This method enables you to list promotion stacks irrespective of the campaign they are associated with. \\n\\nYou can use filters in the query parameters to specify the stacks to be returned in the response.\\n\\n## Advanced filters for fetching promotion stacks\\n\\n| **Filters** | **Examples** |\\n| :--- | :--- |\\n| Created Before | - \`[created_at][before]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][created_at][conditions][$before][0]=2021-12-30T13:52:18.227Z\` |\\n| Created After | - \`[created_at][after]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][created_at][conditions][$after][0]=2021-12-30T13:52:18.227Z\` |\\n| Updated Before | - \`[updated_at][before]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][updated_at][conditions][$before][0]=2021-12-30T13:52:18.227Z\` |\\n| Updated After | - \`[updated_at][after]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][updated_at][conditions][$after][0]=2021-12-30T13:52:18.227Z\` |",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterLimit"
            },
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterPage"
            },
            "in": "query",
            "description": "Which page of results to return.",
            "name": "page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListAllPromotionStacks"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "$ref": "#/components/parameters/created_at"
          },
          {
            "$ref": "#/components/parameters/updated_at"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a \`data\` property that contains an array of promotion stacks across all your campaigns.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "stack_SLuhQrAt3mXwHg776lYkzZO8",
                          "name": "Stack 2",
                          "created_at": "2022-11-03T10:18:58.356Z",
                          "campaign_id": "camp_h8RyP6FV94F3Ev2odP24j5p1",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Mfww2TuoeU23enqSmnz0f3rh",
                              "promo_vU5IHaLKS7mmZ3ylABET6ikb",
                              "promo_TeHA11JlfN29mUftDcpqIWWq",
                              "promo_bhKBsIX3tO7yqmpTLCLLuaud"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_twQWp1TyaxX5RlSqn061xGVy",
                          "name": "First stack",
                          "created_at": "2021-12-27T11:59:21.838Z",
                          "updated_at": "2022-12-16T08:22:51.970Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_vhCqN5PY7rmPw8yACRvHRZaz",
                          "name": "Second stack",
                          "created_at": "2021-12-27T11:55:47.431Z",
                          "updated_at": "2022-12-16T08:22:52.221Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_zwChew7GY1AnDZJQ6GVP2sdT",
                          "name": "Third stack",
                          "created_at": "2021-12-27T11:54:26.283Z",
                          "updated_at": "2022-12-16T08:22:52.483Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_NS5hEUznL9XPa89rbrOZYMey",
                          "name": "Fourth stack",
                          "created_at": "2021-12-27T11:48:43.982Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_Rz0NvFtCZOObS3J5R68KET17",
                          "name": "Third stack",
                          "created_at": "2021-12-27T11:40:57.426Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_e8pH0nIuANmYRPE0x8hwDrpm",
                          "name": "Second stack",
                          "created_at": "2021-12-27T08:43:13.875Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Mwy9XpA0TLctSGriM5kum0qp",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_3Q4EJpZqg3DI5IRwgBYfsb37",
                          "name": "First stack",
                          "created_at": "2021-12-27T08:43:13.498Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_KxSD0GahLUg9ULB6TseGfUHJ",
                          "name": "Stack 1",
                          "created_at": "2021-12-23T12:28:38.881Z",
                          "campaign_id": "camp_h8RyP6FV94F3Ev2odP24j5p1",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_NMex647s5UushvbBUJmYT2Fc",
                              "promo_4TqHr24boFISDrcOHSlfAxwm"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        }
                      ],
                      "total": 9
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/{campaignId}/stacks": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        }
      ],
      "get": {
        "operationId": "list-promotion-stacks-in-campaign",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "List Promotion Stacks in Campaign",
        "description": "This method enables you to list promotion stacks from a specified campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of promotion stack objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "stack_p0WhtyyDU95crobleMpRabhH",
                          "name": "First stack",
                          "created_at": "2022-09-22T13:03:25.740Z",
                          "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_dJNhAEeV5sR5oPQq1UrUdnMC",
                              "promo_aaAF8mVAzA0PF1igia2OC63d"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_XAzn8AFR3Ks3DBPLAQxV7zHe",
                          "name": "Second stack",
                          "created_at": "2022-09-22T13:03:25.903Z",
                          "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_aaAF8mVAzA0PF1igia2OC63d",
                              "promo_dJNhAEeV5sR5oPQq1UrUdnMC"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Create Promotion Stack",
        "description": "This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the order of promotion tiers for the promotion stack.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionsStacksCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Fifth Stack",
                    "tiers": {
                      "ids": [
                        "promo_aaAF8mVAzA0PF1igia2OC63d",
                        "promo_t9zdL6XMFk7B8fQ23zxELtdE",
                        "promo_dJNhAEeV5sR5oPQq1UrUdnMC"
                      ],
                      "hierarchy_mode": "MANUAL"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a new stack object if a valid promotion campaign identifier was provided in the path and available promotion IDs in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "stack_q2AmzFvOMCmg4Wdu5bDBlME6",
                      "name": "Fifth Stack",
                      "created_at": "2022-09-23T07:44:53.888Z",
                      "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                      "object": "promotion_stack",
                      "tiers": {
                        "ids": [
                          "promo_aaAF8mVAzA0PF1igia2OC63d",
                          "promo_t9zdL6XMFk7B8fQ23zxELtdE",
                          "promo_dJNhAEeV5sR5oPQq1UrUdnMC"
                        ],
                        "hierarchy_mode": "MANUAL"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/{campaignId}/stacks/{stackId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionStackId"
          },
          "name": "stackId",
          "in": "path",
          "required": true,
          "description": "Promotion stack ID."
        }
      ],
      "get": {
        "operationId": "get-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Get Promotion Stack",
        "description": "This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a stack object if valid identifiers were provided in the path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "stack_p0WhtyyDU95crobleMpRabhH",
                      "name": "First stack",
                      "created_at": "2022-09-22T13:03:25.740Z",
                      "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                      "object": "promotion_stack",
                      "tiers": {
                        "ids": [
                          "promo_dJNhAEeV5sR5oPQq1UrUdnMC",
                          "promo_aaAF8mVAzA0PF1igia2OC63d"
                        ],
                        "hierarchy_mode": "MANUAL"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Update Promotion Stack",
        "description": "This methods allows for editing an existing stack.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the promotion stack parameters that you would like to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionsStacksUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Fifth Stack Modified",
                    "tiers": {
                      "ids": [
                        "promo_aaAF8mVAzA0PF1igia2OC63d",
                        "promo_t9zdL6XMFk7B8fQ23zxELtdE"
                      ],
                      "hierarchy_mode": "MANUAL"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a promotion stack with updated parameters if the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "stack_q2AmzFvOMCmg4Wdu5bDBlME6",
                      "name": "Fifth Stack Modified",
                      "created_at": "2022-09-23T07:44:53.888Z",
                      "updated_at": "2022-09-23T07:59:44.172Z",
                      "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                      "object": "promotion_stack",
                      "tiers": {
                        "ids": [
                          "promo_aaAF8mVAzA0PF1igia2OC63d",
                          "promo_t9zdL6XMFk7B8fQ23zxELtdE"
                        ],
                        "hierarchy_mode": "MANUAL"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Delete Promotion Stack",
        "description": "This method deletes a promotion stack.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/rewards/{rewardId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardId"
          },
          "name": "rewardId",
          "in": "path",
          "required": true,
          "description": "A unique reward ID."
        }
      ],
      "delete": {
        "operationId": "delete-reward",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Delete Reward",
        "description": "Delete a reward.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/rewards/{rewardId}/assignments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardId"
          },
          "name": "rewardId",
          "in": "path",
          "required": true,
          "description": "A unique reward ID."
        }
      ],
      "get": {
        "operationId": "list-reward-assignments",
        "tags": [
          "REWARDS API"
        ],
        "summary": "List Reward Assignments",
        "description": "Retrieve reward assignments by the reward ID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of reward assignment objects. Each object contains information regarding the resource to which the reward was assigned and the cost in loyalty points for the reward.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "rewa_PbIRoMXpwe5QhobW4JKu0VjH",
                          "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                          "related_object_id": "camp_wciTvaOfYmAa3EmIIW3QpXXZ",
                          "related_object_type": "campaign",
                          "parameters": {
                            "loyalty": {
                              "points": 15
                            }
                          },
                          "created_at": "2022-08-17T08:13:02.507Z",
                          "updated_at": null,
                          "object": "reward_assignment"
                        },
                        {
                          "id": "rewa_pJYQBXSitK2OVPK3XMXZK76X",
                          "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                          "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                          "related_object_type": "campaign",
                          "parameters": {
                            "loyalty": {
                              "points": 20
                            }
                          },
                          "created_at": "2022-08-24T11:40:22.418Z",
                          "updated_at": null,
                          "object": "reward_assignment"
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Create Reward Assignment",
        "description": "Assigns a reward to a specified loyalty campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardsAssignmentsCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "campaign": "camp_OTuGGP90PivbvROsRvfM65El",
                    "parameters": {
                      "loyalty": {
                        "points": 39
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a reward assignment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_cqD2XE5x8LcD2c1FLlvqikti",
                      "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                      "related_object_id": "camp_OTuGGP90PivbvROsRvfM65El",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 39
                        }
                      },
                      "created_at": "2022-08-24T13:44:42.610Z",
                      "updated_at": null,
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/rewards/{rewardId}/assignments/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardId"
          },
          "name": "rewardId",
          "in": "path",
          "required": true,
          "description": "A unique reward ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "A unique reward assignment ID."
        }
      ],
      "put": {
        "operationId": "update-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Update Reward Assignment",
        "description": "Update the number of points needed to successfully redeem the reward.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Define the number of points required to exchange for the reward.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardsAssignmentsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "loyalty": {
                        "points": 35
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated reward assignment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_pJYQBXSitK2OVPK3XMXZK76X",
                      "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                      "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 35
                        }
                      },
                      "created_at": "2022-08-24T11:40:22.418Z",
                      "updated_at": "2022-08-24T13:02:32.262Z",
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Delete Reward Assignment",
        "description": "This method deletes a reward assignment for a particular reward.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      },
      "get": {
        "operationId": "get-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Get Reward Assignment",
        "description": "Retrieve a reward assignment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a reward assignment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsGetResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/publications/create": {
      "get": {
        "operationId": "create-publication-1",
        "tags": [
          "PUBLICATIONS API"
        ],
        "summary": "Create Publication",
        "description": "This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.\\n\\nA voucher is suitable for publication when it's active and hasn't been published yet.\\n> ❗️ Limited access\\n>\\n> Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &rarr; **Project Settings** &rarr; **General** &rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.  \\n\\n<!-- theme: warning -->\\n> 🚧 Clearly define the source of the voucher\\n>\\n> You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.  \\n<!-- theme: warning -->\\n> 🚧 Publish multiple vouchers\\n> This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](ref:create-publication).  \\n\\n<!-- theme: info -->\\n\\n> 📘 Auto-update campaign\\n>\\n> In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.  \\n\\n## Example Request \\n\`\`\`markdown Publication Query \\n/publications/create?campaign[name]=BlackFriday&customer[source_id]=Customer_Source_ID \\n\`\`\`  \\n\\n<!-- theme: danger -->\\n> ❗️ Required  \\n>\\n> Query param \`voucher\` OR \`campaign\` MUST be filled out. If you provide both, \`campaign\` param will be skipped.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "join_once",
            "description": "Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCode"
            },
            "in": "query",
            "name": "voucher",
            "description": "Code of voucher being published."
          },
          {
            "name": "campaign",
            "in": "query",
            "description": "Create publication with campaign.",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CreatePublicationCampaign"
            }
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "source_id",
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service.\\nIf \`source_id\` is provided only 1 voucher can be published per request."
          },
          {
            "name": "customer",
            "in": "query",
            "required": true,
            "description": "Contains information about the customer to whom the publication was directed.",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ParameterObject"
            }
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a publication object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "pub_ocaXCa023ayJ3WL1ARxUeKgIvg3JcEGh",
                      "object": "publication",
                      "created_at": "2022-09-30T16:30:32.924Z",
                      "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                      "tracking_id": "pub_source_customer_5",
                      "metadata": {
                        "year": 2022
                      },
                      "channel": "myown",
                      "source_id": "publication_source_ID_10",
                      "result": "SUCCESS",
                      "customer": {
                        "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "name": "Bob Jones",
                        "email": "bob.smith@email.com",
                        "source_id": "pub_source_customer_5",
                        "metadata": {
                          "lang": "en",
                          "test": true
                        },
                        "object": "customer"
                      },
                      "voucher": {
                        "id": "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf",
                        "code": "cEsMn0uA",
                        "campaign": "Test - Discount Effect - Amount - Items",
                        "campaign_id": "camp_dphuwqH7BOVkgh4JmpDtS32l",
                        "category": null,
                        "category_id": null,
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 300,
                          "effect": "APPLY_TO_ITEMS"
                        },
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ+6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ%2B6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn+wFkfzcIZGBtUlxrI2KsXciCqF+c93AKzsymq5Yw8eEAFF/FK5f94z4/sgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn%2BwFkfzcIZGBtUlxrI2KsXciCqF%2Bc93AKzsymq5Yw8eEAFF%2FFK5f94z4%2FsgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-30T16:30:32.956Z",
                        "updated_at": null,
                        "holder_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "redemption": {
                          "quantity": 1,
                          "redeemed_quantity": 0,
                          "object": "list",
                          "url": "/v1/vouchers/cEsMn0uA/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/cEsMn0uA/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      },
                      "vouchers_id": [
                        "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/publications": {
      "get": {
        "operationId": "list-publications",
        "tags": [
          "PUBLICATIONS API"
        ],
        "summary": "List Publications",
        "description": "Retrieve a list of publications. To return a **particular** publication, you can use the \`source_id\` query parameter and provide the \`source_id\` of the publication you are looking for specifically.\\n\\n## Pagination\\n\\n<!-- theme: warning -->\\n> 🚧 Important!\\n>\\n> If you want to scroll through a huge set of records, it is recommended to use the <!-- [Exports API](OpenAPI.json/components/schemas/16_obj_export_object) -->[Exports API](ref:create-export). This API will return an error \`page_over_limit\` if you reach a page above 1000.\\n\\n## Filter Query\\n\\nThe \`filters\` query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:\\n\\n<!--\\ntitle: \\"Filter template\\"\\n-->\\n\`\`\`url\\nfilters[<field_name>][conditions][<operator>][<index>]=<value>\\n\`\`\`\\n\\n### Operators:\\n\\n<!--\\ntitle: \\"Operators\\"\\n-->\\n\`\`\`\\n    \\"$in\\"\\n    \\"$not_in\\"\\n    \\"$is\\"\\n    \\"$is_not\\"\\n    \\"$has_value\\"\\n    \\"$is_unknown\\"\\n    \\"$contains\\"\\n    \\"$starts_with\\"\\n    \\"$ends_with\\"\\n    \\"$more_than\\"\\n    \\"$less_than\\"\\n    \\"$more_than_equal\\"\\n    \\"$less_than_equal\\"\\n\`\`\`\\n\\n### Examples\\n\\n<!--\\ntitle: \\"Example 1 - List publications of a given customer\\"\\n-->\\n\`\`\`url\\nGET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL\\n\`\`\`\\n<!--\\ntitle: \\"Example 2 - List publications of 2 customers\\"\\n-->\\n\`\`\`url\\nGET /v1/publications?filters[customer_id][conditions][$in][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$in][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc\\n\`\`\`\\n<!--\\ntitle: \\"Example 3 - List publications of 2 customers using junction operator\\"\\n-->\\n\`\`\`url\\nGET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$is][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc&filters[junction]=OR\\n\`\`\`",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListPublications"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "campaign",
            "description": "Filters by a given campaign name."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCustomerId"
            },
            "in": "query",
            "name": "customer",
            "description": "Filters by a unique customer ID."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCode"
            },
            "in": "query",
            "name": "voucher",
            "description": "Filters by a given voucher code."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterResultListPublications"
            },
            "in": "query",
            "name": "result",
            "description": "Filters by a publication result."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterVoucherTypeListPublications"
            },
            "in": "query",
            "name": "voucher_type",
            "description": "Filters by a voucher type."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "is_referral_code",
            "description": "This filter works only for the \`true\` option. If set to \`true\`, the query returns only publications of codes from referral campaigns. "
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "filters",
            "description": "Allows for combining the filters mentioned in the endpoint description."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "source_id",
            "description": "Using this endpoint with a particular publication \`source_id\`, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of publications you’ve previously created with <!-- [create publication](OpenAPI.json/paths/~1publications/post) -->[create publication](ref:create-publication) or implicitly by the distribution manager. The publications are returned in sorted order, with the most recent ones appearing first.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "publications",
                      "publications": [
                        {
                          "id": "pub_QzQT50e5i2y3bRoEVvhFgrKbZ7t6BRwu",
                          "object": "publication",
                          "created_at": "2022-09-28T13:31:23.522Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "cindy.jones@email.com",
                          "metadata": {
                            "distribution_id": "distr_WXm0CBttar2ug2hBx3EdPtS8Ei",
                            "source_type": "distribution",
                            "source_id": "distr_WXm0CBttar2ug2hBx3EdPtS8Ei"
                          },
                          "channel": "Automation",
                          "source_id": null,
                          "result": "SUCCESS",
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Cindy Jones",
                            "email": "cindy.jones@email.com",
                            "source_id": "cindy.jones@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "voucher": {
                            "code": "FNV5IrtY",
                            "object": "voucher",
                            "campaign": "Loyalty Campaign",
                            "loyalty_card": {
                              "points": 0,
                              "balance": 0
                            },
                            "is_referral_code": false
                          },
                          "vouchers_id": [
                            "v_i3HOzVClfJUDia0qCu7TSuGfDj7c0dgD"
                          ]
                        },
                        {
                          "id": "pub_8KOKHObAjuemuI0b6225emIhmWDL1ZoX",
                          "object": "publication",
                          "created_at": "2022-09-28T13:31:02.766Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "sandy.jones@email.com",
                          "metadata": {},
                          "channel": "voucherify-website",
                          "source_id": null,
                          "result": "SUCCESS",
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Sandy Jones",
                            "email": "sandy.jones@email.com",
                            "source_id": "sandy.jones@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "voucher": {
                            "code": "Voucher-1",
                            "object": "voucher",
                            "campaign": null,
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 200,
                              "amount_off_formula": "IF(VOUCHER_PUBLISH_COUNT = 1;25;5)",
                              "effect": "APPLY_TO_ORDER"
                            },
                            "is_referral_code": false
                          },
                          "vouchers_id": [
                            "v_1iEL92K634EIOqeYJw6AHrnjEhGPEdpu"
                          ]
                        },
                        {
                          "id": "pub_DcQPfyVYzomtkQGXFW7dcdyNoJ6vQ4NV",
                          "object": "publication",
                          "created_at": "2022-09-13T06:15:08.249Z",
                          "customer_id": "cust_ur1hIPGflbaAe14mLlLdon3G",
                          "tracking_id": "1",
                          "metadata": {},
                          "channel": "voucherify-website",
                          "source_id": null,
                          "result": "SUCCESS",
                          "customer": {
                            "id": "cust_ur1hIPGflbaAe14mLlLdon3G",
                            "name": "Bob Jones",
                            "email": "bob.jones@email.com",
                            "source_id": "1",
                            "metadata": {
                              "accepts_marketing": false
                            },
                            "object": "customer"
                          },
                          "voucher": {
                            "code": "GIFT-WOZaK5YF1Fs87tAX",
                            "object": "voucher",
                            "campaign": "Gift Cards",
                            "gift": {
                              "amount": 0,
                              "balance": 0
                            },
                            "is_referral_code": false
                          },
                          "vouchers_id": [
                            "v_yzOeb7vw63vbPfA30215dFm7aRXa8Xoc"
                          ]
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-publication",
        "tags": [
          "PUBLICATIONS API"
        ],
        "summary": "Create Publication",
        "description": "This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.\\n\\nA voucher is suitable for publication when it's active and hasn't been published yet.  \\n\\n<!-- theme: warning -->\\n> 🚧 Clearly define the source of the voucher\\n>\\n> You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.  \\n<!-- theme: warning -->\\n> 🚧 Publish multiple vouchers\\n> In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.  \\n<!-- theme: info -->\\n\\n> 📘 Auto-update campaign\\n>\\n> In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "join_once",
            "description": "Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the publication parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicationsCreateRequestBody"
              },
              "examples": {
                "Example - Specific Voucher": {
                  "value": {
                    "campaign": {
                      "name": "campaign-name"
                    },
                    "customer": {
                      "source_id": "source-id",
                      "Name": "Customer Name",
                      "email": "customer email"
                    },
                    "voucher": "voucher-code",
                    "metadata": {
                      "key": "value"
                    }
                  }
                },
                "Example - Random Voucher": {
                  "value": {
                    "campaign": {
                      "name": "campaign-name",
                      "count": 1
                    },
                    "customer": {
                      "source_id": "source-id",
                      "Name": "Customer Name",
                      "email": "customer email"
                    },
                    "voucher": "voucher-code",
                    "metadata": {
                      "key": "value"
                    }
                  }
                },
                "Example 3": {
                  "value": {
                    "source_id": "publication_source_ID_10",
                    "campaign": "Test - Discount Effect - Amount - Items",
                    "channel": "myown",
                    "customer": {
                      "source_id": "pub_source_customer_5",
                      "name": "Bob Jones",
                      "description": "A frequent customer",
                      "email": "bob.smith@email.com",
                      "phone": "+1 933 222 3333",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 5",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthday": "1901-12-01"
                    },
                    "metadata": {
                      "year": 2022
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a publication object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "pub_ocaXCa023ayJ3WL1ARxUeKgIvg3JcEGh",
                      "object": "publication",
                      "created_at": "2022-09-30T16:30:32.924Z",
                      "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                      "tracking_id": "pub_source_customer_5",
                      "metadata": {
                        "year": 2022
                      },
                      "channel": "myown",
                      "source_id": "publication_source_ID_10",
                      "result": "SUCCESS",
                      "customer": {
                        "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "name": "Bob Jones",
                        "email": "bob.smith@email.com",
                        "source_id": "pub_source_customer_5",
                        "metadata": {
                          "lang": "en",
                          "test": true
                        },
                        "object": "customer"
                      },
                      "voucher": {
                        "id": "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf",
                        "code": "cEsMn0uA",
                        "campaign": "Test - Discount Effect - Amount - Items",
                        "campaign_id": "camp_dphuwqH7BOVkgh4JmpDtS32l",
                        "category": null,
                        "category_id": null,
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 300,
                          "effect": "APPLY_TO_ITEMS"
                        },
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ+6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ%2B6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn+wFkfzcIZGBtUlxrI2KsXciCqF+c93AKzsymq5Yw8eEAFF/FK5f94z4/sgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn%2BwFkfzcIZGBtUlxrI2KsXciCqF%2Bc93AKzsymq5Yw8eEAFF%2FFK5f94z4%2FsgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-30T16:30:32.956Z",
                        "updated_at": null,
                        "holder_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "redemption": {
                          "quantity": 1,
                          "redeemed_quantity": 0,
                          "object": "list",
                          "url": "/v1/vouchers/cEsMn0uA/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/cEsMn0uA/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      },
                      "vouchers_id": [
                        "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/validate": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A code that identifies the voucher."
        }
      ]
    },
    "/v1/promotions/tiers/{tierId}/validation": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "name": "tierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ]
    },
    "/v1/redemptions": {
      "get": {
        "operationId": "list-redemptions",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "List Redemptions",
        "description": "Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers. \\n\\n## Filtering results\\nThe result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date:\\n\`https://api.voucherify.io/v1/redemptions?limit=3&[created_at][before]=2017-09-08T13:52:18.227Z\`. A filter based on the object \`created_at\` field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: \`[created_at][after]\`, \`[created_at][before]\`. A date value must be presented in ISO 8601 format (\`2016-11-16T14:14:31Z\` or \`2016-11-16\`). An example: \`[created_at][before]=2017-09-08T13:52:18.227Z\`.\\n\\n## Failed Redemptions\\n\\nA redemption may fail for various reasons. You can figure out an exact reason from the \`failure_code\`:\\n- \`resource_not_found\` - voucher with given code does not exist\\n- \`voucher_not_active\` - voucher is not active yet (before start date)\\n- \`voucher_expired\` - voucher has already expired (after expiration date)\\n- \`voucher_disabled\` -  voucher has been disabled (\`active: false\`)\\n- \`quantity_exceeded\` - voucher's redemptions limit has been exceeded\\n- \`gift_amount_exceeded\` - gift amount has been exceeded\\n- \`customer_rules_violated\` - customer did not match the segment\\n- \`order_rules_violated\` - order did not match validation rules\\n- \`invalid_order\` - order was specified incorrectly\\n- \`invalid_amount\` - order amount was specified incorrectly\\n- \`missing_amount\` - order amount was not specified\\n- \`missing_order_items\` - order items were not specified\\n- \`missing_customer\` - customer was not specified",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "result",
            "description": "A filter on the list based on the redemption result. Available options are: \`SUCCESS\`, \`FAILURE\`. You can provide multiple values by repeating the param."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "campaign",
            "description": "A filter by the campaign **name** that the redemption resources originate from."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCustomerId"
            },
            "in": "query",
            "name": "customer",
            "description": "Return redemptions performed by the customer with given \`id\`."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListRedemptions"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order."
          },
          {
            "$ref": "#/components/parameters/created_at"
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterFiltersListRedemptions"
            },
            "description": "Filters for listing responses.",
            "style": "deepObject",
            "explode": true
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of redemption objects. Each entry in the array is a separate redemption object. If no more redemptions are available, the resulting array will be empty. If you provide a non-existent customer ID, this call returns an empty object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "redemptions",
                      "redemptions": [
                        {
                          "id": "r_0c0469eaf705889d99",
                          "object": "redemption",
                          "date": "2022-11-18T12:30:32.622Z",
                          "customer_id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                          "tracking_id": "track_5DQxXbK0C0pvAaHk7mnulhyMBo7VratI",
                          "metadata": {
                            "store_names": "Store 2 - Florida - Miami"
                          },
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_ndw5rQJt12zvZ4upF72a3ljh",
                            "source_id": null,
                            "created_at": "2022-11-18T12:30:31.338Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 9680000,
                            "items_discount_amount": 9450000,
                            "total_discount_amount": 9450000,
                            "total_amount": 230000,
                            "items_applied_discount_amount": 9450000,
                            "total_applied_discount_amount": 9450000,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae2dc5a090fd0184",
                                "sku_id": "sku_0bae3b28f610fd0da1",
                                "quantity": 45,
                                "discount_quantity": 45,
                                "initial_quantity": 0,
                                "amount": 9450000,
                                "discount_amount": 9450000,
                                "initial_amount": 0,
                                "applied_discount_amount": 9450000,
                                "price": 210000,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bae2dc5a090fd0184",
                                  "source_id": "first_product",
                                  "name": "Samsung Phone 1",
                                  "price": 220000
                                },
                                "sku": {
                                  "id": "sku_0bae3b28f610fd0da1",
                                  "source_id": "first_product_sku_1",
                                  "sku": "Samsung phone 256GB",
                                  "price": 210000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                              "object": "customer"
                            },
                            "customer_id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0c0469eaf705889d99": {
                                "date": "2022-11-18T12:30:31.388Z",
                                "related_object_type": "promotion_tier",
                                "related_object_id": "promo_ZWkx6R0I1Ts3N9HL4kfTdxOm",
                                "related_object_parent_id": "camp_40LC42P5NFbkkD4RWoJ4btks"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                            "name": "Bob Jones",
                            "email": "bob.smith@email.com",
                            "source_id": "pub_source_customer_5_a",
                            "metadata": {
                              "lang": "en",
                              "test": true
                            },
                            "object": "customer"
                          },
                          "related_object_type": "promotion_tier",
                          "related_object_id": "promo_ZWkx6R0I1Ts3N9HL4kfTdxOm",
                          "voucher": null,
                          "promotion_tier": {
                            "id": "promo_ZWkx6R0I1Ts3N9HL4kfTdxOm",
                            "campaign": {
                              "id": "camp_40LC42P5NFbkkD4RWoJ4btks"
                            }
                          }
                        },
                        {
                          "id": "r_0bf9cf0a8b12dc5ba6",
                          "object": "redemption",
                          "date": "2022-11-10T06:49:03.835Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "amount": 200,
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_jAifScsbOqxgb12hLu7hXrLU",
                            "source_id": null,
                            "created_at": "2022-11-10T06:49:02.703Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 4500,
                            "discount_amount": 4000,
                            "total_discount_amount": 4000,
                            "total_amount": 500,
                            "applied_discount_amount": 4000,
                            "total_applied_discount_amount": 4000,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0b72b0bd64d198e3ae",
                                "quantity": 3,
                                "amount": 4500,
                                "price": 1500,
                                "subtotal_amount": 4500,
                                "product": {
                                  "id": "prod_0b72b0bd64d198e3ae",
                                  "source_id": "vase_1",
                                  "name": "Vase - Boho Vintage",
                                  "price": 1500
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "object": "customer"
                            },
                            "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bf9cf0a8b12dc5ba6": {
                                "date": "2022-11-10T06:49:02.764Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                                "related_object_parent_id": "camp_fkZ28pe7DUAEmmabofkxHI8N"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bobby McDonald",
                            "email": "bobby.mcdonald@email.com",
                            "source_id": "bobby.mcdonald@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook",
                              "customer_life_time_value": 100
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                          "voucher": {
                            "id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                            "code": "LT1-wMPnRhxb",
                            "campaign": "Loyalty Campaign - Tiers - 1",
                            "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N"
                          },
                          "reward": {
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "name": "Bobby McDonald",
                              "email": "bobby.mcdonald@email.com",
                              "source_id": "bobby.mcdonald@email.com",
                              "metadata": {
                                "acquisition_channel": "Facebook",
                                "customer_life_time_value": 100
                              },
                              "object": "customer"
                            },
                            "assignment_id": "rewa_nMXB59qGTNYawMT8eP8M4oUp",
                            "id": "rew_MVXA2kV7lZ1zC057WUaTrvNz",
                            "object": "reward",
                            "name": "100 Points = $20",
                            "created_at": "2022-09-09T06:41:54.496Z",
                            "updated_at": null,
                            "parameters": {
                              "coin": {
                                "exchange_ratio": 20,
                                "points_ratio": 100
                              }
                            },
                            "type": "COIN"
                          },
                          "loyalty_card": {
                            "points": 200
                          }
                        },
                        {
                          "id": "rf_0bf9caf744d2dc593a",
                          "object": "redemption",
                          "date": "2022-11-10T06:31:15.477Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "result": "FAILURE",
                          "failure_code": "loyalty_card_points_exceeded",
                          "failure_message": "loyalty card points exceeded",
                          "order": null,
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bobby McDonald",
                            "email": "bobby.mcdonald@email.com",
                            "source_id": "bobby.mcdonald@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook",
                              "customer_life_time_value": 100
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                          "voucher": {
                            "id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                            "code": "LT1-wMPnRhxb",
                            "campaign": "Loyalty Campaign - Tiers - 1",
                            "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N"
                          }
                        },
                        {
                          "id": "rf_0bf8c023eb4d4aa4ad",
                          "object": "redemption",
                          "date": "2022-11-09T11:05:28.074Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "result": "FAILURE",
                          "failure_code": "customer_rules_violated",
                          "failure_message": "customer does not match validation rules",
                          "order": null,
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bob Smith",
                            "email": "bob.smith@email.com",
                            "source_id": "bob.smith@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                          "voucher": {
                            "id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                            "code": "3rqWOTAh",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0ba9fa02fcd28ed8f1",
                          "object": "redemption",
                          "date": "2022-09-09T06:38:20.085Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "amount": 300,
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_G9LBb5SOPa36pHdwxUvzkw4P",
                            "source_id": null,
                            "created_at": "2022-09-09T06:38:17.984Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 4600,
                            "items_discount_amount": 300,
                            "total_discount_amount": 300,
                            "total_amount": 4300,
                            "items_applied_discount_amount": 300,
                            "total_applied_discount_amount": 300,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0b7d7dfb05cbe5c616",
                                "sku_id": "sku_0b7d7dfb090be5c619",
                                "quantity": 1,
                                "amount": 1600,
                                "price": 1600,
                                "subtotal_amount": 1600,
                                "product": {
                                  "id": "prod_0b7d7dfb05cbe5c616",
                                  "source_id": "Books",
                                  "name": "Comic Books1",
                                  "price": 1600
                                },
                                "sku": {
                                  "id": "sku_0b7d7dfb090be5c619",
                                  "source_id": "ComicBook_1",
                                  "sku": "Comics1",
                                  "price": 1600
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0a65b3ff8592d7a5b5",
                                "quantity": 1,
                                "amount": 3000,
                                "discount_amount": 300,
                                "applied_discount_amount": 300,
                                "price": 3000,
                                "subtotal_amount": 2700,
                                "product": {
                                  "id": "prod_0a65b3ff8592d7a5b5",
                                  "name": "Koffee Cup",
                                  "price": 3000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "object": "customer"
                            },
                            "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0ba9fa02fcd28ed8f1": {
                                "date": "2022-09-09T06:38:18.099Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                                "related_object_parent_id": "camp_hC2GdqYtOmTT45zfhib62cK1"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bob Smith",
                            "email": "bob.smith@email.com",
                            "source_id": "bob.smith@email.com",
                            "metadata": {},
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                          "voucher": {
                            "id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                            "code": "vTcguVLE",
                            "campaign": "SL-Gift",
                            "campaign_id": "camp_hC2GdqYtOmTT45zfhib62cK1"
                          },
                          "gift": {
                            "amount": 300
                          }
                        },
                        {
                          "id": "rf_0bf8bfe0808d4aa473",
                          "object": "redemption",
                          "date": "2022-11-09T11:04:19.062Z",
                          "customer_id": null,
                          "tracking_id": null,
                          "metadata": {},
                          "result": "FAILURE",
                          "failure_code": "missing_customer",
                          "failure_message": "Missing customer",
                          "order": null,
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": null,
                          "related_object_type": "voucher",
                          "related_object_id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                          "voucher": {
                            "id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                            "code": "3rqWOTAh",
                            "campaign_id": null
                          }
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "redeem-stacked-discounts",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Redeem Stackable Discounts",
        "description": "## How API returns calculated discounts and order amounts in the response\\n\\nIn the table below, you can see the logic the API follows to calculate discounts and amounts:\\n\\n| **Field** | **Calculation** | **Description** |\\n|:---|:---|:---|\\n| amount | N/A | This field shows the order amount before applying any discount |\\n| total_amount | \`total_amount\` = \`amount\` - \`total_discount_amount\` | This field shows the order amount after applying all the discounts |\\n| discount_amount | \`discount_amount\` = \`previous_discount_amount\` + \`applied_discount_amount\` | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. |\\n| items_discount_amount | sum(items, i => i.discount_amount) | This field sums up all product-specific discounts |\\n| total_discount_amount | \`total_discount_amount\` = \`discount_amount\` + \`items_discount_amount\` | This field sums up all order-level and all product-specific discounts |\\n| applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request |\\n| items_applied_discount_amount | sum(items, i => i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request |\\n| total_applied_discount_amount | \`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\` | This field sums up all order-level and all product-specific discounts applied in a particular request |\\n\\n<!-- theme: info -->\\n> 📘 Rollbacks\\n>\\n> You can't roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your <!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) -->[rollback request](ref:rollback-stacked-redemptions).    \\n\\n<!-- theme: info -->\\n> 📘 Also available on client-side\\n>\\n> This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated [endpoint](ref:redeem-stacked-discounts-client-side) to learn more.\\n> - Use \`X-Client-Application-Id\` as the application ID header.\\n> - Use \`X-Client-Token\` as the appliction secret key header.\\n> - Use client-side base URL.\\n> - Use an \`origin\` header for your custom domain.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedemptionsRedeemRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK",
                      "key": "session_key"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid redemption. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsRedeemResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/redemptions/{redemptionId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "name": "redemptionId",
          "in": "path",
          "required": true,
          "description": "ID of previously created redemption."
        }
      ],
      "get": {
        "operationId": "get-redemption",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "Get Redemption",
        "description": "Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a redemption object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsGetResponseBody"
                },
                "examples": {
                  "Discount Voucher": {
                    "value": {
                      "id": "r_0bade27c428db5873e",
                      "object": "redemption",
                      "date": "2022-09-12T07:29:28.211Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_ebmAU9uv3dTE2Khqyh7i5ka7",
                        "source_id": null,
                        "created_at": "2022-09-12T07:29:26.245Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 22500,
                        "discount_amount": 300,
                        "total_discount_amount": 300,
                        "total_amount": 22200,
                        "applied_discount_amount": 300,
                        "total_applied_discount_amount": 300,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 1,
                            "amount": 22500,
                            "price": 22500,
                            "subtotal_amount": 22500,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0bade27c428db5873e": {
                            "date": "2022-09-12T07:29:26.282Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_c1yOEjZXOyVIe89VAYiRvL3QimZjXo8h"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_c1yOEjZXOyVIe89VAYiRvL3QimZjXo8h",
                      "voucher": {
                        "id": "v_c1yOEjZXOyVIe89VAYiRvL3QimZjXo8h",
                        "code": "FB-metadata-string",
                        "campaign": null,
                        "campaign_id": null,
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      }
                    }
                  },
                  "Loyalty Card - Material Reward Product Type": {
                    "value": {
                      "id": "r_0c5bf0e6d601c7d7de",
                      "object": "redemption",
                      "date": "2023-01-25T12:08:09.503Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 4,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dSOsWkNCRT24lHPkMu8o5QbX",
                        "source_id": null,
                        "created_at": "2023-01-25T12:08:07.750Z",
                        "updated_at": null,
                        "status": "PAID",
                        "items": [],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf0e6d601c7d7de": {
                            "date": "2023-01-25T12:08:07.768Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_LRx3Y1iHFWTt217NVrknkpi5",
                        "product": {
                          "id": "prod_0b2c2ddf35150b83bb",
                          "source_id": "97",
                          "name": "[Sample] Tiered Wire Basket",
                          "price": 11995,
                          "attributes": [],
                          "metadata": {
                            "source": "bigcommerce",
                            "bigcommerce_product_categories": [
                              21,
                              23
                            ]
                          },
                          "image_url": null,
                          "created_at": "2022-06-03T13:36:16.084Z",
                          "updated_at": "2022-06-07T09:10:44.644Z",
                          "object": "product"
                        },
                        "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4",
                        "object": "reward",
                        "name": "Present",
                        "created_at": "2022-06-13T06:59:01.694Z",
                        "updated_at": null,
                        "parameters": {
                          "product": {
                            "id": "prod_0b2c2ddf35150b83bb",
                            "sku_id": null
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 4
                      }
                    }
                  },
                  "Loyalty Card - Material Reward SKU Type": {
                    "value": {
                      "id": "r_0c5bf18dad48a34392",
                      "object": "redemption",
                      "date": "2023-01-25T12:11:00.543Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 6,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dwb6bpqjIlMuXFS71NuHed9S",
                        "source_id": null,
                        "created_at": "2023-01-25T12:10:58.598Z",
                        "updated_at": null,
                        "status": "PAID",
                        "items": [],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf18dad48a34392": {
                            "date": "2023-01-25T12:10:58.613Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_gfpRNkOT0pwzF7P5tXWXOs4H",
                        "product": {
                          "id": "prod_5h0wc453_2",
                          "source_id": "jonah-nystrom-bourbon",
                          "name": "Johan & Nyström - Bourbon",
                          "price": null,
                          "attributes": [
                            "categories",
                            "description",
                            "weight"
                          ],
                          "metadata": {
                            "company": "Johan & Nyström",
                            "showcase": true
                          },
                          "image_url": null,
                          "created_at": "2021-12-01T08:00:49.418Z",
                          "updated_at": null,
                          "object": "product"
                        },
                        "sku": {
                          "id": "sku_0a3efc9044dd121803",
                          "source_id": "jonah-nystrom-bourbon-250g",
                          "product_id": "prod_5h0wc453_2",
                          "sku": "250g",
                          "price": 1750,
                          "currency": null,
                          "attributes": {
                            "categories": "Coffee, Whole Bean",
                            "description": "Background for this blend comes from the longing for a real dark roasting of high-quality coffee beans. Although the beans are dark roasted, they keep their clear and intense aroma. This coffee has a smoky flavour with a slight hint of sweetness and loads of fruit notes. Thanks to the experience in the dark roasting of coffee, the beans still retain most of their aromas. Its aftertaste is clear and remains for a long time. This coffee is perfect for a Dripper, French Press, Moka coffee maker and the traditional espresso brewing method.",
                            "weight": 250
                          },
                          "image_url": null,
                          "metadata": {},
                          "created_at": "2021-12-01T08:00:49.427Z",
                          "updated_at": null,
                          "object": "sku"
                        },
                        "id": "rew_SfQCsap5R8UBTVbdMTRx10x8",
                        "object": "reward",
                        "name": "Present - SKU",
                        "created_at": "2023-01-25T12:10:16.060Z",
                        "updated_at": null,
                        "parameters": {
                          "product": {
                            "id": "prod_5h0wc453_2",
                            "sku_id": "sku_0a3efc9044dd121803"
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 6
                      }
                    }
                  },
                  "Loyalty Card - Pay with Points": {
                    "value": {
                      "id": "r_0b5e402ad54a3afe9c",
                      "object": "redemption",
                      "date": "2022-07-12T11:00:26.247Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 5,
                      "redemption": "r_0b5e402ad50a3afe98",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_9akjPYZNskEhKZ4zCZt6TKwq",
                        "source_id": null,
                        "created_at": "2022-07-12T11:00:26.224Z",
                        "amount": 20000,
                        "discount_amount": 5100,
                        "total_discount_amount": 5100,
                        "total_amount": 14900,
                        "applied_discount_amount": 500,
                        "total_applied_discount_amount": 500,
                        "metadata": {},
                        "customer_id": null,
                        "referrer_id": null,
                        "object": "order"
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                      "voucher": {
                        "id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                        "code": "LOYALTY-CARD-zOR2sV9Q",
                        "campaign": "Loyalty Program",
                        "campaign_id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "accepts_marketing": false
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_X3jnD5XFxP6GXCzPZUNknDck",
                        "id": "rew_6rhNwuuWFQJLvTPO34ilg6jq",
                        "object": "reward",
                        "name": "Pay with Points",
                        "created_at": "2022-07-11T08:18:18.205Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 1,
                            "points_ratio": 1
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 5
                      }
                    }
                  },
                  "Loyalty Card - Digital Reward - Discount Voucher": {
                    "value": {
                      "id": "r_0c5bf3323008a35032",
                      "object": "redemption",
                      "date": "2023-01-25T12:18:10.707Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {
                        "redemption_location": {
                          "city": "Warsaw",
                          "state": "Polyork"
                        }
                      },
                      "amount": 2,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dqxr4uzaYWkTZnrSEMoQtCF8",
                        "source_id": null,
                        "created_at": "2023-01-25T12:18:09.203Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 2100,
                        "total_amount": 2100,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 3,
                            "amount": 2100,
                            "price": 700,
                            "subtotal_amount": 2100,
                            "product": {
                              "id": "prod_0bc3bd8a4e072c5275",
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf3323008a35032": {
                            "date": "2023-01-25T12:18:09.216Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_0ZwLAHgeU9IrI2V1ofYRmW7g",
                        "voucher": {
                          "id": "v_4GaEX7clyqMaveT7vHhoyRpsIgxv95Q6",
                          "code": "HAPPY-ORDER5My",
                          "campaign": "$20 off the entire order",
                          "campaign_id": "camp_5h0wc453_4",
                          "category": null,
                          "category_id": "cat_0b688929a2476386a6",
                          "categories": [],
                          "type": "DISCOUNT_VOUCHER",
                          "discount": {
                            "type": "AMOUNT",
                            "amount_off": 2000,
                            "effect": "APPLY_TO_ORDER"
                          },
                          "gift": null,
                          "loyalty_card": null,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "21ceb848-4869-4dac-ba41-f854bda3a101",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/21ceb848-4869-4dac-ba41-f854bda3a101"
                            },
                            "barcode": {
                              "id": "1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2023-01-25T12:18:09.256Z",
                          "updated_at": null,
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 0,
                            "object": "list",
                            "url": "/v1/vouchers/HAPPY-ORDER5My/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/HAPPY-ORDER5My/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_MF4hKh1IKYgJkPjbcFbH94Ho",
                        "object": "reward",
                        "name": "Digital Present",
                        "created_at": "2023-01-25T12:16:44.557Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_5h0wc453_4",
                            "type": "DISCOUNT_COUPONS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 2
                      }
                    }
                  },
                  "Loyalty Card - Digital Reward - Credits on Gift Card": {
                    "value": {
                      "id": "r_0c5c1435d053202118",
                      "object": "redemption",
                      "date": "2023-01-25T14:42:25.206Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_v0r7JfUQgWRpw28UJm9Z5AaH",
                        "source_id": null,
                        "created_at": "2023-01-25T14:42:23.637Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 22500,
                        "total_amount": 22500,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 1,
                            "amount": 22500,
                            "price": 22500,
                            "subtotal_amount": 22500,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5c1435d053202118": {
                            "date": "2023-01-25T14:42:23.681Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_U554pL2BhDIDZOvZ8y9YQ9hA",
                        "voucher": {
                          "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                          "code": "GIFT-CARD-xwc6X7Tk",
                          "campaign": "Gift Cards",
                          "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                          "category": null,
                          "category_id": "cat_0bb81a481615a37b5e",
                          "categories": [],
                          "type": "GIFT_VOUCHER",
                          "discount": null,
                          "gift": {
                            "amount": 55080,
                            "balance": 44780
                          },
                          "loyalty_card": null,
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM/aTyHCYfr7kRWb2vv08WIgY/Tv53SJGW+k2keqfsTq/Ohb5shkCN3FTFsaI8gulTp616sEGn/JJoIInIoNkO9Vd1+AfrKiAjmirCmekE6cz2SVCyNAXs=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM%2FaTyHCYfr7kRWb2vv08WIgY%2FTv53SJGW%2Bk2keqfsTq%2FOhb5shkCN3FTFsaI8gulTp616sEGn%2FJJoIInIoNkO9Vd1%2BAfrKiAjmirCmekE6cz2SVCyNAXs%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX18vWc/qplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO/199U+zicnFNWqg/jF5ZCQW+6jO1q8=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18vWc%2FqplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO%2F199U%2BzicnFNWqg%2FjF5ZCQW%2B6jO1q8%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-08T09:44:33.179Z",
                          "updated_at": "2023-01-11T15:23:02.789Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 7,
                            "redeemed_amount": 10300,
                            "object": "list",
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_6bvM4vnaVdbPVQxYpuN37rhH",
                        "object": "reward",
                        "name": "Present Credits on Gift Card",
                        "created_at": "2023-01-25T14:41:31.858Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                            "balance": 4000,
                            "type": "GIFT_VOUCHERS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Loyalty Card - Digital Reward - Points on Loyalty Card": {
                    "value": {
                      "id": "r_0c5c226f498f1a93f0",
                      "object": "redemption",
                      "date": "2023-01-25T15:44:34.317Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_1fv4ITwpUQra6iDTHFPVfnRR",
                        "source_id": null,
                        "created_at": "2023-01-25T15:44:32.494Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 700,
                        "total_amount": 700,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 1,
                            "amount": 700,
                            "price": 700,
                            "subtotal_amount": 700,
                            "product": {
                              "id": "prod_0bc3bd8a4e072c5275",
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5c226f498f1a93f0": {
                            "date": "2023-01-25T15:44:32.550Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_BpytIepuSekuXXwb9qkLJfCU",
                        "voucher": {
                          "id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                          "code": "LOYALTY-CARD-zOR2sV9Q",
                          "campaign": "Loyalty Program",
                          "campaign_id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                          "category": null,
                          "category_id": null,
                          "categories": [],
                          "type": "LOYALTY_CARD",
                          "discount": null,
                          "gift": null,
                          "loyalty_card": {
                            "points": 1000,
                            "balance": 870
                          },
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX1/THRRj1QegAan0r5U+wRoHuFEA6FR7TrvZm8N+8cK7niF/8uAqFdVYTU1JD0/CdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU+YrPDeT2HCB7o0Ts7h1FnbD85+0F7lwrbKmkGW6kub0mjCaRdJYS/axIAq4=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FTHRRj1QegAan0r5U%2BwRoHuFEA6FR7TrvZm8N%2B8cK7niF%2F8uAqFdVYTU1JD0%2FCdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU%2BYrPDeT2HCB7o0Ts7h1FnbD85%2B0F7lwrbKmkGW6kub0mjCaRdJYS%2FaxIAq4%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX1+yREd0zRAfZY9uwtMZsl4eDd8+LeiKGVI5OzOQRpjhtV91IuEe7/SXEW8m4F2Llg2//yieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb+kZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2ByREd0zRAfZY9uwtMZsl4eDd8%2BLeiKGVI5OzOQRpjhtV91IuEe7%2FSXEW8m4F2Llg2%2F%2FyieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb%2BkZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-11T08:19:28.780Z",
                          "updated_at": "2022-10-01T00:02:05.604Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 26,
                            "redeemed_points": 130,
                            "object": "list",
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_7ZM476Q77dH5KvHk4KzoRNvF",
                        "object": "reward",
                        "name": "Present on Loyalty Card",
                        "created_at": "2023-01-25T15:43:40.716Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                            "balance": 20,
                            "type": "LOYALTY_PROGRAM"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Gift Card": {
                    "value": {
                      "id": "r_0b5e7d29ba4fb72ee4",
                      "object": "redemption",
                      "date": "2022-07-12T15:26:52.777Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 5000,
                      "redemption": "r_0b5e7d29ba0fb72ee2",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_5iOTjTG4I3Yo2G2bH1qHk66a",
                        "source_id": null,
                        "created_at": "2022-07-12T15:26:52.773Z",
                        "amount": 30200,
                        "discount_amount": 9530,
                        "total_discount_amount": 9530,
                        "total_amount": 20670,
                        "applied_discount_amount": 5000,
                        "total_applied_discount_amount": 5000,
                        "metadata": {},
                        "customer_id": null,
                        "referrer_id": null,
                        "object": "order"
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                      "voucher": {
                        "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                        "code": "GIFT-CARD-xwc6X7Tk",
                        "campaign": "Gift Cards",
                        "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "gift": {
                        "amount": 5000
                      }
                    }
                  },
                  "Promotion Tier": {
                    "value": {
                      "id": "r_0c5d6689b35320059a",
                      "object": "redemption",
                      "date": "2023-01-26T15:20:35.916Z",
                      "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw==",
                      "metadata": null,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_4kVJ1PiXP3TNfik3pM79KZsn",
                        "source_id": null,
                        "created_at": "2023-01-26T15:20:34.216Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 200000,
                        "discount_amount": 80000,
                        "total_discount_amount": 80000,
                        "total_amount": 120000,
                        "applied_discount_amount": 80000,
                        "total_applied_discount_amount": 80000,
                        "items": [
                          {
                            "object": "order_item",
                            "source_id": "apple534",
                            "related_object": "product",
                            "product_id": "prod_anJ03RZZq74z4v",
                            "quantity": 2,
                            "amount": 100000,
                            "price": 50000,
                            "subtotal_amount": 100000,
                            "product": {
                              "name": "Apple iPhone 8",
                              "metadata": {
                                "shop": "citycenter",
                                "category": "electronics"
                              }
                            },
                            "metadata": {
                              "series": "2022-783CV"
                            }
                          },
                          {
                            "object": "order_item",
                            "source_id": "apple534-ihd5",
                            "related_object": "sku",
                            "sku_id": "sku_0KtP4rvwEECQ2U",
                            "quantity": 1,
                            "amount": 100000,
                            "price": 100000,
                            "subtotal_amount": 100000,
                            "sku": {
                              "sku": "Apple iPad 10 Silver 64GB",
                              "metadata": {
                                "category": "electronics"
                              }
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                          "object": "customer"
                        },
                        "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5d6689b35320059a": {
                            "date": "2023-01-26T15:20:34.253Z",
                            "related_object_type": "promotion_tier",
                            "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                            "related_object_parent_id": "camp_w7BUstntAm8jbIDjfM49volj"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "name": "Annie Lemon",
                        "email": "annie@lemon.com",
                        "source_id": "annie@lemon.com",
                        "object": "customer"
                      },
                      "related_object_type": "promotion_tier",
                      "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                      "voucher": null,
                      "promotion_tier": {
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                        "action": null,
                        "campaign": {
                          "id": "camp_w7BUstntAm8jbIDjfM49volj",
                          "start_date": null,
                          "expiration_date": null,
                          "object": "campaign"
                        },
                        "campaign_id": null,
                        "summary": {
                          "redemptions": {
                            "total_redeemed": 0
                          },
                          "orders": {
                            "total_amount": 0,
                            "total_discount_amount": 0
                          }
                        },
                        "object": "promotion_tier",
                        "validation_rule_assignments": null
                      }
                    }
                  },
                  "Stacked Redemption": {
                    "value": {
                      "id": "r_0b5e3e2b7f851d0192",
                      "object": "redemption",
                      "date": "2022-07-12T10:51:33.098Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_qjnno0eUQ1fs0RMjejfbZp7q",
                        "source_id": null,
                        "created_at": "2022-07-12T10:51:31.687Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 20000,
                        "discount_amount": 6100,
                        "total_discount_amount": 6100,
                        "total_amount": 13900,
                        "applied_discount_amount": 6100,
                        "total_applied_discount_amount": 6100,
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0b5e3e2b7f851d0192": {
                            "date": "2022-07-12T10:51:31.711Z",
                            "related_object_type": "redemption",
                            "related_object_id": "r_0b5e3e2b7f851d0192",
                            "stacked": [
                              "r_0b5e3e2b7f851d0193",
                              "r_0b5e3e2b7fc51d0194",
                              "r_0b5e3e2b7fc51d0195",
                              "r_0b5e3e2b7fc51d0196",
                              "r_0b5e3e2b7fc51d0197"
                            ]
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "redemption",
                      "related_object_id": "r_0b5e3e2b7f851d0192",
                      "voucher": null
                    }
                  },
                  "Failed Voucher": {
                    "value": {
                      "id": "rf_0c5bd3c15701c78243",
                      "object": "redemption",
                      "date": "2023-01-25T10:00:47.812Z",
                      "customer_id": "cust_w1aRTTkpzeTGtOauISc8CKUN",
                      "tracking_id": "track_hr0jh/qNQqZWu7gkCEcVwEg27bNVrn2+",
                      "metadata": {
                        "location_id": [],
                        "redemption_location": {
                          "city": "Albany",
                          "state": "New York"
                        }
                      },
                      "result": "FAILURE",
                      "failure_code": "voucher_disabled",
                      "failure_message": "voucher is disabled",
                      "order": null,
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_w1aRTTkpzeTGtOauISc8CKUN",
                        "name": "Bobby's Friend",
                        "email": null,
                        "source_id": "create_order_referrer_1",
                        "metadata": {},
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_zr4XJD6b6JtldZq9EorHf4jxRbahjkfi",
                      "voucher": {
                        "id": "v_zr4XJD6b6JtldZq9EorHf4jxRbahjkfi",
                        "code": "PROMO-CODE2",
                        "campaign": null,
                        "campaign_id": null,
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      }
                    }
                  },
                  "Failed Promotion Tier": {
                    "value": {
                      "id": "rf_0c5d6e47050156bfc2",
                      "object": "redemption",
                      "date": "2023-01-26T15:54:23.508Z",
                      "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw==",
                      "metadata": null,
                      "result": "FAILURE",
                      "failure_code": "promotion_inactive",
                      "failure_message": "Inactive Promotion",
                      "order": null,
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "name": "Annie Lemon",
                        "email": "annie@lemon.com",
                        "source_id": "annie@lemon.com",
                        "metadata": {
                          "age": 2
                        },
                        "object": "customer"
                      },
                      "related_object_type": "promotion_tier",
                      "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                      "voucher": null,
                      "promotion_tier": {
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                        "action": null,
                        "campaign": {
                          "id": "camp_w7BUstntAm8jbIDjfM49volj",
                          "start_date": null,
                          "expiration_date": null,
                          "object": "campaign"
                        },
                        "campaign_id": null,
                        "summary": {
                          "redemptions": {
                            "total_redeemed": 0
                          },
                          "orders": {
                            "total_amount": 0,
                            "total_discount_amount": 0
                          }
                        },
                        "object": "promotion_tier",
                        "validation_rule_assignments": null
                      }
                    }
                  },
                  "Failed Redemption": {
                    "value": {
                      "id": "rf_0c5bde8dfc0156f0e3",
                      "object": "redemption",
                      "date": "2023-01-25T10:47:58.578Z",
                      "customer_id": null,
                      "tracking_id": null,
                      "metadata": null,
                      "result": "FAILURE",
                      "failure_code": "not_found",
                      "failure_message": "Resource not found",
                      "order": null,
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": null,
                      "related_object_type": "redemption",
                      "related_object_id": "rf_0c5bde8dfc0156f0e3",
                      "voucher": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/redemption": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "get": {
        "operationId": "get-voucher-redemptions",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "Get Voucher's Redemptions",
        "description": "Retrieve the number of times a voucher was redeemed and each of the redemption details.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a \`redemption_entries\` property that contains an array of voucher's redemptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersRedemptionGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "quantity": null,
                      "redeemed_quantity": 6,
                      "object": "list",
                      "url": "/v1/vouchers/Test - FB - Vouchers - 9/redemptions?page=1&limit=10",
                      "data_ref": "redemption_entries",
                      "total": 6,
                      "redemption_entries": [
                        {
                          "id": "r_0bc92f81a6801f9bca",
                          "object": "redemption",
                          "date": "2022-10-03T12:24:58.008Z",
                          "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                          "tracking_id": "track_fxEMFisanb6bqeHALcTMxy9fmc+1Azdq951CZwGFCweQF8eGLowFHg==",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_bhp1EH2SDz7UwkkurPFPLPhi",
                            "source_id": null,
                            "created_at": "2022-10-03T12:24:56.179Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 100,
                            "total_discount_amount": 100,
                            "total_amount": 229900,
                            "applied_discount_amount": 100,
                            "total_applied_discount_amount": 100,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                              "object": "customer"
                            },
                            "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc92f81a6801f9bca": {
                                "date": "2022-10-03T12:24:56.219Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "name": null,
                            "email": null,
                            "source_id": "johnnyy@email.com",
                            "metadata": {},
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc92e6a68050e118c",
                          "object": "redemption",
                          "date": "2022-10-03T12:20:11.873Z",
                          "customer_id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                          "tracking_id": "track_5DQxXbK0C0pvAaHk7mnulmKhuFqhawWj",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_rBsuJYqf4eFZgqj6IxeJgEcN",
                            "source_id": null,
                            "created_at": "2022-10-03T12:20:10.222Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 100,
                            "total_discount_amount": 100,
                            "total_amount": 229900,
                            "applied_discount_amount": 100,
                            "total_applied_discount_amount": 100,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                              "object": "customer"
                            },
                            "customer_id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc92e6a68050e118c": {
                                "date": "2022-10-03T12:20:10.272Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                            "name": "Bob Jones",
                            "email": "bob.smith@email.com",
                            "source_id": "pub_source_customer_4",
                            "metadata": {
                              "lang": "en",
                              "test": true
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc92db6e6001f9aa8",
                          "object": "redemption",
                          "date": "2022-10-03T12:17:07.780Z",
                          "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                          "tracking_id": "track_5DQxXbK0C0pvAaHk7mnulmYlx396Pk4X",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_JvZbg1LFcXdQ67no5SENGldH",
                            "source_id": null,
                            "created_at": "2022-10-03T12:17:06.404Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 1200,
                            "total_discount_amount": 1200,
                            "total_amount": 228800,
                            "applied_discount_amount": 1200,
                            "total_applied_discount_amount": 1200,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                              "object": "customer"
                            },
                            "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc92db6e6001f9aa8": {
                                "date": "2022-10-03T12:17:06.456Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                            "name": "Bob Jones",
                            "email": "bob.smith@email.com",
                            "source_id": "pub_source_customer_5",
                            "metadata": {
                              "lang": "en",
                              "test": true
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc2dc6404426c0ab3",
                          "object": "redemption",
                          "date": "2022-09-28T14:30:56.199Z",
                          "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                          "tracking_id": "track_fxEMFisanb6bqeHALcTMxy9fmc+1Azdq951CZwGFCweQF8eGLowFHg==",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_6uuhGraDuXMOpVRTJT251kKW",
                            "source_id": null,
                            "created_at": "2022-09-28T14:30:54.681Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 800,
                            "total_discount_amount": 800,
                            "total_amount": 229200,
                            "applied_discount_amount": 800,
                            "total_applied_discount_amount": 800,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                              "object": "customer"
                            },
                            "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc2dc6404426c0ab3": {
                                "date": "2022-09-28T14:30:54.737Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "name": null,
                            "email": null,
                            "source_id": "jonny@email.com",
                            "metadata": {},
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc2d6f0ebc95f1783",
                          "object": "redemption",
                          "date": "2022-09-28T14:07:07.516Z",
                          "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                          "tracking_id": "track_ThofCMTQe4EVIo0zvvOlTor1twaQNd7E",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_ZQevc2J2sBegsnp5DwanXHsa",
                            "source_id": null,
                            "created_at": "2022-09-28T14:07:06.073Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 0,
                            "total_discount_amount": 0,
                            "total_amount": 230000,
                            "applied_discount_amount": 0,
                            "total_applied_discount_amount": 0,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                              "object": "customer"
                            },
                            "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc2d6f0ebc95f1783": {
                                "date": "2022-09-28T14:07:06.159Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                            "name": "Bob Smith",
                            "email": "bob.smith.1@email.com",
                            "source_id": "bob.smith.1@email.com",
                            "metadata": {
                              "lang": "en",
                              "test": false
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc2d3c4f7495f159a",
                          "object": "redemption",
                          "date": "2022-09-28T13:53:16.057Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_ff6rwr58kmdyuLsi5orplnVW",
                            "source_id": null,
                            "created_at": "2022-09-28T13:53:14.604Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 800,
                            "total_discount_amount": 800,
                            "total_amount": 229200,
                            "applied_discount_amount": 800,
                            "total_applied_discount_amount": 800,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "object": "customer"
                            },
                            "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc2d3c4f7495f159a": {
                                "date": "2022-09-28T13:53:14.717Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "John Smith",
                            "email": "john.smith@email.com",
                            "source_id": "john.smith@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/redemptions/{redemptionId}/rollback": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRedemptionId"
          },
          "name": "redemptionId",
          "in": "path",
          "required": true,
          "description": "The original redemption ID to be rolled back (undone)."
        }
      ],
      "post": {
        "operationId": "rollback-redemption",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "Rollback Redemption",
        "description": "Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. \\n\\n ## Effect \\nThe operation \\n- creates a rollback entry in voucher's redemption history (\`redemption.redemption_entries\`) and \\n- gives 1 redemption back to the pool (decreases \`redeemed_quantity\` by 1). \\n## Returned funds \\nIn case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "reason",
            "description": "Reason for the rollback."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "tracking_id",
            "description": "Customer's \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedemptionsRollbackCreateRequestBody"
              },
              "examples": {
                "Promotion": {
                  "value": {
                    "customer": {
                      "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "name": "Annie Lemons",
                      "email": "annie@lemon.com",
                      "phone": "+1 933 222 3334",
                      "birthday": "1900-12-02",
                      "birthdate": "1900-12-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 5",
                        "country": "United States",
                        "postal_code": "100012"
                      },
                      "metadata": {
                        "age": 23
                      }
                    },
                    "order": {
                      "source_id": "test_rollback_8"
                    },
                    "metadata": {
                      "location_id": [
                        "L2"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a redemption rollback object indicating the result of the rollback.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsRollbackCreateResponseBody"
                },
                "examples": {
                  "Loyalty Card": {
                    "value": {
                      "id": "rr_0c5eba630bc4979e70",
                      "object": "redemption_rollback",
                      "date": "2023-01-27T16:05:23.631Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": -2,
                      "redemption": "r_0c5bf3323008a35032",
                      "reason": "A UI rollback to check for result in API response to listing.",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dqxr4uzaYWkTZnrSEMoQtCF8",
                        "source_id": null,
                        "created_at": "2023-01-25T12:18:09.203Z",
                        "updated_at": "2023-01-27T16:05:23.687Z",
                        "status": "CANCELED",
                        "amount": 2100,
                        "total_amount": 2100,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 3,
                            "amount": 2100,
                            "price": 700,
                            "subtotal_amount": 2100,
                            "product": {
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf3323008a35032": {
                            "date": "2023-01-25T12:18:09.216Z",
                            "rollback_id": "rr_0c5eba630bc4979e70",
                            "rollback_date": "2023-01-27T16:05:23.631Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_0ZwLAHgeU9IrI2V1ofYRmW7g",
                        "voucher": {
                          "id": "v_4GaEX7clyqMaveT7vHhoyRpsIgxv95Q6",
                          "code": "HAPPY-ORDER5My",
                          "campaign": "$20 off the entire order",
                          "campaign_id": "camp_5h0wc453_4",
                          "category": null,
                          "category_id": "cat_0b688929a2476386a6",
                          "categories": [],
                          "type": "DISCOUNT_VOUCHER",
                          "discount": {
                            "type": "AMOUNT",
                            "amount_off": 2000,
                            "effect": "APPLY_TO_ORDER"
                          },
                          "gift": null,
                          "loyalty_card": null,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "21ceb848-4869-4dac-ba41-f854bda3a101",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/21ceb848-4869-4dac-ba41-f854bda3a101"
                            },
                            "barcode": {
                              "id": "1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2023-01-25T12:18:09.256Z",
                          "updated_at": null,
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 0,
                            "object": "list",
                            "url": "/v1/vouchers/HAPPY-ORDER5My/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/HAPPY-ORDER5My/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_MF4hKh1IKYgJkPjbcFbH94Ho",
                        "object": "reward",
                        "name": "Digital Present",
                        "created_at": "2023-01-25T12:16:44.557Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_5h0wc453_4",
                            "type": "DISCOUNT_COUPONS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": -2
                      }
                    }
                  },
                  "Discount Coupon": {
                    "value": {
                      "id": "rr_0c5eb002b40cce9d62",
                      "object": "redemption_rollback",
                      "date": "2023-01-27T15:20:03.536Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "redemption": "r_0c5e8ef10842da0aad",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_J5ogV1Gkk2yfxmBEhYIg4O65",
                        "source_id": null,
                        "created_at": "2023-01-27T12:55:34.673Z",
                        "updated_at": "2023-01-27T15:20:03.743Z",
                        "status": "CANCELED",
                        "amount": 6000,
                        "total_amount": 6000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9ab4ab019a42d5",
                            "quantity": 1,
                            "amount": 3300,
                            "price": 3000,
                            "subtotal_amount": 3300
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9aeddb019a42db",
                            "quantity": 2,
                            "amount": 3400,
                            "price": 3000,
                            "subtotal_amount": 3400
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5e8ef10842da0aad": {
                            "date": "2023-01-27T12:55:34.689Z",
                            "rollback_id": "rr_0c5eb002b40cce9d62",
                            "rollback_date": "2023-01-27T15:20:03.536Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                      "voucher": {
                        "id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                        "code": "2CpRCE2c",
                        "campaign": null,
                        "campaign_id": null,
                        "category": null,
                        "category_id": null,
                        "categories": [],
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 300,
                          "effect": "APPLY_TO_ITEMS_PROPORTIONALLY"
                        },
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1+ro/6HLsfI9E/rz0QEoYv+rcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz+WQtg4nKpjUS0wcA7AuIbz2zb870YfJO/r5UBS5gCqQ==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bro%2F6HLsfI9E%2Frz0QEoYv%2BrcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz%2BWQtg4nKpjUS0wcA7AuIbz2zb870YfJO%2Fr5UBS5gCqQ%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3/4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ+aTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3%2F4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ%2BaTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-19T10:06:07.932Z",
                        "updated_at": "2023-01-27T15:20:03.707Z",
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 1,
                          "object": "list",
                          "url": "/v1/vouchers/2CpRCE2c/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 0,
                          "url": "/v1/vouchers/2CpRCE2c/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      }
                    }
                  },
                  "Gift Card": {
                    "value": {
                      "id": "rr_0c5eb099214ccea115",
                      "object": "redemption_rollback",
                      "date": "2023-01-27T15:22:37.573Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": -2000,
                      "redemption": "r_0c5e8a38730ccec0d5",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_S4BvUj64TlGqVZDOeud7z3rU",
                        "source_id": null,
                        "created_at": "2023-01-27T12:34:57.086Z",
                        "updated_at": "2023-01-27T15:22:37.628Z",
                        "status": "CANCELED",
                        "amount": 6000,
                        "total_amount": 6000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9ab4ab019a42d5",
                            "quantity": 1,
                            "amount": 3300,
                            "price": 3000,
                            "subtotal_amount": 3300
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9aeddb019a42db",
                            "quantity": 2,
                            "amount": 3400,
                            "price": 3000,
                            "subtotal_amount": 3400
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5e8a38730ccec0d5": {
                            "date": "2023-01-27T12:34:57.100Z",
                            "rollback_id": "rr_0c5eb099214ccea115",
                            "rollback_date": "2023-01-27T15:22:37.573Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_UFAc7FTVO0HtJV2hWZls4O7eqHMyn62g",
                            "related_object_parent_id": "camp_B2Gx83JsSbmvj05MOwxYbNm6"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_UFAc7FTVO0HtJV2hWZls4O7eqHMyn62g",
                      "voucher": {
                        "id": "v_UFAc7FTVO0HtJV2hWZls4O7eqHMyn62g",
                        "code": "CODE14",
                        "campaign": "Gift Card Campaign",
                        "campaign_id": "camp_B2Gx83JsSbmvj05MOwxYbNm6",
                        "category": "Second",
                        "category_id": "cat_0bb343dee3cdb5ec0c",
                        "categories": [],
                        "type": "GIFT_VOUCHER",
                        "discount": null,
                        "gift": {
                          "amount": 2000,
                          "balance": 2000,
                          "effect": null
                        },
                        "loyalty_card": null,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": "secret-code1",
                        "metadata": {
                          "region": "APAC",
                          "season": "Fall"
                        },
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1+VibJ6VGxrSVw5qmdbPMP3aP8HfcngMxtQc9Bm649CK1dK36e8YR820Ct26IkvDemEDzV8ozhB3F2BpazbgvCmhAo2Gvmo2WtwBwPh2ISAPJiXQCHRjwmKiqogjqQaNKWLxwDIBUc2jQ==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BVibJ6VGxrSVw5qmdbPMP3aP8HfcngMxtQc9Bm649CK1dK36e8YR820Ct26IkvDemEDzV8ozhB3F2BpazbgvCmhAo2Gvmo2WtwBwPh2ISAPJiXQCHRjwmKiqogjqQaNKWLxwDIBUc2jQ%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1/GVIi0p5fL5hxAY/ZBmuAU7nYYS03umjd30dwI5v5ZbpNc3Q5MiYbMuIOIT0H2fUTTwd//S4R9AB+60T/x4kSKu3lgfa9KgJmbyrzXm7Ggly06/qph4/asJaZVZIXEba4WJCeHqXCEgg==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FGVIi0p5fL5hxAY%2FZBmuAU7nYYS03umjd30dwI5v5ZbpNc3Q5MiYbMuIOIT0H2fUTTwd%2F%2FS4R9AB%2B60T%2Fx4kSKu3lgfa9KgJmbyrzXm7Ggly06%2Fqph4%2FasJaZVZIXEba4WJCeHqXCEgg%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-23T11:05:42.164Z",
                        "updated_at": "2023-01-27T15:22:37.595Z",
                        "redemption": {
                          "quantity": 18,
                          "redeemed_quantity": 0,
                          "redeemed_amount": 0,
                          "object": "list",
                          "url": "/v1/vouchers/CODE14/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 0,
                          "url": "/v1/vouchers/CODE14/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      },
                      "gift": {
                        "amount": -2000
                      }
                    }
                  },
                  "Promotion Tier": {
                    "value": {
                      "id": "rr_0ca286e96cc03f3e76",
                      "object": "redemption_rollback",
                      "date": "2023-03-21T07:57:12.526Z",
                      "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw==",
                      "metadata": {
                        "location_id": [
                          "L2"
                        ]
                      },
                      "redemption": "r_0ca286d222d2f7dc1f",
                      "reason": "To undo a redemption.",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_0FR01SqYIxV4ITzgs1yZjkK6",
                        "source_id": "test_rollback_8",
                        "created_at": "2023-03-21T07:56:48.634Z",
                        "updated_at": "2023-03-21T07:57:12.546Z",
                        "status": "CANCELED",
                        "amount": 200000,
                        "total_amount": 200000,
                        "items": [
                          {
                            "object": "order_item",
                            "source_id": "apple534",
                            "related_object": "product",
                            "product_id": "prod_anJ03RZZq74z4v",
                            "quantity": 2,
                            "amount": 100000,
                            "price": 50000,
                            "subtotal_amount": 100000,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8",
                              "metadata": {
                                "shop": "citycenter",
                                "category": "electronics"
                              }
                            },
                            "metadata": {
                              "series": "2022-783CV"
                            }
                          },
                          {
                            "object": "order_item",
                            "source_id": "apple534-ihd5",
                            "related_object": "sku",
                            "sku_id": "sku_0KtP4rvwEECQ2U",
                            "quantity": 1,
                            "amount": 100000,
                            "price": 100000,
                            "subtotal_amount": 100000,
                            "sku": {
                              "sku": "Apple iPad 10 Silver 64GB",
                              "metadata": {
                                "category": "electronics"
                              }
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                          "object": "customer"
                        },
                        "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0ca286d222d2f7dc1f": {
                            "date": "2023-03-21T07:56:48.651Z",
                            "rollback_id": "rr_0ca286e96cc03f3e76",
                            "rollback_date": "2023-03-21T07:57:12.526Z",
                            "related_object_type": "promotion_tier",
                            "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                            "related_object_parent_id": "camp_w7BUstntAm8jbIDjfM49volj"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "e55f3aaa-b303-421a-b562-ca8529ed341d",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "name": "Annie Lemons",
                        "email": "annie@lemon.com",
                        "source_id": "annie@lemon.com",
                        "metadata": {
                          "age": 23
                        },
                        "object": "customer"
                      },
                      "related_object_type": "promotion_tier",
                      "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                      "voucher": null,
                      "promotion_tier": {
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                        "created_at": "2022-09-23T08:31:23.022Z",
                        "updated_at": "2023-02-01T07:47:57.324Z",
                        "name": "Percent Discount",
                        "banner": "Get 40% off",
                        "action": {
                          "discount": {
                            "type": "PERCENT",
                            "percent_off": 40,
                            "effect": "APPLY_TO_ORDER"
                          }
                        },
                        "metadata": {},
                        "hierarchy": 2,
                        "campaign": {
                          "id": "camp_w7BUstntAm8jbIDjfM49volj",
                          "start_date": "2019-08-16T00:00:00.000Z",
                          "expiration_date": null,
                          "active": true,
                          "object": "campaign"
                        },
                        "campaign_id": "camp_w7BUstntAm8jbIDjfM49volj",
                        "active": true,
                        "start_date": "2022-09-21T00:00:00.000Z",
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "summary": {
                          "redemptions": {
                            "total_redeemed": 5
                          },
                          "orders": {
                            "total_amount": 616000,
                            "total_discount_amount": 246400
                          }
                        },
                        "object": "promotion_tier",
                        "validation_rule_assignments": null,
                        "category_id": null,
                        "categories": []
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}/redemption": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "ID of the promotion tier to be redeemed."
        }
      ]
    },
    "/client/v1/redemptions": {
      "post": {
        "operationId": "redeem-stacked-discounts-client-side",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Redeem Stackable Discounts (client-side)",
        "description": "This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.\\n\\n## How API returns calculated discounts and order amounts in the response\\n\\nIn the table below, you can see the logic the API follows to calculate discounts and amounts:\\n\\n| **Field** | **Calculation** | **Description** |\\n|:---|:---|:---|\\n| amount | N/A | This field shows the order amount before applying any discount |\\n| total_amount | \`total_amount\` = \`amount\` - \`total_discount_amount\` | This field shows the order amount after applying all the discounts |\\n| discount_amount | \`discount_amount\` = \`previous_discount_amount\` + \`applied_discount_amount\` | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. |\\n| items_discount_amount | sum(items, i => i.discount_amount) | This field sums up all product-specific discounts |\\n| total_discount_amount | \`total_discount_amount\` = \`discount_amount\` + \`items_discount_amount\` | This field sums up all order-level and all product-specific discounts |\\n| applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request |\\n| items_applied_discount_amount | sum(items, i => i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request |\\n| total_applied_discount_amount | \`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\` | This field sums up all order-level and all product-specific discounts applied in a particular request |\\n\\n<!-- theme: info -->\\n> 📘 Rollbacks\\n>\\n> You can't roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your <!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) -->[rollback request](ref:rollback-stacked-redemptions).",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRedemptionsRedeemRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK",
                      "key": "session_key"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid redemption. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRedemptionsRedeemResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/validations": {
      "post": {
        "operationId": "validate-stacked-discounts",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Validate Stackable Discounts",
        "description": "Verify redeemables provided in the request. This method is designed for server side integration which means that it is accessible only through private keys.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationsValidateRequestBody"
              },
              "examples": {
                "1 Redeemable": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                },
                "5 Redeemables": {
                  "value": {
                    "customer": {
                      "source_id": "36_bob"
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "GNcuPKGe"
                      },
                      {
                        "object": "voucher",
                        "id": "AnsvocvP",
                        "reward": {
                          "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4"
                        }
                      },
                      {
                        "object": "voucher",
                        "id": "M3X8IwW8",
                        "gift": {
                          "credits": 100
                        }
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W"
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_NDHgTg4VnOLYNjk9r7WOmQxf"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "items": [
                        {
                          "sku_id": "sku_0a3efc90375d1217e2",
                          "quantity": 1
                        },
                        {
                          "product_id": "prod_0bc3bd8a4e072c5275",
                          "quantity": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid validation. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationsValidateResponseBody"
                },
                "examples": {
                  "False": {
                    "value": {
                      "valid": false,
                      "redeemables": [
                        {
                          "status": "INAPPLICABLE",
                          "id": "eee33463",
                          "object": "voucher",
                          "result": {
                            "error": {
                              "code": 404,
                              "key": "not_found",
                              "message": "Resource not found",
                              "details": "Cannot find voucher with id eee33463",
                              "request_id": "v-0c6c6e20dc42940f0b",
                              "resource_id": "eee33463",
                              "resource_type": "voucher"
                            }
                          }
                        },
                        {
                          "status": "SKIPPED",
                          "id": "promo_Mwy9XpA0TLctSGriM5kum0qp",
                          "object": "promotion_tier",
                          "result": {}
                        }
                      ],
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw=="
                    }
                  },
                  "True - 5 Redeemables": {
                    "value": {
                      "valid": true,
                      "redeemables": [
                        {
                          "status": "APPLICABLE",
                          "id": "GNcuPKGe",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1700,
                            "total_amount": 1000,
                            "items_applied_discount_amount": 1700,
                            "total_applied_discount_amount": 1700,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "applied_discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "applied_discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "products_collection",
                                "id": "pc_a11pr0dUc75",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 3,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "AMOUNT",
                              "effect": "APPLY_TO_ITEMS",
                              "amount_off": 1000,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {},
                          "categories": []
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "AnsvocvP",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1700,
                            "total_amount": 1000,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "loyalty_card": {
                              "points": 4
                            }
                          },
                          "metadata": {},
                          "categories": [
                            {
                              "id": "cat_0bb81a481615a37b5e",
                              "name": "Second",
                              "hierarchy": 2,
                              "created_at": "2022-09-20T05:58:01.561Z",
                              "object": "category"
                            }
                          ]
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "M3X8IwW8",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 100,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1800,
                            "total_amount": 900,
                            "applied_discount_amount": 100,
                            "total_applied_discount_amount": 100,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "gift": {
                              "credits": 100
                            }
                          },
                          "metadata": {},
                          "categories": []
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                          "object": "promotion_tier",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 460,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 2160,
                            "total_amount": 540,
                            "applied_discount_amount": 360,
                            "total_applied_discount_amount": 360,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 2,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [
                              {
                                "object": "product",
                                "id": "prod_0b2c2ddf35150b83bb",
                                "source_id": "97",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 1,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "PERCENT",
                              "effect": "APPLY_TO_ORDER",
                              "percent_off": 40,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {}
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "promo_NDHgTg4VnOLYNjk9r7WOmQxf",
                          "object": "promotion_tier",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 490,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 2190,
                            "total_amount": 510,
                            "applied_discount_amount": 30,
                            "total_applied_discount_amount": 30,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 2,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [
                              {
                                "object": "product",
                                "id": "prod_0b2c2ddf35150b83bb",
                                "source_id": "97",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 1,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "AMOUNT",
                              "effect": "APPLY_TO_ORDER",
                              "amount_off": 30,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {}
                        }
                      ],
                      "order": {
                        "amount": 2700,
                        "discount_amount": 490,
                        "items_discount_amount": 1700,
                        "total_discount_amount": 2190,
                        "total_amount": 510,
                        "applied_discount_amount": 490,
                        "items_applied_discount_amount": 1700,
                        "total_applied_discount_amount": 2190,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_s3C0nDpr0DuC7",
                            "sku_id": "sku_0a3efc90375d1217e2",
                            "quantity": 1,
                            "amount": 2000,
                            "discount_amount": 1000,
                            "applied_discount_amount": 1000,
                            "price": 2000,
                            "subtotal_amount": 1000,
                            "product": {
                              "id": "prod_s3C0nDpr0DuC7",
                              "source_id": "test_prod_id_2",
                              "name": "Watchflix"
                            },
                            "sku": {
                              "id": "sku_0a3efc90375d1217e2",
                              "source_id": "test_standard_ultra_hd",
                              "sku": "Premium",
                              "price": 2000
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 1,
                            "amount": 700,
                            "discount_amount": 700,
                            "applied_discount_amount": 700,
                            "price": 700,
                            "subtotal_amount": 0,
                            "product": {
                              "id": "prod_0bc3bd8a4e072c5275",
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer_id": null,
                        "referrer_id": null,
                        "object": "order"
                      },
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "session": {
                        "key": "ssn_pkJfPcWAgp9WyHpA62Eky8X8SzxpKub2",
                        "type": "LOCK",
                        "ttl": 7,
                        "ttl_unit": "DAYS"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/validations": {
      "post": {
        "operationId": "validate-stacked-discounts-client-side",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Validate Stackable Discounts (client-side)",
        "description": "Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientValidationsValidateRequestBody"
              },
              "examples": {
                "1 Redeemable": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                },
                "5 Redeemables": {
                  "value": {
                    "customer": {
                      "source_id": "36_bob"
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "GNcuPKGe"
                      },
                      {
                        "object": "voucher",
                        "id": "AnsvocvP",
                        "reward": {
                          "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4"
                        }
                      },
                      {
                        "object": "voucher",
                        "id": "M3X8IwW8",
                        "gift": {
                          "credits": 100
                        }
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W"
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_NDHgTg4VnOLYNjk9r7WOmQxf"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "items": [
                        {
                          "sku_id": "sku_0a3efc90375d1217e2",
                          "quantity": 1
                        },
                        {
                          "product_id": "prod_0bc3bd8a4e072c5275",
                          "quantity": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid validation. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientValidationsValidateResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/redemptions/{parentRedemptionId}/rollbacks": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRedemptionId"
          },
          "name": "parentRedemptionId",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a parent redemption, e.g. \`r_JQfm73zWSJFQxs3bGxweYjgm\`."
        }
      ],
      "post": {
        "operationId": "rollback-stacked-redemptions",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Rollback Stackable Redemptions",
        "description": "Rollback a stackable redemption. When you rollback a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "reason",
            "description": "Reason for the rollback."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "tracking_id",
            "description": "Customer's \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedemptionsRollbacksCreateRequestBody"
              },
              "examples": {
                "Promotion": {
                  "value": {
                    "customer": {
                      "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "name": "Annie Lemons",
                      "email": "annie@lemon.com",
                      "phone": "+1 933 222 3334",
                      "birthday": "1900-12-02",
                      "birthdate": "1900-12-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 5",
                        "country": "United States",
                        "postal_code": "100012"
                      },
                      "metadata": {
                        "age": 23
                      }
                    },
                    "order": {
                      "source_id": "test_rollback_8"
                    },
                    "metadata": {
                      "location_id": [
                        "L2"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an array with the individual redemption rollback results along with the parent rollback result and related order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsRollbacksCreateResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ],
      "delete": {
        "operationId": "delete-loyalty-program",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Delete Loyalty Campaign",
        "description": "This method permanently deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the campaign and related vouchers will be removed permanently. Going forward, the user will be able to create the next campaign with the same name."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id of the scheduled asynchronous action, informing you that your request has been accepted and the loyalty campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesDeleteResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID of the loyalty program."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/members/{memberId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique code that identifies the loyalty card."
        }
      ]
    },
    "/v1/loyalties/members/{memberId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card code assigned to a particular customer."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/activities": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ]
    },
    "/v1/loyalties/members/{memberId}/activities": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/balance": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ],
      "post": {
        "operationId": "update-loyalty-card-balance-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Add or Remove Loyalty Card Balance",
        "description": "This method adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the point adjustment along with the expiration mechanism.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateRequestBody"
              },
              "examples": {
                "Add points": {
                  "value": {
                    "points": 100,
                    "expiration_type": "CUSTOM_DATE",
                    "expiration_date": "2023-05-30"
                  }
                },
                "Deduct points": {
                  "value": {
                    "points": -100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a balance object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateResponseBody"
                },
                "examples": {
                  "Add balance": {
                    "value": {
                      "points": -100,
                      "total": 13436,
                      "balance": 13136,
                      "type": "loyalty_card",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF"
                      }
                    }
                  },
                  "Deduct balance": {
                    "value": {
                      "points": -100,
                      "total": 13436,
                      "balance": 13136,
                      "type": "loyalty_card",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/balance": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "post": {
        "operationId": "update-loyalty-card-balance",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Add or Remove Loyalty Card Balance",
        "description": "This method gives adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest. \\n\\n<!-- theme: info -->\\n> 📘 Alternative endpoint\\n> This endpoint is an alternative to this <!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1balance) -->[endpoint](ref:update-loyalty-card-balance-1). The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the \`campaignId\` as a path parameter.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the point adjustment along with the expiration mechanism.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateRequestBody"
              },
              "examples": {
                "Subtract points": {
                  "value": {
                    "points": -100
                  }
                },
                "Add Points": {
                  "value": {
                    "points": 100,
                    "expiration_type": "CUSTOM_DATE",
                    "expiration_date": "2023-05-30"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a balance object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateResponseBody"
                },
                "examples": {
                  "Subtract Points": {
                    "value": {
                      "points": 100,
                      "total": 13436,
                      "balance": 13136,
                      "type": "loyalty_card",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/transfers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination)."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination)."
        }
      ],
      "post": {
        "operationId": "transfer-points",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Transfer Loyalty Points",
        "description": "Transfer points between different loyalty cards. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersTransfersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "code": "0PmQ7JQI",
                      "points": 1
                    },
                    {
                      "code": "kCeufB8i",
                      "points": 1
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a loyalty card object for the loaded loyalty card, ie. the one that that points were transferred to from the other cards(s).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransfersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                      "code": "MmFAzfDe",
                      "campaign": "Proportional Earning Rules",
                      "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                      "category": null,
                      "category_id": "cat_0b6152ce12414820de",
                      "categories": [],
                      "type": "LOYALTY_CARD",
                      "discount": null,
                      "gift": null,
                      "loyalty_card": {
                        "points": 13441,
                        "balance": 13141,
                        "next_expiration_date": "2022-11-30",
                        "next_expiration_points": 0
                      },
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX184kVdWUO/msrLg1G0MRf/Cs6QwSN3f6kyWCOTGdijyq8OfUbUpcGx6fjdeIpTf2UilFGNG8aCWVk/dXm/QEJ/sulXKDlUMWf+MN7TRG5LB+wuzqTy7csDBfRoJn0fURpwU4A6VZZSwBQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX184kVdWUO%2FmsrLg1G0MRf%2FCs6QwSN3f6kyWCOTGdijyq8OfUbUpcGx6fjdeIpTf2UilFGNG8aCWVk%2FdXm%2FQEJ%2FsulXKDlUMWf%2BMN7TRG5LB%2BwuzqTy7csDBfRoJn0fURpwU4A6VZZSwBQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/RGZN9VwvkdI6B26PPZQZWjh33USr5NPMXbHuJVkxsH6TUyW/cXen1Lc7gaqik09BGiry0R4QIAP52jnxQuABOsW0HdYfglsLPY7IajGX5rJzZKDKuzioq2vRIPyuE6z03frAod7ptvQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FRGZN9VwvkdI6B26PPZQZWjh33USr5NPMXbHuJVkxsH6TUyW%2FcXen1Lc7gaqik09BGiry0R4QIAP52jnxQuABOsW0HdYfglsLPY7IajGX5rJzZKDKuzioq2vRIPyuE6z03frAod7ptvQ%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-18T14:03:59.954Z",
                      "updated_at": "2022-11-28T17:58:25.607Z",
                      "holder_id": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 1,
                        "redeemed_points": 300,
                        "object": "list",
                        "url": "/v1/vouchers/MmFAzfDe/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/MmFAzfDe/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/transactions": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to retrieve transaction data for."
        }
      ],
      "get": {
        "operationId": "list-loyalty-card-transactions-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Card Transactions",
        "description": "Retrieve transaction data related to point movements for a specific loyalty card.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of loyalty card transaction objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "vtx_0c9dd3c2e392f78613",
                          "source_id": "20230317_transfer_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": "Transferring points to card",
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1396,
                              "object": "balance",
                              "points": -1,
                              "balance": 1396,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1102,
                                "balance": 1102,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 102
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9dd3c2e392f78614",
                          "created_at": "2023-03-17T16:20:33.807Z"
                        },
                        {
                          "id": "vtx_0c9dd2527696ba081b",
                          "source_id": "20230317_add_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Adding points to card",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1397,
                              "object": "balance",
                              "points": 100,
                              "balance": 1397,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:14:16.524Z"
                        },
                        {
                          "id": "vtx_0c9dd1ce1d403f4204",
                          "source_id": "20230317_subtract_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Subtracting points from card",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1297,
                              "object": "balance",
                              "points": -1,
                              "balance": 1297,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:12:00.981Z"
                        },
                        {
                          "id": "vtx_0c9c21df658d03ce3f",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "Automation",
                          "reason": null,
                          "type": "POINTS_ACCRUAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1298,
                              "object": "balance",
                              "points": 200,
                              "balance": 1298,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_QZEKPzYATFjGoos4DonMg0fd",
                              "source_id": "s"
                            },
                            "event": {
                              "id": "evcus_0c9c21def34e3c05bf",
                              "type": "customer.order.paid"
                            },
                            "earning_rule": {
                              "id": "ern_2WsCIBEx6Lzf5IAV5IOR7a23",
                              "source": {
                                "banner": "Order paid"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-16T08:44:52.333Z"
                        },
                        {
                          "id": "vtx_0c9b09673f8a862a51",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REFUND",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 1000,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "rollback": {
                              "id": "rr_0c9b0967244a862a33"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:19:29.149Z"
                        },
                        {
                          "id": "vtx_0c9b08fe530089785c",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": -1000,
                              "balance": 98,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:17:41.708Z"
                        },
                        {
                          "id": "vtx_0c9b074afed3b30e4b",
                          "source_id": "20230309_add_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer purchased points at kiosk.",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 100,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:10:15.917Z"
                        },
                        {
                          "id": "vtx_0c9b073072408969d1",
                          "source_id": "20230309_subtract_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer used points to obtain tickets.",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 998,
                              "object": "balance",
                              "points": -1,
                              "balance": 998,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:09:48.735Z"
                        },
                        {
                          "id": "vtx_0c9afe802593b34b80",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": null,
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 999,
                              "object": "balance",
                              "points": -1,
                              "balance": 999,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1001,
                                "balance": 1001,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 1
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9afe802593b34b81",
                          "created_at": "2023-03-15T11:31:51.062Z"
                        }
                      ],
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/transactions": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to retrieve transaction data for."
        }
      ],
      "get": {
        "operationId": "list-loyalty-card-transactions",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Card Transactions",
        "description": "Retrieve transaction data related to point movements for a specific loyalty card.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of loyalty card transaction objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "vtx_0c9dd3c2e392f78613",
                          "source_id": "20230317_transfer_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": "Transferring points to card",
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1396,
                              "object": "balance",
                              "points": -1,
                              "balance": 1396,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1102,
                                "balance": 1102,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 102
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9dd3c2e392f78614",
                          "created_at": "2023-03-17T16:20:33.807Z"
                        },
                        {
                          "id": "vtx_0c9dd2527696ba081b",
                          "source_id": "20230317_add_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Adding points to card",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1397,
                              "object": "balance",
                              "points": 100,
                              "balance": 1397,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:14:16.524Z"
                        },
                        {
                          "id": "vtx_0c9dd1ce1d403f4204",
                          "source_id": "20230317_subtract_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Subtracting points from card",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1297,
                              "object": "balance",
                              "points": -1,
                              "balance": 1297,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:12:00.981Z"
                        },
                        {
                          "id": "vtx_0c9c21df658d03ce3f",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "Automation",
                          "reason": null,
                          "type": "POINTS_ACCRUAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1298,
                              "object": "balance",
                              "points": 200,
                              "balance": 1298,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_QZEKPzYATFjGoos4DonMg0fd",
                              "source_id": "s"
                            },
                            "event": {
                              "id": "evcus_0c9c21def34e3c05bf",
                              "type": "customer.order.paid"
                            },
                            "earning_rule": {
                              "id": "ern_2WsCIBEx6Lzf5IAV5IOR7a23",
                              "source": {
                                "banner": "Order paid"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-16T08:44:52.333Z"
                        },
                        {
                          "id": "vtx_0c9b09673f8a862a51",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REFUND",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 1000,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "rollback": {
                              "id": "rr_0c9b0967244a862a33"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:19:29.149Z"
                        },
                        {
                          "id": "vtx_0c9b08fe530089785c",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": -1000,
                              "balance": 98,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:17:41.708Z"
                        },
                        {
                          "id": "vtx_0c9b074afed3b30e4b",
                          "source_id": "20230309_add_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer purchased points at kiosk.",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 100,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:10:15.917Z"
                        },
                        {
                          "id": "vtx_0c9b073072408969d1",
                          "source_id": "20230309_subtract_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer used points to obtain tickets.",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 998,
                              "object": "balance",
                              "points": -1,
                              "balance": 998,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:09:48.735Z"
                        },
                        {
                          "id": "vtx_0c9afe802593b34b80",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": null,
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 999,
                              "object": "balance",
                              "points": -1,
                              "balance": 999,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1001,
                                "balance": 1001,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 1
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9afe802593b34b81",
                          "created_at": "2023-03-15T11:31:51.062Z"
                        }
                      ],
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/transactions/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to export transaction data for."
        }
      ],
      "post": {
        "operationId": "export-loyalty-card-transactions",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Export Loyalty Card Transactions",
        "description": "Export transactions that are associated with point movements on a loyalty card.\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`POINTS_EXPIRATION\` <br> - \`POINTS_ADDITION\` <br> - \`POINTS_REMOVAL\` <br> - \`POINTS_TRANSFER_OUT\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_REFUND\` <br> - \`POINTS_REDEMPTION\` |\\n| source_id | Custom source ID of the transaction if one was included originally. | source_id_custom |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The loyalty card balance after the transaction. |  |\\n| amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | - \`API\` <br> - \`voucherify-web-ui\` <br> - \`Automation\` |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters and filters for the transaction export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "order": "-created_at",
                      "fields": [
                        "id",
                        "type",
                        "source_id",
                        "reason",
                        "balance",
                        "amount",
                        "created_at",
                        "voucher_id",
                        "campaign_id",
                        "details",
                        "related_transaction_id"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an export object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_8Fwd6Z8NS67ZH314KRtm5xXE",
                      "object": "export",
                      "created_at": "2023-03-21T13:50:43.286Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "order": "-created_at",
                        "fields": [
                          "id",
                          "type",
                          "source_id",
                          "reason",
                          "balance",
                          "amount",
                          "created_at",
                          "voucher_id",
                          "campaign_id",
                          "details",
                          "related_transaction_id"
                        ],
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "LOYALTY-CARD-2IAoDNF"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  },
                  "No request body": {
                    "value": {
                      "id": "exp_ExEE5A6OIK4tssuNswr5O6SU",
                      "object": "export",
                      "created_at": "2023-03-21T13:34:57.034Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/transactions/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to export transaction data for."
        }
      ],
      "post": {
        "operationId": "export-loyalty-card-transactions-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Export Loyalty Card Transactions",
        "description": "Export transactions that are associated with point movements on a loyalty card.\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`POINTS_EXPIRATION\` <br> - \`POINTS_ADDITION\` <br> - \`POINTS_REMOVAL\` <br> - \`POINTS_TRANSFER_OUT\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_REFUND\` <br> - \`POINTS_REDEMPTION\` |\\n| source_id | Custom source ID of the transaction if one was included originally. | source_id_custom |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The loyalty card balance after the transaction. |  |\\n| amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | - \`API\` <br> - \`voucherify-web-ui\` <br> - \`Automation\` |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters and filters for the transaction export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "order": "-created_at",
                      "fields": [
                        "id",
                        "type",
                        "source_id",
                        "reason",
                        "balance",
                        "amount",
                        "created_at",
                        "voucher_id",
                        "campaign_id",
                        "details",
                        "related_transaction_id"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an export object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_8Fwd6Z8NS67ZH314KRtm5xXE",
                      "object": "export",
                      "created_at": "2023-03-21T13:50:43.286Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "order": "-created_at",
                        "fields": [
                          "id",
                          "type",
                          "source_id",
                          "reason",
                          "balance",
                          "amount",
                          "created_at",
                          "voucher_id",
                          "campaign_id",
                          "details",
                          "related_transaction_id"
                        ],
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "LOYALTY-CARD-2IAoDNF"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  },
                  "No request body": {
                    "value": {
                      "id": "exp_ExEE5A6OIK4tssuNswr5O6SU",
                      "object": "export",
                      "created_at": "2023-03-21T13:34:57.034Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/points-expiration": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Loyalty card code."
        }
      ],
      "get": {
        "operationId": "list-points-expiration",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Points Expiration",
        "description": "Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the [Exports API](ref:create-export) to retrieve a list of both \`ACTIVE\` and \`EXPIRED\` point buckets.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of loyalty points expiration buckets along with an expiration date if the points are due to expire. No expiration date parameter is returned if the loyalty points bucket does not expire.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersPointsExpirationListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "lopb_ERSwDxeWTlvWwFrn3AtJxt3s",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 2
                          },
                          "status": "ACTIVE",
                          "expires_at": "2022-11-25",
                          "created_at": "2022-11-25T09:10:20.994Z",
                          "object": "loyalty_points_bucket"
                        },
                        {
                          "id": "lopb_zdeIBq3EsnPnRSDa7Tyyb6X2",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 12
                          },
                          "status": "ACTIVE",
                          "expires_at": "2022-11-30",
                          "created_at": "2022-11-21T13:49:54.949Z",
                          "object": "loyalty_points_bucket"
                        },
                        {
                          "id": "lopb_Mg80vhZtqHFItWlJFYZ2rJAS",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 0
                          },
                          "status": "ACTIVE",
                          "expires_at": "2023-05-30",
                          "created_at": "2022-06-09T11:07:07.344Z",
                          "updated_at": "2022-08-30T08:34:45.989Z",
                          "object": "loyalty_points_bucket"
                        },
                        {
                          "id": "lopb_dQE1TwyTkHAJDlVCPlqSC0nu",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 13124
                          },
                          "status": "ACTIVE",
                          "created_at": "2022-02-28T12:13:57.749Z",
                          "updated_at": "2022-11-25T09:09:51.136Z",
                          "object": "loyalty_points_bucket"
                        }
                      ],
                      "total": 4
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/points-expiration/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/earning-rules": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ]
    },
    "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterEarningRuleId"
          },
          "name": "earningRuleId",
          "in": "path",
          "required": true,
          "description": "A unique earning rule ID."
        }
      ],
      "get": {
        "operationId": "get-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Earning Rule",
        "description": "Retrieves an earning rule assigned to a campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an earning rule object with the earning rule details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesEarningRulesGetResponseBody"
                },
                "examples": {
                  "Custom Event": {
                    "value": {
                      "id": "ern_abvbD0d7Wv4hgr3fTElLb38G",
                      "created_at": "2022-02-07T08:19:41.810Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 2,
                        "type": "FIXED"
                      },
                      "custom_event": {
                        "schema_id": "ms_7JRYC8jXbezBV8AvGYGA0b5R"
                      },
                      "event": "saw_on_facebook",
                      "source": {
                        "banner": "Saw on Facebook Timeframe",
                        "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-02-07T08:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "object": "earning_rule",
                      "automation_id": "auto_WTxNMXGJMS5ZdU9oZip3AzuA"
                    }
                  },
                  "Order Paid": {
                    "value": {
                      "id": "ern_taClaOIiaGNdmdby8xS0lCcy",
                      "created_at": "2022-02-04T13:27:50.665Z",
                      "updated_at": "2022-02-07T08:19:44.198Z",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "event": "order.paid",
                      "source": {
                        "banner": "Order paid 1000 points",
                        "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        4
                      ],
                      "object": "earning_rule",
                      "automation_id": "auto_RjBuwpeFQZ7TyQ5LP2LFVZYG"
                    }
                  },
                  "Segment Entered": {
                    "value": {
                      "id": "ern_3HlFKLMNIfBme9lcHwnMwXON",
                      "created_at": "2022-02-04T13:02:52.937Z",
                      "updated_at": "2022-02-07T08:19:43.291Z",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "segment": {
                        "id": "seg_WJv55MbzQwnr56ttJ2xUrSgt"
                      },
                      "event": "customer.segment.entered",
                      "source": {
                        "banner": "Entered segment 100 points.",
                        "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "object": "earning_rule",
                      "automation_id": "auto_39wqQSScJJbvpzAF611jnrh9"
                    }
                  },
                  "Loyalty Tier Joined": {
                    "value": {
                      "id": "ern_gVo6CHBduFPoh1hctASfXHLT",
                      "created_at": "2022-11-24T17:01:42.809Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "type": "PROPORTIONAL",
                        "calculation_type": "CUSTOMER_METADATA",
                        "customer": {
                          "metadata": {
                            "every": 4,
                            "points": 4,
                            "property": "customer_life_time_value"
                          }
                        }
                      },
                      "event": "customer.loyalty.tier.joined",
                      "loyalty_tier": {
                        "id": "ltr_pudTGWasuIqxdiDM0go31OV1"
                      },
                      "source": {
                        "banner": "Tier joined",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_wdlEo17wmoqYHGfilbayEUj7",
                      "metadata": {
                        "Type": "Tier joined - customer metadata - proportional"
                      }
                    }
                  },
                  "Loyalty Tier Left": {
                    "value": {
                      "id": "ern_66OdCyLADv5IGFoQe18vGUwa",
                      "created_at": "2022-11-24T17:03:59.414Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "type": "PROPORTIONAL",
                        "calculation_type": "CUSTOMER_METADATA",
                        "customer": {
                          "metadata": {
                            "every": 2,
                            "points": 2,
                            "property": "customer_life_time_value"
                          }
                        }
                      },
                      "event": "customer.loyalty.tier.left",
                      "loyalty_tier": {
                        "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2"
                      },
                      "source": {
                        "banner": "Tier left",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_czm5el1Uz1jeGaO97AYoDNAq",
                      "metadata": {
                        "Type": "Tier left"
                      }
                    }
                  },
                  "Loyalty Tier Upgraded": {
                    "value": {
                      "id": "ern_YR3fDfCjAmz9a5D68nk0i4dm",
                      "created_at": "2022-11-25T07:29:38.961Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "type": "PROPORTIONAL",
                        "calculation_type": "CUSTOMER_METADATA",
                        "customer": {
                          "metadata": {
                            "every": 3,
                            "points": 4,
                            "property": "customer_life_time_value"
                          }
                        }
                      },
                      "event": "customer.loyalty.tier.upgraded",
                      "loyalty_tier": {
                        "id": "ltr_30KHciA0UG8B71Fo51GZqwgN"
                      },
                      "source": {
                        "banner": "Tier upgraded",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_M1OdRH8spk6Fs7yTuPLN2LAv",
                      "metadata": {
                        "Type": "Upgraded"
                      }
                    }
                  },
                  "Loyalty Tier Downgraded": {
                    "value": {
                      "id": "ern_A2RArBE30Tkt56utVLrRv7rZ",
                      "created_at": "2022-11-25T07:31:05.866Z",
                      "updated_at": "2022-11-25T07:31:43.029Z",
                      "validation_rule_id": "val_kfmWpfXMI9P1",
                      "loyalty": {
                        "points": 1,
                        "type": "FIXED"
                      },
                      "event": "customer.loyalty.tier.downgraded",
                      "loyalty_tier": {
                        "id": "__ANY__"
                      },
                      "source": {
                        "banner": "Tier Downgraded",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_TMVZtCNMBgZm0KcPJ7otiHZW",
                      "metadata": {
                        "Type": "Tier"
                      }
                    }
                  },
                  "Loyalty Tier Prolonged": {
                    "value": {
                      "id": "ern_AdlWO2yt6b6llWsibIdiRXVE",
                      "created_at": "2022-11-25T07:31:42.767Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 5,
                        "type": "FIXED"
                      },
                      "event": "customer.loyalty.tier.prolonged",
                      "loyalty_tier": {
                        "id": "__ANY__"
                      },
                      "source": {
                        "banner": "Prolonged",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_4jH1yq9WJS0oJ8suagCrltyb",
                      "metadata": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Delete Earning Rule",
        "description": "This method deletes an earning rule for a specific loyalty campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterEarningRuleId"
          },
          "name": "earningRuleId",
          "in": "path",
          "required": true,
          "description": "Unique earning rule ID."
        }
      ],
      "post": {
        "operationId": "enable-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Enable Earning Rule",
        "description": "Enable an earning rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an earning rule object with the \`active\` parameter set to \`true\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesEarningRulesEnableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ern_raVUcdXruvXGuzm682ESrAzt",
                      "created_at": "2022-11-24T09:03:14.534Z",
                      "updated_at": "2022-11-25T14:07:39.460Z",
                      "loyalty": {
                        "points": 20,
                        "type": "FIXED"
                      },
                      "event": "order.paid",
                      "source": {
                        "banner": "Order has been paid",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-11-23T00:00:00.000Z",
                      "expiration_date": "2022-11-30T00:00:00.000Z",
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "object": "earning_rule",
                      "automation_id": "auto_MbEIyLbn7pHyba5Qw5eeb35L",
                      "metadata": {
                        "Type": "Order has been paid - Fixed"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterEarningRuleId"
          },
          "name": "earningRuleId",
          "in": "path",
          "required": true,
          "description": "Unique earning rule ID."
        }
      ],
      "post": {
        "operationId": "disable-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Disable Earning Rule",
        "description": "Disable an earning rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an earning rule object with the \`active\` parameter set to \`false\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesEarningRulesDisableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ern_A2RArBE30Tkt56utVLrRv7rZ",
                      "created_at": "2022-11-25T07:31:05.866Z",
                      "updated_at": "2022-11-25T14:12:57.167Z",
                      "loyalty": {
                        "points": 1,
                        "type": "FIXED"
                      },
                      "event": "customer.loyalty.tier.downgraded",
                      "loyalty_tier": {
                        "id": "__ANY__"
                      },
                      "source": {
                        "banner": "Tier Downgraded",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": false,
                      "object": "earning_rule",
                      "automation_id": "auto_TMVZtCNMBgZm0KcPJ7otiHZW",
                      "metadata": {
                        "Type": "Tier"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/rewards": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "get": {
        "operationId": "list-member-rewards",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Member Rewards",
        "description": "Retrieves the list of rewards that the given customer (identified by \`member_id\`, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.  \\n\\nYou can use the \`affordable_only\` parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).  \\n\\nPlease note that rewards that are disabled (i.e. set to \`Not Available\` in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "affordable_only",
            "description": "Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to \`true\` to return rewards which the customer can actually afford.",
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            }
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of rewards for the given \`member_id\`. Returns a filtered list if the query parameter \`affordable_only\` is set to \`true\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersRewardsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "reward": {
                            "id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                            "name": "Material Reward",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b7d7dfb05cbe5c616",
                                "sku_id": "sku_0b7d7dfb090be5c619"
                              }
                            },
                            "stock": 4,
                            "redeemed": 1,
                            "attributes": {
                              "description": "Get a Comic Book in Archie's series."
                            },
                            "created_at": "2022-08-17T07:46:18.619169+00:00",
                            "updated_at": "2022-08-17T08:13:48.30747+00:00",
                            "metadata": {},
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_pJYQBXSitK2OVPK3XMXZK76X",
                            "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 39
                              }
                            },
                            "created_at": "2022-08-24T11:40:22.418972+00:00",
                            "updated_at": "2022-08-24T13:23:50.409121+00:00",
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_31M6Za6zkMRfhxYJz4aDo11h",
                            "name": "Pay with Points",
                            "type": "COIN",
                            "parameters": {
                              "coin": {
                                "exchange_ratio": 1,
                                "points_ratio": 1
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "attributes": {},
                            "created_at": "2022-06-23T11:06:06.222736+00:00",
                            "updated_at": null,
                            "metadata": null,
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_wrVYAfXWolq52gnl15dumPCq",
                            "reward_id": "rew_31M6Za6zkMRfhxYJz4aDo11h",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "created_at": "2022-08-11T14:13:34.581194+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_Jhq0ecLGSx8eF4pFdlhFr9P6",
                            "name": "20% discount",
                            "type": "CAMPAIGN",
                            "parameters": {
                              "campaign": {
                                "id": "camp_4B1jDE63pCeSij3HU7gx3gPT",
                                "type": "DISCOUNT_COUPONS"
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "attributes": {},
                            "created_at": "2022-08-11T09:52:39.032699+00:00",
                            "updated_at": null,
                            "metadata": {},
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_nFREw86qh1LiqGPRygahNh8Z",
                            "reward_id": "rew_Jhq0ecLGSx8eF4pFdlhFr9P6",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 100
                              }
                            },
                            "created_at": "2022-08-11T14:13:34.581194+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_Dev2yQLodRV33UKPKHTUQWk1",
                            "name": "Get a product",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b2ac1dab28985cb1e",
                                "sku_id": null
                              }
                            },
                            "stock": 1,
                            "redeemed": 1,
                            "attributes": {
                              "description": "Product"
                            },
                            "created_at": "2022-06-13T10:43:15.929621+00:00",
                            "updated_at": "2022-08-11T15:59:30.820937+00:00",
                            "metadata": null,
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_SV4gMgPXTXDrsoTyqhY1B2ut",
                            "reward_id": "rew_Dev2yQLodRV33UKPKHTUQWk1",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 4000
                              }
                            },
                            "created_at": "2022-08-11T14:13:34.581194+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_oQEYtUNYcVe2IdBEUBdLfkCD",
                            "name": "Get a comic book",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b7d7dfb05cbe5c616",
                                "sku_id": null
                              }
                            },
                            "stock": 1,
                            "redeemed": 2,
                            "attributes": {
                              "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_fPH9ohe0pZf4EiIt295sk9Ob.png",
                              "description": "Archie's Series"
                            },
                            "created_at": "2022-08-11T14:35:44.694611+00:00",
                            "updated_at": "2022-08-17T07:52:56.965366+00:00",
                            "metadata": {
                              "Type": "GR-2"
                            },
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_7HHH6TjN7Q9WDr5ZePeZUg5p",
                            "reward_id": "rew_oQEYtUNYcVe2IdBEUBdLfkCD",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 10
                              }
                            },
                            "created_at": "2022-08-11T15:44:12.789086+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        }
                      ],
                      "total": 5
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "Unique reward assignment ID."
        }
      ],
      "get": {
        "operationId": "get-reward-details",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Reward Details",
        "description": "Get reward details in the context of a loyalty campaign and reward assignment ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns reward details in the context of a loyalty *campaign* and reward assignment ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesRewardAssignmentsRewardGetResponseBody"
                },
                "examples": {
                  "Material": {
                    "value": {
                      "id": "rew_Dev2yQLodRV33UKPKHTUQWk1",
                      "name": "Get a product",
                      "type": "MATERIAL",
                      "parameters": {
                        "product": {
                          "id": "prod_0b2ac1dab28985cb1e",
                          "sku_id": null
                        }
                      },
                      "stock": "1",
                      "redeemed": "1",
                      "attributes": {
                        "description": "Product"
                      },
                      "created_at": "2022-06-13T10:43:15.929Z",
                      "updated_at": "2022-08-11T15:59:30.820Z",
                      "metadata": null,
                      "object": "reward"
                    }
                  },
                  "Pay with Points": {
                    "value": {
                      "id": "rew_31M6Za6zkMRfhxYJz4aDo11h",
                      "name": "Pay with Points",
                      "type": "COIN",
                      "parameters": {
                        "coin": {
                          "exchange_ratio": 1,
                          "points_ratio": 1
                        }
                      },
                      "stock": null,
                      "redeemed": null,
                      "attributes": {},
                      "created_at": "2022-06-23T11:06:06.222Z",
                      "updated_at": null,
                      "metadata": null,
                      "object": "reward"
                    }
                  },
                  "Discount Coupon": {
                    "value": {
                      "id": "rew_Jhq0ecLGSx8eF4pFdlhFr9P6",
                      "name": "20% discount",
                      "type": "CAMPAIGN",
                      "parameters": {
                        "campaign": {
                          "id": "camp_4B1jDE63pCeSij3HU7gx3gPT",
                          "type": "DISCOUNT_COUPONS"
                        }
                      },
                      "stock": null,
                      "redeemed": null,
                      "attributes": {},
                      "created_at": "2022-08-11T09:52:39.032Z",
                      "updated_at": null,
                      "metadata": {},
                      "object": "reward"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/reward-assignments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ]
    },
    "/v1/loyalties/{campaignId}/rewards": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ]
    },
    "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "Unique reward assignment ID."
        }
      ],
      "get": {
        "operationId": "get-reward-assignment-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Reward Assignment",
        "description": "Retrieve specific reward assignment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns specific reward assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesRewardAssignmentsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_1gJ6VyYQI0IcnEvhArbr9XFH",
                      "reward_id": "rew_injbwG52POgfpSogTlQl4hA6",
                      "related_object_id": "camp_Vr97XXNOnFEUIMFymKK99FAA",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 10
                        }
                      },
                      "created_at": "2022-06-13T11:56:49.185Z",
                      "updated_at": null,
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/rewards/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "A unique reward assignment ID."
        }
      ],
      "get": {
        "operationId": "get-reward-assignment-2",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Reward Assignment",
        "description": "Retrieve specific reward assignment.\\n\\n> 📘 Alternative endpoint\\n>\\n> This endpoint is an alternative to this [endpoint](ref:get-reward-assignment-2). ",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns specific reward assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesRewardsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_1gJ6VyYQI0IcnEvhArbr9XFH",
                      "reward_id": "rew_injbwG52POgfpSogTlQl4hA6",
                      "related_object_id": "camp_Vr97XXNOnFEUIMFymKK99FAA",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 10
                        }
                      },
                      "created_at": "2022-06-13T11:56:49.185Z",
                      "updated_at": null,
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-reward-assignment-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Delete Reward Assignment",
        "description": "This method deletes a reward assignment for a particular loyalty campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/redemption": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ],
      "post": {
        "operationId": "redeem-reward-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Redeem Reward",
        "description": "Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a redemption object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemResponseBody"
                },
                "examples": {
                  "Redeem Reward that adds points to a loyalty card": {
                    "value": {
                      "id": "r_0c6b3abbfe8e60a9dd",
                      "object": "redemption",
                      "date": "2023-02-06T09:07:55.514Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6887
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:07:55.515Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 9,
                          "redeemed_points": 1113,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_BpytIepuSekuXXwb9qkLJfCU",
                        "voucher": {
                          "id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                          "code": "LOYALTY-CARD-zOR2sV9Q",
                          "campaign": "Loyalty Program",
                          "campaign_id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                          "category": null,
                          "category_id": null,
                          "categories": [],
                          "type": "LOYALTY_CARD",
                          "discount": null,
                          "gift": null,
                          "loyalty_card": {
                            "points": 1020,
                            "balance": 890
                          },
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX1/THRRj1QegAan0r5U+wRoHuFEA6FR7TrvZm8N+8cK7niF/8uAqFdVYTU1JD0/CdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU+YrPDeT2HCB7o0Ts7h1FnbD85+0F7lwrbKmkGW6kub0mjCaRdJYS/axIAq4=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FTHRRj1QegAan0r5U%2BwRoHuFEA6FR7TrvZm8N%2B8cK7niF%2F8uAqFdVYTU1JD0%2FCdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU%2BYrPDeT2HCB7o0Ts7h1FnbD85%2B0F7lwrbKmkGW6kub0mjCaRdJYS%2FaxIAq4%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX1+yREd0zRAfZY9uwtMZsl4eDd8+LeiKGVI5OzOQRpjhtV91IuEe7/SXEW8m4F2Llg2//yieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb+kZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2ByREd0zRAfZY9uwtMZsl4eDd8%2BLeiKGVI5OzOQRpjhtV91IuEe7%2FSXEW8m4F2Llg2%2F%2FyieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb%2BkZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-11T08:19:28.780Z",
                          "updated_at": "2023-01-25T15:44:33.500Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 26,
                            "redeemed_points": 130,
                            "object": "list",
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_7ZM476Q77dH5KvHk4KzoRNvF",
                        "object": "reward",
                        "name": "Present on Loyalty Card",
                        "created_at": "2023-01-25T15:43:40.716Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                            "balance": 20,
                            "type": "LOYALTY_PROGRAM"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Redeem Reward that adds credits to a gift card": {
                    "value": {
                      "id": "r_0c6b3bedf3478a0167",
                      "object": "redemption",
                      "date": "2023-02-06T09:13:08.813Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6886
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:13:08.814Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 10,
                          "redeemed_points": 1114,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_U554pL2BhDIDZOvZ8y9YQ9hA",
                        "voucher": {
                          "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                          "code": "GIFT-CARD-xwc6X7Tk",
                          "campaign": "Gift Cards",
                          "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                          "category": null,
                          "category_id": "cat_0bb81a481615a37b5e",
                          "categories": [],
                          "type": "GIFT_VOUCHER",
                          "discount": null,
                          "gift": {
                            "amount": 59080,
                            "balance": 48780
                          },
                          "loyalty_card": null,
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM/aTyHCYfr7kRWb2vv08WIgY/Tv53SJGW+k2keqfsTq/Ohb5shkCN3FTFsaI8gulTp616sEGn/JJoIInIoNkO9Vd1+AfrKiAjmirCmekE6cz2SVCyNAXs=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM%2FaTyHCYfr7kRWb2vv08WIgY%2FTv53SJGW%2Bk2keqfsTq%2FOhb5shkCN3FTFsaI8gulTp616sEGn%2FJJoIInIoNkO9Vd1%2BAfrKiAjmirCmekE6cz2SVCyNAXs%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX18vWc/qplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO/199U+zicnFNWqg/jF5ZCQW+6jO1q8=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18vWc%2FqplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO%2F199U%2BzicnFNWqg%2FjF5ZCQW%2B6jO1q8%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-08T09:44:33.179Z",
                          "updated_at": "2023-01-25T14:42:25.214Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 7,
                            "redeemed_amount": 10300,
                            "object": "list",
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_6bvM4vnaVdbPVQxYpuN37rhH",
                        "object": "reward",
                        "name": "Present Credits on Gift Card",
                        "created_at": "2023-01-25T14:41:31.858Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                            "balance": 4000,
                            "type": "GIFT_VOUCHERS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Redeem Reward that gives a discount coupon": {
                    "value": {
                      "id": "r_0c6b3ca77e0e60b534",
                      "object": "redemption",
                      "date": "2023-02-06T09:16:18.808Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 2,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6884
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:16:18.809Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 11,
                          "redeemed_points": 1116,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_0ZwLAHgeU9IrI2V1ofYRmW7g",
                        "voucher": {
                          "id": "v_a3Ba1neDwPa3rBE0HkDd0C7CbiehBulo",
                          "code": "HAPPY-ORDERctb",
                          "campaign": "$20 off the entire order",
                          "campaign_id": "camp_5h0wc453_4",
                          "category": null,
                          "category_id": "cat_0b688929a2476386a6",
                          "categories": [],
                          "type": "DISCOUNT_VOUCHER",
                          "discount": {
                            "type": "AMOUNT",
                            "amount_off": 2000,
                            "effect": "APPLY_TO_ORDER"
                          },
                          "gift": null,
                          "loyalty_card": null,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "7d646e7d-9b5a-40b6-a44e-6bae848e108e",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/7d646e7d-9b5a-40b6-a44e-6bae848e108e"
                            },
                            "barcode": {
                              "id": "dfb3e48d-ce4f-4187-a114-483feb4ca88d",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/dfb3e48d-ce4f-4187-a114-483feb4ca88d"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2023-02-06T09:16:18.845Z",
                          "updated_at": null,
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 0,
                            "object": "list",
                            "url": "/v1/vouchers/HAPPY-ORDERctb/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/HAPPY-ORDERctb/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_MF4hKh1IKYgJkPjbcFbH94Ho",
                        "object": "reward",
                        "name": "Digital Present",
                        "created_at": "2023-01-25T12:16:44.557Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_5h0wc453_4",
                            "type": "DISCOUNT_COUPONS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 2
                      }
                    }
                  },
                  "Redeem a Material reward of a SKU type": {
                    "value": {
                      "id": "r_0c6b3d1357878a0813",
                      "object": "redemption",
                      "date": "2023-02-06T09:18:09.246Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 6,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6878
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:18:09.247Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 12,
                          "redeemed_points": 1122,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_gfpRNkOT0pwzF7P5tXWXOs4H",
                        "product": {
                          "id": "prod_5h0wc453_2",
                          "source_id": "jonah-nystrom-bourbon",
                          "name": "Johan & Nyström - Bourbon",
                          "price": null,
                          "attributes": [
                            "categories",
                            "description",
                            "weight"
                          ],
                          "metadata": {
                            "company": "Johan & Nyström",
                            "showcase": true
                          },
                          "image_url": null,
                          "created_at": "2021-12-01T08:00:49.418Z",
                          "updated_at": null,
                          "object": "product"
                        },
                        "sku": {
                          "id": "sku_0a3efc9044dd121803",
                          "source_id": "jonah-nystrom-bourbon-250g",
                          "product_id": "prod_5h0wc453_2",
                          "sku": "250g",
                          "price": 1750,
                          "currency": null,
                          "attributes": {
                            "categories": "Coffee, Whole Bean",
                            "description": "Background for this blend comes from the longing for a real dark roasting of high-quality coffee beans. Although the beans are dark roasted, they keep their clear and intense aroma. This coffee has a smoky flavour with a slight hint of sweetness and loads of fruit notes. Thanks to the experience in the dark roasting of coffee, the beans still retain most of their aromas. Its aftertaste is clear and remains for a long time. This coffee is perfect for a Dripper, French Press, Moka coffee maker and the traditional espresso brewing method.",
                            "weight": 250
                          },
                          "image_url": null,
                          "metadata": {},
                          "created_at": "2021-12-01T08:00:49.427Z",
                          "updated_at": null,
                          "object": "sku"
                        },
                        "id": "rew_SfQCsap5R8UBTVbdMTRx10x8",
                        "object": "reward",
                        "name": "Present - SKU",
                        "created_at": "2023-01-25T12:10:16.060Z",
                        "updated_at": "2023-01-25T12:10:59.662Z",
                        "parameters": {
                          "product": {
                            "id": "prod_5h0wc453_2",
                            "sku_id": "sku_0a3efc9044dd121803"
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 6
                      }
                    }
                  },
                  "Redeem a Material Reward of a Product Type": {
                    "value": {
                      "id": "r_0c6b3d8c35546f8673",
                      "object": "redemption",
                      "date": "2023-02-06T09:20:13.013Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 4,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@voucherify.io",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6874
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:20:13.014Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 13,
                          "redeemed_points": 1126,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@voucherify.io",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_LRx3Y1iHFWTt217NVrknkpi5",
                        "product": {
                          "id": "prod_0b2c2ddf35150b83bb",
                          "source_id": "97",
                          "name": "[Sample] Tiered Wire Basket",
                          "price": 11995,
                          "attributes": [],
                          "metadata": {
                            "source": "bigcommerce",
                            "bigcommerce_product_categories": [
                              21,
                              23
                            ]
                          },
                          "image_url": null,
                          "created_at": "2022-06-03T13:36:16.084Z",
                          "updated_at": "2022-06-07T09:10:44.644Z",
                          "object": "product"
                        },
                        "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4",
                        "object": "reward",
                        "name": "Present",
                        "created_at": "2022-06-13T06:59:01.694Z",
                        "updated_at": "2023-02-03T15:04:14.102Z",
                        "parameters": {
                          "product": {
                            "id": "prod_0b2c2ddf35150b83bb",
                            "sku_id": null
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 4
                      }
                    }
                  },
                  "Redeem Pay with Points Reward": {
                    "value": {
                      "id": "r_0c6b4142ecc78a21d0",
                      "object": "redemption",
                      "date": "2023-02-06T09:36:26.547Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 2300,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_QBnrJlVWA2EEiZoKOptFROnp",
                        "source_id": null,
                        "created_at": "2023-02-06T09:36:26.503Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 45000,
                        "discount_amount": 45000,
                        "total_discount_amount": 45000,
                        "total_amount": 0,
                        "applied_discount_amount": 45000,
                        "total_applied_discount_amount": 45000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0c5d6689b39320059b",
                            "quantity": 1,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8"
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 2,
                            "amount": 45000,
                            "price": 22500,
                            "subtotal_amount": 45000,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c6b4142ecc78a21d0": {
                            "date": "2023-02-06T09:36:26.547Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 4574
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:36:26.548Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 14,
                          "redeemed_points": 3426,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
                        "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                        "object": "reward",
                        "name": "100 = $20",
                        "created_at": "2022-11-10T06:28:39.582Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 20,
                            "points_ratio": 100
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 2300
                      }
                    }
                  },
                  "Redeem Pay with Points Reward with a specific amount of points": {
                    "value": {
                      "id": "r_0c6b423368146fa4bb",
                      "object": "redemption",
                      "date": "2023-02-06T09:40:32.800Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 100,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_1L67XS8EYDDp5A4B3k62G2tr",
                        "source_id": null,
                        "created_at": "2023-02-06T09:40:32.784Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 45000,
                        "discount_amount": 2000,
                        "total_discount_amount": 2000,
                        "total_amount": 43000,
                        "applied_discount_amount": 2000,
                        "total_applied_discount_amount": 2000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0c5d6689b39320059b",
                            "quantity": 1,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8"
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 2,
                            "amount": 45000,
                            "price": 22500,
                            "subtotal_amount": 45000,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c6b423368146fa4bb": {
                            "date": "2023-02-06T09:40:32.800Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8500,
                          "balance": 4974
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:40:32.801Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 15,
                          "redeemed_points": 3526,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
                        "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                        "object": "reward",
                        "name": "100 = $20",
                        "created_at": "2022-11-10T06:28:39.582Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 20,
                            "points_ratio": 100
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemRequestBody"
              },
              "examples": {
                "Pay with Points": {
                  "value": {
                    "reward": {
                      "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                      "points": 100
                    },
                    "order": {
                      "items": [
                        {
                          "product_id": "prod_0c5d6689b39320059b",
                          "quantity": "1"
                        },
                        {
                          "product_id": "prod_0b2c36568000039138",
                          "quantity": "2"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/redemption": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "post": {
        "operationId": "redeem-reward",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Redeem Reward",
        "description": "<!-- theme: info -->\\n> 📘 Alternative endpoint\\n>\\n> This endpoint is an alternative to this <!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1redemption) -->[endpoint](ref:redeem-reward-1). The URL was re-designed to allow you to redeem a reward without having to provide the \`campaignId\` as a path parameter.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a redemption object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemResponseBody"
                },
                "examples": {
                  "Redeem Pay with Points Reward with a specific number of Points": {
                    "value": {
                      "id": "r_0c6b4bf721439bf02b",
                      "object": "redemption",
                      "date": "2023-02-06T10:23:12.517Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 100,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_71Ayjxq2gFV80v3OP3qrxh37",
                        "source_id": null,
                        "created_at": "2023-02-06T10:23:12.485Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 45000,
                        "discount_amount": 2000,
                        "total_discount_amount": 2000,
                        "total_amount": 43000,
                        "applied_discount_amount": 2000,
                        "total_applied_discount_amount": 2000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0c5d6689b39320059b",
                            "quantity": 1,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8"
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 2,
                            "amount": 45000,
                            "price": 22500,
                            "subtotal_amount": 45000,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c6b4bf721439bf02b": {
                            "date": "2023-02-06T10:23:12.517Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 9000,
                          "balance": 5374
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T10:23:12.517Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 16,
                          "redeemed_points": 3626,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
                        "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                        "object": "reward",
                        "name": "100 = $20",
                        "created_at": "2022-11-10T06:28:39.582Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 20,
                            "points_ratio": 100
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemRequestBody"
              },
              "examples": {
                "Pay with Points": {
                  "value": {
                    "reward": {
                      "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                      "points": 100
                    },
                    "order": {
                      "items": [
                        {
                          "product_id": "prod_0c5d6689b39320059b",
                          "quantity": "1"
                        },
                        {
                          "product_id": "prod_0b2c36568000039138",
                          "quantity": "2"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty campaign ID or name."
        }
      ],
      "get": {
        "operationId": "list-loyalty-tiers",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Tiers",
        "description": "Retrieve a list of loyalty tiers which were added to the loyalty program.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListLoyaltyTiers"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of loyalty tier objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "ltr_30KHciA0UG8B71Fo51GZqwgN",
                          "name": "Bottom",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {},
                          "created_at": "2022-11-10T12:20:52.755Z",
                          "updated_at": "2022-11-25T11:27:58.616Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 1
                            },
                            "ern_raVUcdXruvXGuzm682ESrAzt": {
                              "type": "CUSTOM",
                              "points": 5
                            }
                          },
                          "rewards": {
                            "rewa_t88DnSdNnE0IzQX6gqH3jHGQ": {
                              "type": "MULTIPLY",
                              "multiplier": 4
                            }
                          },
                          "config": {
                            "points": {
                              "from": 1,
                              "to": 249
                            }
                          },
                          "points": {
                            "from": 1,
                            "to": 249
                          },
                          "object": "loyalty_tier"
                        },
                        {
                          "id": "ltr_pudTGWasuIqxdiDM0go31OV1",
                          "name": "Middle",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {},
                          "created_at": "2022-11-10T12:20:52.755Z",
                          "updated_at": "2022-11-25T11:27:58.579Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 2
                            }
                          },
                          "rewards": {},
                          "config": {
                            "points": {
                              "from": 250,
                              "to": 499
                            }
                          },
                          "points": {
                            "from": 250,
                            "to": 499
                          },
                          "object": "loyalty_tier"
                        },
                        {
                          "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                          "name": "Tier 1 - Top",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {
                            "has_funds": true
                          },
                          "created_at": "2022-11-09T06:26:54.797Z",
                          "updated_at": "2022-11-25T11:27:58.578Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_AdlWO2yt6b6llWsibIdiRXVE": {
                              "type": "MULTIPLY",
                              "multiplier": 5
                            },
                            "ern_HnRXyJHoj3E79r3KUWhgMgtD": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_raVUcdXruvXGuzm682ESrAzt": {
                              "type": "CUSTOM",
                              "points": 200
                            }
                          },
                          "rewards": {
                            "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k": {
                              "type": "CUSTOM",
                              "points": 300
                            }
                          },
                          "config": {
                            "points": {
                              "from": 500,
                              "to": 1000
                            }
                          },
                          "points": {
                            "from": 500,
                            "to": 1000
                          },
                          "object": "loyalty_tier"
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-in-bulk-loyalty-tiers",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Create loyalty tiers",
        "description": "Creates loyalty tiers for desired campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns created loyalty tiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersCreateInBulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Provide tier definitions you want to add to existing loyalty campaign.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesTiersCreateInBulkRequestBody"
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterLoyaltyTierId"
          },
          "name": "loyaltyTierId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty tier ID."
        }
      ],
      "get": {
        "operationId": "get-loyalty-tier",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Loyalty Tier",
        "description": "Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a loyalty tier object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                      "name": "Tier 1 - Top",
                      "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                      "metadata": {
                        "has_funds": true
                      },
                      "created_at": "2022-11-09T06:26:54.797Z",
                      "updated_at": "2022-11-25T11:27:58.578Z",
                      "earning_rules": {
                        "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                          "type": "MULTIPLY",
                          "multiplier": 3
                        },
                        "ern_AdlWO2yt6b6llWsibIdiRXVE": {
                          "type": "MULTIPLY",
                          "multiplier": 5
                        },
                        "ern_HnRXyJHoj3E79r3KUWhgMgtD": {
                          "type": "MULTIPLY",
                          "multiplier": 3
                        },
                        "ern_raVUcdXruvXGuzm682ESrAzt": {
                          "type": "CUSTOM",
                          "points": 200
                        }
                      },
                      "rewards": {
                        "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k": {
                          "type": "CUSTOM",
                          "points": 300
                        }
                      },
                      "config": {
                        "points": {
                          "from": 500,
                          "to": 1000
                        }
                      },
                      "points": {
                        "from": 500,
                        "to": 1000
                      },
                      "object": "loyalty_tier"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/tiers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "get": {
        "operationId": "list-member-loyalty-tier",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Member's Loyalty Tiers",
        "description": "Retrieve member tiers using the loyalty card ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a data array containing the member's loyalty tiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTiersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                          "name": "Tier 1 - Top",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {
                            "has_funds": true
                          },
                          "created_at": "2022-11-09T06:26:54.797Z",
                          "updated_at": "2022-11-25T11:27:58.578Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_AdlWO2yt6b6llWsibIdiRXVE": {
                              "type": "MULTIPLY",
                              "multiplier": 5
                            },
                            "ern_HnRXyJHoj3E79r3KUWhgMgtD": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_raVUcdXruvXGuzm682ESrAzt": {
                              "type": "CUSTOM",
                              "points": 200
                            }
                          },
                          "rewards": {
                            "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k": {
                              "type": "CUSTOM",
                              "points": 300
                            }
                          },
                          "config": {
                            "points": {
                              "from": 500,
                              "to": 1000
                            }
                          },
                          "points": {
                            "from": 500,
                            "to": 1000
                          },
                          "expiration": {
                            "customer_id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                            "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "tier_id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                            "start_date": "2022-11-10",
                            "expiration_date": "2023-02-28",
                            "created_at": "2022-11-09T11:26:26.719Z",
                            "updated_at": "2022-11-10T08:54:47.200Z"
                          },
                          "object": "loyalty_tier"
                        }
                      ],
                      "total": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterLoyaltyTierId"
          },
          "name": "loyaltyTierId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty tier ID."
        }
      ],
      "get": {
        "operationId": "list-loyalty-tier-earning-rules",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Tier Earning Rules",
        "description": "Retrieve available earning rules for a given tier and the calculation method for earning points.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of earning rules for a given tier. The object for each earning rule also contains information about how the points are calculated; this includes mapping. If a specific multiplier was used to calculate points for a given tier, then the \`loyalty.points\` parameter will account for this calculation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersEarningRulesListResponseBody"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "ern_95aq3JaE5A8xzHjoJPYNRqXZ",
                          "created_at": "2022-11-09T06:26:54.332Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 1,
                                "points": 300,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.joined",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Tier Joined",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_bfi69WIbztany4iX6prkKbGN",
                          "metadata": {
                            "Type": "Joined Any"
                          }
                        },
                        {
                          "id": "ern_HnRXyJHoj3E79r3KUWhgMgtD",
                          "created_at": "2022-11-10T12:25:12.927Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 300,
                            "type": "FIXED"
                          },
                          "segment": {
                            "id": "seg_n3vVcU5t0m3rs4rEPr3C1oU5"
                          },
                          "event": "customer.segment.entered",
                          "source": {
                            "banner": "New Customers",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_0gv3v7jQG5U6TtVC8bMEdIap",
                          "metadata": {}
                        },
                        {
                          "id": "ern_raVUcdXruvXGuzm682ESrAzt",
                          "created_at": "2022-11-24T09:03:14.534Z",
                          "updated_at": "2022-11-25T09:48:26.284Z",
                          "validation_rule_id": "val_7SxpdhPeBngA",
                          "loyalty": {
                            "points": 20,
                            "type": "FIXED"
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order has been paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "start_date": "2022-11-23T00:00:00.000Z",
                          "expiration_date": "2022-11-30T00:00:00.000Z",
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "object": "earning_rule",
                          "automation_id": "auto_MbEIyLbn7pHyba5Qw5eeb35L",
                          "metadata": {
                            "Type": "Order has been paid - Fixed"
                          }
                        },
                        {
                          "id": "ern_BmDiQs7T3UHfJQqtI2RfJHFR",
                          "created_at": "2022-11-24T14:48:36.567Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_AMOUNT",
                            "order": {
                              "amount": {
                                "every": 1000,
                                "points": 1
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_IKanVw37J6oFuRrdnryXw8Lz",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 1"
                          }
                        },
                        {
                          "id": "ern_jwtacKdEEHoc85QbouRw3CR8",
                          "created_at": "2022-11-24T15:17:11.539Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_TOTAL_AMOUNT",
                            "order": {
                              "total_amount": {
                                "every": 1100,
                                "points": 1
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order has been paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_Y6IWqhz0cHGkKcteU9PS5nmK",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 2"
                          }
                        },
                        {
                          "id": "ern_fxVdmtJ4u4rlyoH2hIq7m1PQ",
                          "created_at": "2022-11-24T15:20:04.392Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_METADATA",
                            "order": {
                              "metadata": {
                                "every": 10,
                                "points": 2,
                                "property": "number_of_store_visits"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_HyowcdKQ0lsQ1rSxV5tyYr2z",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 3 - Metadata"
                          }
                        },
                        {
                          "id": "ern_Aop1wTrmPv4yBntDcvXNTCWR",
                          "created_at": "2022-11-24T15:23:44.514Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_ITEMS_AMOUNT",
                            "order_items": {
                              "amount": {
                                "every": 1000,
                                "points": 3,
                                "object": "products_collection",
                                "id": "pc_75U0dHlr7u75BJodrW1AE3t6"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_EXRyQ0z0rgtF54PKDGGAF1qg",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 4"
                          }
                        },
                        {
                          "id": "ern_4qSQVjfGEH7OmXKMzotS0juY",
                          "created_at": "2022-11-24T15:44:45.301Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_ITEMS_SUBTOTAL_AMOUNT",
                            "order_items": {
                              "subtotal_amount": {
                                "every": 1000,
                                "points": 4,
                                "object": "sku",
                                "id": "sku_0b7d7dfb090be5c619"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_ID3xLPXCdnOaveJYWiulcNFW",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 5 - Items"
                          }
                        },
                        {
                          "id": "ern_aJyt4wIrXhmfMxvrLoZjBYrP",
                          "created_at": "2022-11-24T15:56:58.710Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_ITEMS_AMOUNT",
                            "order_items": {
                              "amount": {
                                "every": 10000,
                                "points": 1,
                                "object": "product",
                                "id": "prod_0bae32322150fd0546"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_EbBqD1SNW70vgDp5icGbWl3e",
                          "metadata": {}
                        },
                        {
                          "id": "ern_v4Blmh9hA3gpnjo93cMAgvHr",
                          "created_at": "2022-11-24T16:19:20.571Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 1,
                                "points": 5,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "segment": {
                            "id": "seg_OlE7DmfzMI5pHyD5VAv512r1"
                          },
                          "event": "customer.segment.entered",
                          "source": {
                            "banner": "Entered Segment",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_wMMDJ86iHKkznz9x0506e30E",
                          "metadata": {}
                        },
                        {
                          "id": "ern_L8dFanPxJzhw0f5voTwPurGP",
                          "created_at": "2022-11-24T16:27:13.917Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 3,
                            "type": "FIXED"
                          },
                          "custom_event": {
                            "schema_id": "ms_gn4Qe4xsFPf7orCArCiNVY13"
                          },
                          "event": "page_view",
                          "source": {
                            "banner": "Custom Event",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_9N69OJzGKGhp2mo7SNsnsF5b",
                          "metadata": {
                            "Type": "Fixed"
                          }
                        },
                        {
                          "id": "ern_ngdugZ2hzg35hGASFF8nDjUO",
                          "created_at": "2022-11-24T16:41:48.830Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOM_EVENT_METADATA",
                            "custom_event": {
                              "metadata": {
                                "every": 2,
                                "points": 2,
                                "property": "volume_number"
                              }
                            }
                          },
                          "custom_event": {
                            "schema_id": "ms_qpRZ3EmRQyszNH6Z52Gkq8au"
                          },
                          "event": "user_subscribed",
                          "source": {
                            "banner": "Custom Event",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_v1eTxL7X63B5IkYgRWHK4leh",
                          "metadata": {
                            "Type": "Event"
                          }
                        },
                        {
                          "id": "ern_afo3Ea760hAKv07JYpycnhiE",
                          "created_at": "2022-11-24T16:50:12.945Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 3,
                                "points": 3,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "custom_event": {
                            "schema_id": "ms_f0r4hcu5T0m3v3nT5ch3ma"
                          },
                          "event": "cart_abandoned",
                          "source": {
                            "banner": "Custom Event",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_7ovoKiXx49fe3nnhEbDlp9FP",
                          "metadata": {}
                        },
                        {
                          "id": "ern_chdlG14W8Sdcq3d6jJQQgRMT",
                          "created_at": "2022-11-24T16:51:31.595Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 1,
                            "type": "FIXED"
                          },
                          "event": "customer.loyalty.tier.joined",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Tier joined - Any",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_W9yMQTz5fgQTgmuu6pTVraBW",
                          "metadata": {
                            "Type": "Tier joined  - any - fixed"
                          }
                        },
                        {
                          "id": "ern_gVo6CHBduFPoh1hctASfXHLT",
                          "created_at": "2022-11-24T17:01:42.809Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 4,
                                "points": 4,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.joined",
                          "loyalty_tier": {
                            "id": "ltr_pudTGWasuIqxdiDM0go31OV1"
                          },
                          "source": {
                            "banner": "Tier joined",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_wdlEo17wmoqYHGfilbayEUj7",
                          "metadata": {
                            "Type": "Tier joined - customer metadata - proportional"
                          }
                        },
                        {
                          "id": "ern_66OdCyLADv5IGFoQe18vGUwa",
                          "created_at": "2022-11-24T17:03:59.414Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 2,
                                "points": 2,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.left",
                          "loyalty_tier": {
                            "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2"
                          },
                          "source": {
                            "banner": "Tier left",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_czm5el1Uz1jeGaO97AYoDNAq",
                          "metadata": {
                            "Type": "Tier left"
                          }
                        },
                        {
                          "id": "ern_YR3fDfCjAmz9a5D68nk0i4dm",
                          "created_at": "2022-11-25T07:29:38.961Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 3,
                                "points": 4,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.upgraded",
                          "loyalty_tier": {
                            "id": "ltr_30KHciA0UG8B71Fo51GZqwgN"
                          },
                          "source": {
                            "banner": "Tier upgraded",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_M1OdRH8spk6Fs7yTuPLN2LAv",
                          "metadata": {
                            "Type": "Upgraded"
                          }
                        },
                        {
                          "id": "ern_A2RArBE30Tkt56utVLrRv7rZ",
                          "created_at": "2022-11-25T07:31:05.866Z",
                          "updated_at": "2022-11-25T09:48:26.506Z",
                          "validation_rule_id": "val_kfmWpfXMI9P1",
                          "loyalty": {
                            "points": 1,
                            "type": "FIXED"
                          },
                          "event": "customer.loyalty.tier.downgraded",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Tier Downgraded",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_TMVZtCNMBgZm0KcPJ7otiHZW",
                          "metadata": {
                            "Type": "Tier"
                          }
                        },
                        {
                          "id": "ern_AdlWO2yt6b6llWsibIdiRXVE",
                          "created_at": "2022-11-25T07:31:42.767Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 25,
                            "type": "FIXED"
                          },
                          "event": "customer.loyalty.tier.prolonged",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Prolonged",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_4jH1yq9WJS0oJ8suagCrltyb",
                          "metadata": {}
                        }
                      ],
                      "total": 19
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterLoyaltyTierId"
          },
          "name": "loyaltyTierId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty tier ID."
        }
      ],
      "get": {
        "operationId": "list-loyalty-tier-rewards",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Tier Rewards",
        "description": "Get available rewards for a given tier.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of loyalty tier reward objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersRewardsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "reward": {
                            "id": "rew_QuWYsBNB2G3fikffjnl0G3gH",
                            "name": "API - Testing",
                            "type": "CAMPAIGN",
                            "parameters": {
                              "campaign": {
                                "id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                                "balance": 500,
                                "type": "LOYALTY_PROGRAM"
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "created_at": "2022-08-25T09:32:04.579424+00:00",
                            "updated_at": "2022-08-25T09:33:46.680639+00:00",
                            "metadata": {
                              "Type": "Second campaign"
                            },
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_3Z2sP0bmqcL0ggU28GvFeHU3",
                            "reward_id": "rew_QuWYsBNB2G3fikffjnl0G3gH",
                            "related_object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 40
                              }
                            },
                            "created_at": "2022-11-23T22:11:58.759092+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_tier_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_XoDgmQ2HZX7qPM6aIEuslObo",
                            "name": "Material",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b15f6b9f650c16990",
                                "sku_id": "sku_0b1621b319d248b79f"
                              }
                            },
                            "stock": 2,
                            "redeemed": 1,
                            "attributes": {
                              "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_fPH9ohe0pZf4EiIt295sk9Ob.png",
                              "description": "Archie's Series"
                            },
                            "created_at": "2022-08-29T06:02:36.753873+00:00",
                            "updated_at": "2022-11-08T08:01:26.883166+00:00",
                            "metadata": {
                              "Type": "Material"
                            },
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k",
                            "reward_id": "rew_XoDgmQ2HZX7qPM6aIEuslObo",
                            "related_object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 30
                              }
                            },
                            "created_at": "2022-11-23T22:11:58.759092+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_tier_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_MVXA2kV7lZ1zC057WUaTrvNz",
                            "name": "100 Points = $20",
                            "type": "COIN",
                            "parameters": {
                              "coin": {
                                "exchange_ratio": 20,
                                "points_ratio": 100
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "attributes": {},
                            "created_at": "2022-09-09T06:41:54.496035+00:00",
                            "updated_at": null,
                            "metadata": {},
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_nMXB59qGTNYawMT8eP8M4oUp",
                            "reward_id": "rew_MVXA2kV7lZ1zC057WUaTrvNz",
                            "related_object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "related_object_type": "campaign",
                            "created_at": "2022-11-09T11:01:21.065681+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_tier_reward"
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers": {
      "get": {
        "operationId": "list-customers",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "List Customers",
        "description": "Returns a list of customers.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "email",
            "description": "Limit the customers to the ones that have this specific email address."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Limit the customers to the ones that are located in the specified city.",
            "name": "city"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Filter customers by the name property.",
            "name": "name"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Filter customers by the segment id.",
            "name": "segment_id"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was created.",
            "name": "created_at[before]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was created.",
            "name": "created_at[after]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was updated last time.",
            "name": "updated_at[before]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was updated last time.",
            "name": "updated_at[after]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListCustomers"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. This is a date-time value that defines your place in the list based on \`created_at\` property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at \`2020-05-24T13:43:09.024Z\`, your subsequent call can include \`starting_after=2020-05-24T13:43:09.024Z\` in order to fetch the next page of the list. \\n<!-- title: Options -->\\n| **Option** | **Format** | **Sorting** |\\n|:---|:---|:---|\\n| Return customers **before** a specific creation date  | - set \`starting_after\` parameter to the breakpoint date | Sorting order is **descending**; the most recent dates first and least recent dates last. |\\n| Return customers **after** a specific create or update date | - include the \`order\` parameter set to \`created_at\` or \`updated_at\`<br>- set \`starting_after\` to the breakpoint date | Sorting order is **ascending**; the least recent dates first and the most recent dates last. |\\n"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with customer objects. The customers are returned sorted by creation date, with the most recent customers appearing first.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "customers",
                      "customers": [
                        {
                          "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "source_id": "source_123",
                          "name": "Bob Smith",
                          "description": "A frequent customer",
                          "email": "bob.smith@email.com",
                          "phone": "+1 933 222 3333",
                          "birthdate": "2022-01-01",
                          "address": {
                            "city": "New York",
                            "state": "NY",
                            "line_1": "123 Main St.",
                            "line_2": "APT 3 BLG 5",
                            "country": "United States",
                            "postal_code": "10001"
                          },
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 1,
                              "total_failed": 0,
                              "total_succeeded": 1,
                              "total_rolled_back": 0,
                              "total_rollback_failed": 0,
                              "total_rollback_succeeded": 0,
                              "gift": {
                                "redeemed_amount": 0,
                                "amount_to_go": 0
                              },
                              "loyalty_card": {
                                "redeemed_points": 0,
                                "points_to_go": 4200
                              }
                            },
                            "orders": {
                              "total_amount": 1600,
                              "total_count": 1,
                              "average_amount": 1600,
                              "last_order_amount": 1600,
                              "last_order_date": "2022-08-30T10:17:39.220Z"
                            }
                          },
                          "loyalty": {
                            "points": 2200,
                            "referred_customers": 0,
                            "campaigns": {
                              "Christmas Campaign": {
                                "points": 1000,
                                "referred_customers": 0
                              },
                              "Fall Campaign": {
                                "points": 75,
                                "referred_customers": 0
                              },
                              "Winter Campaign": {
                                "points": 75,
                                "referred_customers": 0
                              },
                              "Summer Campaign": {
                                "points": 50,
                                "referred_customers": 0
                              },
                              "Spring Campaign": {
                                "points": 1000,
                                "referred_customers": 0
                              }
                            }
                          },
                          "referrals": {
                            "total": 1,
                            "campaigns": [
                              {
                                "campaign_id": "camp_rRsfatlwN7unSeUIJDCYedal",
                                "referrer_id": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                                "related_object_id": "r_0b9d4c5121d64dd01d",
                                "related_object_type": "redemption",
                                "date": "2022-08-30T10:17:41.089Z"
                              }
                            ]
                          },
                          "metadata": {
                            "lang": "en",
                            "test": true
                          },
                          "system_metadata": {},
                          "created_at": "2022-08-30T06:32:07.380Z",
                          "updated_at": "2022-08-30T10:17:58.049Z",
                          "object": "customer"
                        },
                        {
                          "id": "cust_X0hU04x7FeisPnD5lctZcQkI",
                          "source_id": "jane.smith@email.com",
                          "name": "Jane Smith",
                          "description": "A nice customer",
                          "email": "jane.smith@email.com",
                          "phone": "+1 933 222 3333",
                          "birthdate": "2022-01-02",
                          "address": {
                            "city": "New Yorke",
                            "state": "NY",
                            "line_1": "123 Main Ste.",
                            "line_2": "APT 3 BLG 4e",
                            "country": "United Statese",
                            "postal_code": "10001e"
                          },
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 4,
                              "total_failed": 0,
                              "total_succeeded": 4,
                              "total_rolled_back": 1,
                              "total_rollback_failed": 0,
                              "total_rollback_succeeded": 1,
                              "gift": {
                                "redeemed_amount": 0,
                                "amount_to_go": 0
                              },
                              "loyalty_card": {
                                "redeemed_points": 0,
                                "points_to_go": 15549
                              }
                            },
                            "orders": {
                              "total_amount": 210000,
                              "total_count": 3,
                              "average_amount": 70000,
                              "last_order_amount": 70000,
                              "last_order_date": "2022-08-30T11:51:08.029Z"
                            }
                          },
                          "loyalty": {
                            "points": 15399,
                            "referred_customers": 0,
                            "campaigns": {
                              "Christmas Campaign": {
                                "points": 7000,
                                "referred_customers": 0
                              },
                              "Fall Campaign": {
                                "points": 2299,
                                "referred_customers": 0
                              },
                              "Winter Campaign": {
                                "points": 25,
                                "referred_customers": 0
                              },
                              "Summer Campaign": {
                                "points": 75,
                                "referred_customers": 0
                              },
                              "Spring Campaign": {
                                "points": 6000,
                                "referred_customers": 0
                              }
                            }
                          },
                          "referrals": {
                            "total": 2,
                            "campaigns": [
                              {
                                "campaign_id": "camp_rRsfatlwN7unSeUIJDCYedal",
                                "referrer_id": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                                "related_object_id": "r_0b9d4cc4aa164dd073",
                                "related_object_type": "redemption",
                                "date": "2022-08-30T10:19:39.196Z"
                              },
                              {
                                "campaign_id": "camp_YDsFdX8TgFtT0RUuKEFyhqs3",
                                "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                                "related_object_id": "r_0b9d61b6484ead0324",
                                "related_object_type": "redemption",
                                "date": "2022-08-30T11:51:10.445Z"
                              }
                            ]
                          },
                          "metadata": {
                            "lang": "en",
                            "test": false
                          },
                          "system_metadata": {},
                          "created_at": "2022-08-09T09:50:53.620Z",
                          "updated_at": "2022-08-30T11:51:24.327Z",
                          "object": "customer"
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Create Customer",
        "description": "Creates a customer object.\\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the customer database, Voucherify will return a related customer object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Create a customer with specified parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_id": "source_123",
                    "name": "Bob Smith",
                    "description": "A frequent customer",
                    "email": "bob.smith@email.com",
                    "phone": "+1 933 222 3333",
                    "address": {
                      "city": "New York",
                      "country": "United States",
                      "line_1": "123 Main St.",
                      "line_2": "APT 3 BLG 4",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "metadata": {
                      "lang": "en",
                      "test": true
                    },
                    "birthdate": "2022-01-01"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a customer object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                      "source_id": "source_123",
                      "name": "Bob Smith",
                      "description": "A frequent customer",
                      "email": "bob.smith@email.com",
                      "phone": "+1 933 222 3333",
                      "birthdate": "2022-01-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "country": "United States",
                        "postal_code": "10001"
                      },
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 0,
                          "total_failed": 0,
                          "total_succeeded": 0,
                          "total_rolled_back": 0,
                          "total_rollback_failed": 0,
                          "total_rollback_succeeded": 0,
                          "gift": {
                            "redeemed_amount": 0,
                            "amount_to_go": 0
                          },
                          "loyalty_card": {
                            "redeemed_points": 0,
                            "points_to_go": 0
                          }
                        },
                        "orders": {
                          "total_amount": 0,
                          "total_count": 0,
                          "average_amount": 0,
                          "last_order_amount": 0
                        }
                      },
                      "loyalty": {
                        "points": 0,
                        "referred_customers": 0,
                        "campaigns": {}
                      },
                      "referrals": {
                        "total": 0,
                        "campaigns": []
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "system_metadata": {},
                      "created_at": "2022-08-30T06:32:07.380Z",
                      "object": "customer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer's \`id\` or \`source_id\`."
        }
      ],
      "get": {
        "operationId": "get-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Get Customer",
        "description": "Retrieve customer details.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a customer object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cust_T849EgzNVVmn5icJ2FAkT2rO",
                      "source_id": "alice.morgan@email.com",
                      "name": "Alice Morgan",
                      "email": "alice.morgan@email.com",
                      "address": null,
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2,
                          "total_failed": 0,
                          "total_succeeded": 2,
                          "total_rolled_back": 0,
                          "total_rollback_failed": 0,
                          "total_rollback_succeeded": 0,
                          "gift": {
                            "redeemed_amount": 0,
                            "amount_to_go": 0
                          },
                          "loyalty_card": {
                            "redeemed_points": 0,
                            "points_to_go": 3303
                          }
                        },
                        "orders": {
                          "total_amount": 203900,
                          "total_count": 2,
                          "average_amount": 101950,
                          "last_order_amount": 3900,
                          "last_order_date": "2022-07-26T14:59:52.814Z"
                        }
                      },
                      "loyalty": {
                        "points": 3303,
                        "referred_customers": 0,
                        "campaigns": {
                          "Summer Campaign": {
                            "points": 3303,
                            "referred_customers": 0
                          }
                        }
                      },
                      "referrals": {
                        "total": 0,
                        "campaigns": []
                      },
                      "system_metadata": {},
                      "created_at": "2022-02-07T08:28:23.644Z",
                      "updated_at": "2022-07-26T14:59:59.806Z",
                      "assets": {
                        "cockpit_url": "https://www.url.com"
                      },
                      "object": "customer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Delete Customer",
        "description": "This method deletes a customer.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      },
      "put": {
        "operationId": "update-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customer",
        "description": "Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Alice McDonald",
                    "email": "alice.mdconald@email.com",
                    "description": "Updating customer data",
                    "phone": "+1 (132) 222-2222",
                    "address": {
                      "city": "New York",
                      "country": "United States",
                      "line_1": "123 Main St.",
                      "line_2": "APT 3 BLG 4",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "metadata": {
                      "lang": "en",
                      "test": true
                    },
                    "birthdate": "2022-01-01",
                    "birthday": "2022-01-02"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a customer object if updates were successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cust_T849EgzNVVmn5icJ2FAkT2rO",
                      "source_id": "alice@morgan.com",
                      "name": "Alice McDonald",
                      "description": "Updating customer data",
                      "email": "alice.mdconald@email.com",
                      "phone": "+1 (132) 222-2222",
                      "birthday": "2022-01-02",
                      "birthdate": "2022-01-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "country": "United States",
                        "postal_code": "10001"
                      },
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2,
                          "total_failed": 0,
                          "total_succeeded": 2,
                          "total_rolled_back": 0,
                          "total_rollback_failed": 0,
                          "total_rollback_succeeded": 0,
                          "gift": {
                            "redeemed_amount": 0,
                            "amount_to_go": 0
                          },
                          "loyalty_card": {
                            "redeemed_points": 0,
                            "points_to_go": 4428
                          }
                        },
                        "orders": {
                          "total_amount": 203900,
                          "total_count": 2,
                          "average_amount": 101950,
                          "last_order_amount": 3900,
                          "last_order_date": "2022-07-26T14:59:52.814Z"
                        }
                      },
                      "loyalty": {
                        "points": 3403,
                        "referred_customers": 0,
                        "campaigns": {
                          "Summer Campaign": {
                            "points": 0,
                            "referred_customers": 0
                          },
                          "Spring Campaign": {
                            "points": 50,
                            "referred_customers": 0
                          },
                          "Fall Campaign": {
                            "points": 50,
                            "referred_customers": 0
                          },
                          "Winter Campaign": {
                            "points": 3303,
                            "referred_customers": 0
                          }
                        }
                      },
                      "referrals": {
                        "total": 0,
                        "campaigns": []
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "system_metadata": {},
                      "created_at": "2022-02-07T08:28:23.644Z",
                      "updated_at": "2022-08-31T09:58:30.475Z",
                      "object": "customer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}/permanent-deletion": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer's \`id\` or \`source_id\`."
        }
      ],
      "post": {
        "operationId": "customer-permanently-deletion",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Delete Customer Permanently",
        "description": "The organization user can remove consumer data permanently from the Voucherify system by using this API method. It d​eletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a permanent deletion object and status of the deletion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersPermanentDeletionCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "del_7k3buMvBsJuXiLRmdh1WZvZs",
                      "created_at": "2022-09-02T17:50:29.302Z",
                      "related_object_id": "cust_XI8sPLvznzVpNI1BMIWGcUJa",
                      "related_object": "customer",
                      "status": "DONE",
                      "data_json": {
                        "events": 16,
                        "customer_events": 28,
                        "daily_events": 0,
                        "segments": 0,
                        "orders": 9,
                        "order_events": 5,
                        "customer": 1
                      },
                      "object": "pernament_deletion"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/importCSV": {
      "post": {
        "operationId": "import-customers-using-csv",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Import and Update Customers using CSV",
        "description": "This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.  \\n\\n## Request Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/customers/importCSV \\\\\\n  -F file=@/path/to/customers.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n## CSV File Format\\n\\nThe CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.\\n\\n<!-- theme: info -->\\n> 📘 Standard customer fields mapping\\n>\\n> **No spaces allowed in field names**  \\n> Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2\\n\\n## Update Customers using CSV\\n\\nIf you would like to update customer's data, you can do it using the CSV file with new data. However, remember to include a \`source_id\` in your CSV file to manage the update successfully.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomersImportCSVRequestBody"
              },
              "examples": {}
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and customers will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersImportCsvCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/bulk/async": {
      "post": {
        "operationId": "update-customers-in-bulk",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customers in bulk",
        "description": "Update several customers in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier.  \\n\\nIf a requested customer object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the customer fields that you would like to update in each customer object.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "title": "Update Customers in bulk Request Body",
                "description": "Request body schema for \`/customers/bulk/async\`.",
                "items": {
                  "$ref": "#/components/schemas/CustomersUpdateInBulkRequestBody"
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "source_id": "John.Smith@email.com",
                      "name": "John Smith",
                      "email": "john.smith@email.com",
                      "description": "Updating customer data",
                      "phone": "+1 (132) 222-2222",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthday": "2022-04-04"
                    },
                    {
                      "source_id": "Jane.Smith@email.com",
                      "name": "Jane Smith",
                      "email": "Jane.Smith@email.com",
                      "description": "Updating customer data",
                      "phone": "+1 (132) 222-2222",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthday": "2022-03-03"
                    },
                    {
                      "source_id": "Sally.Smith@email.com",
                      "name": "Sally Smith",
                      "email": "Sally.Smith@email.com",
                      "description": "Updating customer data",
                      "phone": "+1 (132) 222-2222",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthdate": "2022-02-02"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and customers will be updated in the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersUpdateInBulkResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/metadata/async": {
      "post": {
        "operationId": "update-customers-metadata-in-bulk",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customers' Metadata in bulk",
        "description": "Update several customers metadata properties in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier.  \\n\\nIf a requested customer object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "List the \`source_ids\` of the customer's you would like to update along with the metadata key value pairs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersMetadataUpdateInBulkRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_ids": [
                      "source_123",
                      "source_456"
                    ],
                    "metadata": {
                      "lang": "en",
                      "test": false
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and customers will be updated in the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersMetadataUpdateInBulkResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}/consents": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify unique customer identifier or source ID."
        }
      ],
      "put": {
        "operationId": "update-customers-consents",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customer's consents",
        "description": "Update marketing permissions for the specified customer.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use \\"unsubscribed\\" as a consent identifier and \\"true\\" as its value.  \\n\\n#### Examples\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"cnst_aIdUulAh0SCsOCaS3005y7yS\\": true,\\n    \\"cnst_aIdUulAhwewqaS31213fdsfds\\": false\\n}\\n\`\`\`\\n\\nOpt-out from all communication:\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"unsubscribed\\": true\\n}\\n\`\`\`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersConsentsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I": true,
                    "cnst_VCmucIvAsmDYw2PPAok6bcYy": false
                  }
                },
                "Opt-out of all": {
                  "value": {
                    "unsubscribed": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns no content if the consents were updated successfully."
          }
        }
      }
    },
    "/client/v1/customers/{customerId}/consents": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer identifier or \`source_id\`"
        }
      ],
      "put": {
        "operationId": "update-customers-consents-client-side",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customer's consents (client-side)",
        "description": "Update marketing permissions for the specified customer.",
        "parameters": [],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use \\"unsubscribed\\" as a consent identifier and \\"true\\" as its value.  \\n\\n#### Examples\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"cnst_aIdUulAh0SCsOCaS3005y7yS\\": true,\\n    \\"cnst_aIdUulAhwewqaS31213fdsfds\\": false\\n}\\n\`\`\`\\n\\nOpt-out from all communication:\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"unsubscribed\\": true\\n}\\n\`\`\`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCustomersConsentsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I": true,
                    "cnst_VCmucIvAsmDYw2PPAok6bcYy": false
                  }
                },
                "Opt-out of all": {
                  "value": {
                    "unsubscribed": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns no content if the consents were updated successfully."
          }
        }
      }
    },
    "/v1/customers/{customerId}/activities": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer's \`id\` or source ID of the customer who performed the activities."
        }
      ],
      "get": {
        "operationId": "list-customer-activities",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "List Customer Activities",
        "description": "Retrieve customer activities.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. \`starting_after\` is a date-time value that defines your place in the list based on \`created_at\` property from the activity object. For instance, if you make a list request and receive 100 objects, ending with an object created at \`2020-05-24T13:43:09.024Z\`, your subsequent call can include \`starting_after=2020-05-24T13:43:09.024Z\` in order to fetch the next page of the list."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "starting_after_id",
            "description": "By applying this filter value, you will get events starting after an event with the given ID."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCampaignType"
            },
            "in": "query",
            "name": "campaign_type",
            "description": "Through this parameter you can control a type of campaign by which Voucherify will filter related customer's activity. API will return only records related to that given type. Allowed values: DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCampaignId"
            },
            "in": "query",
            "name": "campaign_id",
            "description": "By applying this parameter you request only events related to specific campaign identified by its ID."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterProductId"
            },
            "in": "query",
            "name": "product_id",
            "description": "By applying this parameter you request only events related to specific product identified by its ID."
          },
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with customer activities.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersActivitiesListResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}/segments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a customer represented by an internal customer ID or customer source ID."
        }
      ],
      "get": {
        "operationId": "list-customer-segments",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "List Customer's Segments",
        "description": "Returns the list of segments IDs to which the customer belongs to.  \\n\\nIf you pass a \`customerId\` which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "The method returns segment(s) to which the given customer belongs to.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersSegmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "seg_DNAOhUtJffvX0f57ajLMFBYR",
                          "name": "area code not 123",
                          "object": "segment"
                        },
                        {
                          "id": "seg_IPIYx96l92Op0Sy5MOaImhgw",
                          "name": "not bob.smith@email.com",
                          "object": "segment"
                        },
                        {
                          "id": "seg_1wc52c5z6r1kQ81brO8j9Hk2",
                          "name": "Birthday After Dec 31",
                          "object": "segment"
                        },
                        {
                          "id": "seg_ZEbbT4mq1ePpM9PzR02lcww2",
                          "name": "Start with S",
                          "object": "segment"
                        },
                        {
                          "id": "seg_WJv55MbzQwnr56ttJ2xUrSgt",
                          "name": "Loyalty Card",
                          "object": "segment"
                        }
                      ],
                      "total": 5
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders": {
      "get": {
        "operationId": "list-orders",
        "tags": [
          "ORDERS API"
        ],
        "summary": "List Orders",
        "description": "Returns a list of orders.\\n\\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListOrders"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with order objects. The orders are returned sorted by creation date by default, with the most recent orders appearing last, unless you specify another sequence using the order query parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "orders",
                      "orders": [
                        {
                          "id": "ord_v5vupdacgud1CwUSyKqSlHuk",
                          "source_id": null,
                          "created_at": "2022-09-09T07:44:41.594Z",
                          "updated_at": "2022-09-09T07:44:42.331Z",
                          "status": "PAID",
                          "amount": 2700,
                          "discount_amount": 1243,
                          "items_discount_amount": 270,
                          "total_discount_amount": 1513,
                          "total_amount": 1187,
                          "items": [
                            {
                              "object": "order_item",
                              "source_id": "prod_5h1pp1ng",
                              "related_object": "product",
                              "quantity": 1,
                              "amount": 700,
                              "discount_amount": 70,
                              "price": 700,
                              "subtotal_amount": 630,
                              "product": {
                                "name": "Shipping"
                              }
                            },
                            {
                              "object": "order_item",
                              "source_id": "roses_1",
                              "related_object": "product",
                              "quantity": 1,
                              "amount": 500,
                              "discount_amount": 50,
                              "price": 500,
                              "subtotal_amount": 450,
                              "product": {
                                "name": "Bouquet - Romantic Roses",
                                "price": 500
                              }
                            },
                            {
                              "object": "order_item",
                              "source_id": "vase_1",
                              "related_object": "product",
                              "quantity": 1,
                              "amount": 1500,
                              "discount_amount": 150,
                              "price": 1500,
                              "subtotal_amount": 1350,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0baa093537528ef645": {
                              "date": "2022-09-09T07:44:41.695Z",
                              "related_object_type": "redemption",
                              "related_object_id": "r_0baa093537528ef645",
                              "stacked": [
                                "r_0baa093537528ef646",
                                "r_0baa093537528ef647",
                                "r_0baa093537528ef648"
                              ]
                            }
                          }
                        },
                        {
                          "id": "ord_3JkWC6jG0JgyRf5lO3r4IyU1",
                          "source_id": null,
                          "created_at": "2022-09-09T07:04:22.597Z",
                          "updated_at": "2022-09-09T07:04:23.743Z",
                          "status": "PAID",
                          "amount": 73100,
                          "items_discount_amount": 7310,
                          "total_discount_amount": 7310,
                          "total_amount": 65790,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "discount_amount": 7000,
                              "price": 70000,
                              "subtotal_amount": 63000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "discount_amount": 160,
                              "price": 1600,
                              "subtotal_amount": 1440,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 1,
                              "amount": 1500,
                              "discount_amount": 150,
                              "price": 1500,
                              "subtotal_amount": 1350,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fffae90e1b2495": {
                              "date": "2022-09-09T07:04:22.692Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_24rljiUfdLNC9poBf0BPNmoh2txzFkLs"
                            }
                          }
                        },
                        {
                          "id": "ord_HwdbziIPvUZJkIC7z74FKmPv",
                          "source_id": null,
                          "created_at": "2022-09-09T06:47:14.195Z",
                          "updated_at": "2022-09-09T06:47:15.369Z",
                          "status": "PAID",
                          "amount": 71600,
                          "discount_amount": 7160,
                          "total_discount_amount": 7160,
                          "total_amount": 64440,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fc0eb00e1b2230": {
                              "date": "2022-09-09T06:47:14.369Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_3vEprqa6tbzfhFtpjr4mDlkNchXepW7s"
                            }
                          }
                        },
                        {
                          "id": "ord_HRluwFS2seoILUkXxWML0D7Z",
                          "source_id": null,
                          "created_at": "2022-09-09T06:44:27.383Z",
                          "updated_at": "2022-09-09T06:44:28.252Z",
                          "status": "PAID",
                          "amount": 71600,
                          "discount_amount": 100,
                          "total_discount_amount": 100,
                          "total_amount": 71500,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "referrer": {
                            "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fb6bb7928ed9ec": {
                              "date": "2022-09-09T06:44:27.486Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_vhHuiEmZSchWHtE0xKm0HM7PFCR9cNkA",
                              "related_object_parent_id": "camp_rRsfatlwN7unSeUIJDCYedal"
                            }
                          }
                        },
                        {
                          "id": "ord_Qg5utCohAZ3tafYvc1O4C80r",
                          "source_id": null,
                          "created_at": "2022-09-09T06:42:34.083Z",
                          "updated_at": "2022-09-09T06:42:35.169Z",
                          "status": "PAID",
                          "amount": 70000,
                          "discount_amount": 4000,
                          "total_discount_amount": 4000,
                          "total_amount": 66000,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fafd11d28ed999": {
                              "date": "2022-09-09T06:42:34.183Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_RaMaTT7F0Q47BetdGcFxsyqwo1aZGzJs",
                              "related_object_parent_id": "camp_hg7ajfHh6DcE1xa18mw3SdF6"
                            }
                          }
                        },
                        {
                          "id": "ord_G9LBb5SOPa36pHdwxUvzkw4P",
                          "source_id": null,
                          "created_at": "2022-09-09T06:38:17.984Z",
                          "updated_at": "2022-09-09T06:38:19.064Z",
                          "status": "PAID",
                          "amount": 4600,
                          "items_discount_amount": 300,
                          "total_discount_amount": 300,
                          "total_amount": 4300,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0a65b3ff8592d7a5b5",
                              "quantity": 1,
                              "amount": 3000,
                              "discount_amount": 300,
                              "price": 3000,
                              "subtotal_amount": 2700,
                              "product": {
                                "name": "Koffee Cup",
                                "price": 3000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fa02fcd28ed8f1": {
                              "date": "2022-09-09T06:38:18.099Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                              "related_object_parent_id": "camp_hC2GdqYtOmTT45zfhib62cK1"
                            }
                          }
                        },
                        {
                          "id": "ord_N3YBowDTZs0UH2hHoMZLbUDN",
                          "source_id": null,
                          "created_at": "2022-09-09T06:18:31.459Z",
                          "updated_at": "2022-09-09T06:18:31.624Z",
                          "status": "PAID",
                          "amount": 71600,
                          "discount_amount": 7160,
                          "total_discount_amount": 7160,
                          "total_amount": 64440,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                            "object": "customer"
                          },
                          "customer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9f57c37128ed639": {
                              "date": "2022-09-09T06:18:31.516Z",
                              "related_object_type": "promotion_tier",
                              "related_object_id": "promo_CQonGnrsFAdEJfJQ3oKB3a8G",
                              "related_object_parent_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0"
                            }
                          }
                        },
                        {
                          "id": "ord_3R6vsxRZRkND8rpe0rAn9Agc",
                          "source_id": null,
                          "created_at": "2022-09-05T08:13:13.720Z",
                          "updated_at": "2022-09-05T08:13:14.498Z",
                          "status": "PAID",
                          "amount": 74000,
                          "items_discount_amount": 1500,
                          "total_discount_amount": 1500,
                          "total_amount": 72500,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 2,
                              "amount": 3000,
                              "discount_amount": 500,
                              "price": 1500,
                              "subtotal_amount": 2500,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b00ffed198e344",
                              "quantity": 2,
                              "amount": 1000,
                              "discount_amount": 1000,
                              "price": 500,
                              "subtotal_amount": 0,
                              "product": {
                                "name": "Bouquet - Romantic Roses",
                                "price": 500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                            "object": "customer"
                          },
                          "customer_id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba4e961444579711a": {
                              "date": "2022-09-05T08:13:13.873Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_hwySVBBk6YmMD4GzZHJzke1Fxo3QO7kP",
                              "related_object_parent_id": "camp_Uji5a53s5wRSUHqznncTkhHh"
                            }
                          }
                        },
                        {
                          "id": "ord_7bqlkoHyEJCQuxVZpKfZYNeA",
                          "source_id": null,
                          "created_at": "2022-09-02T17:12:13.213Z",
                          "updated_at": "2022-09-02T17:12:13.969Z",
                          "status": "PAID",
                          "amount": 292400,
                          "items_discount_amount": 900,
                          "total_discount_amount": 900,
                          "total_amount": 291500,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 4,
                              "amount": 6400,
                              "price": 1600,
                              "subtotal_amount": 6400,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 4,
                              "amount": 6000,
                              "price": 1500,
                              "subtotal_amount": 6000,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 4,
                              "amount": 280000,
                              "discount_amount": 900,
                              "price": 70000,
                              "subtotal_amount": 279100,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                            "object": "customer"
                          },
                          "customer_id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba187f9bb45792c13": {
                              "date": "2022-09-02T17:12:13.293Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_pg6DhwhmeZASoSoJ15PdzMT9MhsPjYuc",
                              "related_object_parent_id": "camp_W8DJVd8J0btqXT6FBwn7BSkC"
                            }
                          }
                        },
                        {
                          "id": "ord_7HwbJiHmS07O7FsVAtjJcuRS",
                          "source_id": null,
                          "created_at": "2022-09-02T17:08:37.794Z",
                          "updated_at": "2022-09-02T17:08:38.879Z",
                          "status": "PAID",
                          "amount": 223900,
                          "items_discount_amount": 900,
                          "total_discount_amount": 900,
                          "total_amount": 223000,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 4,
                              "amount": 6400,
                              "discount_amount": 300,
                              "price": 1600,
                              "subtotal_amount": 6100,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 3,
                              "amount": 210000,
                              "discount_amount": 300,
                              "price": 70000,
                              "subtotal_amount": 209700,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 5,
                              "amount": 7500,
                              "discount_amount": 300,
                              "price": 1500,
                              "subtotal_amount": 7200,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                            "object": "customer"
                          },
                          "customer_id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba1872762c5792b73": {
                              "date": "2022-09-02T17:08:37.899Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_yQydppWWJpSUuGNEWJ4I2upFGY2Ma4IY",
                              "related_object_parent_id": "camp_A5L21BD4cJii28882owYBqTV"
                            }
                          }
                        }
                      ],
                      "total": 441
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-order",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Create Order",
        "description": "Creates an order object and triggers an order creation event.\\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the order database, Voucherify will return a related order object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the order parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "amount": 20000,
                    "customer": {
                      "source_id": "sample_customer"
                    },
                    "status": "PAID",
                    "items": [
                      {
                        "quantity": 1,
                        "price": 20000,
                        "source_id": "sample product1",
                        "related_object": "product",
                        "product": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    ]
                  }
                },
                "Example 2": {
                  "value": {
                    "source_id": "new",
                    "status": "FULFILLED",
                    "metadata": {
                      "location_id": [
                        "L1",
                        "L2"
                      ],
                      "payment_mean": [
                        "paypal",
                        "credit-card"
                      ]
                    },
                    "customer": {
                      "source_id": "bob.smith.1@email.com",
                      "name": "Bob Smith",
                      "description": "A nice customer",
                      "email": "bob.smith.1@email.com",
                      "phone": "+1 933 222 3333",
                      "address": {
                        "city": "New York",
                        "country": "United Statese",
                        "line_1": "123 Main St",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": false
                      },
                      "birthdate": "2022-01-02"
                    },
                    "referrer": {
                      "source_id": "jane.smith@email.com",
                      "name": "Jane Smith",
                      "description": "A really nice customer",
                      "email": "jane.smith@email.com",
                      "phone": "+1 933 222 3334",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": false
                      },
                      "birthday": "2022-03-03"
                    },
                    "items": [
                      {
                        "source_id": "prod_1",
                        "related_object": "product",
                        "quantity": 2,
                        "product": {
                          "name": "Apple iPhone 12",
                          "price": 60000,
                          "metadata": {
                            "color": [
                              "purple"
                            ],
                            "vendor": "mall"
                          },
                          "override": true
                        }
                      },
                      {
                        "source_id": "ComicBook_1",
                        "related_object": "sku",
                        "quantity": 1,
                        "product": {
                          "source_id": "Books",
                          "name": "Comic Books1",
                          "price": 2100,
                          "metadata": {
                            "color": [
                              "silver"
                            ],
                            "vendor": "Bookstore1"
                          },
                          "override": true
                        },
                        "sku": {
                          "sku": "Comics1",
                          "source_id": "ComicBook_1",
                          "price": 1700,
                          "metadata": {
                            "color": [
                              "golden"
                            ],
                            "vendor": "islands"
                          },
                          "override": true
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an order object if the operation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ord_cRKOEXiBOj0EZKF7g9n6l0eH",
                      "source_id": "new",
                      "created_at": "2022-09-09T09:20:01.660Z",
                      "updated_at": "2022-09-09T09:24:43.604Z",
                      "status": "FULFILLED",
                      "amount": 121700,
                      "total_amount": 121700,
                      "items": [
                        {
                          "object": "order_item",
                          "source_id": "prod_1",
                          "related_object": "product",
                          "quantity": 2,
                          "amount": 120000,
                          "price": 60000,
                          "subtotal_amount": 120000,
                          "product": {
                            "id": "prod_0b7d7c4e814be5c502",
                            "source_id": "prod_1",
                            "name": "Apple iPhone 12",
                            "metadata": {
                              "color": [
                                "purple"
                              ],
                              "vendor": "mall"
                            },
                            "price": 60000
                          }
                        },
                        {
                          "object": "order_item",
                          "source_id": "ComicBook_1",
                          "related_object": "sku",
                          "product_id": "prod_0b7d7dfb05cbe5c616",
                          "quantity": 1,
                          "amount": 1700,
                          "price": 1700,
                          "subtotal_amount": 1700,
                          "product": {
                            "id": "prod_0b7d7dfb05cbe5c616",
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "Bookstore1"
                            },
                            "price": 2100
                          },
                          "sku": {
                            "id": "sku_0b7d7dfb090be5c619",
                            "source_id": "ComicBook_1",
                            "sku": "Comics1",
                            "metadata": {
                              "color": [
                                "golden"
                              ],
                              "vendor": "islands"
                            },
                            "price": 1700
                          }
                        }
                      ],
                      "metadata": {
                        "location_id": [
                          "L1",
                          "L2"
                        ],
                        "payment_mean": [
                          "paypal",
                          "credit-card"
                        ]
                      },
                      "customer": {
                        "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                        "object": "customer"
                      },
                      "referrer": {
                        "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                        "object": "customer"
                      },
                      "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                      "object": "order"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/{orderId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterOrderId"
          },
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Unique Voucherify order ID or order source ID."
        }
      ],
      "get": {
        "operationId": "get-order",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Get Order",
        "description": "Retrieve an order.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an order object if a valid identifier was provided. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersGetResponseBody"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-order",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Update Order",
        "description": "Updates the specified order by setting the values of the parameters passed in the request body. Any parameters not provided will be left unchanged.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters of the order that are to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "status": "CANCELED"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the order object if the update succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ord_cRKOEXiBOj0EZKF7g9n6l0eH",
                      "source_id": "new",
                      "created_at": "2022-09-09T09:20:01.660Z",
                      "updated_at": "2022-09-09T09:41:00.881Z",
                      "status": "CANCELED",
                      "amount": 121700,
                      "total_amount": 121700,
                      "items": [
                        {
                          "object": "order_item",
                          "source_id": "prod_1",
                          "related_object": "product",
                          "quantity": 2,
                          "amount": 120000,
                          "price": 60000,
                          "subtotal_amount": 120000,
                          "product": {
                            "id": "prod_0b7d7c4e814be5c502",
                            "source_id": "prod_1",
                            "name": "Apple iPhone 12",
                            "metadata": {
                              "color": [
                                "purple"
                              ],
                              "vendor": "mall"
                            },
                            "price": 60000
                          }
                        },
                        {
                          "object": "order_item",
                          "source_id": "ComicBook_1",
                          "related_object": "sku",
                          "product_id": "prod_0b7d7dfb05cbe5c616",
                          "quantity": 1,
                          "amount": 1700,
                          "price": 1700,
                          "subtotal_amount": 1700,
                          "product": {
                            "id": "prod_0b7d7dfb05cbe5c616",
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "Bookstore1"
                            },
                            "price": 2100
                          },
                          "sku": {
                            "id": "sku_0b7d7dfb090be5c619",
                            "source_id": "ComicBook_1",
                            "sku": "Comics1",
                            "metadata": {
                              "color": [
                                "golden"
                              ],
                              "vendor": "islands"
                            },
                            "price": 1700
                          }
                        }
                      ],
                      "metadata": {
                        "location_id": [
                          "L1",
                          "L2"
                        ],
                        "payment_mean": [
                          "paypal",
                          "credit-card"
                        ]
                      },
                      "customer": {
                        "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                        "object": "customer"
                      },
                      "referrer": {
                        "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                        "object": "customer"
                      },
                      "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                      "object": "order"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/import": {
      "post": {
        "operationId": "import-orders",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Import Orders",
        "description": "<!-- theme: info -->\\n\\n> 🚧 Historical orders\\n>\\n> This endpoint should only be used to import historical orders into Voucherify. For on-going synchronization, the <!-- [create order](OpenAPI.json/paths/~1orders/post) -->[create order](ref:create-order) and <!-- [update order](OpenAPI.json/paths/~1orders~1{orderId}/put) -->[update order](ref:update-order) endpoints should be used. This is critical because this endpoint does not store events or launch distributions.\\n\\n## Limitations\\n\\n### Import volume\\n\\nThere can be only a single on-going order import per tenant per project at a given time. The user can schedule more imports but those extra imports will be scheduled to run in sequence one by one.  \\n\\n### Maximum count of orders in single import\\n\\nThere is a \`2000\` limit but we might decide to change it to a lower / higher value at any given time depending if we find this value is too high or too low with time.\\n\\n## Notifications\\n\\nThere are no notifications on the Dashboard because this import is launched via the API.\\n\\n## Triggered actions\\n  \\nIf you import orders with customers, then a logic will be scheduled responsible for placing these customers into segments and refreshing the segment's summary. Consequently, this update will trigger \\n- **customers entering into segments** \\n- **distributions** based on any rules tied to customer entering segment(s)\\n- **earning rules** based on the customer entering segment(s)\\n\\n## What is not triggered\\n\\n1. No webhooks are triggered during the import of orders - for both orders and upserted products / skus.  \\n\\n2. Distributions based on Order Update, Order Paid, Order Created and Order Cancelled. In other words if you have a distribution based on Order Paid and you import an order with a PAID status, the distribution is not going to be triggered.    \\n\\n3. No events are created during the import of orders - for both orders and upserted products / skus. In other words you won't see any events in the Activity tab in the Dashboard such as Order created or Order paid. If you are additionally upserting products / skus, then you won't see the Product created events listed, etc.   \\n\\n4. Earning rules based on Order Paid won't be triggered.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The request body is sent in the form of an array of order objects.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersImportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "source_id": "orderImport14",
                      "status": "PAID",
                      "metadata": {
                        "location_id": [
                          "L1",
                          "L2"
                        ],
                        "payment_mean": [
                          "paypal",
                          "credit-card"
                        ]
                      },
                      "customer": {
                        "source_id": "bob2.smith@email.com",
                        "name": "Bob Smith",
                        "description": "A nice customer",
                        "email": "bob.smith@email.com",
                        "phone": "+1 933 222 3333",
                        "address": {
                          "city": "New York",
                          "country": "United States",
                          "line_1": "123 Main St.",
                          "line_2": "APT 3 BLG 4",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {
                          "lang": "en",
                          "test": true
                        },
                        "birthdate": "2022-01-01"
                      },
                      "referrer": {
                        "source_id": "jane.smith@email.com",
                        "name": "Jane Smith",
                        "description": "A really nice customer",
                        "email": "jane.smith@email.com",
                        "phone": "+1 933 222 3334",
                        "address": {
                          "city": "New York",
                          "country": "United States",
                          "line_1": "123 Main St.",
                          "line_2": "APT 3 BLG 4",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {
                          "lang": "en",
                          "test": false
                        },
                        "birthday": "2022-03-03"
                      },
                      "items": [
                        {
                          "source_id": "prod_1",
                          "related_object": "product",
                          "quantity": 2,
                          "product": {
                            "name": "Apple iPhone 12",
                            "price": 70000,
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "mall"
                            },
                            "override": true
                          }
                        },
                        {
                          "source_id": "ComicBook_1",
                          "related_object": "sku",
                          "quantity": 1,
                          "product": {
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "price": 1600,
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "Bookstore1"
                            },
                            "override": true
                          },
                          "sku": {
                            "sku": "Comics1",
                            "source_id": "ComicBook_1",
                            "price": 1600,
                            "metadata": {
                              "color": [
                                "golden"
                              ],
                              "vendor": "islands"
                            },
                            "override": true
                          }
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport15",
                      "status": "PAID",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "customer": {
                        "source_id": "bob2.smith@email.com"
                      },
                      "referrer": {
                        "source_id": "jane.smith@email.com"
                      },
                      "items": [
                        {
                          "source_id": "ComicBook_1",
                          "quantity": 4,
                          "related_object": "sku",
                          "sku": {
                            "source_id": "ComicBook_1"
                          }
                        },
                        {
                          "source_id": "vase_1",
                          "quantity": 1,
                          "related_object": "product",
                          "product": {
                            "source_id": "vase_1"
                          }
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport16",
                      "status": "FULFILLED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "customer": {
                        "id": "cust_LMY4ZylSdUYB1J4tzqNcl5VV"
                      },
                      "referrer": {
                        "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
                      },
                      "items": [
                        {
                          "product_id": "prod_0b72b0bd64d198e3ae",
                          "quantity": 2
                        },
                        {
                          "sku_id": "sku_0b1621b319d248b79f",
                          "quantity": 2
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport17",
                      "status": "CANCELED",
                      "amount": 7000,
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      }
                    },
                    {
                      "source_id": "orderImport18",
                      "status": "CREATED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "items": [
                        {
                          "source_id": "ComicBook_1",
                          "amount": 900,
                          "related_object": "sku"
                        },
                        {
                          "source_id": "vase_1",
                          "amount": 2000,
                          "related_object": "product"
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport19",
                      "status": "CREATED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "items": [
                        {
                          "amount": 900
                        },
                        {
                          "amount": 2000
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport20",
                      "status": "CREATED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "items": [
                        {
                          "price": 900,
                          "quantity": 2
                        },
                        {
                          "price": 2000,
                          "quantity": 3
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the order(s) will be added to the repository asynchronously. To check the status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersImportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/export": {
      "post": {
        "operationId": "create-order-export",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Create Orders Export",
        "description": "Creates a downloadable CSV file containing a list of orders.\\n\\nThe parameters listed in the payload resembles headers in the CSV file. To include a parameter to the file, add it to the \`parameters.fields\` object in the request body.\\n\\nThe available filters are all <!-- [order object](OpenAPI.json/components/schemas/OrdersUpdateResponseBody) -->[order object](ref:get-order) attributes. Additionally, any metadata defined in the metadata schema can be exported.\\n\\nPassing an empty JSON will generate a file containing three default fields: \`id\`, \`source_id\`, and \`status\`.\\n\\nThe fields array is an array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique order ID. | ord_A69RIxEdRsPuC6i8gFGVHUft |\\n| source_id | Unique order source ID. | 8638 |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the order was created. | 2022-03-09T09:16:32.521Z |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the order was last updated. | 2022-03-09T09:16:33.331Z |\\n| status | Order status. | \`PAID\`, \`CREATED\`, \`FULFILLED\`, \`CANCELED\` |\\n| amount | Total amount of order items. | 7700 |\\n| discount_amount | Represents total amount of the discount applied to whole cart. | 500 |\\n| items_discount_amount | Represents total amount of the discount applied to order line items. | 100 |\\n| total_discount_amount | All discounts applied to the order including discounts applied to particular order line items and discounts applied to the whole cart. | 600 |\\n| total_amount | Total order amount after applying all discounts. | 7100 |\\n| customer_id | Customer unique ID. | cust_2G4fUQdCXUqp35nXNleav7bO |\\n| referrer_id | Referrer unique ID. | cust_IkrTR674vvQvr9a4rDMiqglY |\\n| metadata | Returns all order metadata. | Response will include all order metadata. |\\n| metadata.X | Where X is the name of a particular order metadata property. | The returned value will depend on the type of data defined in the Dashboard > Project Settings > Metdata Schemas > Order. |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify which order parameters you would like to export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersExportCreateRequestBody"
              },
              "examples": {
                "Using fields": {
                  "value": {
                    "parameters": {
                      "fields": [
                        "id",
                        "source_id",
                        "status",
                        "created_at",
                        "updated_at",
                        "amount",
                        "discount_amount",
                        "items_discount_amount",
                        "total_discount_amount",
                        "total_amount",
                        "customer_id",
                        "referrer_id",
                        "metadata.payment_mean"
                      ]
                    }
                  }
                },
                "Using fields and filters": {
                  "value": {
                    "parameters": {
                      "fields": [
                        "id",
                        "source_id",
                        "status",
                        "created_at",
                        "updated_at",
                        "amount",
                        "discount_amount",
                        "items_discount_amount",
                        "total_discount_amount",
                        "total_amount",
                        "customer_id",
                        "referrer_id",
                        "metadata.payment_mean"
                      ],
                      "order": "-updated_at",
                      "filters": {
                        "discount_amount": {
                          "conditions": {
                            "$more_than": 100000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the \`id\` of the export object and \`status\` of the file generation process. The \`id\` is used in the <!-- [Get Export](OpenAPI.json/paths/~1exports~1{exportId}/get) -->[Get Export](ref:get-export) method to generate the url for the downloadable CSV file or in the <!-- [Download Export](OpenAPI.json/paths/~1exports~1{export_Id}/get) -->[Download Export](ref:download-export) method to return the contents of the CSV file. The status indicates whether the file has been scheduled for creation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_pT2Y1mgYsAgRAqsWTGf7PQX7",
                      "object": "export",
                      "created_at": "2022-09-09T10:45:52.362Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "order",
                      "parameters": {
                        "fields": [
                          "id",
                          "source_id",
                          "status",
                          "created_at",
                          "updated_at",
                          "amount",
                          "discount_amount",
                          "items_discount_amount",
                          "total_discount_amount",
                          "total_amount",
                          "customer_id",
                          "referrer_id",
                          "metadata.payment_mean"
                        ]
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "operationId": "list-products",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "List Products",
        "description": "Retrieve a list of products.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with product objects. The products are returned sorted by creation date by default, with the most recent products appearing last, unless you specify another sequence using the \`order\` query parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "products",
                      "products": [
                        {
                          "id": "prod_f1r5Tpr0DuC7",
                          "source_id": "test_prod_id_1",
                          "name": "Apple iPhone 8",
                          "price": null,
                          "attributes": [
                            "color",
                            "memory"
                          ],
                          "metadata": {
                            "test": true,
                            "vendor": "Cortland"
                          },
                          "image_url": null,
                          "created_at": "2021-12-03T06:33:46.101Z",
                          "updated_at": null,
                          "object": "product",
                          "skus": {
                            "data": [
                              {
                                "id": "sku_0a417bd1d9952f9d6f",
                                "source_id": "test_iphone_8_silver_256gb",
                                "product_id": "prod_f1r5Tpr0DuC7",
                                "sku": "iPhone 8 Silver 256GB",
                                "price": null,
                                "currency": null,
                                "attributes": {
                                  "color": "silver",
                                  "memory": "256"
                                },
                                "image_url": null,
                                "metadata": {},
                                "created_at": "2021-12-03T06:33:46.599097+00:00",
                                "updated_at": null,
                                "object": "sku"
                              },
                              {
                                "id": "sku_0a417bd1d9952f9d6e",
                                "source_id": "test_iphone_8_silver_64gb",
                                "product_id": "prod_f1r5Tpr0DuC7",
                                "sku": "iPhone 8 Silver 64GB",
                                "price": null,
                                "currency": null,
                                "attributes": {
                                  "color": "silver",
                                  "memory": "64"
                                },
                                "image_url": null,
                                "metadata": {},
                                "created_at": "2021-12-03T06:33:46.598595+00:00",
                                "updated_at": null,
                                "object": "sku"
                              }
                            ],
                            "total": 2
                          }
                        },
                        {
                          "id": "prod_0ac67e1bb8072eec48",
                          "source_id": "test_volleyball",
                          "name": "VolleyBall",
                          "price": 1100,
                          "attributes": [],
                          "metadata": {
                            "color": [
                              "white"
                            ],
                            "label": true,
                            "origin": "PL"
                          },
                          "image_url": null,
                          "created_at": "2022-03-16T14:01:45.459Z",
                          "updated_at": "2022-04-26T12:51:35.500Z",
                          "object": "product",
                          "skus": {
                            "data": [
                              {
                                "id": "sku_0ac768973f5c4ea0d0",
                                "source_id": "test_volleyball_pl",
                                "product_id": "prod_0ac67e1bb8072eec48",
                                "sku": "PL",
                                "price": 500,
                                "currency": "USD",
                                "attributes": {},
                                "image_url": null,
                                "metadata": {
                                  "color": [
                                    "red"
                                  ]
                                },
                                "created_at": "2022-03-17T07:06:13.629918+00:00",
                                "updated_at": null,
                                "object": "sku"
                              },
                              {
                                "id": "sku_0ac7689713072e1df6",
                                "source_id": "test_volleyball_us",
                                "product_id": "prod_0ac67e1bb8072eec48",
                                "sku": "US",
                                "price": 1500,
                                "currency": "USD",
                                "attributes": {},
                                "image_url": null,
                                "metadata": {
                                  "color": [
                                    "yellow"
                                  ]
                                },
                                "created_at": "2022-03-17T07:06:13.452532+00:00",
                                "updated_at": null,
                                "object": "sku"
                              }
                            ],
                            "total": 2
                          }
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Create Product",
        "description": "Creates a product object.\\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the product database, Voucherify will return a related product object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the product parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_id": "first_product",
                    "name": "Samsung Phone",
                    "price": 200000,
                    "attributes": [
                      "color",
                      "memory",
                      "processor"
                    ],
                    "metadata": {
                      "test": true,
                      "vendor": "Online Store"
                    },
                    "image_url": "https://www.website.com/image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a product object if the operation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "prod_0bae2dc5a090fd0184",
                      "source_id": "first_product",
                      "name": "Samsung Phone",
                      "price": 200000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Online Store"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "created_at": "2022-09-12T12:58:22.232Z",
                      "updated_at": "2022-09-12T12:59:55.890Z",
                      "object": "product"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductId"
          },
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "A Voucherify product ID or source ID."
        }
      ],
      "get": {
        "operationId": "get-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Get Product",
        "description": "Retrieve product details.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a product object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "prod_f1r5Tpr0DuC7",
                      "source_id": "test_prod_id_1",
                      "name": "Apple iPhone 8",
                      "price": null,
                      "attributes": [
                        "color",
                        "memory"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Cortland"
                      },
                      "image_url": null,
                      "created_at": "2021-12-03T06:33:46.101Z",
                      "updated_at": null,
                      "object": "product",
                      "skus": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "sku_0a417bd1d9952f9d6f",
                            "source_id": "test_iphone_8_silver_256gb",
                            "product_id": "prod_f1r5Tpr0DuC7",
                            "sku": "iPhone 8 Silver 256GB",
                            "price": null,
                            "currency": null,
                            "attributes": {
                              "color": "silver",
                              "memory": "256"
                            },
                            "image_url": null,
                            "metadata": {},
                            "created_at": "2021-12-03T06:33:46.599097+00:00",
                            "updated_at": null,
                            "object": "sku"
                          },
                          {
                            "id": "sku_0a417bd1d9952f9d6e",
                            "source_id": "test_iphone_8_silver_64gb",
                            "product_id": "prod_f1r5Tpr0DuC7",
                            "sku": "iPhone 8 Silver 64GB",
                            "price": null,
                            "currency": null,
                            "attributes": {
                              "color": "silver",
                              "memory": "64"
                            },
                            "image_url": null,
                            "metadata": {},
                            "created_at": "2021-12-03T06:33:46.598595+00:00",
                            "updated_at": null,
                            "object": "sku"
                          }
                        ],
                        "total": 2
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update Product",
        "description": "Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters of the product that are to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "price": 210000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an updated product object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "prod_0bae2dc5a090fd0184",
                      "source_id": "first_product",
                      "name": "Samsung Phone",
                      "price": 210000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": false,
                        "vendor": "Online Stores"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "created_at": "2022-09-12T12:58:22.232Z",
                      "updated_at": "2022-09-12T13:33:48.904Z",
                      "object": "product"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Delete Product",
        "description": "This method deletes a product.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the product will be removed permanently. Going forward, the user will be able to create another product with exactly the same \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/products/bulk/async": {
      "post": {
        "operationId": "update-products-in-bulk",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update Products in bulk",
        "description": "Update several products in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier. If a requested product object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Create an array of product objects, each with the parameters which you want to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductsUpdateInBulkRequestBody"
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "source_id": "first_product",
                      "name": "Samsung Phone 1",
                      "price": 220000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Online Store - 3"
                      },
                      "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_Z2qvs2KFnQyo2Ohz4uhsjGtf.png"
                    },
                    {
                      "source_id": "second_product",
                      "name": "Samsung Phone 2",
                      "price": 230000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Online Store - 4"
                      },
                      "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_Z2qvs2KFnQyo2Ohz4uhsjGtf.png"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and updates will be added to the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsUpdateInBulkResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/metadata/async": {
      "post": {
        "operationId": "update-products-metadata-in-bulk",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update Products' Metadata in bulk",
        "description": "Update several product metadata properties in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier. If a requested product object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the list of product source IDs and the metadata key value pairs to be udpated for these products.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsMetadataUpdateInBulkRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_ids": [
                      "123-567-3433",
                      "test_volleyball"
                    ],
                    "metadata": {
                      "label": true,
                      "origin": "PL"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and updates will be added to the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsMetadataUpdateInBulkResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/skus/{skuId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterSkuId"
          },
          "name": "skuId",
          "in": "path",
          "required": true,
          "description": "A Voucherify SKU identifier or SKU source ID."
        }
      ],
      "get": {
        "operationId": "get-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Get SKU",
        "description": "Retrieve details of a SKU.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns requested SKU object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkusGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "sku_0b1621b2f25248b79c",
                      "source_id": "sku_source_id_1",
                      "product_id": "prod_0b15f6b9f650c16990",
                      "sku": "Extra Small Blue Shirt",
                      "price": 1300,
                      "currency": "USD",
                      "attributes": {
                        "size": "XS",
                        "color": "blue",
                        "ranking": 1
                      },
                      "image_url": "",
                      "metadata": {},
                      "created_at": "2022-05-17T10:36:30.057Z",
                      "updated_at": "2022-07-01T05:34:16.822Z",
                      "object": "sku"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/skus": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductId"
          },
          "name": "productId",
          "in": "path",
          "description": "A Voucherify <!-- [product](OpenAPI.json/components/schemas/Product) -->[product](ref:get-product) ID or product source ID.",
          "required": true
        }
      ],
      "get": {
        "operationId": "list-skus-in-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "List SKUs in Product",
        "description": "Retrieve all SKUs for a given product.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of SKUs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsSkusListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "skus",
                      "skus": [
                        {
                          "id": "sku_0b1621b2f25248b79c",
                          "source_id": "sku_source_id_1",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Extra Small Blue Shirt",
                          "price": 1300,
                          "currency": "USD",
                          "attributes": {
                            "size": "XS",
                            "color": "blue",
                            "ranking": 1
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.057Z",
                          "updated_at": "2022-07-01T05:34:16.822Z",
                          "object": "sku"
                        },
                        {
                          "id": "sku_0b1621b3181248b79d",
                          "source_id": "sku_source_id_3",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Medium Yellow Shirt",
                          "price": 1450,
                          "currency": "USD",
                          "attributes": {
                            "size": "M",
                            "color": "yellow",
                            "ranking": 3
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.180Z",
                          "updated_at": "2022-07-01T05:34:16.842Z",
                          "object": "sku"
                        },
                        {
                          "id": "sku_0b1621b3199248b79e",
                          "source_id": "sku_source_id_2",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Small Red Shirt",
                          "price": 1400,
                          "currency": "USD",
                          "attributes": {
                            "size": "S",
                            "color": "red",
                            "ranking": 2
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.183Z",
                          "updated_at": "2022-07-01T05:34:16.927Z",
                          "object": "sku"
                        },
                        {
                          "id": "sku_0b1621b319d248b79f",
                          "source_id": "sku_source_id_4",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Large Pink Shirt -",
                          "price": 1700,
                          "currency": "USD",
                          "attributes": {
                            "size": "L",
                            "color": "pink",
                            "ranking": 4
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.187Z",
                          "updated_at": "2022-07-05T08:47:50.680Z",
                          "object": "sku"
                        }
                      ],
                      "total": 4
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Create SKU",
        "description": "This method adds product variants to a <!-- [created product](OpenAPI.json/paths/~1products/post) -->[created product](ref:create-product). \\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the sku database, Voucherify will return a related sku object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the SKU parameters to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsSkusCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_id": "first_product_sku_1",
                    "sku": "Samsung phone 256GB",
                    "price": 1300,
                    "currency": "USD",
                    "attributes": {
                      "color": "vintage-black",
                      "memory": "256",
                      "processor": "Intel"
                    },
                    "image_url": "https://www.website.com/image.png",
                    "metadata": {
                      "imported": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created SKU object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsSkusCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "sku_0bae3b28f610fd0da1",
                      "source_id": "first_product_sku_1",
                      "product_id": "prod_0bae2dc5a090fd0184",
                      "sku": "Samsung phone 256GB",
                      "price": 1300,
                      "currency": "USD",
                      "attributes": {
                        "color": "vintage-black",
                        "memory": "256",
                        "processor": "Intel"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "metadata": {
                        "imported": true
                      },
                      "created_at": "2022-09-12T13:56:51.828Z",
                      "updated_at": null,
                      "object": "sku"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/skus/{skuId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductId"
          },
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "A unique Voucherify <!-- [product](OpenAPI.json/components/schemas/Product) -->[product](ref:get-product) ID or product source ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterSkuId"
          },
          "name": "skuId",
          "in": "path",
          "required": true,
          "description": "A Voucherify <!-- [SKU](OpenAPI.json/components/schemas/Sku) -->[SKU ID](ref:get-sku) or SKU source ID."
        }
      ],
      "put": {
        "operationId": "update-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update SKU",
        "description": "Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.\\n\\nFields other than the ones listed in the request body schema won't be modified. Even if provided, they will be silently skipped.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsSkusUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "price": 210000,
                    "currency": "PLN"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the SKU object with the updated parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsSkusUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "sku_0bae3b28f610fd0da1",
                      "source_id": "first_product_sku_1",
                      "product_id": "prod_0bae2dc5a090fd0184",
                      "sku": "Samsung phone 256GB",
                      "price": 210000,
                      "currency": "PLN",
                      "attributes": {
                        "color": "vintage-black",
                        "memory": "256",
                        "processor": "Intel"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "metadata": {
                        "imported": true
                      },
                      "created_at": "2022-09-12T13:56:51.828Z",
                      "updated_at": "2022-09-12T14:09:40.859Z",
                      "object": "sku"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Delete SKU",
        "description": "This method deletes a product SKU.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the SKU will be removed permanently. Going forward, the user will be able to create another SKU with exactly the same \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/products/importCSV": {
      "post": {
        "operationId": "import-products-using-csv",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Import Products using CSV",
        "description": "Import products into the repository using a CSV file.  \\n\\nCurl Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/products/importCSV \\\\\\n  -F file=@/path/to/products.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n\\nThe CSV file has to include headers in the first line.\\n\\n<!-- theme: info -->\\n\\n> 📘 Standard product fields mapping\\n>\\n> - Create a **comma separated value (CSV) file** or download our CSV import template. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b82ed68d51e779443f550/Import_products_template.csv).\\n> - Supported CSV file headers: \`name,source_id,price,attributes,image_url,Metadata_property_name\`\\n> - **Name** is a **required** field. The remaining fields in the CSV template are optional.\\n> - Override/Update products' **names** in Voucherify using this method. Data will be updated for each product included in the CSV file whose **source_id** matches a source ID in Voucherify. No other data can be updated other than the product name.\\n> - Note that dates and date-time attributes need to be provided in compliance with the **ISO 8601 norms**. For example, 2022-03-11T09:00:00.000Z or 2022-03-11\\n>    - \`YYYY-MM-DD\`\\n>    - \`YYYY-MM-DDTHH\`\\n>    - \`YYYY-MM-DDTHH:mm\`\\n>    - \`YYYY-MM-DDTHH:mm:ss\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ss.SSSZ\`\\n> - Columns that can't be mapped to standard fields, will be mapped to **Custom attributes** and added as **products' metadata**. There is no limit on the number of custom attributes that you can import as metadata. \\n> - To provide the proper data type, you need to add all custom attributes to the metadata schema **before importing the file**. Read more [here](https://support.voucherify.io/article/99-schema-validation-metadata#add-metadata).\\n> - **Product attributes** (not custom attributes) need to be separated by a comma and enclosed in double quotes, i.e \\"attribute1,attribute2\\".\\n> - Headers with metadata names **can't contain white-space characters**.\\n> - If you import metadata defined in the schema as **arrays (multiple)**, you need to separate each value using a comma, for example:  \\n>    - array of strings: \\"subscribed,premium\\"  \\n>    - array of numbers: \\"123,234\\". \\n>    - array of dates: \\"2000-01-01,2000-01-02\\"\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProductsImportCSVRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and products will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsImportCsvCreateResponseBody"
                },
                "examples": {
                  "Async Action": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/skus/importCSV": {
      "post": {
        "operationId": "import-skus-using-csv",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Import SKUs using CSV",
        "description": "Import SKUs into the repository using a CSV file.\\n\\nThe CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv). \\n\\nCurl Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/skus/importCSV \\\\\\n  -F file=@/path/to/skus.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n> 🚧 Import sequence\\n>\\n> First import products using the [dedicated endpoint](ref:import-products-using-csv), then import SKUs using this endpoint to properly match SKUs to products.\\n\\n<!-- theme: info -->\\n\\n> 📘 Standard SKU fields mapping\\n>\\n> - **Required** fields are source_id and product_id.\\n> - Supported CSV file headers: \`product_id,sku,source_id,price,image_url,attributes\`\\n> - SKU **source_id**'s must be unique in the entire product catalog, no duplicates allowed.\\n> - SKU attributes need to be in the form of a stringy-fied json, i.e.\`\\"{'color':'blue'}\\"\`. These attributes must be defined in the **product** beforehand in order for you to be able to import them to the SKU.\\n> - You can use this method to update the following parameters in bulk: **sku** and the sku **price**.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SkusImportCSVRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and SKUs will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkusImportCsvCreateResponseBody"
                },
                "examples": {
                  "Async Action": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/product-collections": {
      "get": {
        "operationId": "list-product-collections",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "List Product Collections",
        "description": "This method returns a list of product collections.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary containing a list of product collections and details about each product collection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "pc_Dj1qSH7bho4SVh7aSDKjU174",
                          "name": "Products in Poland",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "metadata.product_location": {
                              "conditions": {
                                "$in_location": [
                                  "loc_RcYz537sV07e1t5aG5tIH9FD"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-07-14T16:12:26.377Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_FJdBpaQyvK6Gcdul4D2HRChI",
                          "name": "Price less than 10",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "price": {
                              "conditions": {
                                "$less_than": [
                                  1000
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-17T07:11:25.406Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                          "name": "Color is brown",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "metadata.color": {
                              "conditions": {
                                "$is": [
                                  "brown"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T14:27:49.612Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_BxofAP7pyM9FO7M6iaIzIouy",
                          "name": "Color not brown",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "metadata.color": {
                              "conditions": {
                                "$is_not": [
                                  "brown"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T13:49:05.697Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_uHpM9ipEQH2yEpm3D8aohkBM",
                          "name": "Price less than 20",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "price": {
                              "conditions": {
                                "$less_than": [
                                  2000
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T13:46:01.102Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_ZgM25PcZAMp6qItKJRtR2mEi",
                          "name": "Name starts with S",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "name": {
                              "conditions": {
                                "$starts_with": [
                                  "S"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T13:42:35.917Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_41V4DiQQO8YGqj0J2oZD57j4",
                          "name": "Ends with baby",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "source_id": {
                              "conditions": {
                                "$ends_with": [
                                  "baby"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-14T12:50:19.885Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_0cRX5wAFt1R1R5Ir6WdTowui",
                          "name": "C start",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "name": {
                              "conditions": {
                                "$starts_with": [
                                  "C"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-14T12:18:15.588Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_bQ2p9TycbEhd3YzwFCR3JQYA",
                          "name": "Shirts",
                          "type": "STATIC",
                          "products": [
                            {
                              "id": "prod_0a9f9aeddb019a42db",
                              "object": "product"
                            },
                            {
                              "id": "prod_0a9f9ab4ab019a42d5",
                              "object": "product"
                            }
                          ],
                          "created_at": "2022-02-28T11:42:12.484Z",
                          "object": "products_collection"
                        }
                      ],
                      "total": 9
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-product-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "Create Product Collection",
        "description": "This method creates a new product collection.",
        "responses": {
          "200": {
            "description": "Returns information about the newly created collection, as well as an array containing the products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsCreateResponseBody"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCollectionsCreateRequestBody"
              }
            }
          }
        }
      }
    },
    "/v1/product-collections/{productCollectionId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductCollectionId"
          },
          "name": "productCollectionId",
          "in": "path",
          "required": true,
          "description": "A unique product collection ID."
        }
      ],
      "get": {
        "operationId": "get-product-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "Get Product Collection",
        "description": "Retrieves the product collection.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a product collection object if a valid identifier was provided in the path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsGetResponseBody"
                },
                "examples": {
                  "Dynamic": {
                    "value": {
                      "id": "pc_Dj1qSH7bho4SVh7aSDKjU174",
                      "name": "Products in Poland",
                      "type": "AUTO_UPDATE",
                      "filter": {
                        "junction": "and",
                        "metadata.product_location": {
                          "conditions": {
                            "$in_location": [
                              "loc_RcYz537sV07e1t5aG5tIH9FD"
                            ]
                          }
                        }
                      },
                      "created_at": "2022-07-14T16:12:26.377Z",
                      "object": "products_collection"
                    }
                  },
                  "Static": {
                    "value": {
                      "id": "pc_bQ2p9TycbEhd3YzwFCR3JQYA",
                      "name": "Shirts",
                      "type": "STATIC",
                      "products": [
                        {
                          "id": "prod_0a9f9aeddb019a42db",
                          "object": "product"
                        },
                        {
                          "id": "prod_0a9f9ab4ab019a42d5",
                          "object": "product"
                        }
                      ],
                      "created_at": "2022-02-28T11:42:12.484Z",
                      "object": "products_collection"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-product-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "Delete Product Collection",
        "description": "This method deletes a product collection.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/product-collections/{productCollectionId}/products": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductCollectionId"
          },
          "name": "productCollectionId",
          "in": "path",
          "required": true,
          "description": "Unique product collection ID."
        }
      ],
      "get": {
        "operationId": "list-products-in-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "List Products in Collection",
        "description": "Retrieves list of products from a product collection; works for both dynamic and static product collections.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/starting_after"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of products and/or SKUs grouped in the collection with each product's/SKU's details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsProductsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "prod_0bae45ffc7003ffc52",
                          "source_id": "second_product",
                          "name": "Samsung Phone 2",
                          "price": 230000,
                          "attributes": [
                            "color",
                            "memory",
                            "processor"
                          ],
                          "metadata": {
                            "test": true,
                            "vendor": "Online Store - 4"
                          },
                          "image_url": "https://www.images.com/image4.png",
                          "created_at": "2022-09-12T14:44:13.212Z",
                          "updated_at": null,
                          "object": "product"
                        },
                        {
                          "id": "sku_0bae3b28f610fd0da1",
                          "source_id": "first_product_sku_1",
                          "product_id": "prod_0bae2dc5a090fd0184",
                          "sku": "Samsung phone 256GB",
                          "price": 210000,
                          "attributes": {
                            "color": "vintage-black",
                            "memory": "256",
                            "processor": "Intel"
                          },
                          "image_url": "https://www.website.com/image.png",
                          "metadata": {
                            "test": false,
                            "vendor": "Online Stores",
                            "imported": true
                          },
                          "created_at": "2022-09-12T13:56:51.828Z",
                          "updated_at": "2022-09-12T14:09:40.859Z",
                          "object": "sku",
                          "product": {
                            "id": "prod_0bae2dc5a090fd0184",
                            "source_id": "first_product",
                            "name": "Samsung Phone",
                            "price": null,
                            "attributes": [],
                            "metadata": {},
                            "object": "product"
                          }
                        },
                        {
                          "id": "prod_0bae2dc5a090fd0184",
                          "source_id": "first_product",
                          "name": "Samsung Phone 1",
                          "price": 220000,
                          "attributes": [
                            "color",
                            "memory",
                            "processor"
                          ],
                          "metadata": {
                            "test": true,
                            "vendor": "Online Store - 3"
                          },
                          "image_url": "https://www.images.com/image2.png",
                          "created_at": "2022-09-12T12:58:22.232Z",
                          "updated_at": "2022-09-12T14:44:13.208Z",
                          "object": "product"
                        },
                        {
                          "id": "sku_0b7d7dfb090be5c619",
                          "source_id": "ComicBook_1",
                          "product_id": "prod_0b7d7dfb05cbe5c616",
                          "sku": "Comics1",
                          "price": 1700,
                          "attributes": {},
                          "image_url": null,
                          "metadata": {
                            "color": [
                              "golden"
                            ],
                            "vendor": "islands"
                          },
                          "created_at": "2022-08-05T17:23:14.084Z",
                          "updated_at": "2022-09-09T09:24:43.806Z",
                          "object": "sku",
                          "product": {
                            "id": "prod_0b7d7dfb05cbe5c616",
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "price": null,
                            "attributes": [],
                            "metadata": {},
                            "object": "product"
                          }
                        },
                        {
                          "id": "prod_0b7d7dfb05cbe5c616",
                          "source_id": "Books",
                          "name": "Comic Books1",
                          "price": 2100,
                          "attributes": [],
                          "metadata": {
                            "color": [
                              "silver"
                            ],
                            "vendor": "Bookstore1"
                          },
                          "image_url": "https://www.images.com/image1.png",
                          "created_at": "2022-08-05T17:23:14.071Z",
                          "updated_at": "2022-09-09T09:24:43.728Z",
                          "object": "product"
                        },
                        {
                          "id": "prod_0b7d7c4e814be5c502",
                          "source_id": "prod_1",
                          "name": "Apple iPhone 12",
                          "price": 60000,
                          "attributes": [],
                          "metadata": {
                            "color": [
                              "purple"
                            ],
                            "vendor": "mall"
                          },
                          "image_url": null,
                          "created_at": "2022-08-05T17:15:55.270Z",
                          "updated_at": "2022-09-09T09:24:43.704Z",
                          "object": "product"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules": {
      "get": {
        "operationId": "list-validation-rules",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "List Validation Rules",
        "description": "Retrieve validation rules.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListValidationRules"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must start on. Represented in ISO 8601 format."
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of validation rules.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "val_auLlxlfTR9Ps",
                          "name": "Customer in Segment",
                          "rules": {
                            "1": {
                              "name": "customer.segment",
                              "rules": {},
                              "property": null,
                              "conditions": {
                                "$is": [
                                  "seg_18tD3HR0h8ymPC07rBMLryk3"
                                ]
                              }
                            },
                            "logic": "1"
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [],
                            "included_all": false
                          },
                          "created_at": "2021-12-10T11:08:16.499Z",
                          "updated_at": "2021-12-10T12:01:41.665Z",
                          "type": "advanced",
                          "context_type": "earning_rule.order.paid",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_AvIe1WWuBXre",
                          "name": "Order Volume - Price of Any Item - = 1500 USD",
                          "rules": {
                            "1": {
                              "name": "order.items.price_any",
                              "rules": {},
                              "property": null,
                              "conditions": {
                                "$is": [
                                  150000
                                ]
                              }
                            },
                            "logic": "1"
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [],
                            "included_all": false
                          },
                          "created_at": "2021-12-13T06:54:06.864Z",
                          "type": "advanced",
                          "context_type": "reward_assignment.pay_with_points",
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_aZhPe4tQYMgr",
                          "name": "Business Validation Rule - excluded",
                          "rules": {
                            "logic": ""
                          },
                          "applicable_to": {
                            "excluded": [
                              {
                                "object": "products_collection",
                                "id": "pc_7fVU2RxybhR66YxC7r7BKKRh",
                                "source_id": null
                              },
                              {
                                "object": "sku",
                                "id": "sku_0bae3b28f610fd0da1",
                                "source_id": "first_product_sku_1"
                              }
                            ],
                            "included": [],
                            "included_all": true
                          },
                          "created_at": "2022-09-13T14:38:33.710Z",
                          "type": "basic",
                          "context_type": "campaign.discount_coupons.discount.apply_to_items_by_quantity",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_bbJCAXAWtYX0",
                          "name": "Business Validation Rule - Test - Discount Effect - Amount - Items - each unit of matched product",
                          "rules": {
                            "logic": ""
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [
                              {
                                "object": "products_collection",
                                "id": "pc_a11pr0dUc75",
                                "source_id": null,
                                "effect": "APPLY_TO_EVERY",
                                "quantity_limit": 1
                              }
                            ],
                            "included_all": false
                          },
                          "created_at": "2022-09-02T17:04:23.814Z",
                          "type": "basic",
                          "context_type": "campaign.discount_coupons.discount.apply_to_items_by_quantity",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_BkV21MUJGaiT",
                          "name": "Order Volume -  Total Amount More than 100",
                          "rules": {
                            "1": {
                              "name": "order.amount",
                              "rules": {},
                              "property": null,
                              "conditions": {
                                "$more_than": [
                                  10000
                                ]
                              }
                            },
                            "logic": "1"
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [],
                            "included_all": false
                          },
                          "created_at": "2021-12-10T14:01:10.750Z",
                          "type": "advanced",
                          "context_type": "reward_assignment.pay_with_points",
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_BTQg027UGl0v",
                          "name": "Business Validation Rule - Get some $ off",
                          "rules": {
                            "logic": ""
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [
                              {
                                "object": "product",
                                "id": "prod_0a41dd45dc85fcab40",
                                "source_id": "10474",
                                "strict": false
                              }
                            ],
                            "included_all": false
                          },
                          "created_at": "2021-12-07T06:58:23.759Z",
                          "updated_at": "2021-12-22T08:11:18.773Z",
                          "type": "advanced",
                          "context_type": "campaign.discount_coupons.discount.apply_to_items",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-validation-rules",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Create Validation Rules",
        "description": "Create validation rules.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationRulesCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Set of Validation Rules",
                    "error": {
                      "message": "Your order does not meet at least one of the required criteria."
                    },
                    "applicable_to": {
                      "included_all": false,
                      "excluded": [
                        {
                          "object": "product",
                          "id": "prod_0bae45ffc7003ffc52",
                          "source_id": "second_product",
                          "strict": false,
                          "effect": "APPLY_TO_EVERY"
                        }
                      ],
                      "included": [
                        {
                          "object": "product",
                          "id": "prod_0b72b00ffed198e344",
                          "source_id": null,
                          "effect": "APPLY_TO_MOST_EXPENSIVE",
                          "quantity_limit": 1
                        },
                        {
                          "object": "products_collection",
                          "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                          "source_id": null,
                          "effect": "APPLY_TO_EVERY",
                          "quantity_limit": 5
                        }
                      ]
                    },
                    "rules": {
                      "1": {
                        "name": "order.metadata",
                        "property": "location",
                        "rules": {},
                        "conditions": {
                          "$is": [
                            "Santorini"
                          ]
                        },
                        "error": {
                          "message": "Your order must be placed at one of our Santorini shops."
                        }
                      },
                      "2": {
                        "name": "custom_event.metadata",
                        "property": "test",
                        "rules": {},
                        "conditions": {
                          "$greater_than_or_equal": [
                            1
                          ]
                        }
                      },
                      "3": {
                        "name": "order.items.every",
                        "rules": {
                          "1": {
                            "name": "order.items.metadata",
                            "property": "test",
                            "rules": {},
                            "conditions": {
                              "$greater_than_or_equal": [
                                1
                              ]
                            }
                          }
                        },
                        "conditions": {
                          "$is": [
                            {
                              "id": "<PROD_ID>",
                              "effect": "APPLY_TO_EVERY",
                              "object": "product",
                              "source_id": "<SOURCE_ID>"
                            }
                          ]
                        }
                      },
                      "logic": "1 or 2"
                    }
                  }
                }
              }
            }
          },
          "description": "Specify the validation rules parameters."
        },
        "responses": {
          "200": {
            "description": "Returns a validation rule object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "val_eR1c41hu0vUU",
                      "name": "Business Validation Rule",
                      "rules": {
                        "1": {
                          "name": "string",
                          "property": "string",
                          "conditions": {
                            "$one_of_voucherify_conditions": [
                              "string"
                            ]
                          },
                          "rules": {
                            "1": {
                              "name": "string",
                              "property": "string",
                              "conditions": {},
                              "rules": {}
                            },
                            "logic": "string"
                          },
                          "error": {
                            "message": "string"
                          }
                        },
                        "logic": "(1 and 2) and (3)"
                      },
                      "error": {
                        "message": "string"
                      },
                      "applicable_to": {
                        "excluded": [
                          {
                            "object": "product",
                            "id": "string",
                            "source_id": "string",
                            "strict": true,
                            "effect": "APPLY_TO_EVERY"
                          }
                        ],
                        "included": [
                          {
                            "object": "product",
                            "id": "string",
                            "source_id": "string",
                            "strict": true,
                            "effect": "APPLY_TO_EVERY",
                            "quantity_limit": 0
                          }
                        ],
                        "included_all": true
                      },
                      "created_at": "2022-03-23T07:44:00.444Z",
                      "updated_at": "2022-04-26T08:35:54.960Z",
                      "type": "basic",
                      "context_type": "earning_rule.order.paid",
                      "object": "validation_rules"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules/{validationRuleId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterValidationRuleId"
          },
          "name": "validationRuleId",
          "in": "path",
          "required": true,
          "description": "A unique validation rule ID."
        }
      ],
      "get": {
        "operationId": "get-validation-rule",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Get Validation Rule",
        "description": "Retrieve the details of a validation rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the validation rule object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "val_TU4de3EP4dlL",
                      "name": "Order is less than $40",
                      "rules": {
                        "1": {
                          "name": "order.amount",
                          "property": null,
                          "conditions": {
                            "$less_than": [
                              4000
                            ]
                          },
                          "rules": {}
                        },
                        "logic": "1"
                      },
                      "applicable_to": {
                        "excluded": [],
                        "included": [],
                        "included_all": false
                      },
                      "created_at": "2022-08-11T16:42:13.630Z",
                      "type": "advanced",
                      "context_type": "reward_assignment.pay_with_points",
                      "object": "validation_rules"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-validation-rule",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Update Validation Rule",
        "description": "Update validation rule parameters.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationRulesUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Set of Validation Rules Updated",
                    "error": {
                      "message": "Your orders do not meet at least one of the required criteria."
                    },
                    "applicable_to": {
                      "included_all": false,
                      "excluded": [
                        {
                          "object": "product",
                          "id": "prod_0bae45ffc7003ffccc",
                          "source_id": "second_product",
                          "strict": false,
                          "effect": "APPLY_TO_EVERY"
                        }
                      ],
                      "included": [
                        {
                          "object": "product",
                          "id": "prod_0b72b00ffed198e333",
                          "source_id": null,
                          "effect": "APPLY_TO_CHEAPEST",
                          "quantity_limit": 1
                        },
                        {
                          "object": "products_collection",
                          "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                          "source_id": null,
                          "effect": "APPLY_TO_EVERY",
                          "quantity_limit": 5
                        }
                      ]
                    },
                    "rules": {
                      "1": {
                        "name": "order.metadata",
                        "property": "place",
                        "rules": {},
                        "conditions": {
                          "$is": [
                            "Santorini"
                          ]
                        },
                        "error": {
                          "message": "Your order must be placed at one of our Santorini shops on the beach."
                        }
                      },
                      "2": {
                        "name": "custom_event.metadata",
                        "property": "lining",
                        "rules": {},
                        "conditions": {
                          "$greater_than_or_equal": [
                            1
                          ]
                        }
                      },
                      "3": {
                        "name": "order.items.every",
                        "rules": {
                          "1": {
                            "name": "order.items.metadata",
                            "property": "test",
                            "rules": {},
                            "conditions": {
                              "$greater_than_or_equal": [
                                1
                              ]
                            }
                          }
                        },
                        "conditions": {
                          "$is": [
                            {
                              "id": "<PRODs_ID>",
                              "effect": "APPLY_TO_EVERY",
                              "object": "product",
                              "source_id": "<SOURCEs_ID>"
                            }
                          ]
                        }
                      },
                      "logic": "1 and 2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the validation rule object with the updated parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "val_VZ91fqqtoVmw",
                      "name": "Set of Validation Rules Updated",
                      "rules": {
                        "1": {
                          "name": "order.metadata",
                          "property": "place",
                          "conditions": {
                            "$is": [
                              "Santorini"
                            ]
                          },
                          "rules": {},
                          "error": {
                            "message": "Your order must be placed at one of our Santorini shops on the beach."
                          }
                        },
                        "2": {
                          "name": "custom_event.metadata",
                          "property": "lining",
                          "conditions": {
                            "$greater_than_or_equal": [
                              1
                            ]
                          },
                          "rules": {}
                        },
                        "3": {
                          "name": "order.items.every",
                          "conditions": {
                            "$is": [
                              {
                                "id": "<PRODs_ID>",
                                "effect": "APPLY_TO_EVERY",
                                "object": "product",
                                "source_id": "<SOURCEs_ID>"
                              }
                            ]
                          },
                          "rules": {
                            "1": {
                              "name": "order.items.metadata",
                              "property": "test",
                              "conditions": {
                                "$greater_than_or_equal": [
                                  1
                                ]
                              },
                              "rules": {}
                            }
                          }
                        },
                        "logic": "1 and 2"
                      },
                      "error": {
                        "message": "Your orders do not meet at least one of the required criteria."
                      },
                      "applicable_to": {
                        "excluded": [
                          {
                            "object": "product",
                            "id": "prod_0bae45ffc7003ffccc",
                            "source_id": "second_product",
                            "strict": false,
                            "effect": "APPLY_TO_EVERY"
                          }
                        ],
                        "included": [
                          {
                            "object": "product",
                            "id": "prod_0b72b00ffed198e333",
                            "source_id": null,
                            "strict": false,
                            "effect": "APPLY_TO_CHEAPEST",
                            "quantity_limit": 1
                          },
                          {
                            "object": "products_collection",
                            "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                            "source_id": null,
                            "strict": false,
                            "effect": "APPLY_TO_EVERY",
                            "quantity_limit": 5
                          }
                        ],
                        "included_all": false
                      },
                      "created_at": "2022-09-14T05:54:51.099Z",
                      "updated_at": "2022-09-14T06:06:32.855Z",
                      "type": "complex",
                      "context_type": "global",
                      "object": "validation_rules"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-validation-rules",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Delete Validation Rule",
        "description": "This method deletes a validation rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/validation-rules-assignments": {
      "get": {
        "operationId": "list-validation-rules-assignments",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "List Validation Rules' Assignment(s)",
        "description": "List all validation rules' assignments or filter the results using the related object ID or the validation rule ID query parameters. \\n\\n## How to retrieve specific validation rule assignments(s)\\n\\n### Related object ID\\n\\nTo find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.  \\n\\n\\n<!--\\ntitle: \\"Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`curl\\ncurl -X GET \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\" \\\\\\n  -H \\"Content-Type: application/json\\" \\\\\\n  https://api.voucherify.io/v1/validation-rules-assignments?related_object_id=promo_kJliy076IuJYtuYWSHE9fSuT\\n\`\`\`\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"object\\": \\"list\\",\\n    \\"data_ref\\": \\"data\\",\\n    \\"data\\": [\\n        {\\n            \\"id\\": \\"asgm_tZaqxeO8gP4q91jG\\",\\n            \\"rule_id\\": \\"val_WB6ETAiFztw5\\",\\n            \\"related_object_id\\": \\"promo_kJliy076IuJYtuYWSHE9fSuT\\",\\n            \\"related_object_type\\": \\"promotion_tier\\",\\n            \\"created_at\\": \\"2022-08-10T10:30:39.986Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        }\\n    ],\\n    \\"total\\": 1\\n}\\n\`\`\`\\n\\n### Validation rule ID\\n\\nYou can use the validation rule ID to find assignment(s) for a specific validation rule.\\n\\n\\n<!--\\ntitle: \\"Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`curl\\ncurl -X GET \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\" \\\\\\n  -H \\"Content-Type: application/json\\" \\\\\\n  https://api.voucherify.io/v1/validation-rules-assignments?rule=val_ZEZmA9oit8aU\\n\`\`\`\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"object\\": \\"list\\",\\n    \\"data_ref\\": \\"data\\",\\n    \\"data\\": [\\n        {\\n            \\"id\\": \\"asgm_vef0G6d9Al0rABxq\\",\\n            \\"rule_id\\": \\"val_ZEZmA9oit8aU\\",\\n            \\"related_object_id\\": \\"camp_rRsfatlwN7unSeUIJDCYedal\\",\\n            \\"related_object_type\\": \\"campaign\\",\\n            \\"created_at\\": \\"2022-06-29T11:43:52.953Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        },\\n        {\\n            \\"id\\": \\"asgm_sFV4wEFvldwIvgfb\\",\\n            \\"rule_id\\": \\"val_ZEZmA9oit8aU\\",\\n            \\"related_object_id\\": \\"distr_9QKI02wqgjWyvZXeQkFEPmkkYe\\",\\n            \\"related_object_type\\": \\"distribution\\",\\n            \\"created_at\\": \\"2022-06-29T11:41:07.680Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        },\\n        {\\n            \\"id\\": \\"asgm_69Qifyv6UZynFIIQ\\",\\n            \\"rule_id\\": \\"val_ZEZmA9oit8aU\\",\\n            \\"related_object_id\\": \\"promo_g83qUzYZpfX0OMAFOVoQuOYG\\",\\n            \\"related_object_type\\": \\"promotion_tier\\",\\n            \\"created_at\\": \\"2022-06-29T11:29:41.906Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        }\\n    ],\\n    \\"total\\": 3\\n}\\n\`\`\`\\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "related_object_id",
            "description": "The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterValidationRuleId"
            },
            "in": "query",
            "name": "rule",
            "description": "Validation rule ID."
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Sorts the results using one of the filtering options: \`-created_at\`, \`created_at\`, where the dash \`-\` preceding a sorting option means sorting in a descending order.",
            "name": "order"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a data property that contains an array of validation rule assignments. Each entry in the array is a separate object. If no more validation rule assignments are available, the resulting array will be empty. The result can be narrowed down according to default filters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesAssignmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "asgm_2S7Xm4dab4UvYAgm",
                          "rule_id": "val_5ix74ru7e",
                          "related_object_id": "camp_YDsFdX8TgFtT0RUuKEFyhqs3",
                          "related_object_type": "campaign",
                          "created_at": "2022-02-08T10:49:30.534Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_sFV4wEFvldwIvgfb",
                          "rule_id": "val_ZEZmA9oit8aU",
                          "related_object_id": "distr_9QKI02wqgjWyvZXeQkFEPmkkYe",
                          "related_object_type": "distribution",
                          "created_at": "2022-06-29T11:41:07.680Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_8xelF5R4zB8ue168",
                          "rule_id": "val_ggDODO6fakMs",
                          "related_object_id": "ern_xrRuGEV7EW0X8wtMaze3HOfw",
                          "related_object_type": "earning_rule",
                          "created_at": "2022-02-28T12:25:56.783Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_tZaqxeO8gP4q91jG",
                          "rule_id": "val_WB6ETAiFztw5",
                          "related_object_id": "promo_kJliy076IuJYtuYWSHE9fSuT",
                          "related_object_type": "promotion_tier",
                          "created_at": "2022-08-10T10:30:39.986Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_xTMHiyPGSz3rp5m2",
                          "rule_id": "val_2AxnWmW2ra6X",
                          "related_object_id": "rewa_m9hEAu10KsPcLhGXiHG85aY0",
                          "related_object_type": "reward_assignment",
                          "created_at": "2021-12-10T11:38:35.922Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_DhlDn54JwqVFJzR6",
                          "rule_id": "val_eR1c41hu0vUU",
                          "related_object_id": "v_XuF7icVlUcVpHsSY9nG7n7yJa5wx27Va",
                          "related_object_type": "voucher",
                          "created_at": "2022-03-23T07:50:31.068Z",
                          "object": "validation_rules_assignment"
                        }
                      ],
                      "total": 6
                    }
                  },
                  "No Assignments": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [],
                      "total": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules/{validationRuleId}/assignments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterValidationRuleId"
          },
          "name": "validationRuleId",
          "in": "path",
          "required": true,
          "description": "Unique validation rule ID."
        }
      ],
      "get": {
        "operationId": "list-validation-rule-assignments",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "List Validation Rule Assignments",
        "description": "Retrieve validation rule assignments for a specific validation rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListValidationRuleAssignments"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of validation rule assignments.  If the validation rule ID provided in the path parameter cannot be found, the endpoint will return an empty \`data\` array and a total of \`0\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesAssignmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "asgm_74F7QZoYbUoljwQO",
                          "rule_id": "val_4j7DCRm2IS59",
                          "related_object_id": "v_MBOEmHelKwvykVZ8JcT4TE5Kla5IMJyc",
                          "related_object_type": "voucher",
                          "created_at": "2022-02-17T09:05:34.642Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_zzLBm8mIzGQStXl9",
                          "rule_id": "val_4j7DCRm2IS59",
                          "related_object_id": "v_JtWunK6jUo7X2qOFj0SyRHq4p9tgENlT",
                          "related_object_type": "voucher",
                          "created_at": "2022-02-17T08:18:15.085Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_JztMAws0e0Qx2Xy6",
                          "rule_id": "val_4j7DCRm2IS59",
                          "related_object_id": "camp_kjja4moiVB7hQKPGOT61026Z",
                          "related_object_type": "campaign",
                          "created_at": "2022-02-15T13:26:34.807Z",
                          "object": "validation_rules_assignment"
                        }
                      ],
                      "total": 3
                    }
                  },
                  "No Assignments": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [],
                      "total": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules/{validationRuleId}/assignments/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterValidationRuleId"
          },
          "name": "validationRuleId",
          "in": "path",
          "required": true,
          "description": "A unique validation rule ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "A unique validation rule assignment ID."
        }
      ],
      "delete": {
        "operationId": "delete-validation-rule-assignment",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Delete Validation Rule Assignment",
        "description": "This method deletes a validation rule assignment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/segments/{segmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterSegmentId"
          },
          "name": "segmentId",
          "in": "path",
          "required": true,
          "description": "A unique customer segment ID."
        }
      ],
      "delete": {
        "operationId": "delete-segment",
        "tags": [
          "SEGMENTS API"
        ],
        "summary": "Delete Segment",
        "description": "This method deletes a customer segment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/events": {
      "post": {
        "operationId": "track-custom-event",
        "tags": [
          "EVENTS API"
        ],
        "summary": "Track Custom Event",
        "description": "To track a custom event, you create an event object.  \\n\\nThe event object must be linked to the customer who performs the action. If a customer doesn't exist in Voucherify, the customer will be created.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the custom event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "event": "event-name",
                    "customer": {
                      "source_id": "referee-source_id"
                    },
                    "referral": {
                      "code": "voucher-code",
                      "referrer_id": "referrer-source_id"
                    }
                  }
                },
                "Referral triggered by custom event": {
                  "value": {
                    "event": "user_subscribed",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "referral": {
                      "code": "46jL0kYI",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
                    },
                    "metadata": {
                      "login": "bob",
                      "pricing_plan": "PP1",
                      "volume_number": 4
                    }
                  }
                },
                "Earning rule triggered by custom event": {
                  "value": {
                    "event": "cart_abandoned",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "loyalty": {
                      "code": "6CB4KDAu"
                    },
                    "metadata": {
                      "date": "2022-12-01",
                      "flag": true,
                      "text": "Cart abandoned event",
                      "date_time": "2022-12-01T09:24:33.061Z",
                      "number": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the event type if the event was received by the application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "event",
                      "type": "cart_abandoned",
                      "customer": {
                        "id": "cust_ypePCF6IU6fnUvec6RMXZuH4",
                        "name": "John Doe",
                        "email": "john@voucherify.io",
                        "source_id": "source_customer_event",
                        "metadata": {
                          "prop": "value"
                        },
                        "object": "customer"
                      },
                      "referral": null,
                      "loyalty": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/events": {
      "post": {
        "operationId": "track-custom-event-client-side",
        "tags": [
          "EVENTS API"
        ],
        "summary": "Track Custom Event (client-side)",
        "description": "To track a custom event, you create an event object.  \\n\\nThe event object must be linked to the customer who performs the action. If a customer doesn't exist in Voucherify, the customer will be created.",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the custom event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientEventsCreateRequestBody"
              },
              "examples": {
                "Referral triggered by custom event": {
                  "value": {
                    "event": "user_subscribed",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "referral": {
                      "code": "46jL0kYI",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
                    },
                    "metadata": {
                      "login": "bob",
                      "pricing_plan": "PP1",
                      "volume_number": 4
                    }
                  }
                },
                "Earning rule triggered by custom event": {
                  "value": {
                    "event": "cart_abandoned",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "loyalty": {
                      "code": "6CB4KDAu"
                    },
                    "metadata": {
                      "date": "2022-12-01",
                      "flag": true,
                      "text": "Cart abandoned event",
                      "date_time": "2022-12-01T09:24:33.061Z",
                      "number": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the event type if the event was received by the application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientEventsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "event",
                      "type": "cart_abandoned",
                      "customer": {
                        "id": "cust_ypePCF6IU6fnUvec6RMXZuH4",
                        "name": "John Doe",
                        "email": "john@voucherify.io",
                        "source_id": "source_customer_event",
                        "metadata": {
                          "prop": "value"
                        },
                        "object": "customer"
                      },
                      "referral": null,
                      "loyalty": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/consents": {
      "get": {
        "operationId": "list-consents-client-side",
        "tags": [
          "CONSENTS API"
        ],
        "summary": "List Consents (client-side)",
        "description": "List the Marketing Permission definitions within the project along with opt-in consents.",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns marketing permission groups and opt-in consents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/18_res_list_consents_GET"
                },
                "examples": {
                  "Marketing Permissions Groups and Consents": {
                    "value": {
                      "groups": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "cnstgr_3c7Z3rcOLv51bsXlRtTZPYj8",
                            "name": "Consent group",
                            "description": "Consent group",
                            "consents": [
                              "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                              "cnst_VCmucIvAsmDYw2PPAok6bcYy"
                            ],
                            "created_at": "2022-04-13T09:12:47.743Z",
                            "updated_at": "2022-04-13T09:45:46.616Z",
                            "object": "consent_group"
                          },
                          {
                            "id": "cnstgr_EAIakTj5lNG2ZpiQEauGqBlY",
                            "name": "Consent group 2",
                            "description": "Consent group 2",
                            "consents": [
                              "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                              "cnst_VCmucIvAsmDYw2PPAok6bcYy"
                            ],
                            "created_at": "2022-04-13T10:03:46.564Z",
                            "updated_at": null,
                            "object": "consent_group"
                          }
                        ],
                        "total": 2
                      },
                      "consents": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                            "name": "Consent",
                            "description": "Consent for marketing",
                            "category": "New",
                            "created_at": "2022-04-13T09:11:27.037Z",
                            "updated_at": null,
                            "object": "consent"
                          },
                          {
                            "id": "cnst_VCmucIvAsmDYw2PPAok6bcYy",
                            "name": "Consent 2",
                            "description": "Consent 2",
                            "category": "Trial",
                            "created_at": "2022-04-13T09:45:37.597Z",
                            "updated_at": null,
                            "object": "consent"
                          }
                        ],
                        "total": 2
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/async-actions/{asyncActionId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterAsyncActionId"
          },
          "name": "asyncActionId",
          "in": "path",
          "required": true,
          "description": "Unique ID of the asynchronous operation."
        }
      ]
    },
    "/v1/exports": {
      "post": {
        "operationId": "create-export",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "Create Export",
        "description": "Create export object. The export can be any of the following types: \`voucher\`, \`redemption\`, \`publication\`, \`customer\`, \`order\`, \`points_expiration\`, or \`voucher_transactions\`.  \\n\\n## Defaults\\n\\nIf you only specify the object type in the request body without specifying the fields, the API will return the following fields per export object:\\n\\n| **Export Object** | **Default fields returned** |\\n|:---|:---|\\n| order | \`id\`, \`source_id\`, \`status\` |\\n| voucher | \`code\`, \`voucher_type\`, \`value\`, \`discount_type\` |\\n| publication | \`code\`, \`customer_id\`, \`date\`, \`channel\` |\\n| redemption | \`id\`, \`object\`, \`voucher_code\`, \`customer_id\`, \`date\`, \`result\` |\\n| customer | \`name\`, \`source_id\` |\\n| points_expiration | \`id\`, \`campaign_id\`, \`voucher_id\`, \`status\`, \`expires_at\`, \`points\` |\\n| voucher_transactions | \`id\`, \`type\`, \`source_id\`, \`status\`, \`reason\`, \`source\`, \`balance\`, \`amount\`, \`created_at\` |\\n\\n\\n## Fetching particular data sets\\n\\nUsing the \`parameters\` body parameter, you can narrow down which fields to export and how to filter the results. The fields are an array of strings containing the data that you would like to export. These fields define the headers in the CSV file. The array can be a combintation of any of the following available fields:\\n\\n## Orders  \\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique order ID. | ord_A69RIxEdRsPuC6i8gFGVHUft |\\n| source_id | Unique order source ID. | 8638 |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the order was created. | 2022-03-09T09:16:32.521Z |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the order was last updated. | 2022-03-09T09:16:33.331Z |\\n| status | Order status. | \`PAID\`, \`CREATED\`, \`FULFILLED\`, \`CANCELED\` |\\n| amount | Total amount of order items. | 7700 |\\n| discount_amount | Represents total amount of the discount applied to whole cart. | 500 |\\n| items_discount_amount | Represents total amount of the discount applied to order line items. | 100 |\\n| total_discount_amount | All discounts applied to the order including discounts applied to particular order line items and discounts applied to the whole cart. | 600 |\\n| total_amount | Total order amount after applying all discounts. | 7100 |\\n| customer_id | Customer unique ID. | cust_2G4fUQdCXUqp35nXNleav7bO |\\n| referrer_id | Referrer unique ID. | cust_IkrTR674vvQvr9a4rDMiqglY |\\n| metadata | Order metadata; expressed as metadata.X, where X is the name of the custom metadata property. | 1 |\\n\\n## Vouchers  \\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique voucher ID. | v_HSnGD2vNIHYighTQxwcB4dtVAv8VOmZD |\\n| code | Unique voucher code. | WELCOME100 |\\n| voucher_type | Type of voucher. | \`DISCOUNT_VOUCHER\`, \`GIFT_VOUCHER\`, \`LOYALTY_CARD\` |\\n| value | Value of voucher. | \`DISCOUNT_VOUCHER\` : amount, percent, unit<br>\`GIFT_VOUCHER\`: amount left to spend<br>\`LOYALTY_CARD\`: available usable points |\\n| discount_type | The type of discount for a \`DISCOUNT_VOUCHER\`. | \`AMOUNT\`, \`PERCENT\`, \`UNIT\`, \`FIXED\` |\\n| campaign | Unique campaign name. | Summer Discounts 20% off |\\n| category | Tag defining the category that this voucher belongs to. |  |\\n| start_date | Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is _inactive_ before this date. | 2020-12-10T23:00:00.000Z |\\n| expiration_date | Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format. Voucher is _inactive_ after this date. | 2023-12-31T23:00:00.000Z |\\n| gift_balance | Amount left to spend. | 1000 |\\n| loyalty_balance | Available usable points. | 2000 |\\n| redemption_quantity | Maximum number of times a voucher can be redeemed. | 2 |\\n| redemption_count | Total redemptions. | 59 |\\n| active | Boolean indicating whether the voucher is available for use. | \`true\`, \`false\` |\\n| qr_code | URL to QR representation of encrypted code. |  |\\n| bar_code | URL to barcode representation of encrypted code. |  |\\n| metadata | Custom voucher metadata. |  |\\n| is_referral_code | Boolean indicating whether the voucher is a referral code. | \`true\`, \`false\` |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the voucher was created. | 2022-04-14T09:55:46.814Z |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the voucher was last updated. | 2022-04-14T10:02:18.036Z |\\n| validity_timeframe_interval | Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an interval of \`P2D\` will be active every other day. | P2D |\\n| validity_timeframe_duration | Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a duration of \`PT1H\` will be valid for a duration of one hour. | PT1H |\\n| validity_day_of_week | Array corresponding to the particular days of the week in which the voucher is valid. | \\"1,2,3,4,5\\" |\\n| discount_amount_limit | For \`PERCENT\` discount type, this is the maximum threshold allowed to be deducted. | 50 |\\n| campaign_id | Parent campaign ID. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\\n| additional_info | An optional field to keep any extra textual information about the code such as a code description and details. |  |\\n| customer_id | Unique customer ID of the assigned owner to whom the voucher was published. | cust_7iUa6ICKyU6gH40dBU25kQU1 |\\n| discount_unit_type | For \`UNIT\` discount type, either a shipping or product ID for a \`UNIT\` discount with one product. | prod_5h1pp1ng, prod_0a9f9aeddb019a42db |\\n| discount_unit_effect | \`UNIT\` discount effect. | \`ADD_MANY_ITEMS\`, \`ADD_MISSING_ITEMS\`,\`ADD_NEW_ITEMS\` |\\n| customer_source_id | Unique customer source id of the assigned owner to whom the voucher was published. | name.lastname@email.com |\\n\\n\\n## Publications\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| voucher_code | Unique voucher code. | WELCOME100 |\\n| customer_id | Customer unique ID. | cust_7iUa6ICKyU6gH40dBU25kQU1 |\\n| customer_source_id | Unique customer source id of the assigned owner to whom the voucher was published. | name.lastname@email.com |\\n| date | Timestamp in ISO 8601 format representing the date and time when the voucher was published. | 2022-04-28T10:19:30.792Z |\\n| channel | Publication channel. | voucherify-website |\\n| campaign | Unique campaign name. | Summer Discounts 20% off |\\n| is_winner |  |  |\\n| metadata | Custom publication metadata. |  |\\n\\n## Redemptions\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique redemption ID. | r_0acf3a6dae00e679c8, rf_0acf3a495740e679b8 |\\n| object | Object being exported; by default \`redemption\`. | redemption |\\n| date | Timestamp in ISO 8601 format representing the date and time when the voucher was redeemed. | 2022-03-23T08:52:24.867Z |\\n| voucher_code | Unique voucher code redeemed. | WELCOME100 |\\n| campaign | Parent campaign name of voucher if applicable. | Summer Discounts 20% off |\\n| promotion_tier_id |  | promo_Mwy9XpA0TLctSGriM5kum0qp |\\n| customer_id | Unique customer ID of redeeming customer. | cust_nk0N1uNQ1YnupAoJGOgvsODC |\\n| customer_source_id | Unique source ID of redeeming customer. | name.lastname@email.com |\\n| customer_name | Customer name. | John Smith |\\n| tracking_id |  | track_Pw6r3ejnml43kIwNS4Zj09KZ67xOfLUy |\\n| order_amount | Total order amount before applying all discounts. | 1000 |\\n| gift_amount | Gift credits used for redemption. | 10 |\\n| loyalty_points |  | 12 |\\n| result | Tells you whether the redemption succeeded. | \`SUCCESS\`, \`FAILURE\` |\\n| failure_code | Internal Voucherify code for reason why redemption failed. | invalid_customer |\\n| failure_message | A human-readable message providing a short description explaining why the redemption failed. | Customer must be a holder of a loyalty card. |\\n| metadata | Custom redemption metadata. |  |\\n\\n## Customers\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| name | Customer name. | John Smith |\\n| id | Unique customer ID. | cust_J1CDUdbqn5Exva8ASWk1Fq0j |\\n| description | An arbitrary string that you can attach to a customer object. | Customer requesting to be added to VIP tier. |\\n| email | Customer's email. | name.lastname@email.com |\\n| source_id | Unique custom customer identifier. | name.lastname@email.com |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the customer was created. | 2022-02-03T13:10:11.928Z |\\n| address_city | City | Houston |\\n| address_state | State | TX |\\n| address_line_1 | First line of customer's address. | 72738 Main St |\\n| address_line_2 | Second line of customer's address. | Bld 2, Apt 4 |\\n| address_country | Country | United States of America |\\n| address_postal_code | Postal code (ZIP code) | 77042-4143 |\\n| redemptions_total_redeemed | Total customer redemptions. | 5 |\\n| redemptions_total_failed | Total customer failed redemptions. | 2 |\\n| redemptions_total_succeeded | Total customer succeeded redemptions. | 3 |\\n| redemptions_total_rolled_back | Total customer redemptions that were rolled back. | 3 |\\n| redemptions_total_rollback_failed | Total customer redemptions that were unsuccessfully rolled back. | 2 |\\n| redemptions_total_rollback_succeeded | Total customer redemptions that were successfully rolled back. | 1 |\\n| orders_total_amount | Total sum of order amounts over customer lifetime. Value is multiplied by 100 to precisely represent 2 decimal places. | 10000 (represents $100) |\\n| orders_total_count | Total number of customer orders. | 2 |\\n| orders_average_amount | Average amount spent on orders. Value is multiplied by 100 to precisely represent 2 decimal places. | 5000 (represents $50) |\\n| orders_last_order_amount | How much did the customer spend on their last order. Value is multiplied by 100 to precisely represent 2 decimal places. | 5000 (represents $50) |\\n| orders_last_order_date | When was the last customer order; timestamp in ISO 8601 format representing the date and time. | 2022-02-03T13:17:30.630Z |\\n| loyalty_points | Sum of customer's loyalty points to go across all loyalty cards. | 2000 |\\n| loyalty_referred_customers | How many customers were referred by this customer. | 3 |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the customer was updated. | 2022-02-14T14:10:14.305Z |\\n| phone | Customer's phone number. | +1 (294) 752-1846 |\\n| birthday | Customer's birthday. | 2022-01-01 |\\n| metadata | Customer metadata. | All metadata fields defined in Metadata Schema for the Customer object. |\\n| birthdate | Customer's birthdate. | 2022-01-01 |\\n\\n## Points Expirations\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Loyalty points bucket ID. | lopb_Wl1o3EjJIHSNjvO5BDLy4z1n |\\n| campaign_id | Campaign ID of the parent loyalty campaign. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\\n| voucher_id | Voucher ID of the parent loyalty card. | v_YLn0WVWXSXbUfDvxgrgUbtfJ3SQIY655 |\\n| status | Status of the loyalty points bucket. | \`ACTIVE\` or \`INACTIVE\` |\\n| expires_at | Timestamp in ISO 8601 format representing the date when the points expire. | 2022-06-30 |\\n| points | Number of points. | 1000 |\\n\\n ## Gift Card Transactions\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n\\n ## Loyalty Card Transactions\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`POINTS_EXPIRATION\` <br> - \`POINTS_ADDITION\` <br> - \`POINTS_REMOVAL\` <br> - \`POINTS_TRANSFER_OUT\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_REFUND\` <br> - \`POINTS_REDEMPTION\` |\\n| source_id | Custom source ID of the transaction if one was included originally. | source_id_custom |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The loyalty card balance after the transaction. |  |\\n| amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | - \`API\` <br> - \`voucherify-web-ui\` <br> - \`Automation\` |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the export that you would like to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportsCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns export object and URL of CSV file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsCreateResponseBody"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "list-exports",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "List Exports",
        "description": "List all exports. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListExports"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with an exports property that contains an array of exports. Each entry in the array is a separate export object. The list will return the following types of exported objects: \`voucher\`, \`redemption\`, \`publication\`, \`customer\`, \`order\`, \`points_expiration\`, or \`voucher_transactions\`. \\n\\nThe \`channel\` parameter in the response body returns the channel that was used to generate the particular export. The \`user_id\` identifies the specific user who initiated the export through the Voucherify Dashboard; this \`user_id\` is returned when the channel value is \`WEBSITE\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsListResponseBody"
                },
                "examples": {
                  "List Exports": {
                    "value": {
                      "object": "list",
                      "data_ref": "exports",
                      "exports": [
                        {
                          "id": "exp_323UOPsH42twhJVaDZXf4UNo",
                          "object": "export",
                          "created_at": "2022-08-04T09:11:25.208Z",
                          "status": "DONE",
                          "channel": "API",
                          "exported_object": "order",
                          "parameters": {
                            "order": "-created_at",
                            "fields": [
                              "id",
                              "source_id",
                              "status"
                            ],
                            "filters": {
                              "junction": "and"
                            }
                          },
                          "result": {
                            "url": "https://download.voucherify.io/v1/exports/exp_323UOPsH42twhJVaDZXf4UNo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnQiOiJzYW11ZWwuamFuaWtAdm91Y2hlcmlmeS5pbyIsImV4cG9ydElkIjoiZXhwXzMyM1VPUHNINDJ0d2hKVmFEWlhmNFVObyIsImlhdCI6MTY1OTYwNDI4NiwiZXhwIjoxNjU5NjA1MTg2fQ.IgFnKagyoQ7_O2tGswZxpegUMtllSbzMfPMX-_89W7o"
                          },
                          "user_id": null
                        },
                        {
                          "id": "exp_sPQR0na2gU0pIVUKIz4wdQI9",
                          "object": "export",
                          "created_at": "2022-05-02T06:44:03.186Z",
                          "status": "DONE",
                          "channel": "API",
                          "exported_object": "voucher",
                          "parameters": {
                            "order": "-created_at",
                            "fields": [
                              "id",
                              "code",
                              "voucher_type",
                              "value"
                            ],
                            "filters": {
                              "junction": "and"
                            }
                          },
                          "result": {
                            "url": "https://download.voucherify.io/v1/exports/exp_sPQR0na2gU0pIVUKIz4wdQI9?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnQiOiJzYW11ZWwuamFuaWtAdm91Y2hlcmlmeS5pbyIsImV4cG9ydElkIjoiZXhwX3NQUVIwbmEyZ1UwcElWVUtJejR3ZFFJOSIsImlhdCI6MTY1MTQ3Mzg0NCwiZXhwIjoxNjUxNDc0NzQ0fQ.yNIQHcHMO-HSKYejtgNjRVh3cRa_JqnmhBXdnAX2vHQ"
                          },
                          "user_id": null
                        },
                        {
                          "id": "exp_CGnCVltmWjI9V1pGlnunw2Nf",
                          "object": "export",
                          "created_at": "2022-01-13T09:03:18.293Z",
                          "status": "DONE",
                          "channel": "API",
                          "exported_object": "customer",
                          "parameters": {
                            "order": "",
                            "fields": [
                              "name",
                              "id",
                              "email",
                              "source_id",
                              "created_at"
                            ],
                            "filters": {
                              "junction": "and"
                            },
                            "response_format": "CSV"
                          },
                          "result": {
                            "url": "https://download.voucherify.io/v1/exports/exp_CGnCVltmWjI9V1pGlnunw2Nf?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ"
                          },
                          "user_id": null
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/exports/{exportId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterExportId"
          },
          "name": "exportId",
          "in": "path",
          "required": true,
          "description": "Unique export object ID of previously created export. This object can be a: \`voucher\`, \`redemption\`, \`publication\`, \`customer\`, \`order\`, \`points_expiration\`, or \`voucher_transactions\`."
        }
      ],
      "get": {
        "operationId": "get-export",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "Get Export",
        "description": "Retrieves the URL of the downloadable file, which was generated via the <!-- [Create Export](OpenAPI.json/paths/~1exports/post) -->[Create Export](ref:create-export) method.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the export object if a valid identifier was provided in the path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsGetResponseBody"
                },
                "examples": {
                  "Get Export": {
                    "value": {
                      "id": "exp_CGnCVltmWjI9V1pGlnunw2Nf",
                      "object": "export",
                      "created_at": "2022-01-13T09:03:18.293Z",
                      "status": "DONE",
                      "channel": "API",
                      "exported_object": "customer",
                      "parameters": {
                        "order": "",
                        "fields": [
                          "name",
                          "id",
                          "email",
                          "source_id",
                          "created_at"
                        ],
                        "filters": {
                          "junction": "and"
                        },
                        "response_format": "CSV"
                      },
                      "result": {
                        "url": "https://download.voucherify.io/v1/exports/exp_CGnCVltmWjI9V1pGlnunw2Nf?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ"
                      },
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-export",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "Delete Export",
        "description": "This method deletes a previously created export object.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/categories": {
      "get": {
        "operationId": "list-categories",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "List Categories",
        "description": "List all categories.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of category objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "cat_0b5f49fb31c3bf6ab0",
                          "name": "Sixth",
                          "hierarchy": 6,
                          "created_at": "2022-07-13T06:21:36.852Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f49e6e1ce5bd2ba",
                          "name": "Fifth",
                          "hierarchy": 5,
                          "created_at": "2022-07-13T06:21:16.039Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f49deafce5bd2b5",
                          "name": "Fourth",
                          "hierarchy": 4,
                          "created_at": "2022-07-13T06:21:07.662Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f49d45c43bf6a99",
                          "name": "Third",
                          "hierarchy": 3,
                          "created_at": "2022-07-13T06:20:57.094Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f3f9881ce5bccb6",
                          "name": "Second",
                          "hierarchy": 2,
                          "created_at": "2022-07-13T05:36:14.355Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b53bc388dc2f108ba",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-07-04T06:58:57.734Z",
                          "object": "category"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Create Category",
        "description": "Create category with a specific name and hierarchy.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the category that you would like to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoriesCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Eighth",
                    "hierarchy": 8
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a newly created category object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cat_0b8b5a427a0283c854",
                      "name": "Eighth",
                      "hierarchy": 8,
                      "created_at": "2022-08-16T11:45:54.171Z",
                      "object": "category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/categories/{categoryId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCategoryId"
          },
          "name": "categoryId",
          "in": "path",
          "required": true,
          "description": "Unique category ID assigned by Voucherify."
        }
      ],
      "get": {
        "operationId": "get-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Get Category",
        "description": "Retrieve a category by the category ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a category object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cat_0b5f49fb31c3bf6ab0",
                      "name": "Sixth",
                      "hierarchy": 6,
                      "created_at": "2022-07-13T06:21:36.852Z",
                      "object": "category"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Delete Category",
        "description": "Delete a category by the category ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          }
        }
      },
      "put": {
        "operationId": "update-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Update Category",
        "description": "Update category using the category ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the category that you would like to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoriesUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Summer",
                    "hierarchy": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a category object with a refreshed \`updated_at\` property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cat_0b60cfe7d0d7ddbb55",
                      "name": "Update",
                      "hierarchy": 1,
                      "created_at": "2022-07-14T10:45:13.156Z",
                      "updated_at": "2022-08-16T11:03:54.727Z",
                      "object": "category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata-schemas/{resource}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "name": "resource",
          "in": "path",
          "required": true,
          "description": "There is an infinite number of possibilities for retrieving metadata schemas by the resource type because you can define custom metadata schemas."
        }
      ]
    },
    "/v1/qualifications": {
      "post": {
        "operationId": "check-eligibility",
        "tags": [
          "QUALIFICATIONS API"
        ],
        "summary": "Check Eligibility",
        "description": "<!-- theme: warning -->\\n> 🚧 The Qualifications endpoint in the basic mode ignores the rules checking:\\n> \\n> - Limit of total redeemed discount amount per campaign\\n> - Limit of total redemptions count per campaign\\n> - Redemptions per customer\\n> - Redemptions per customer in a campaign \\n\\nGenerate a list of redeemables that are applicable in the context of the customer and order.\\n\\nThe new qualifications method is an improved version of [Campaign Qualifications](ref:examine-campaigns-qualification), [Voucher Qualifications](ref:examine-vouchers-qualification), and [Promotions Validation](ref:validate-promotions) API requests. The new qualification method introduces the following improvements:\\n\\n- Qualification results are returned faster\\n- No limit on the number of returned redeemables\\n- Introduces new qualification scenarios, not available in the previous version\\n\\n> 👍 Scenario Guide\\n>\\n> Read our dedicated guide to learn about some use cases this endpoint can cover [here](doc:checking-eligibility).\\n\\n## Paging \\n\\nThe Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the \`starting_after\` cursor.\\n\\nTo process of paging the redeemables works in the following manner:\\n\\n- You send the first API request for Qualifications without the \`starting_after\` parameter.\\n- The response will contain a parameter named \`has_more\`. If the parameter's value is set to \`true\`, then more redeemables are available.\\n- Get the value of the \`created_at\` parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables.\\n- Send another API request for Qualification with the \`starting_after\` parameter set to the value taken from the \`created_at\` parameter from the last returned redeemable.\\n- Voucherify will return the next page of redeemables.\\n- If the \`has_more\` parameter is set to \`true\`, apply steps 3-5 to get the next page of redeemables.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Define order and customer context.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QualificationsCheckEligibilityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a qualifications object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualificationsCheckEligibilityResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/qualifications": {
      "post": {
        "operationId": "check-eligibility-client-side",
        "tags": [
          "QUALIFICATIONS API"
        ],
        "summary": "Check Eligibility (client-side)",
        "description": "Generate a list of redeemables that are applicable in the context of the customer and order.\\n\\nThe new qualifications method is an improved version of [Campaign Qualifications](ref:examine-campaigns-qualification), [Voucher Qualifications](ref:examine-vouchers-qualification), and [Promotions Validation](ref:validate-promotions) API requests. The new qualification method introduces the following improvements:\\n\\n- Qualification results are returned faster\\n- No limit on the number of returned redeemables\\n- Introduces new qualification scenarios, not available in the previous version\\n\\n> 👍 Scenario Guide\\n>\\n> Read our dedicated guide to learn about some use cases this endpoint can cover [here](doc:checking-eligibility).\\n\\n## Paging \\n\\nThe Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the \`starting_after\` cursor.\\n\\nTo process of paging the redeemables works in the following manner:\\n\\n- You send the first API request for Qualifications without the \`starting_after\` parameter.\\n- The response will contain a parameter named \`has_more\`. If the parameter's value is set to \`true\`, then more redeemables are available.\\n- Get the value of the \`created_at\` parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables.\\n- Send another API request for Qualification with the \`starting_after\` parameter set to the value taken from the \`created_at\` parameter from the last returned redeemable.\\n- Voucherify will return the next page of redeemables.\\n- If the \`has_more\` parameter is set to \`true\`, apply steps 3-5 to get the next page of redeemables.",
        "parameters": [],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Define order and customer context.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientQualificationsCheckEligibilityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a qualifications object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientQualificationsCheckEligibilityResponseBody"
                }
              }
            }
          }
        }
      }
    }
  }
}"
`;

exports[`compare open-api file ruby 1`] = `
"{
  "openapi": "3.0.1",
  "info": {
    "title": "Voucherify API",
    "version": "v2018-08-01",
    "description": "Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.",
    "contact": {
      "name": "Voucherify Team",
      "url": "https://www.voucherify.io/contact-support",
      "email": "support@voucherify.io"
    },
    "termsOfService": "https://www.voucherify.io/legal/subscription-agreement",
    "license": {
      "name": "MIT",
      "url": "https://github.com/voucherifyio/voucherify-js-sdk/blob/main/LICENSE"
    }
  },
  "x-readme": {
    "samples-languages": [
      "curl"
    ],
    "headers": [
      {
        "key": "X-Voucherify-Channel",
        "value": "Voucherify Documentation"
      }
    ]
  },
  "servers": [
    {
      "url": "https://{cluster}.voucherify.io",
      "description": "Base URL",
      "variables": {
        "cluster": {
          "default": "api",
          "enum": [
            "api",
            "us1.api",
            "as1.api"
          ]
        }
      }
    },
    {
      "url": "https://download.voucherify.io",
      "description": "EU Download Export Base URL"
    },
    {
      "url": "https://{downloadcluster}.download.voucherify.io",
      "description": "US and AS Download Export Base URL",
      "variables": {
        "downloadcluster": {
          "default": "us1",
          "enum": [
            "us1",
            "as1"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "VOUCHERS API",
      "description": "Manage discount and gift card vouchers."
    },
    {
      "name": "CAMPAIGNS API",
      "description": "Group vouchers or promotion tiers of a specific type."
    },
    {
      "name": "PROMOTIONS API",
      "description": "Manage promotions."
    },
    {
      "name": "REWARDS API",
      "description": "Manage rewards."
    },
    {
      "name": "PUBLICATIONS API",
      "description": "Manage publications."
    },
    {
      "name": "VALIDATIONS API",
      "description": "Validate vouchers and promotions."
    },
    {
      "name": "REDEMPTIONS API",
      "description": "Manage redemptions."
    },
    {
      "name": "STACKABLE DISCOUNTS API",
      "description": "Manage multiple discounts in one request."
    },
    {
      "name": "LOYALTIES API",
      "description": "Manage loyalty campaigns."
    },
    {
      "name": "CUSTOMERS API",
      "description": "Manage customers."
    },
    {
      "name": "ORDERS API",
      "description": "Manage orders."
    },
    {
      "name": "PRODUCTS API",
      "description": "Manage products."
    },
    {
      "name": "PRODUCT COLLECTIONS API",
      "description": "Group products."
    },
    {
      "name": "VALIDATION RULES API",
      "description": "Configure validation rules."
    },
    {
      "name": "SEGMENTS API",
      "description": "Manage customer segments."
    },
    {
      "name": "EVENTS API",
      "description": "Track custom and internal events."
    },
    {
      "name": "CONSENTS API",
      "description": "List marketing opt-in consents."
    },
    {
      "name": "ASYNC ACTIONS API",
      "description": "Track asynchronous operations scheduled in Projects."
    },
    {
      "name": "EXPORTS API",
      "description": "Export data from Voucherify."
    },
    {
      "name": "CATEGORIES API",
      "description": "Manage categories."
    },
    {
      "name": "METADATA SCHEMAS API",
      "description": "List metadata schemas."
    },
    {
      "name": "LOCATIONS API",
      "description": "List locations."
    },
    {
      "name": "QUALIFICATIONS API",
      "description": "List applicable incentives."
    }
  ],
  "components": {
    "securitySchemes": {
      "X-App-Id-1": {
        "type": "apiKey",
        "name": "X-App-Id",
        "in": "header"
      },
      "X-App-Token-1": {
        "type": "apiKey",
        "name": "X-App-Token",
        "in": "header"
      },
      "X-Client-Token-1": {
        "type": "apiKey",
        "name": "X-Client-Token",
        "in": "header"
      },
      "X-Client-Application-Id-1": {
        "type": "apiKey",
        "name": "X-Client-Application-Id",
        "in": "header"
      },
      "Download-Token-1": {
        "type": "apiKey",
        "name": "token",
        "in": "query"
      }
    },
    "parameters": {
      "campaign_type": {
        "name": "campaign_type",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterCampaignType"
        },
        "description": "This attribute allows filtering by campaign type."
      },
      "code": {
        "name": "code",
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/ParameterCode"
        },
        "description": "A **code** that identifies the voucher.",
        "required": true
      },
      "created_at": {
        "name": "created_at",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterCreatedBeforeAfter"
        },
        "description": "A filter on the list based on the object \`created_at\` field. The value is a dictionary with the following options: \`before\`, \`after\`. A date value must be presented in ISO 8601 format (\`2016-11-16T14:14:31Z\` or \`2016-11-16\`). An example: \`[created_at][before]=2017-09-08T13:52:18.227Z\`",
        "style": "deepObject",
        "explode": true
      },
      "end_date": {
        "name": "end_date",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterDate"
        },
        "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterLimit"
        },
        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
      },
      "order": {
        "name": "order",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterOrder"
        },
        "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
      },
      "origin": {
        "name": "origin",
        "in": "header",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ParameterOrigin"
        },
        "description": "Indicates the origin (scheme, hostname, and port)."
      },
      "page": {
        "name": "page",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ParameterPage"
        },
        "description": "Which page of results to return."
      },
      "start_date": {
        "name": "start_date",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterDate"
        },
        "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
      },
      "starting_after": {
        "name": "starting_after",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterDate"
        },
        "description": "Timestamp representing the date and time to use in starting_after cursor to get more data. Represented in ISO 8601 format."
      },
      "updated_at": {
        "name": "updated_at",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/ParameterUpdatedBeforeAfter"
        },
        "description": "A filter on the list based on the object \`updated_at\` field. The value is a dictionary with the following options: \`before\`, \`after\`. A date value must be presented in ISO 8601 format (\`2016-11-16T14:14:31Z\` or \`2016-11-16\`). An example: \`[updated_at][before]=2017-09-08T13:52:18.227Z\`",
        "style": "deepObject",
        "explode": true
      }
    },
    "schemas": {
      "18_res_list_consents_GET": {
        "description": "Response body schema for listing consents.",
        "type": "object",
        "title": "List Consents Response Body",
        "properties": {
          "groups": {
            "type": "object",
            "description": "Contains marketing permission groups' definitions.",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "Stores information about marketing permission groups."
              },
              "data_ref": {
                "type": "string",
                "default": "data",
                "description": "Identifies the name of the attribute that contains the array of marketing permission groups."
              },
              "data": {
                "type": "array",
                "description": "An array of marketing permission groups.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Contains a marketing permission group's definition.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "cnstgr_3c7Z3rcOLv51bsXlRtTZPYj8",
                      "description": "Unique group ID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Marketing permission group name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Marketing permission group category."
                    },
                    "consents": {
                      "type": "array",
                      "description": "List of consents that are assigned to the group.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-04-13T09:12:47.743Z",
                      "description": "Timestamp representing the date and time when the group was created in ISO 8601 format."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-05-14T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the group was updated in ISO 8601 format."
                    },
                    "object": {
                      "type": "string",
                      "default": "consent_group",
                      "description": "Stores information about a marketing permission group."
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of groups."
              }
            }
          },
          "consents": {
            "type": "object",
            "description": "Contains opt-in consents' definitions.",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "Stores information about opt-in consents."
              },
              "data_ref": {
                "type": "string",
                "default": "data",
                "description": "Identifies the name of the attribute that contains the array of opt-in consents."
              },
              "data": {
                "type": "array",
                "description": "An array of consents.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Contains an opt-in consent definition.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                      "description": "Unique consent ID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Consent name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Consent description."
                    },
                    "category": {
                      "type": "string",
                      "description": "Consent category."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-04-13T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the consent was created in ISO 8601 format."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-05-14T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the consent was updated in ISO 8601 format."
                    },
                    "object": {
                      "type": "string",
                      "default": "consent",
                      "description": "Stores information about an opt-in consent."
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of consents."
              }
            }
          }
        }
      },
      "CampaignsCreateRequestBody": {
        "type": "object",
        "title": "Campaigns Create Request Body",
        "description": "Request body schema for **POST** \`/campaigns\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateDiscountCouponsCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateReferralCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateGiftCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateLoyaltyCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreatePromotionCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateGiveawayCampaign"
          }
        ]
      },
      "CampaignsCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsDeleteResponseBody": {
        "type": "object",
        "title": "Campaigns Delete Response Body",
        "description": "Response body schema for **DELETE** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsDisableResponseBody": {
        "type": "object",
        "title": "Campaigns Disable Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/disable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmptyJson"
          }
        ]
      },
      "CampaignsEnableResponseBody": {
        "type": "object",
        "title": "Campaigns Enable Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/enable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmptyJson"
          }
        ]
      },
      "CampaignsGetResponseBody": {
        "type": "object",
        "title": "Campaigns Get Response Body",
        "description": "Response body schema for **GET** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsImportCreateRequestBody": {
        "type": "array",
        "title": "Campaigns Import Create Request Body",
        "description": "Request body schema for **POST** \`/campaigns/{campaignId}/import\`.",
        "items": {
          "$ref": "#/components/schemas/CampaignsImportVoucherItem"
        }
      },
      "CampaignsImportCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Import Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/import\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsListResponseBody": {
        "type": "object",
        "description": "Schema model for **GET** \`/campaigns\`.",
        "title": "Campaigns List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about campaigns in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of campaign objects.",
            "default": "campaigns"
          },
          "campaigns": {
            "type": "array",
            "description": "Contains array of campaign objects.",
            "items": {
              "$ref": "#/components/schemas/CampaignBase"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of campaigns."
          }
        }
      },
      "CampaignsUpdateRequestBody": {
        "type": "object",
        "title": "Campaigns Update Request Body",
        "description": "Request body schema for **PUT** \`/campaigns/{campaignId}\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateDiscountCouponsCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateReferralCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateGiftCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateLoyaltyCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdatePromotionCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateGiveawayCampaign"
          }
        ]
      },
      "CampaignsUpdateResponseBody": {
        "type": "object",
        "title": "Campaigns Update Response Body",
        "description": "Response body schema for **PUT** \`/campaigns/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsVouchersCreateInBulkResponseBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create In Bulk Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/vouchers/{code}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsVouchersCreateRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create Request Body",
        "description": "Request body schema for **POST** \`/campaigns/{campaignId}/vouchers/{code}\` and **POST** \`/campaigns/{campaignId}/vouchers\`.",
        "properties": {
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          }
        }
      },
      "CampaignsVouchersCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create Response Body",
        "description": "Response body schema for **POST** \`/campaigns/{campaignId}/vouchers/{code}\` and **POST** \`/campaigns/{campaignId}/vouchers\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "CampaignsVouchersImportCSVRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Import CSV Request Body",
        "description": "Request body schema for **POST** \`/campaigns/{campaignId}/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "CategoriesCreateRequestBody": {
        "title": "Categories Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/categories\`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          }
        },
        "required": [
          "name",
          "hierarchy"
        ]
      },
      "CategoriesCreateResponseBody": {
        "title": "Categories Create Response Body",
        "description": "Response body schema for **POST** \`/categories\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object"
        ]
      },
      "CategoriesGetResponseBody": {
        "type": "object",
        "title": "Categories Get Response Body",
        "description": "Response body schema for **GET** \`/categories/{categoryId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          }
        ]
      },
      "CategoriesListResponseBody": {
        "title": "Categories List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/categories\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about categories in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of category objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of categories."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CategoriesUpdateRequestBody": {
        "title": "Categories Update Request Body",
        "description": "Request body schema for **PUT** \`/categories/{categoryId}\`.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          }
        },
        "required": [
          "name",
          "hierarchy"
        ]
      },
      "CategoriesUpdateResponseBody": {
        "title": "Categories Update Response Body",
        "description": "Response body schema for **PUT** \`/categories/{categoryId}\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-08-16T10:52:08.094Z",
            "description": "Timestamp representing the date and time when the category was updated in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object",
          "updated_at"
        ]
      },
      "ClientCustomersConsentsUpdateRequestBody": {
        "description": "Request body schema for **PUT** \`/customers/{customerId}/consents\`.",
        "type": "object",
        "title": "Client Customers Consents Update Request Body"
      },
      "ClientEventsCreateRequestBody": {
        "description": "Request body schema for **POST** \`/events\`.",
        "title": "Client Events Create Request Body",
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name. This is the same name that you used to define a custom event in the **Dashboard** > **Project Settings** > **Event Schema**.",
            "minLength": 1,
            "maxLength": 300
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "If a **conversion event** for a referral program is set to a custom event, then you need to send the referral code in the payload to make a record of the conversion event. ",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code through which a new visitor has been referred to a service."
              },
              "referrer_id": {
                "type": "string",
                "description": "Unique ID of the referring person - it is optional and not required if the referral **code** is provided.",
                "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
              }
            },
            "required": [
              "code"
            ]
          },
          "loyalty": {
            "type": "object",
            "description": "If an earning rule in a loyalty program is based on a custom event. This objects let's you specify the loyalty card to which the custom event should be attributed to.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code of the loyalty card to receive points based on the calculation method defined in the related earning rule. An earning rule is triggered for the loyalty card when the event passed in the \`event\` parameter of the request payload gets sent along with this loyalty card code.",
                "example": "L-CARD-BUHuH6g"
              }
            },
            "required": [
              "code"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** > **Project Settings** > **Event Schema** > **Edit particular event** > **Metadata property definition**."
          }
        },
        "required": [
          "event",
          "customer"
        ]
      },
      "ClientEventsCreateResponseBody": {
        "description": "Response body schema for **POST** \`/events\`.",
        "title": "Client Events Create Response Body",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an \`event\`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "A \`null\` referral object.",
            "nullable": true
          },
          "loyalty": {
            "type": "object",
            "description": "A \`null\` loyalty object.",
            "nullable": true
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "ClientQualificationsCheckEligibilityRequestBody": {
        "description": "Request body schema for **POST** \`/qualifications\`.",
        "type": "object",
        "title": "Client Qualifications Check Eligibility Request Body",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "mode": {
            "type": "string",
            "description": "Defines which resources Voucherify will use.\\nThe \`ADVANCED\` mode is available after purchase only.",
            "enum": [
              "BASIC",
              "ADVANCED"
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "scenario": {
            "type": "string",
            "description": "Defines the scenario Voucherify should consider during the qualification process.\\n\\n- \`ALL\` - Scenario that returns all redeemables available for the customer in one API request. This scenario is used by default when no value is selected.\\n- \`CUSTOMER_WALLET\` - returns vouchers applicable to the customer’s cart based on the vouchers assigned to the customer’s profile.\\n- \`AUDIENCE_ONLY\` - returns all vouchers, promotion tiers, and campaigns available to the customer. Voucherify validates the rules based on the customer profile only.\\n- \`PRODUCTS\` - returns all promotions available for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT\` - returns all promotions available for products when a discount is defined as applicable to specific item(s).\\n- \`PROMOTION_STACKS\` - returns the applicable promotion stacks.\\n- \`PRODUCTS_BY_CUSTOMER\` - returns all promotions available for a customer for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT_BY_CUSTOMER\` - returns all promotions available for a customer for products when a discount is defined as applicable to specific item(s).",
            "enum": [
              "ALL",
              "CUSTOMER_WALLET",
              "AUDIENCE_ONLY",
              "PRODUCTS",
              "PRODUCTS_DISCOUNT",
              "PROMOTION_STACKS",
              "PRODUCTS_BY_CUSTOMER",
              "PRODUCTS_DISCOUNT_BY_CUSTOMER"
            ]
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The maximum number of redeemables to be returned in the API request. The actual number of returned redeemables will be determined by the API. The default value is set to 5",
                "maximum": 100
              },
              "starting_after": {
                "type": "string",
                "nullable": true,
                "example": "2021-09-08T13:52:18.227Z",
                "format": "date-time",
                "description": "Cursor used for paging."
              },
              "filters": {
                "type": "object",
                "additionalProperties": false,
                "description": "A set of filters to return only a specific category or type of redeemable.",
                "properties": {
                  "junction": {
                    "$ref": "#/components/schemas/Junction"
                  },
                  "category_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "campaign_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "voucher_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "code": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  }
                }
              },
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"redeemable\\"] | - Returns the redeemables' metadata. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |\\n| [\\"validation_rules\\"] | - Returns an expanded \`validation_rules\` object, showing details about the validation rules. |",
                "items": {
                  "type": "string",
                  "enum": [
                    "redeemable",
                    "category",
                    "validation_rules"
                  ]
                }
              },
              "sorting_rule": {
                "type": "string",
                "description": "Is used to determine the order in which data is displayed in the result array. \\n\\n - \`DEFAULT\` - Sorting descending by \`created_at\` \\n - \`BEST_DEAL\` - Sorting descending by \`total_applied_discount_amount\` \\n - \`LEAST_DEAL\` - Sorting ascending by \`total_applied_discount_amount\`",
                "enum": [
                  "BEST_DEAL",
                  "LEAST_DEAL",
                  "DEFAULT"
                ]
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against redeemables requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "ClientQualificationsCheckEligibilityResponseBody": {
        "description": "Response body schema for **POST** \`/qualifications\`.",
        "title": "Client Qualifications Check Eligibility Response Body",
        "type": "object",
        "properties": {
          "redeemables": {
            "$ref": "#/components/schemas/QualificationsRedeemables"
          },
          "tracking_id": {
            "type": "string",
            "description": "This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "stacking_rules": {
            "$ref": "#/components/schemas/QualificationsStackingRules"
          }
        }
      },
      "ClientRedemptionsRedeemRequestBody": {
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "type": "object",
        "title": "Client Redemptions Redeem Request Body",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "Expand array lets you configure params included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"redeemable\\", \\"redemption\\", \\"category\\"] | - Returns each discount type's \`metadata\` in each child redemption object.<br>- Returns redemption object \`metadata\`.<br>- Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ClientRedemptionsRedeemResponseBody": {
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "type": "object",
        "title": "Client Redemptions Redeem Response Body",
        "properties": {
          "redemptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Redemption"
            }
          },
          "parent_redemption": {
            "$ref": "#/components/schemas/Redemption"
          },
          "order": {
            "description": "Contains the order details associated with the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculated"
              }
            ]
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "ClientValidationsValidateRequestBody": {
        "description": "Response body schema for **POST** \`/validations\`.",
        "title": "Client Validations Validate Request Body",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ClientValidationsValidateResponseBody": {
        "description": "Response body schema for POST \`/validations\`.",
        "title": "Client Validations Validate Response Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidationsValidateAllResponseBody"
          },
          {
            "$ref": "#/components/schemas/ValidationsValidatePartialResponseBody"
          }
        ]
      },
      "CreatePublicationCampaign": {
        "title": "Create Publication Campaign",
        "type": "object",
        "description": "Create publication with campaign.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of voucher's parent campaign or unique campaign ID that was assigned by Voucherify.",
            "example": "camp_dphuwqH7BOVkgh4JmpDtS32l"
          },
          "count": {
            "type": "integer",
            "description": "Number of vouchers to be published to customer.",
            "minimum": 1,
            "maximum": 20
          }
        },
        "required": [
          "name"
        ]
      },
      "Customer": {
        "title": "Customer",
        "allOf": [
          {
            "type": "object",
            "title": "Customer Id And Source Id",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer."
              },
              "source_id": {
                "type": "string",
                "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
              }
            }
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomersActivitiesListResponseBody": {
        "type": "object",
        "title": "Customers Activities List Response Body",
        "description": "Request body schema for **GET** \`/customers/{customerId}/activities\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about customer activities in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of customer activity objects."
          },
          "data": {
            "type": "array",
            "description": "Array of customer activity objects.",
            "items": {
              "$ref": "#/components/schemas/CustomerActivity"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of customer activities."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CustomersConsentsUpdateRequestBody": {
        "type": "object",
        "title": "Customers Consents Update Request Body",
        "description": "Request body schema for **PUT** \`/customers/{customerId}/consents\`."
      },
      "CustomersCreateRequestBody": {
        "title": "Customers Create Request Body",
        "description": "Request body schema for **POST** \`/customers\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Customer"
          }
        ]
      },
      "CustomersCreateResponseBody": {
        "description": "Response bofy for **POST** \`/customers\`.",
        "title": "Customers Create Response Body",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "CustomersGetResponseBody": {
        "title": "Customers Get Response Body",
        "description": "Response body schema for **GET** \`/customers/{customerId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "CustomersImportCSVRequestBody": {
        "type": "object",
        "title": "Customers Import CSV Request Body",
        "description": "Response body schema for **POST** \`/customers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "CustomersImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Customers Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/customers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersListResponseBody": {
        "title": "Customers List Response Body",
        "description": "Response body schema for **GET** \`/customers\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about customers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "customers",
            "description": "Identifies the name of the attribute that contains the array of customer objects."
          },
          "customers": {
            "type": "array",
            "description": "Contains array of customer objects.",
            "items": {
              "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of customers."
          }
        },
        "required": [
          "object",
          "data_ref",
          "customers",
          "total"
        ]
      },
      "CustomersMetadataUpdateInBulkRequestBody": {
        "type": "object",
        "title": "Customers Metadata Update In Bulk Request Body",
        "description": "Request body schema for **POST** \`/customers/metadata/async\`.",
        "properties": {
          "source_ids": {
            "type": "array",
            "description": "An array of customer \`source_id\`'s.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata key value pairs to be updated. A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          }
        },
        "required": [
          "source_ids",
          "metadata"
        ]
      },
      "CustomersMetadataUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Customers Metadata Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/customers/metadata/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersPermanentDeletionCreateResponseBody": {
        "type": "object",
        "title": "Customers Permanent Deletion Create Response Body",
        "description": "Response body schema for **POST** \`/customers/{customerId}/permanent-deletion\`.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique permanent deletion object ID.",
            "example": "del_mgzqZNwUnwnt1Ddw6phEG90Q"
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-02T17:55:47.865Z",
            "description": "Timestamp representing the date and time when the customer was requested to be deleted in ISO 8601 format.",
            "format": "date-time"
          },
          "related_object_id": {
            "type": "string",
            "example": "cust_m557pDDl4IGXexkU6KOQ2Dwi",
            "description": "Unique customer ID that is being deleted."
          },
          "related_object": {
            "type": "string",
            "description": "Object being deleted.",
            "default": "customer"
          },
          "status": {
            "type": "string",
            "description": "Deletion status.",
            "default": "DONE"
          },
          "data_json": {
            "type": "object",
            "description": "Statistics summarizing the number of related information that was deleted.",
            "required": [
              "events",
              "customer_events",
              "daily_events",
              "segments",
              "orders",
              "order_events",
              "customer"
            ],
            "properties": {
              "events": {
                "type": "integer",
                "description": "Number of events deleted."
              },
              "customer_events": {
                "type": "integer",
                "description": "Number of customer events deleted."
              },
              "daily_events": {
                "type": "integer",
                "description": "Number of daily events deleted."
              },
              "segments": {
                "type": "integer",
                "description": "Number of segments deleted."
              },
              "orders": {
                "type": "integer",
                "description": "Number of orders deleted."
              },
              "order_events": {
                "type": "integer",
                "description": "Number of order events deleted."
              },
              "customer": {
                "type": "integer",
                "description": "Number of customers deleted.",
                "default": 1
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "pernament_deletion"
          }
        },
        "required": [
          "id",
          "created_at",
          "related_object_id",
          "related_object",
          "status",
          "data_json",
          "object"
        ]
      },
      "CustomersSegmentsListResponseBody": {
        "type": "object",
        "title": "Customers Segments List Response Body",
        "description": "Response body schema for **GET** \`/customers/{customerId}/segments\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerSegmentsList"
          }
        ]
      },
      "CustomersUpdateInBulkRequestBody": {
        "title": "Customers Update In Bulk Request Body",
        "description": "Request body schema for **POST** \`/customers/bulk/async\`.",
        "allOf": [
          {
            "title": "CustomerSourceId",
            "type": "object",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "Unique customer source ID."
              }
            },
            "required": [
              "source_id"
            ]
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomersUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Customers Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/customers/bulk/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersUpdateRequestBody": {
        "title": "Customers Update Request Body",
        "description": "Request body schema for **PUT** \`/customers/{customerId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomersUpdateResponseBody": {
        "title": "Customers Update Response Body",
        "description": "Response body schema for **PUT** \`/customers/{customerId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "EventsCreateRequestBody": {
        "title": "Events Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/events\`.",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name. This is the same name that you used to define a custom event in the **Dashboard** > **Project Settings** > **Event Schema**.",
            "minLength": 1,
            "maxLength": 300
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "If a **conversion event** for a referral program is set to a custom event, then you need to send the referral code in the payload to make a record of the conversion event. ",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code through which a new visitor has been referred to a service."
              },
              "referrer_id": {
                "type": "string",
                "description": "Unique ID of the referring person - it is optional and not required if the referral **code** is provided.",
                "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
              }
            },
            "required": [
              "code"
            ]
          },
          "loyalty": {
            "type": "object",
            "description": "If an earning rule in a loyalty program is based on a custom event. This objects let's you specify the loyalty card to which the custom event should be attributed to.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code of the loyalty card to receive points based on the calculation method defined in the related earning rule. An earning rule is triggered for the loyalty card when the event passed in the \`event\` parameter of the request payload gets sent along with this loyalty card code.",
                "example": "L-CARD-BUHuH6g"
              }
            },
            "required": [
              "code"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** > **Project Settings** > **Event Schema** > **Edit particular event** > **Metadata property definition**."
          }
        },
        "required": [
          "event",
          "customer"
        ]
      },
      "EventsCreateResponseBody": {
        "title": "Events Create Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/events\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an \`event\`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "A \`null\` referral object.",
            "nullable": true
          },
          "loyalty": {
            "type": "object",
            "description": "A \`null\` loyalty object.",
            "nullable": true
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "ExportsCreateRequestBody": {
        "description": "Request body schema for **POST** \`/exports\`.",
        "title": "Exports Create Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationBase"
          }
        ],
        "type": "object"
      },
      "ExportsCreateResponseBody": {
        "title": "Exports Create Response Body",
        "description": "Response body schema for **POST** \`/exports\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucherScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportOrderScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationScheduled"
          }
        ]
      },
      "ExportsGetResponseBody": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Export"
          }
        ],
        "description": "Response body schema for **GET** \`/exports/{exportId}\`.",
        "title": "Exports Get Response Body"
      },
      "ExportsListResponseBody": {
        "title": "Exports List Response Body",
        "description": "Response body schema for **GET** \`/exports\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about exports."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "exports"
            ],
            "description": "Identifies the name of the attribute that contains the array of exports."
          },
          "exports": {
            "type": "array",
            "description": "An array of export objects.",
            "items": {
              "$ref": "#/components/schemas/Export"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of exports."
          }
        },
        "required": [
          "object",
          "data_ref",
          "exports",
          "total"
        ]
      },
      "LoyaltiesDeleteResponseBody": {
        "type": "object",
        "title": "LoyaltiesDeleteResponseBody",
        "description": "Response body schema for **DELETE** \`/loyalties/{campaignId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "LoyaltiesEarningRulesDisableResponseBody": {
        "title": "Loyalties Earning Rules Disable Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "default": false,
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date."
              }
            },
            "required": [
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "LoyaltiesEarningRulesEnableResponseBody": {
        "title": "Loyalties Earning Rules Enable Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "default": true,
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date."
              }
            },
            "required": [
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "LoyaltiesEarningRulesGetResponseBody": {
        "type": "object",
        "title": "Loyalties Earning Rules Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/earning-rules/{earningRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRule"
          }
        ]
      },
      "LoyaltiesMembersBalanceUpdateRequestBody": {
        "description": "Request Body schema for **post** \`/loyalties/members/{memberId}/balance\` and **POST** \`/loyalties/{campaignId}/members/{memberId}/balance\`.",
        "title": "Loyalties Members Balance Update Request Body",
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "description": "Incremental balance to be added to/subtracted from the loyalty card.\\n\\n- To add points: 100\\n- To subtract points, add a minus: -100"
          },
          "expiration_type": {
            "description": "Set the type of expiration for added points.\\n\\n\`PROGRAM_RULES\`: Inherit rules from campaign.\\n\`NON_EXPIRING\`: Points never expire.\\n\`CUSTOM_DATE\`: Points expire on a particular date. Requires expiration_date parameter.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PointsExpirationTypes"
              }
            ]
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Set expiration date for added points, i.e. \`YYYY-MM-DD\`. This parameter is required only when expiration_type is set to \`CUSTOM_DATE\`."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transfer."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          }
        },
        "required": [
          "points"
        ]
      },
      "LoyaltiesMembersBalanceUpdateResponseBody": {
        "title": "Loyalties Members Balance Update Response Body",
        "type": "object",
        "description": "Response schema for **POST** \`/loyalties/members/{memberId}/balance\` and for **POST** \`/loyalties/{campaignId}/members/{memberId}/balance\`.",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The incremental points removed or added to the current balance on the loyalty card."
          },
          "total": {
            "type": "integer",
            "description": "The total of points accrued over the lifetime of the loyalty card."
          },
          "balance": {
            "type": "integer",
            "minimum": 0,
            "description": "The balance after adding/removing points."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOYALTY_CARD",
              "GIFT_VOUCHER"
            ],
            "description": "The type of voucher being modified."
          },
          "object": {
            "type": "string",
            "pattern": "balance",
            "enum": [
              "balance"
            ],
            "description": "The type of object represented by JSON. Default is balance."
          },
          "related_object": {
            "type": "object",
            "required": [
              "type",
              "id"
            ],
            "description": "Defines the object that is being modified with the values that are returned in the balance object.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "voucher"
                ],
                "description": "The object being modified."
              },
              "id": {
                "type": "string",
                "description": "Identifies the loyalty card that is being modified, this is the ID that was assigned by the Voucherify API."
              }
            }
          },
          "operation_type": {
            "type": "string",
            "enum": [
              "MANUAL",
              "AUTOMATIC"
            ]
          }
        },
        "required": [
          "points",
          "total",
          "balance",
          "type",
          "object",
          "related_object"
        ]
      },
      "LoyaltiesMembersPointsExpirationListResponseBody": {
        "title": "Loyalties Members Points Expiration List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/members/{memberId}/points-expiration\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "pattern": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty points expiration buckets in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "pattern": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty points expiration bucket objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty points expiration buckets.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique loyalty points bucket ID."
                },
                "voucher_id": {
                  "type": "string",
                  "description": "Unique parent loyalty card ID."
                },
                "campaign_id": {
                  "type": "string",
                  "description": "\\nUnique parent campaign ID."
                },
                "bucket": {
                  "type": "object",
                  "required": [
                    "total_points"
                  ],
                  "description": "Defines the number of points stored in the given loyalty points bucket.",
                  "properties": {
                    "total_points": {
                      "type": "integer",
                      "description": "Total number of points in the loyalty points bucket."
                    }
                  }
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp representing the date and time when the loyalty points bucket object was created in ISO 8601 format.",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Loyalty points bucket point status."
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date when the number of points defined in the bucket object are due to expire."
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp representing the date and time when the loyalty points bucket object was updated in ISO 8601 format."
                },
                "object": {
                  "type": "string",
                  "pattern": "loyalty_points_bucket",
                  "enum": [
                    "loyalty_points_bucket"
                  ],
                  "description": "The type of object represented by JSON. This object stores information about the loyalty points bucket."
                }
              },
              "required": [
                "id",
                "voucher_id",
                "campaign_id",
                "bucket",
                "created_at",
                "status",
                "expires_at",
                "object"
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of point expiration buckets."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesMembersRedemptionRedeemRequestBody": {
        "description": "Request body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/redemption\` and for **POST** and \`/loyalties/members/{memberId}/redemption\`.",
        "type": "object",
        "title": "Loyalties Members Redemption Redeem Request Body",
        "properties": {
          "reward": {
            "type": "object",
            "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward if the reward is a pay with points reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward.",
                "example": "rew_eSi4eYJk7o3tOycvweicR2z7"
              },
              "points": {
                "type": "integer",
                "description": "The number of loyalty points that the user wants to spend in order to fulfill the order. The number of points cannot be higher than the current balance on the loyalty card."
              }
            }
          },
          "order": {
            "description": "Order object that is **required** when redeeming a pay with points reward.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "LoyaltiesMembersRedemptionRedeemResponseBody": {
        "title": "Loyalties Members Redemption Redeem Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/redemption\` and for **POST** \`/loyalties/members/{memberId}/redemption\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Redemption"
          },
          {
            "title": "RedemptionRewardRequired",
            "type": "object",
            "required": [
              "reward"
            ]
          }
        ]
      },
      "LoyaltiesMembersRewardsListResponseBody": {
        "title": "Loyalties Members Rewards List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/members/{memberId}/rewards\`",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of loyalty reward objects.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty reward objects.",
            "items": {
              "type": "object",
              "properties": {
                "reward": {
                  "description": "This is an object representing a reward.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Reward"
                    }
                  ]
                },
                "assignment": {
                  "description": "This is an object representing a reward assignment.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RewardAssignment"
                    }
                  ]
                },
                "object": {
                  "type": "string",
                  "description": "The type of object represented by JSON.",
                  "enum": [
                    "loyalty_reward"
                  ]
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty reward objects.",
            "minimum": 0
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesMembersTiersListResponseBody": {
        "title": "Loyalties Members Tiers List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/members/{memberId}/tiers\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty tier objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltyTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesMembersTransactionsExportCreateRequestBody": {
        "title": "Loyalties Members Transactions Export Create Request Body",
        "description": "Request body schema for **POST** \`/loyalties/members/{memberId}/transactions/export\` and for **POST** \`/loyalties/{campaignId}/members/{memberId}/transactions/export\`.",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "enum": [
              "created_at",
              "-created_at"
            ],
            "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order."
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyCardTransactionsFields"
            }
          }
        }
      },
      "LoyaltiesMembersTransactionsExportCreateResponseBody": {
        "title": "Loyalties Members Transactions Export Create Response Body",
        "description": "Response body schema for **POST** \`/loyalties/members/{memberId}/transactions/export\` and for **POST** \`/loyalties/{campaignId}/members/{memberId}/transactions/export\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "pattern": "export",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "pattern": "SCHEDULED",
            "enum": [
              "SCHEDULED"
            ],
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated."
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "exported_object": {
            "type": "string",
            "pattern": "voucher_transactions",
            "enum": [
              "voucher_transactions"
            ],
            "description": "The type of exported object."
          },
          "parameters": {
            "type": "object",
            "required": [
              "filters"
            ],
            "description": "List of available fields and filters that can be exported with loyalty card transactions along with the sorting order of the returned data.",
            "properties": {
              "order": {
                "type": "string",
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order."
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.\\n\\n\`id\`, \`campaign_id\`, \`voucher_id\`, \`type\`, \`source_id\`, \`reason\`, \`source\`, \`balance\`, \`amount\`, \`related_transaction_id\`, \`created_at\`, \`details\`",
                "items": {
                  "$ref": "#/components/schemas/LoyaltyCardTransactionsFields"
                }
              },
              "filters": {
                "type": "object",
                "required": [
                  "voucher_id"
                ],
                "description": "Filter condition.",
                "properties": {
                  "voucher_id": {
                    "type": "object",
                    "required": [
                      "conditions"
                    ],
                    "description": "Data filters used to narrow the data records to be returned in the result.",
                    "properties": {
                      "conditions": {
                        "type": "object",
                        "required": [
                          "$in"
                        ],
                        "description": "Data filters used to narrow the data records to be returned in the result.",
                        "properties": {
                          "$in": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 1,
                            "items": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "result": {
            "type": "object",
            "description": "Contains the URL of the CSV file.",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "channel",
          "exported_object",
          "parameters",
          "result",
          "user_id"
        ]
      },
      "LoyaltiesMembersTransactionsListResponseBody": {
        "title": "Loyalties Members Transactions List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/members/{memberId}/transactions\` and \`/loyalties/members/{memberId}/transactions\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "pattern": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "pattern": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of transaction objects."
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of transactions. Each entry in the array is a separate transaction object.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyCardTransaction"
            }
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the has_more flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "has_more"
        ]
      },
      "LoyaltiesMembersTransfersCreateRequestBody": {
        "title": "Loyalties Members Transfers Create Request Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/transfers\`.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LoyaltiesTransferPoints"
        }
      },
      "LoyaltiesMembersTransfersCreateResponseBody": {
        "title": "Loyalties Members Transfers Create Response Body",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/members/{memberId}/transfers\`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "nullable": true,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique category ID assigned by Voucherify."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher."
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if type is LOYALTY_CARD.",
            "required": [
              "points",
              "balance"
            ],
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "nullable": true,
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is inactive before this date.",
            "format": "date-time"
          },
          "expiration_date": {
            "type": "string",
            "nullable": true,
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format. Voucher is inactive after this date.",
            "format": "date-time"
          },
          "validity_timeframe": {
            "type": "object",
            "nullable": true,
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.start_date required when including the validity_timeframe.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a duration of PT1H will be valid for a duration of one hour."
              },
              "duration": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an interval of P2D will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "nullable": true,
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\\n\\n- \`0\` Sunday\\n- \`1\` Monday\\n- \`2\` Tuesday\\n- \`3\` Wednesday\\n- \`4\` Thursday\\n- \`5\` Friday\\n- \`6\` Saturday",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 6
            }
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event. A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or publish voucher API method.",
            "properties": {
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "description": "The type of object represented is by default list. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "count": {
                "type": "integer",
                "description": "Publication events counter."
              },
              "entries": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "description": "The endpoint where this list of publications can be accessed using a GET method. /v1/vouchers/{voucher_code}/publications"
              }
            },
            "required": [
              "object"
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A null value means unlimited."
              },
              "redeemed_points": {
                "type": "integer",
                "description": "Total loyalty points redeemed."
              },
              "redeemed_quantity": {
                "type": "integer",
                "description": "How many times a voucher has already been redeemed."
              },
              "redemption_entries": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "description": "The type of object represented is by default list. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. /v1/vouchers/{voucher_code}/redemptions"
              }
            },
            "required": [
              "quantity"
            ]
          },
          "active": {
            "type": "string",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the start_date and expiration_date.\\n\\n- \`true\` indicates an active voucher\\n- \`false\` indicates an inactive voucher"
          },
          "additional_info": {
            "type": "string",
            "nullable": true,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code."
          },
          "holder_id": {
            "type": "string",
            "description": "Unique customer ID of voucher owner."
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format.",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "code",
          "category",
          "category_id",
          "type",
          "loyalty_card",
          "start_date",
          "expiration_date",
          "validity_timeframe",
          "validity_day_of_week",
          "active",
          "additional_info",
          "metadata",
          "is_referral_code",
          "created_at"
        ]
      },
      "LoyaltiesRewardAssignmentsGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/reward-assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "LoyaltiesRewardAssignmentsRewardGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Reward Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reward"
          }
        ]
      },
      "LoyaltiesRewardsGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Get Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/rewards/{assignmentId}\`",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "LoyaltiesTiersCreateInBulkRequestBody": {
        "title": "Loyalties Tiers Create Request Body",
        "description": "Request body schema for **POST** \`/loyalties/{campaignId}/tiers\`",
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/LoyaltyTierBase"
            },
            {
              "type": "object",
              "properties": {
                "metadata": {
                  "description": "The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format.",
                  "type": "object"
                }
              }
            }
          ]
        }
      },
      "LoyaltiesTiersCreateInBulkResponseBody": {
        "title": "Loyalties Tiers Create Response Body",
        "type": "array",
        "description": "Response body schema for **POST** \`/loyalties/{campaignId}/tiers\`.",
        "items": {
          "$ref": "#/components/schemas/LoyaltyTier"
        }
      },
      "LoyaltiesTiersEarningRulesListResponseBody": {
        "title": "Loyalties Tiers Earning Rules List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about earning rules in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of earning rule objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of earning rule objects.",
            "items": {
              "$ref": "#/components/schemas/EarningRule"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of earning rule objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesTiersGetResponseBody": {
        "type": "object",
        "title": "Loyalties Tiers Get Response Body",
        "allOf": [
          {
            "$ref": "#/components/schemas/LoyaltyTier"
          }
        ],
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers/{loyaltyTierId}\`."
      },
      "LoyaltiesTiersListResponseBody": {
        "title": "Loyalties Tiers List Response Body",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty tier objects."
          },
          "data": {
            "type": "array",
            "description": "This is an object representing a loyalty tier. Loyalty tiers are used to create a loyalty program with different levels of membership and varied earning rules and rewards based on customer’s tiers.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesTiersRewardsListResponseBody": {
        "title": "Loyalties Tiers Rewards List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about loyalty tier rewards in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of loyalty tier reward objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty tier reward objects.",
            "items": {
              "$ref": "#/components/schemas/LoyaltiesLoyaltyTierReward"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier reward objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "OrdersCreateRequestBody": {
        "title": "Orders Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/orders\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          }
        ]
      },
      "OrdersCreateResponseBody": {
        "type": "object",
        "title": "Orders Create Response Body",
        "description": "Response body schema for **POST** \`/orders\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculated"
          }
        ]
      },
      "OrdersExportCreateRequestBody": {
        "title": "Orders Export Create Request Body",
        "description": "Request body schema for **POST** \`/orders/export\`.",
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportOrderFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        }
      },
      "OrdersExportCreateResponseBody": {
        "title": "Orders Export Create Response Body",
        "description": "Response body schema for **POST** \`/orders/export\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "OrdersGetResponseBody": {
        "title": "Orders Get Response Body",
        "description": "Response body schema for **GET** \`/orders/{orderId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
          }
        ]
      },
      "OrdersImportCreateRequestBody": {
        "type": "array",
        "title": "Orders Import Create Request Body",
        "description": "Request body schema for POST \`/orders/import\`.",
        "items": {
          "type": "object",
          "allOf": [
            {
              "title": "Order Ids",
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
                }
              }
            },
            {
              "$ref": "#/components/schemas/OrderBase"
            }
          ]
        }
      },
      "OrdersImportCreateResponseBody": {
        "type": "object",
        "title": "Orders Import Create Response Body",
        "description": "Response body schema for **POST** \`/orders/import\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "OrdersListResponseBody": {
        "type": "object",
        "title": "Orders List Response Body",
        "description": "Response body schema representing **GET** \`/orders\`.",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about orders in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "orders"
            ],
            "description": "Identifies the name of the attribute that contains the array of order objects."
          },
          "orders": {
            "type": "array",
            "description": "Contains array of order objects.",
            "items": {
              "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of orders."
          }
        },
        "required": [
          "object",
          "data_ref",
          "orders",
          "total"
        ]
      },
      "OrdersUpdateRequestBody": {
        "type": "object",
        "title": "Orders Update Request Body",
        "description": "Request body schema for **PUT** \`/orders/{orderId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderBase"
          }
        ]
      },
      "OrdersUpdateResponseBody": {
        "type": "object",
        "title": "Orders Update Response Body",
        "description": "Response body schema for **PUT** \`/orders/{orderId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculated"
          }
        ]
      },
      "ParameterAsyncActionId": {
        "type": "string",
        "example": "aa_0afb3d009a55814a48"
      },
      "ParameterBoolean": {
        "type": "boolean"
      },
      "ParameterCampaignId": {
        "type": "string",
        "example": "camp_rRsfatlwN7unSeUIJDCYedal"
      },
      "ParameterCampaignType": {
        "type": "string",
        "enum": [
          "PROMOTION",
          "GIFT_VOUCHERS",
          "REFERRAL_PROGRAM",
          "DISCOUNT_COUPONS",
          "LOYALTY_PROGRAM",
          "LUCKY_DRAW"
        ]
      },
      "ParameterCategoryId": {
        "type": "string",
        "example": "cat_0bb81a481615a37b5e"
      },
      "ParameterCode": {
        "type": "string",
        "example": "2CpRCE2c"
      },
      "ParameterCustomerId": {
        "type": "string",
        "example": "cust_nk0N1uNQ1YnupAoJGOgvsODC"
      },
      "ParameterDate": {
        "type": "string",
        "example": "2023-12-22T10:13:06.487Z",
        "format": "date-time"
      },
      "ParameterEarningRuleId": {
        "type": "string",
        "example": "ern_CFuv1O0IDl8Jgph0ojhMu8bH"
      },
      "ParameterExpandListCampaigns": {
        "type": "string",
        "enum": [
          "category"
        ]
      },
      "ParameterExportId": {
        "type": "string",
        "example": "exp_2bYLdY2lQ2886wmYIHyeBWUZ"
      },
      "ParameterFiltersListRedemptions": {
        "type": "object",
        "properties": {
          "voucher_code": {
            "type": "object",
            "description": "Unique voucher code.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "related_object_id": {
            "type": "object",
            "description": "Unique related object ID, i.e. v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "related_object_parent_id": {
            "type": "object",
            "description": "Unique related object parent ID, i.e. camp_22noMlhTADb7Fq2UL3vWu3d1.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "parent_redemption_id": {
            "type": "object",
            "description": "Unique parent redemption ID, i.e. r_0c5952900bcbfd54b6.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "failure_code": {
            "type": "object",
            "description": "Failure code, i.e. quantity_exceeded.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "result": {
            "type": "object",
            "description": "Result, i.e. \`SUCCESS\` or \`FAILURE\`.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "object": {
            "type": "object",
            "description": "Specify which type of object to return, i.e. \`redemption\` or \`redemption_rollback\`.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "customer_id": {
            "type": "object",
            "description": "Unique customer ID, i.e. cust_sehkNIi8Uq2qQuRqSr7xn4Zi.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "campaign_name": {
            "type": "object",
            "description": "Campaign name.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "user_login": {
            "type": "object",
            "description": "User login used to login to Voucherify, i.e. name.lastname@email.com",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          }
        }
      },
      "ParameterInteger": {
        "type": "integer"
      },
      "ParameterLimit": {
        "type": "integer",
        "maximum": 100,
        "minimum": 1
      },
      "ParameterLoyaltyTierId": {
        "type": "string",
        "example": "promo_2EnAik6Jt7dKTOMkRTIgEjZH"
      },
      "ParameterMemberId": {
        "type": "string",
        "example": "MmFAzfDe"
      },
      "ParameterObject": {
        "type": "object"
      },
      "ParameterOrderId": {
        "type": "string",
        "example": "ord_smEh8p1p6W6DgOmeERk092LG"
      },
      "ParameterOrderListAllPromotionStacks": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "name",
          "-name"
        ]
      },
      "ParameterOrderListCampaigns": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListCustomers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "source_id",
          "-source_id"
        ]
      },
      "ParameterOrderListExports": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "status",
          "-status"
        ]
      },
      "ParameterOrderListLoyaltyTiers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListOrders": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListPublications": {
        "type": "string",
        "enum": [
          "id",
          "-id",
          "voucher_code",
          "-voucher_code",
          "tracking_id",
          "-tracking_id",
          "customer_id",
          "-customer_id",
          "created_at",
          "-created_at",
          "channel",
          "-channel"
        ]
      },
      "ParameterOrderListRedemptions": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "id",
          "-id",
          "voucher_code",
          "-voucher_code",
          "tracking_id",
          "-tracking_id",
          "customer_id",
          "-customer_id"
        ]
      },
      "ParameterOrderListValidationRuleAssignments": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at"
        ]
      },
      "ParameterOrderListValidationRules": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "name",
          "-name"
        ]
      },
      "ParameterPage": {
        "type": "integer",
        "maximum": 100
      },
      "ParameterProductCollectionId": {
        "type": "string",
        "example": "pc_41V4DiQQO8YGqj0J2oZD57j4"
      },
      "ParameterProductId": {
        "type": "string",
        "example": "prod_3ttSkdxGuAfcv3"
      },
      "ParameterPromotionStackId": {
        "type": "string",
        "example": "stack_KOIde7AUf08at12lZ1r3OfFL"
      },
      "ParameterPromotionTierId": {
        "type": "string",
        "example": "promo_2EnAik6Jt7dKTOMkRTIgEjZH"
      },
      "ParameterRedemptionId": {
        "type": "string",
        "example": "r_0ba186c4824e4881e1"
      },
      "ParameterResultListPublications": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ]
      },
      "ParameterRewardAssignmentId": {
        "type": "string",
        "example": "rewa_m9hEAu10KsPcLhGXiHG85aY0"
      },
      "ParameterRewardId": {
        "type": "string",
        "example": "rew_2erjvECLs92GYzKbak3QkyTV"
      },
      "ParameterSegmentId": {
        "type": "string",
        "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
      },
      "ParameterSkuId": {
        "type": "string",
        "example": "sku_0b661e41eccd35a8e9"
      },
      "ParameterString": {
        "type": "string"
      },
      "ParameterValidationRuleId": {
        "type": "string",
        "example": "val_TU4de3EP4dlL"
      },
      "ParameterVoucherTypeListPublications": {
        "type": "string",
        "enum": [
          "discount",
          "loyalty",
          "lucky_draw"
        ]
      },
      "ProductCollectionsCreateRequestBody": {
        "title": "Product Collections Create Request Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsCreateStaticRequestBody"
          },
          {
            "$ref": "#/components/schemas/ProductCollectionsCreateDynamicRequestBody"
          }
        ]
      },
      "ProductCollectionsCreateResponseBody": {
        "type": "object",
        "title": "Product Collections Create Response Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsItem"
          }
        ]
      },
      "ProductCollectionsGetResponseBody": {
        "type": "object",
        "title": "Product Collections Get Response Body",
        "description": "Response body schema for **GET** \`/product-collections/{productCollectionId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsItem"
          }
        ]
      },
      "ProductCollectionsListResponseBody": {
        "type": "object",
        "title": "Product Collections List Response Body",
        "description": "Response body schema for **GET** \`/product-collections\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsList"
          }
        ]
      },
      "ProductCollectionsProductsListResponseBody": {
        "type": "object",
        "title": "Product Collections Products List Response Body",
        "description": "Response body schema for **GET** \`/product-collections/{productCollectionId}/products\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsProductsList"
          }
        ]
      },
      "ProductsCreateRequestBody": {
        "type": "object",
        "description": "Request schema for **POST** \`/products\`.",
        "title": "Products Create Request Body",
        "properties": {
          "id": {
            "type": "string",
            "example": "prod_5h0wc453_1",
            "description": "A unique identifier that represents the product and is assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "example": "productSourceID16",
            "description": "Unique product source ID."
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          }
        }
      },
      "ProductsCreateResponseBody": {
        "type": "object",
        "title": "Products Create Response Body",
        "description": "Response body schema for **POST** \`/products\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "ProductsGetResponseBody": {
        "type": "object",
        "title": "Products Get Response Body",
        "description": "Response body schema for **GET** \`/products/{productId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "ProductsImportCSVRequestBody": {
        "type": "object",
        "title": "Products Import CSV Request Body",
        "description": "Response body schema for **POST** \`/products/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "ProductsImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Products Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/products/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ProductsListResponseBody": {
        "type": "object",
        "title": "Products List Response Body",
        "description": "Response body schema for **GET** \`/products\`.",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about products in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of product objects.",
            "default": "products"
          },
          "products": {
            "type": "array",
            "description": "Contains array of product objects.",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of product objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "products",
          "total"
        ]
      },
      "ProductsMetadataUpdateInBulkRequestBody": {
        "type": "object",
        "title": "Products Metadata Update In Bulk Request Body",
        "description": "Request schema for **POST** \`/products/metadata/async\`.",
        "properties": {
          "source_ids": {
            "type": "array",
            "description": "Array of unique product source IDs.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          }
        },
        "required": [
          "source_ids",
          "metadata"
        ]
      },
      "ProductsMetadataUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Products Metadata Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/products/metadata/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ProductsSkusCreateRequestBody": {
        "title": "Products Skus Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** \`/products/{productId}/skus",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique SKU ID.",
            "example": "sku_0c0c0012a9029bccef"
          },
          "source_id": {
            "type": "string",
            "example": "sku_source_id_4",
            "description": "A unique SKU identifier from your inventory system."
          },
          "sku": {
            "type": "string",
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "currency": {
            "type": "string",
            "description": "SKU price currency.",
            "example": "USD"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "ProductsSkusCreateResponseBody": {
        "type": "object",
        "title": "Products Skus Create Response Body",
        "description": "Response body schema for **PUT** \`/products/{productId}/skus\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "ProductsSkusListResponseBody": {
        "type": "object",
        "title": "Products Skus List Response Body",
        "description": "Response body schema for **GET** \`/products/{productId}/skus\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SkusList"
          }
        ]
      },
      "ProductsSkusUpdateRequestBody": {
        "title": "Products Skus Update Request Body",
        "type": "object",
        "description": "Request body schema for **PUT** \`/products/{productId}/skus/{skuId}\`.",
        "properties": {
          "sku": {
            "type": "string",
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "currency": {
            "type": "string",
            "description": "SKU price currency."
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "ProductsSkusUpdateResponseBody": {
        "type": "object",
        "title": "Products Skus Update Response Body",
        "description": "Response body schema for **PUT** \`/products/{productId}/skus/{skuId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "ProductsUpdateInBulkRequestBody": {
        "type": "object",
        "description": "Request schema for **POST** \`/products/bulk/async\`.",
        "title": "Products Update In Bulk Request Body",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "Unique product source ID from your inventory system.",
            "example": "test_prod_id_1"
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          }
        },
        "required": [
          "source_id"
        ]
      },
      "ProductsUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Products Update In Bulk Response Body",
        "description": "Response body schema for **POST** \`/products/bulk/async\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ProductsUpdateRequestBody": {
        "type": "object",
        "description": "Request schema for **PUT** \`/products\`.",
        "title": "Products Update Request Body",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          }
        }
      },
      "ProductsUpdateResponseBody": {
        "type": "object",
        "title": "Products Update Response Body",
        "description": "Response body schema for **PUT** \`/products/{productId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "PromotionsStacksCreateRequestBody": {
        "title": "Promotions Stacks Create Request Body",
        "description": "Request body schema for **POST** \`/promotions/{campaignId}/stacks\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "category_id": {
                "type": "string",
                "description": "Promotion stack category ID."
              }
            }
          }
        ]
      },
      "PromotionsStacksCreateResponseBody": {
        "title": "Promotions Stacks Create Response Body",
        "description": "Response body schema for **POST** \`/promotions/{campaignId}/stacks\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON."
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/PromotionStackBase"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "PromotionsStacksGetResponseBody": {
        "type": "object",
        "title": "Promotions Stacks Get Response Body",
        "description": "Response body schema for **GET** \`/promotions/{campaignId}/stacks/{stackId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStack"
          }
        ]
      },
      "PromotionsStacksListResponseBody": {
        "title": "Promotions Stacks List Response Body",
        "description": "Response body schema for **GET** \`/promotions/stacks\` and for **GET** \`/promotions/{campaignId}/stacks\`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about promotion stacks in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of promotion stack objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of promotion stack objects.",
            "items": {
              "$ref": "#/components/schemas/PromotionStack"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of promotion stacks."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "PromotionsStacksUpdateRequestBody": {
        "description": "Request Body schema for **put** \`/promotions/{campaignId}/stacks/{stackId}\`.",
        "title": "Promotions Stacks Update Request Body",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Promotion stack name."
          },
          "tiers": {
            "type": "object",
            "description": "Contains the tier configuration.",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Contains the list of tiers in a pre-defined sequence.",
                "items": {
                  "type": "string"
                }
              },
              "hierarchy_mode": {
                "type": "string",
                "enum": [
                  "MANUAL"
                ],
                "description": "Category hierarchy."
              }
            }
          },
          "category_id": {
            "type": "string",
            "description": "Promotion stack category ID."
          }
        }
      },
      "PromotionsStacksUpdateResponseBody": {
        "title": "Promotions Stacks Update Response Body",
        "description": "Response body schema for **PUT** \`/promotions/{campaignId}/stacks/{stackId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was updated in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON. "
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/PromotionStackBase"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "updated_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "PromotionsTiersDisableResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Disable Response Body",
        "description": "Response body schema for **POST** \`/promotions/tiers/{promotionTierId}/disable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersEnableResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Enable Response Body",
        "description": "Response body schema for **POST** \`/promotions/tiers/{promotionTierId}/enable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersGetResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Get Response Body",
        "description": "Response body schema for **GET** \`/promotions/tiers/{promotionTierId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersListResponseBody": {
        "type": "object",
        "title": "Promotions Tiers List Response Body",
        "description": "Response body schema for **GET** \`/promotions/{campaignId}/tiers\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTiersList"
          }
        ]
      },
      "PublicationsCreateRequestBody": {
        "title": "Publications Create Request Body",
        "description": "Request body schema for **POST** \`/publications\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreatePublicationWithSpecificVoucher"
          },
          {
            "$ref": "#/components/schemas/CreatePublicationWithCampaign"
          }
        ]
      },
      "PublicationsCreateResponseBody": {
        "title": "Publications Create Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/publication\` and **GET** \`/publications/create\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateVoucherResponseBody"
          },
          {
            "$ref": "#/components/schemas/PublicationsCreateVouchersResponseBody"
          }
        ]
      },
      "PublicationsListResponseBody": {
        "type": "object",
        "description": "Response body schema for listing publications using **GET** \`/publications\`.",
        "title": "Publications List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about publications in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "publications",
            "description": "Identifies the name of the attribute that contains the array of publications."
          },
          "publications": {
            "type": "array",
            "description": "Contains array of publication objects, voucher object will be simplified.",
            "items": {
              "description": "Response schema model for publishing vouchers to a specific customer.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ListPublicationsItemValidSingleVoucher"
                },
                {
                  "$ref": "#/components/schemas/ListPublicationsItemValidMultipleVouchers"
                },
                {
                  "$ref": "#/components/schemas/ListPublicationsItemInvalid"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of publications."
          }
        },
        "required": [
          "object",
          "data_ref",
          "publications",
          "total"
        ]
      },
      "QualificationsCheckEligibilityRequestBody": {
        "type": "object",
        "title": "Qualifications Check Eligibility Request Body",
        "description": "Request body schema for **POST** \`/qualifications\`.",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "mode": {
            "type": "string",
            "description": "Defines which resources Voucherify will use.\\nThe \`ADVANCED\` mode is available after purchase only.",
            "enum": [
              "BASIC",
              "ADVANCED"
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "scenario": {
            "type": "string",
            "description": "Defines the scenario Voucherify should consider during the qualification process.\\n\\n- \`ALL\` - Scenario that returns all redeemables available for the customer in one API request. This scenario is used by default when no value is selected.\\n- \`CUSTOMER_WALLET\` - returns vouchers applicable to the customer’s cart based on the vouchers assigned to the customer’s profile.\\n- \`AUDIENCE_ONLY\` - returns all vouchers, promotion tiers, and campaigns available to the customer. Voucherify validates the rules based on the customer profile only.\\n- \`PRODUCTS\` - returns all promotions available for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT\` - returns all promotions available for products when a discount is defined as applicable to specific item(s).\\n- \`PROMOTION_STACKS\` - returns the applicable promotion stacks.\\n- \`PRODUCTS_BY_CUSTOMER\` - returns all promotions available for a customer for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\\n- \`PRODUCTS_DISCOUNT_BY_CUSTOMER\` - returns all promotions available for a customer for products when a discount is defined as applicable to specific item(s).",
            "enum": [
              "ALL",
              "CUSTOMER_WALLET",
              "AUDIENCE_ONLY",
              "PRODUCTS",
              "PRODUCTS_DISCOUNT",
              "PROMOTION_STACKS",
              "PRODUCTS_BY_CUSTOMER",
              "PRODUCTS_DISCOUNT_BY_CUSTOMER"
            ]
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The maximum number of redeemables to be returned in the API request. The actual number of returned redeemables will be determined by the API. The default value is set to 5",
                "maximum": 100
              },
              "starting_after": {
                "type": "string",
                "nullable": true,
                "example": "2021-09-08T13:52:18.227Z",
                "format": "date-time",
                "description": "Cursor used for paging."
              },
              "filters": {
                "type": "object",
                "additionalProperties": false,
                "description": "A set of filters to return only a specific category or type of redeemable.",
                "properties": {
                  "junction": {
                    "$ref": "#/components/schemas/Junction"
                  },
                  "category_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "campaign_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_id": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "resource_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "voucher_type": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  },
                  "code": {
                    "$ref": "#/components/schemas/QualificationsFieldConditions"
                  }
                }
              },
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"redeemable\\"] | - Returns the redeemables' metadata. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |\\n| [\\"validation_rules\\"] | - Returns an expanded \`validation_rules\` object, showing details about the validation rules. |",
                "items": {
                  "type": "string",
                  "enum": [
                    "redeemable",
                    "category",
                    "validation_rules"
                  ]
                }
              },
              "sorting_rule": {
                "type": "string",
                "description": "Is used to determine the order in which data is displayed in the result array. \\n\\n - \`DEFAULT\` - Sorting descending by \`created_at\` \\n - \`BEST_DEAL\` - Sorting descending by \`total_applied_discount_amount\` \\n - \`LEAST_DEAL\` - Sorting ascending by \`total_applied_discount_amount\`",
                "enum": [
                  "BEST_DEAL",
                  "LEAST_DEAL",
                  "DEFAULT"
                ]
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against redeemables requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "QualificationsCheckEligibilityResponseBody": {
        "title": "Qualifications Check Eligibility Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/qualifications\`.",
        "properties": {
          "redeemables": {
            "$ref": "#/components/schemas/QualificationsRedeemables"
          },
          "tracking_id": {
            "type": "string",
            "description": "This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "stacking_rules": {
            "$ref": "#/components/schemas/QualificationsStackingRules"
          }
        }
      },
      "RedemptionsGetResponseBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Redemption"
          },
          {
            "$ref": "#/components/schemas/RedemptionRollback"
          }
        ],
        "title": "Get Redemption Response Body",
        "description": "Response body schema for **GET** \`/redemptions/{redemptionId}"
      },
      "RedemptionsListResponseBody": {
        "title": "Redemptions List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/redemptions\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about redemptions in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "redemptions",
            "description": "Identifies the name of the attribute that contains the array of redemption objects."
          },
          "redemptions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Redemption"
                },
                {
                  "$ref": "#/components/schemas/RedemptionRollback"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of redemptions."
          }
        },
        "required": [
          "object",
          "data_ref",
          "redemptions",
          "total"
        ]
      },
      "RedemptionsRedeemRequestBody": {
        "type": "object",
        "title": "Redemptions Redeem Request Body",
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "Expand array lets you configure params included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"redeemable\\", \\"redemption\\", \\"category\\"] | - Returns each discount type's \`metadata\` in each child redemption object.<br>- Returns redemption object \`metadata\`.<br>- Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "RedemptionsRedeemResponseBody": {
        "type": "object",
        "title": "Redemptions Redeem Response Body",
        "description": "Response body schema for **POST** \`/redemptions\`.",
        "properties": {
          "redemptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Redemption"
            }
          },
          "parent_redemption": {
            "$ref": "#/components/schemas/Redemption"
          },
          "order": {
            "description": "Contains the order details associated with the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculated"
              }
            ]
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "RedemptionsRollbackCreateRequestBody": {
        "title": "Redemptions Rollback Create Request Body",
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the rollback."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to update **redemption** metadata."
          }
        },
        "description": "Request body schema for **POST** \`/redemptions/{redemptionId}/rollback\`."
      },
      "RedemptionsRollbackCreateResponseBody": {
        "title": "Redemptions Rollback Create Response Body",
        "description": "Response body schema for **POST** \`/redemptions/{redemptionId}/rollback\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedemptionRollback"
          }
        ]
      },
      "RedemptionsRollbacksCreateRequestBody": {
        "title": "Redemptions Rollbacks Create Request Body",
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the rollback."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to update **redemption** metadata."
          }
        },
        "description": "Request body schema for **POST** \`/redemptions/{parentRedemptionId}/rollbacks\`."
      },
      "RedemptionsRollbacksCreateResponseBody": {
        "title": "Redemptions Rollbacks Create Response Body",
        "description": "Response body schema for POST \`/redemptions/{parentRedemptionID}/rollbacks\`.",
        "type": "object",
        "properties": {
          "rollbacks": {
            "type": "array",
            "description": "Contains the rollback redemption objects of the particular incentives.",
            "items": {
              "$ref": "#/components/schemas/RedemptionRollback"
            }
          },
          "parent_rollback": {
            "$ref": "#/components/schemas/RedemptionRollback"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
          }
        }
      },
      "RewardsAssignmentsCreateRequestBody": {
        "description": "Request body schema for **POST** \`/rewards/{rewardID}/assignments\`.",
        "title": "Rewards Assignments Create Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RewardAssignmentsCreateDigitalOrMaterialRewardRequestBody"
          },
          {
            "$ref": "#/components/schemas/RewardAssignmentsCreateCoinRewardRequestBody"
          }
        ]
      },
      "RewardsAssignmentsCreateResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Create Response Body",
        "description": "Response body schema for **GET** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "RewardsAssignmentsGetResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Get Response Body",
        "description": "Response body schema for **GET** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "RewardsAssignmentsListResponseBody": {
        "type": "object",
        "description": "Response body schema for **GET** \`/rewards/{rewardID}/assignments\`.",
        "title": "Rewards Assignments List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about reward assignments in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of reward assignments.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardAssignment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of reward assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "RewardsAssignmentsUpdateRequestBody": {
        "title": "Rewards Assignments Update Request Body",
        "type": "object",
        "description": "Request body schema for **PUT** \`/loyalties/{campaignId}/rewards/{assignmentId}\` and **PUT** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "properties": {
          "parameters": {
            "type": "object",
            "description": "An object that defines the price of the reward in loyalty points.",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Stores the points parameter.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "Defines how many points are required to obtain the reward."
                  }
                }
              }
            }
          }
        }
      },
      "RewardsAssignmentsUpdateResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Update Response Body",
        "description": "Response body schema for **GET** \`/rewards/{rewardId}/assignments/{assignmentId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "SkusGetResponseBody": {
        "type": "object",
        "title": "Skus Get Response Body",
        "description": "Response body schema for **GET** \`/skus/{skuId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "SkusImportCSVRequestBody": {
        "type": "object",
        "title": "Skus Import Csv Request Body",
        "description": "Response body schema for **POST** \`/skus/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "SkusImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Skus Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/skus/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ValidationRulesAssignmentsListResponseBody": {
        "type": "object",
        "title": "Validation Rules Assignments List Response Body",
        "description": "Response body for **GET** \`/validation-rules-assignments\` and **GET** \`/validation-rules/{validationRuleId}/assignments\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleAssignmentsList"
          }
        ]
      },
      "ValidationRulesCreateRequestBody": {
        "title": "Validation Rules Create Request Body",
        "description": "Request body schema for **POST** \`/validation-rules\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          },
          {
            "type": "object",
            "required": [
              "name"
            ]
          }
        ]
      },
      "ValidationRulesCreateResponseBody": {
        "type": "object",
        "title": "Validation Rules Create Response Body",
        "description": "Response body schema for **POST** \`/validation-rules\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationRulesGetResponseBody": {
        "type": "object",
        "title": "Validation Rules Get Response Body",
        "description": "Response body schema for **GET** \`/validation-rules/{validationRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationRulesListResponseBody": {
        "description": "Response body schema for **GET** \`/validation-rules\`.",
        "type": "object",
        "title": "Validation Rules List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about validation rules.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of validation rules.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "An array of validation rules.",
            "items": {
              "$ref": "#/components/schemas/ValidationRule"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of validation rules in the project."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRulesUpdateRequestBody": {
        "title": "Validation Rules Update Request Body",
        "description": "Response body schema for **PUT** \`/validation-rules/{validationRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          }
        ]
      },
      "ValidationRulesUpdateResponseBody": {
        "type": "object",
        "title": "Validation Rules Update Response Body",
        "description": "Response body schema for **PUT** \`/validation-rules/{validationRuleId}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationsValidateRequestBody": {
        "title": "Validations Validate Request Body",
        "description": "Response body schema for **POST** \`/validations\`.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \\n\\n| **Expand Option** | **Response Body** |\\n|:---|:---|\\n| [\\"order\\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\\n| [\\"redeemable\\"] | Expands redeemable objects by including \`metadata\` for each discount type. |\\n| [\\"order\\", \\"redeemable\\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes \`metadata\` for each discount type. |\\n| [\\"category\\"] | - Returns an expanded \`categories\` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ValidationsValidateResponseBody": {
        "title": "Validations Validate Response Body",
        "description": "Response body schema for POST \`/validations\`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidationsValidateAllResponseBody"
          },
          {
            "$ref": "#/components/schemas/ValidationsValidatePartialResponseBody"
          }
        ]
      },
      "VouchersBalanceUpdateRequestBody": {
        "title": "Vouchers Balance Update Request Body",
        "type": "object",
        "description": "Request body schema for \`vouchers/{code}/balance\`.",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amount to be added to or removed from the current balance on the gift card or loyalty card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000. To remove balance, simply add a minus sign before the value, i.e. to remove $20, use -2000."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          },
          "reason": {
            "type": "string",
            "description": "Reason why the transaction occurred."
          }
        },
        "required": [
          "amount"
        ]
      },
      "VouchersBalanceUpdateResponseBody": {
        "description": "Response body schema for \`vouchers/{code}/balance.\`",
        "type": "object",
        "title": "Vouchers Balance Update Response Body",
        "required": [
          "amount",
          "total",
          "balance",
          "type",
          "object",
          "related_object",
          "operation_type"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amount added (positive integer) or subtracted (negative integer) to the current balance on the gift card or loyalty card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "total": {
            "type": "integer",
            "description": "Total income incurred over the lifespan of the gift card or loyalty card."
          },
          "balance": {
            "type": "integer",
            "description": "The balance after adding or subtracting a specified amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "type": {
            "type": "string",
            "description": "The type of voucher being modified.",
            "enum": [
              "gift_voucher",
              "loyalty_card"
            ]
          },
          "operation_type": {
            "type": "string",
            "default": "MANUAL",
            "enum": [
              "MANUAL"
            ]
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is \`balance\`.",
            "default": "balance",
            "enum": [
              "balance"
            ]
          },
          "related_object": {
            "type": "object",
            "description": "Defines the resource that is being modified with the values that are returned in the balance object.",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The object being modified, i.e. \`voucher\`.",
                "default": "voucher",
                "enum": [
                  "voucher"
                ]
              },
              "id": {
                "type": "string",
                "description": "Identifies the voucher that is being modified, this is the ID that was assigned by the Voucherify API.",
                "example": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
              }
            }
          }
        }
      },
      "VouchersDisableResponseBody": {
        "type": "object",
        "title": "Vouchers Disable Response Body",
        "description": "Response body schema for **POST** \`/vouchers/{code}/disable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersEnableResponseBody": {
        "type": "object",
        "title": "Vouchers Enable Response Body",
        "description": "Response body schema for **POST** \`/vouchers/{code}/enable\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersGetResponseBody": {
        "type": "object",
        "title": "Vouchers Get Response Body",
        "description": "Response body schema for **GET** \`/vouchers/{code}\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersImportCSVRequestBody": {
        "type": "object",
        "title": "Vouchers Import CSV Request Body",
        "description": "Request body schema for **POST** \`/vouchers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "VouchersImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Vouchers Import Csv Create Response Body",
        "description": "Response body schema for **POST** \`/vouchers/importCSV\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "VouchersRedemptionGetResponseBody": {
        "type": "object",
        "title": "Vouchers Redemption Get Response Body",
        "description": "Response body schema for **GET** \`/vouchers/{code}/redemption\`.",
        "properties": {
          "quantity": {
            "type": "integer",
            "nullable": true,
            "description": "The maximum number of times a voucher can be redeemed."
          },
          "redeemed_quantity": {
            "type": "integer",
            "description": "The number of times the voucher was redeemed successfully."
          },
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about redemptions in a dictionary."
          },
          "url": {
            "type": "string",
            "example": "/v1/vouchers/PROMO-CODE2/redemptions?page=1&limit=10",
            "description": "URL"
          },
          "data_ref": {
            "type": "string",
            "default": "redemption_entries",
            "description": "Identifies the name of the attribute that contains the array of \`redemption_entries\`."
          },
          "total": {
            "type": "integer",
            "description": "Total number of redemption objects."
          },
          "redemption_entries": {
            "type": "array",
            "description": "Contains the array of successful and failed redemption objects.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Redemption"
                },
                {
                  "$ref": "#/components/schemas/RedemptionRollback"
                }
              ]
            }
          }
        },
        "required": [
          "quantity",
          "redeemed_quantity",
          "object",
          "url",
          "data_ref",
          "total",
          "redemption_entries"
        ]
      },
      "VouchersTransactionsExportCreateRequestBody": {
        "description": "Request body schema for **POST** \`/vouchers/transactions/export\`.",
        "type": "object",
        "title": "Vouchers Transactions Export Create Request Body",
        "properties": {
          "parameters": {
            "description": "Contains the parameters that define the data to be exported.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VoucherTransactionsExportParameters"
              }
            ]
          }
        }
      },
      "VouchersTransactionsExportCreateResponseBody": {
        "type": "object",
        "title": "Vouchers Transactions Export Create Response Body",
        "description": "Response body schema for **POST** \`/vouchers/{code}/transactions/export\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VoucherTransactionsExport"
          }
        ]
      },
      "VouchersTransactionsListResponseBody": {
        "title": "Vouchers Transactions List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** \`/vouchers/{code}/transactions\`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of transaction objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            },
            "description": "A dictionary that contains an array of transactions. Each entry in the array is a separate transaction object."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the \`has_more\` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "has_more"
        ]
      },
      "ParameterCreatedBeforeAfter": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time before the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "after": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time after the voucher was created in ISO 8601 format.",
            "format": "date-time"
          }
        }
      },
      "ParameterUpdatedBeforeAfter": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time before the voucher was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "after": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time after the voucher was updated in ISO 8601 format.",
            "format": "date-time"
          }
        }
      },
      "ParameterOrigin": {
        "type": "string",
        "format": "hostname"
      },
      "ParameterOrder": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "type",
          "-type",
          "code",
          "-code",
          "campaign",
          "-campaign",
          "category",
          "-category"
        ]
      },
      "AsyncActions": {
        "type": "object",
        "title": "Asynchronous Actions",
        "description": "Response to requests that are processed asynchronously.",
        "additionalProperties": false,
        "properties": {
          "async_action_id": {
            "type": "string",
            "example": "aa_0a875d56c805df6601",
            "description": "The ID of the scheduled asynchronous action."
          }
        },
        "required": [
          "async_action_id"
        ]
      },
      "Campaign": {
        "title": "Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignBase"
          },
          {
            "title": "Campaign Additional Data",
            "type": "object",
            "properties": {
              "promotion": {
                "$ref": "#/components/schemas/PromotionTiersList"
              },
              "validation_rules_assignments": {
                "$ref": "#/components/schemas/ValidationRulesAssignmentsList"
              }
            }
          }
        ]
      },
      "CampaignBase": {
        "type": "object",
        "title": "Campaign Base",
        "description": "This is an object representing a campaign.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_f7fBbQxUuTN7dI7tGOo5XMDA"
          },
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "campaign_type": {
            "type": "string",
            "enum": [
              "LOYALTY_PROGRAM",
              "GIFT_VOUCHERS",
              "DISCOUNT_COUPONS",
              "PROMOTION",
              "REFERRAL_PROGRAM",
              "LUCKY_DRAW"
            ],
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \\n\\n- \`AUTO_UPDATE\`: the campaign is dynamic, i.e. vouchers will generate based on set criteria    \\n-  \`STATIC\`: vouchers need to be manually published",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "voucher": {
            "$ref": "#/components/schemas/CampaignVoucher"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a \`duration\` of \`P24D\` will be valid for a duration of 24 days."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the campaign on or off. You can disable a campaign even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* campaign\\n- \`false\` indicates an *inactive* campaign"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-01T08:00:50.038Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-20T09:18:19.623Z",
            "description": "Timestamp representing the date and time when the voucher was updated in ISO 8601 format."
          },
          "category": {
            "type": "string",
            "description": "Unique category name."
          },
          "creation_status": {
            "type": "string",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ],
            "description": "Indicates the status of the campaign creation."
          },
          "vouchers_generation_status": {
            "type": "string",
            "description": "Indicates the status of the campaign's vouchers.",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ]
          },
          "protected": {
            "type": "boolean",
            "description": "Indicates whether the resource can be deleted."
          },
          "category_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique category ID that this campaign belongs to.",
            "example": "cat_0b688929a2476386a7"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "object": {
            "type": "string",
            "default": "campaign",
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "loyalty_tiers_expiration": {
            "$ref": "#/components/schemas/LoyaltyTiersExpirationAll"
          }
        },
        "required": [
          "id",
          "name",
          "campaign_type",
          "type",
          "auto_join",
          "join_once",
          "use_voucher_metadata_schema",
          "created_at",
          "creation_status",
          "vouchers_generation_status",
          "protected",
          "category_id",
          "categories",
          "object",
          "metadata"
        ]
      },
      "CampaignsCreateDiscountCouponsCampaign": {
        "title": "Create Discount Coupons Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Discount Coupons Campaign",
            "description": "Body schema for creating a campaign of discount coupons type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/DiscountCouponsCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreateGiftCampaign": {
        "title": "Create Gift Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Gift Campaign",
            "description": "Body schema for creating a campaign of gift type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/GiftCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreateGiveawayCampaign": {
        "title": "Create Giveaway Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Giveaway Campaign",
            "description": "Body schema for creating a campaign of giveaway type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/GiveawayCampaignVoucher"
              },
              "lucky_draw": {
                "$ref": "#/components/schemas/LuckyDraw"
              }
            }
          }
        ]
      },
      "CampaignsCreateLoyaltyCampaign": {
        "title": "Create Loyalty Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Loyalty Campaign",
            "description": "Body schema for creating a campaign of loyalty type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/CampaignLoyaltyVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreatePromotionCampaign": {
        "title": "Create Promotion Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Promotion Campaign",
            "description": "Body schema for creating a campaign of promotion type using **POST** \`/campaigns\`.",
            "properties": {
              "promotion": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PromotionTierCreateParams"
                }
              }
            }
          }
        ]
      },
      "CampaignsCreateReferralCampaign": {
        "title": "Create Referral Program",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Referral Program",
            "description": "Body schema for creating a campaign of referral type using **POST** \`/campaigns\`.",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/ReferralCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsImportVoucherItem": {
        "type": "object",
        "title": "Import Vouchers to Campaign",
        "description": "Import Vouchers to Campaign",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique custom voucher code."
          },
          "type": {
            "type": "string",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER",
              "GIFT_VOUCHER",
              "LOYALTY_CARD",
              "LUCKY_DRAW_CODE"
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* voucher\\n- \`false\` indicates an *inactive* voucher"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "discount": {
            "description": "Defines the voucher discount type and details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Discount"
              }
            ]
          },
          "gift": {
            "description": "Defines the voucher gift details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the voucher loyalty card details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsImportVoucherLoyaltyCard"
              }
            ]
          }
        },
        "required": [
          "code"
        ]
      },
      "CampaignsUpdateDiscountCouponsCampaign": {
        "type": "object",
        "title": "Update Discount Coupons Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Discount Coupons Campaign",
            "description": "Body schema for update a campaign of discount coupons type using **PUT** \`/campaigns\`.",
            "properties": {
              "discount": {
                "description": "Defines the voucher discount type and details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Discount"
                  }
                ]
              }
            }
          }
        ]
      },
      "CampaignsUpdateGiftCampaign": {
        "type": "object",
        "title": "Update Gift Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Gift Campaign",
            "description": "Body schema for update a campaign of give type using **PUT** \`/campaigns\`.",
            "properties": {
              "gift": {
                "description": "Defines the voucher gift details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Gift"
                  }
                ]
              }
            }
          }
        ]
      },
      "CampaignsUpdateGiveawayCampaign": {
        "type": "object",
        "title": "Update Giveaway Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "title": "Properties For Giveaway Campaign",
            "description": "Body schema for update a campaign of giveaway type using **PUT** \`/campaigns\`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LuckyDraw"
              }
            ]
          }
        ]
      },
      "CampaignsUpdateLoyaltyCampaign": {
        "type": "object",
        "title": "Update Loyalty Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Loyalty Campaign",
            "description": "Body schema for update a campaign of loyalty type using **PUT** \`/campaigns\`.",
            "properties": {
              "loyalty_tiers_expiration": {
                "$ref": "#/components/schemas/LoyaltyTiersExpirationAll"
              },
              "options": {
                "type": "object",
                "properties": {
                  "recalculate_tiers": {
                    "type": "boolean",
                    "description": "Determine if tiers should be recalculated or no."
                  }
                }
              }
            }
          }
        ]
      },
      "CampaignsUpdatePromotionCampaign": {
        "type": "object",
        "title": "Update Promotion Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateBase"
          }
        ]
      },
      "CampaignsUpdateReferralCampaign": {
        "type": "object",
        "title": "Update Referral Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Referral Campaign",
            "description": "Body schema for update a campaign of referral type using **PUT** \`/campaigns\`.",
            "properties": {
              "discount": {
                "description": "Defines the voucher discount type and details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Discount"
                  }
                ]
              },
              "referral_program": {
                "$ref": "#/components/schemas/ReferralProgram"
              }
            }
          }
        ]
      },
      "Category": {
        "title": "Category",
        "description": "This is an object representing a category.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the category."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-08-16T10:52:08.094Z",
            "description": "Timestamp representing the date and time when the category was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "stacking_rules_type": {
            "type": "string",
            "description": "The type of the stacking rule eligibility.",
            "enum": [
              "JOINT",
              "EXCLUSIVE"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object"
        ]
      },
      "CodeConfig": {
        "title": "Code Config",
        "type": "object",
        "description": "Schema containing information about config used for voucher. Defines code's pattern (prefix, suffix, length, charset, etc).",
        "properties": {
          "length": {
            "type": "string",
            "description": "Number of characters in a generated code (excluding prefix and postfix)."
          },
          "charset": {
            "type": "string",
            "description": "Characters that can appear in the code.  \\n\\nExamples:\\n\\n- Alphanumeric: \`0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\` \\n- Alphabetic: \`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\` \\n- Alphabetic Lowercase: \`abcdefghijklmnopqrstuvwxyz\` \\n- Alphabetic Uppercase: \`ABCDEFGHIJKLMNOPQRSTUVWXYZ\` \\n- Numbers: \`0123456789\`  \\n- Custom: a custom character set"
          },
          "prefix": {
            "type": "string",
            "description": "A text appended before the code."
          },
          "postfix": {
            "type": "string",
            "description": "A text appended after the code."
          },
          "pattern": {
            "type": "string",
            "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides \`length\`."
          },
          "initial_count": {
            "type": "integer",
            "description": "The initial count"
          }
        }
      },
      "CreatePublicationWithCampaign": {
        "title": "Create Publication With Campaign",
        "type": "object",
        "description": "Create publication with campaign.",
        "allOf": [
          {
            "title": "Campaign",
            "type": "object",
            "properties": {
              "campaign": {
                "$ref": "#/components/schemas/CreatePublicationCampaign"
              }
            },
            "required": [
              "campaign"
            ]
          },
          {
            "$ref": "#/components/schemas/CreatePublicationBase"
          }
        ]
      },
      "CreatePublicationWithSpecificVoucher": {
        "title": "Create Publication With Specific Voucher",
        "type": "object",
        "description": "Create publication with specific voucher.",
        "allOf": [
          {
            "title": "Voucher code",
            "type": "object",
            "properties": {
              "voucher": {
                "description": "Code of voucher being published.",
                "type": "string"
              }
            },
            "required": [
              "voucher"
            ]
          },
          {
            "$ref": "#/components/schemas/CreatePublicationBase"
          }
        ]
      },
      "CustomerActivity": {
        "title": "Customer Activity",
        "type": "object",
        "description": "This is an object representing customer activity.  \\n\\nThis is a general object which presents moments from customers' activity. There are all types of different events that customers perform during their journey once they participate in Promotions. Events describe moments when customers redeem coupons and earn points or rewards. The list of all types of activities is listed below.\\n\\nThe details describing the activity are collected in a property named \`data\`. In this object, software integrators will find all further information explaining the event context.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique event ID, assigned by Voucherify.",
            "example": "evcus_0c150c51730c6b60b1"
          },
          "type": {
            "type": "string",
            "description": "Event type.",
            "enum": [
              "customer.confirmed",
              "customer.created",
              "customer.updated",
              "customer.deleted",
              "customer.referred",
              "customer.custom_event",
              "customer.segment.entered",
              "customer.segment.left",
              "customer.sms.sent",
              "customer.sms.recovered",
              "customer.sms.failed",
              "customer.email.sent",
              "customer.email.recovered",
              "customer.email.failed",
              "customer.activecampaign.sent",
              "customer.activecampaign.recovered",
              "customer.activecampaign.failed",
              "customer.braze.sent",
              "customer.braze.recovered",
              "customer.braze.failed",
              "customer.mailchimp.sent",
              "customer.mailchimp.recovered",
              "customer.mailchimp.failed",
              "customer.intercom.sent",
              "customer.intercom.recovered",
              "customer.intercom.failed",
              "customer.shopify.sent",
              "customer.shopify.recovered",
              "customer.shopify.failed",
              "customer.klaviyo.sent",
              "customer.klaviyo.recovered",
              "customer.klaviyo.failed",
              "customer.batch.sent",
              "customer.batch.recovered",
              "customer.batch.failed",
              "customer.rewarded",
              "customer.rewarded.loyalty_points",
              "customer.voucher.gift.balance_added",
              "customer.voucher.loyalty_card.points_added",
              "customer.voucher.loyalty_card.points_transferred",
              "customer.voucher.loyalty_card.points_expired",
              "customer.voucher.deleted",
              "customer.publication.succeeded",
              "customer.publication.failed",
              "customer.validation.succeeded",
              "customer.validation.failed",
              "customer.redemption.failed",
              "customer.redemption.succeeded",
              "customer.redemption.rollback.failed",
              "customer.redemption.rollback.succeeded",
              "customer.consents.given",
              "customer.consents.revoked",
              "customer.order.canceled",
              "customer.order.created",
              "customer.order.fulfilled",
              "customer.order.paid",
              "customer.order.processing",
              "customer.order.updated",
              "customer.reward_redemptions.created",
              "customer.reward_redemptions.pending",
              "customer.reward_redemptions.completed",
              "customer.reward_redemptions.rolledback",
              "customer.loyalty.updated",
              "customer.loyalty.tier.upgraded",
              "customer.loyalty.tier.downgraded",
              "customer.loyalty.tier.prolonged",
              "customer.loyalty.tier.expiration.changed",
              "customer.loyalty.tier.joined",
              "customer.loyalty.tier.left"
            ]
          },
          "data": {
            "type": "array",
            "description": "Contains details about the event. The objects that are returned in the data attribute differ based on the context of the event type.",
            "items": {
              "$ref": "#/components/schemas/CustomerActivityData"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the customer activity occurred in ISO 8601 format.",
            "example": "2022-08-30T09:14:07.660Z",
            "format": "date-time"
          }
        }
      },
      "CustomerBase": {
        "title": "Customer Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone number. This parameter is mandatory when you try to send out codes to customers via an SMS channel."
          },
          "birthday": {
            "type": "string",
            "description": "*Deprecated* Customer's birthdate; format YYYY-MM-DD.",
            "format": "date"
          },
          "birthdate": {
            "type": "string",
            "description": "Customer's birthdate; format YYYY-MM-DD.",
            "format": "date"
          },
          "address": {
            "type": "object",
            "nullable": true,
            "description": "Customer's address.",
            "properties": {
              "city": {
                "type": "string",
                "description": "City"
              },
              "state": {
                "type": "string",
                "description": "State"
              },
              "line_1": {
                "type": "string",
                "description": "First line of address."
              },
              "line_2": {
                "type": "string",
                "description": "Second line of address."
              },
              "country": {
                "type": "string",
                "description": "Country."
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          }
        }
      },
      "CustomerSegmentsList": {
        "type": "object",
        "title": "Customer Segments List",
        "description": "List of customer's segments",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about customer segments.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of segment IDs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of segment IDs and names.",
            "items": {
              "$ref": "#/components/schemas/SimpleSegment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of segments the customer belongs to."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CustomerWithSummaryLoyaltyReferrals": {
        "title": "Customer With Summary Loyalty Referrals",
        "allOf": [
          {
            "type": "object",
            "title": "Customer Response Data",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer that will be linked to redemption in this request."
              },
              "source_id": {
                "type": "string",
                "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
              },
              "summary": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerSummary"
                  }
                ]
              },
              "loyalty": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerLoyalty"
                  }
                ]
              },
              "referrals": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerReferrals"
                  }
                ]
              },
              "system_metadata": {
                "type": "object",
                "description": "Object used to store system metadata information."
              },
              "created_at": {
                "type": "string",
                "description": "Timestamp representing the date and time when the customer was created in ISO 8601 format.",
                "example": "2022-08-30T06:32:07.380Z",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "description": "Timestamp representing the date and time when the customer was updated in ISO 8601 format.",
                "example": "2022-08-31T06:32:07.380Z",
                "format": "date-time"
              },
              "assets": {
                "type": "object",
                "description": "Contains information about the customer's cockpit.",
                "properties": {
                  "cockpit_url": {
                    "type": "string",
                    "description": "Customer's cockpit URL address."
                  }
                }
              },
              "object": {
                "type": "string",
                "description": "The type of object represented by JSON.",
                "default": "customer",
                "enum": [
                  "customer"
                ]
              }
            },
            "required": [
              "summary",
              "loyalty",
              "referrals",
              "object"
            ]
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "EarningRule": {
        "title": "Earning Rule",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "validation_rule_id": {
                "type": "string",
                "nullable": true,
                "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date.\\n\\n- \`true\` indicates an active earning rule\\n- \`false\` indicates an inactive earning rule"
              }
            },
            "required": [
              "validation_rule_id",
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "EarningRuleBase": {
        "title": "EarningRuleBase",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format."
          },
          "loyalty": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EarningRuleFixed"
              },
              {
                "$ref": "#/components/schemas/EarningRuleProportional"
              }
            ]
          },
          "event": {
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EarningRuleEvent"
              }
            ]
          },
          "custom_event": {
            "type": "object",
            "properties": {
              "schema_id": {
                "type": "string"
              }
            },
            "required": [
              "schema_id"
            ]
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. Required for the customer.segment.entered option in event.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            },
            "required": [
              "id"
            ]
          },
          "source": {
            "type": "object",
            "required": [
              "object_id",
              "object_type"
            ],
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "description": "Defines the object associated with the earning rule. Defaults to \`campaign\`.",
                "enum": [
                  "campaign"
                ]
              }
            }
          },
          "object": {
            "type": "string",
            "enum": [
              "earning_rule"
            ],
            "description": "The type of object represented by JSON. Default is earning_rule."
          },
          "automation_id": {
            "type": "string",
            "description": "For internal use by Voucherify."
          },
          "start_date": {
            "type": "string",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is inactive before this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format. Earning rule is inactive after this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.start_date required when including the \`validity_timeframe\`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a duration of PT1H will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an interval of P2D will be valid every other day."
              }
            },
            "required": [
              "duration",
              "interval"
            ]
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\\n\\n- \`0\` Sunday\\n- \`1\` Monday\\n- \`2\` Tuesday\\n- \`3\` Wednesday\\n- \`4\` Thursday\\n- \`5\` Friday\\n- \`6\` Saturday",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 6
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        },
        "required": [
          "id",
          "created_at",
          "loyalty",
          "source",
          "object",
          "automation_id",
          "metadata"
        ]
      },
      "EmptyJson": {
        "type": "object",
        "description": "Schema model for an empty json.",
        "title": "Empty JSON"
      },
      "Export": {
        "title": "Export",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucher"
          },
          {
            "$ref": "#/components/schemas/ExportRedemption"
          },
          {
            "$ref": "#/components/schemas/ExportCustomer"
          },
          {
            "$ref": "#/components/schemas/ExportPublication"
          },
          {
            "$ref": "#/components/schemas/ExportOrder"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpiration"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpiration"
          }
        ]
      },
      "ExportCustomerBase": {
        "title": "Export Customers",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "customer"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportCustomerOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportCustomerFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportCustomerFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportCustomerScheduled": {
        "title": "Export Customers Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          }
        ]
      },
      "ExportOrderBase": {
        "title": "Export Orders",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "order"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportOrderFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportOrderFields": {
        "title": "Export Order Fields",
        "type": "string",
        "enum": [
          "id",
          "source_id",
          "created_at",
          "updated_at",
          "status",
          "amount",
          "discount_amount",
          "items_discount_amount",
          "total_discount_amount",
          "total_amount",
          "customer_id",
          "referrer_id",
          "metadata"
        ]
      },
      "ExportOrderFilters": {
        "title": "Export Order Filters",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "updated_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "status": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "items_discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "total_discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "total_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "referrer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportOrderOrder": {
        "title": "Export Order Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "source_id",
          "-source_id",
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "status",
          "-status",
          "amount",
          "-amount",
          "discount_amount",
          "-discount_amount",
          "items_discount_amount",
          "-items_discount_amount",
          "total_discount_amount",
          "-total_discount_amount",
          "total_amount",
          "-total_amount",
          "customer_id",
          "-customer_id",
          "referrer_id",
          "-referrer_id",
          "metadata",
          "-metadata"
        ]
      },
      "ExportOrderScheduled": {
        "title": "Export Orders Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "ExportPointsExpirationBase": {
        "title": "Export Points Expiration",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "points_expiration"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPointsExpirationOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportPointsExpirationFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPointsExpirationFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportPointsExpirationScheduled": {
        "title": "Export Points Expiration Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          }
        ]
      },
      "ExportPublicationBase": {
        "title": "Export Publications",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "publication"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPublicationOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportPublicationFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPublicationFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportPublicationScheduled": {
        "title": "Export Publications Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          }
        ]
      },
      "ExportRedemptionBase": {
        "title": "Export Redemptions",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "redemption"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportRedemptionOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportRedemptionFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportRedemptionFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportRedemptionScheduled": {
        "title": "Export Redemptions Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          }
        ]
      },
      "ExportScheduledBase": {
        "title": "Export Scheduled Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.",
            "enum": [
              "SCHEDULED"
            ]
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "result": {
            "type": "object",
            "description": "Contains the URL of the CSV file.",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "result",
          "user_id"
        ]
      },
      "ExportVoucherBase": {
        "title": "Export Vouchers",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "voucher"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportVoucherFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherFilters"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportVoucherScheduled": {
        "title": "Export Vouchers Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          }
        ]
      },
      "ExportVoucherTransactionsExpirationBase": {
        "title": "Export Vouchers Transactions Expiration",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "enum": [
              "voucher_transactions"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportVoucherTransactionsFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportVoucherTransactionsExpirationScheduled": {
        "title": "Export Vouchers Transactions Expiration Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationBase"
          }
        ]
      },
      "FilterConditionsString": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "$in": {
            "type": "array",
            "description": "Array of resource values that should be included in the results. (multiple values)",
            "items": {
              "type": "string"
            }
          },
          "$not_in": {
            "type": "array",
            "description": "Array of resource values that should be included in the results. (multiple values)",
            "items": {
              "type": "string"
            }
          },
          "$is": {
            "type": "string",
            "description": "Value is exactly this value. (single value)"
          },
          "$is_not": {
            "type": "string",
            "description": "Results omit this value. (single value)"
          },
          "$has_value": {
            "type": "string",
            "description": "Value is NOT null. The value for this parameter is an empty string."
          },
          "$is_unknown": {
            "type": "string",
            "description": "Value is null. The value for this parameter is an empty string."
          },
          "$starts_with": {
            "type": "string",
            "description": "Value starts with the specified string."
          },
          "$ends_with": {
            "type": "string",
            "description": "Value ends with the specified string."
          }
        }
      },
      "ImportCSVRequestBody": {
        "type": "object",
        "title": "Import CSV file",
        "description": "Request body schema for importing data using a CSV file.",
        "format": "binary",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File path."
          }
        },
        "required": [
          "file"
        ]
      },
      "Junction": {
        "title": "Junction",
        "description": "Logical Operator Between Filters. Filter by conditions set on the \`junction\` parameter indicating how the \`conditions\` should be accounted for in the query. An \`AND\` is an all-inclusive logical operator, meaning the \`AND\` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an \`OR\` operator displays a record if **ANY** of the conditions separated by OR is TRUE.",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      },
      "ListPublicationsItemInvalid": {
        "title": "Invalid",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "FAILURE"
                ],
                "description": "Status of the publication attempt."
              },
              "failure_code": {
                "type": "string",
                "description": "Generic reason as to why the create publication operation failed."
              },
              "failure_message": {
                "type": "string",
                "description": "This parameter will provide more expanded reason as to why the create publication operation failed."
              }
            },
            "required": [
              "result",
              "vouchers"
            ]
          }
        ]
      },
      "ListPublicationsItemValidMultipleVouchers": {
        "title": "Valid Multiple Vouchers",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "SUCCESS"
                ],
                "description": "Status of the publication attempt."
              },
              "vouchers": {
                "type": "array",
                "description": "Contains the unique voucher codes that was assigned by Voucherify.",
                "items": {
                  "type": "string",
                  "example": "Q1K4XT5S"
                }
              }
            },
            "required": [
              "result",
              "vouchers"
            ]
          }
        ]
      },
      "ListPublicationsItemValidSingleVoucher": {
        "title": "Valid Single Voucher",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "SUCCESS"
                ],
                "description": "Status of the publication attempt."
              },
              "voucher": {
                "$ref": "#/components/schemas/ListPublicationsItemVoucher"
              }
            },
            "required": [
              "result",
              "voucher"
            ]
          }
        ]
      },
      "LoyaltiesLoyaltyTierReward": {
        "title": "Loyalty Tier Reward Object",
        "type": "object",
        "description": "This is an object representing a loyalty tier reward.",
        "properties": {
          "reward": {
            "$ref": "#/components/schemas/Reward"
          },
          "assignment": {
            "$ref": "#/components/schemas/RewardAssignment"
          },
          "object": {
            "description": "The type of object represented by JSON. This object stores information about the loyalty tier reward.",
            "enum": [
              "loyalty_tier_reward"
            ]
          }
        },
        "required": [
          "reward",
          "assignment",
          "object"
        ]
      },
      "LoyaltiesTransferPoints": {
        "title": "Loyalties Transfer Points",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique loyalty card code from which the user wants to transfer loyalty points (source)."
          },
          "points": {
            "type": "integer",
            "description": "The number of loyalty points that the user wants to transfer to another loyalty card. The number of points cannot be higher than the current balance on the loyalty card (source)."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transfer."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          }
        },
        "required": [
          "code",
          "points",
          "source_id"
        ]
      },
      "LoyaltyCardTransaction": {
        "title": "Loyalty Card Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        ]
      },
      "LoyaltyCardTransactionsFields": {
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "type",
          "source_id",
          "reason",
          "source",
          "balance",
          "amount",
          "related_transaction_id",
          "created_at",
          "details"
        ]
      },
      "LoyaltyTier": {
        "title": "Loyalty Tier",
        "allOf": [
          {
            "$ref": "#/components/schemas/LoyaltyTierBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique loyalty tier ID."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique parent campaign ID."
              },
              "metadata": {
                "type": "object",
                "nullable": true,
                "description": "The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the loyalty tier was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the loyalty tier was updated in ISO 8601 format."
              },
              "config": {
                "type": "object",
                "description": "Defines loyalty tier range in points.",
                "required": [
                  "points"
                ],
                "properties": {
                  "points": {
                    "type": "object",
                    "description": "Defines range of loyalty tier in points.",
                    "properties": {
                      "from": {
                        "type": "integer",
                        "description": "Bottom points threshold value."
                      },
                      "to": {
                        "type": "integer",
                        "description": "Top points threshold value."
                      }
                    }
                  }
                }
              },
              "expiration": {
                "$ref": "#/components/schemas/LoyaltyTierExpiration"
              },
              "object": {
                "type": "string",
                "enum": [
                  "loyalty_tier"
                ],
                "description": "The type of object represented by JSON. This object stores information about the loyalty."
              }
            },
            "required": [
              "id",
              "campaign_id",
              "metadata",
              "created_at",
              "config",
              "object"
            ]
          }
        ]
      },
      "LoyaltyTierBase": {
        "title": "Loyalty Tier Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Loyalty Tier name."
          },
          "earning_rules": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MappingPoints"
            },
            "description": "Contains a list of earning rule IDs and their points mapping for the given earning rule."
          },
          "rewards": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MappingPoints"
            },
            "description": "Contains a list of reward IDs and their points mapping for the given reward."
          },
          "points": {
            "type": "object",
            "description": "Defines range of loyalty tier in points.",
            "properties": {
              "from": {
                "type": "integer",
                "description": "Bottom points threshold value."
              },
              "to": {
                "type": "integer",
                "description": "Top points threshold value."
              }
            }
          }
        },
        "required": [
          "name",
          "points"
        ]
      },
      "Order": {
        "title": "Order",
        "allOf": [
          {
            "title": "Order Ids",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request."
              },
              "source_id": {
                "type": "string",
                "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
              }
            }
          },
          {
            "$ref": "#/components/schemas/OrderBase"
          }
        ]
      },
      "OrderBase": {
        "title": "Order Base",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.\\n\\n"
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "customer": {
            "description": "This is an object containing information about the customer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer": {
            "description": "This is an object containing information about the referrer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Referrer"
              }
            ]
          },
          "referrer_id": {
            "type": "string",
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          }
        }
      },
      "OrderCalculated": {
        "title": "Order Calculated",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedBase"
          },
          {
            "title": "Order Calculated",
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "customer": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerId"
                  }
                ]
              },
              "referrer": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ReferrerWithSummaryLoyaltyReferrals"
                  },
                  {
                    "$ref": "#/components/schemas/ReferrerId"
                  }
                ]
              }
            }
          }
        ]
      },
      "OrderCalculatedNoCustomerData": {
        "title": "Order Calculated No Customer Data",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedBase"
          },
          {
            "title": "Order Customer And Referrer Ids Objects",
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "customer": {
                "description": "If only \`customer_id\` was provided, customer return data will be limited.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerId"
                  }
                ]
              },
              "referrer": {
                "description": "If only \`referrer_id\` was provided, referrer return data will be limited.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferrerId"
                  }
                ]
              }
            }
          }
        ]
      },
      "PointsExpirationTypes": {
        "title": "Points Expiration Types",
        "type": "string",
        "enum": [
          "PROGRAM_RULES",
          "CUSTOM_DATE",
          "NON_EXPIRING"
        ]
      },
      "Product": {
        "type": "object",
        "description": "This is an object representing a product.  \\n\\nThis entity should be used to map product items from your inventory management system. The aim of products is to build which reflect product-specific campaigns.",
        "title": "Product",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductWithoutSkus"
          },
          {
            "type": "object",
            "properties": {
              "skus": {
                "$ref": "#/components/schemas/SkusListForProduct"
              }
            }
          }
        ]
      },
      "ProductCollectionsCreateDynamicRequestBody": {
        "title": "Product Collections Create Dynamic (Auto Update) Request Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Show that the product collection is dynamic (products come in and leave based on set criteria).",
            "enum": [
              "AUTO_UPDATE"
            ]
          },
          "name": {
            "description": "Unique user-defined product collection name.",
            "type": "string"
          },
          "filter": {
            "type": "object",
            "description": "Defines a set of criteria and boundary conditions for an \`AUTO_UPDATE\` product collection type.",
            "additionalProperties": false,
            "required": [
              "junction"
            ],
            "properties": {
              "junction": {
                "$ref": "#/components/schemas/Junction"
              },
              "id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "product_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "source_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "name": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "price": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "object": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "attributes": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "metadata": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "image_url": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "skus": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "created_at": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "updated_at": {
                "$ref": "#/components/schemas/FieldConditions"
              }
            }
          }
        },
        "required": [
          "type",
          "name",
          "filter"
        ]
      },
      "ProductCollectionsCreateStaticRequestBody": {
        "title": "Product Collections Create Dynamic Request Body",
        "description": "Response body schema for **POST** \`/product-collections\`.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Show that the product collection is static (manually selected products).",
            "enum": [
              "STATIC"
            ]
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product collection name."
          },
          "products": {
            "type": "array",
            "description": "Defines a set of products for a \`STATIC\` product collection type.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "prod_0a41bcf807c5fcaaf6",
                  "description": "The product ID."
                },
                "product_id": {
                  "type": "string",
                  "description": "Product ID for SKUs."
                },
                "object": {
                  "description": "Denotes the type of object represented by the ID.",
                  "enum": [
                    "sku",
                    "product"
                  ]
                }
              },
              "required": [
                "id",
                "object"
              ]
            }
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ProductCollectionsItem": {
        "title": "Product Collection Base",
        "description": "This is an object representing a product collection base. ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product collection ID."
          },
          "name": {
            "type": "string",
            "example": "All Products",
            "description": "Unique user-defined product collection name."
          },
          "type": {
            "type": "string",
            "description": "Describes whether the product collection is dynamic (products come in and leave based on set criteria) or static (manually selected products).",
            "enum": [
              "STATIC",
              "AUTO_UPDATE"
            ]
          },
          "filter": {
            "type": "object",
            "description": "Defines a set of criteria and boundary conditions for an \`AUTO_UPDATE\` product collection type.",
            "additionalProperties": false,
            "required": [
              "junction"
            ],
            "properties": {
              "junction": {
                "$ref": "#/components/schemas/Junction"
              },
              "id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "product_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "source_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "name": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "price": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "object": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "attributes": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "metadata": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "image_url": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "skus": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "created_at": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "updated_at": {
                "$ref": "#/components/schemas/FieldConditions"
              }
            }
          },
          "products": {
            "description": "Defines a set of products for a \`STATIC\` product collection type.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "prod_0a41bcf807c5fcaaf6",
                  "description": "The product ID."
                },
                "product_id": {
                  "type": "string",
                  "description": "Product ID for SKUs."
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "sku",
                    "product"
                  ],
                  "description": "Denotes the type of object represented by the ID."
                }
              },
              "required": [
                "id",
                "object"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-09T12:51:29.898Z",
            "description": "Timestamp representing the date and time when the product collection was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about the static product collection.",
            "enum": [
              "products_collection"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "created_at",
          "object"
        ]
      },
      "ProductCollectionsList": {
        "type": "object",
        "title": "List Product Collections",
        "description": "Schema representing list of product collections",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about product collections.",
            "default": "list",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the JSON property that contains the array of product collections.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "description": "A dictionary that contains an array of product collections and their details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCollectionsItem"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of product collections."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ProductCollectionsProductsList": {
        "type": "object",
        "description": "Response body schema for **GET** /product-collections/{productCollectionID}/products.",
        "title": "List Products in Collection Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about products and SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of products and SKUs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of products and SKUs.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ProductWithoutSkus"
                },
                {
                  "$ref": "#/components/schemas/SkuWithProduct"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of products & SKUs in the product collection."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "PromotionStack": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was updated in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON. "
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "PromotionStackBase": {
        "title": "Promotion Stack Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Promotion stack name."
          },
          "tiers": {
            "type": "object",
            "required": [
              "ids"
            ],
            "description": "Contains the tier configuration.",
            "properties": {
              "ids": {
                "type": "array",
                "minItems": 1,
                "description": "Contains the list of tiers in a pre-defined sequence.",
                "items": {
                  "type": "string"
                }
              },
              "hierarchy_mode": {
                "type": "string",
                "enum": [
                  "MANUAL"
                ]
              }
            }
          }
        },
        "required": [
          "name",
          "tiers"
        ]
      },
      "PromotionTier": {
        "type": "object",
        "description": "This is an object representing a promotion tier. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "title": "Promotion Tier",
        "properties": {
          "id": {
            "type": "string",
            "example": "promo_63fYCt81Aw0h7lzyRkrGZh9p",
            "description": "Unique promotion tier ID."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-15T11:34:01.333Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the promotion tier was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "example": "2022-02-09T09:20:05.603Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the promotion tier was updated in ISO 8601 format."
          },
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "$ref": "#/components/schemas/Discount"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "promotion_id": {
            "type": "string",
            "description": "Promotion unique ID."
          },
          "campaign": {
            "type": "object",
            "description": "Contains details about promotion tier's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID."
              },
              "start_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
                "format": "date-time",
                "example": "2022-09-22T00:00:00.000Z"
              },
              "expiration_date": {
                "type": "string",
                "format": "date-time",
                "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
                "example": "2022-09-30T00:00:00.000Z"
              },
              "validity_timeframe": {
                "type": "object",
                "description": "Recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.",
                "properties": {
                  "interval": {
                    "type": "string",
                    "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
                  },
                  "duration": {
                    "type": "string",
                    "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
                  }
                }
              },
              "validity_day_of_week": {
                "type": "array",
                "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
                "items": {
                  "type": "integer"
                }
              },
              "active": {
                "type": "boolean",
                "description": "A flag indicating whether the campaign is active or not active. A campaign can be disabled even though it's within the active period defined by the \`start_date\` and \`expiration_date\` using the <!-- [Disable Campaign](OpenAPI.json/paths/~1campaigns~1{campaignId}~1disable) -->[Disable Campaign](ref:disable-campaign) endpoint.  \\n\\n- \`true\` indicates an *active* campaign\\n- \`false\` indicates an *inactive* campaign"
              },
              "category_id": {
                "type": "string",
                "example": "cat_0b688929a2476386a6",
                "description": "Unique category ID that this campaign belongs to."
              },
              "object": {
                "type": "string",
                "description": "The type of object represented by the campaign object. This object stores information about the campaign.",
                "default": "campaign"
              }
            }
          },
          "campaign_id": {
            "type": "string",
            "description": "Promotion tier's parent campaign's unique ID."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* promotion tier\\n- \`false\` indicates an *inactive* promotion tier"
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "summary": {
            "type": "object",
            "description": "Contains statistics about promotion tier redemptions and orders.",
            "properties": {
              "redemptions": {
                "type": "object",
                "description": "Contains statistics about promotion tier redemptions.",
                "properties": {
                  "total_redeemed": {
                    "type": "integer",
                    "description": "Number of times the promotion tier was redeemed."
                  }
                }
              },
              "orders": {
                "type": "object",
                "description": "Contains statistics about orders related to the promotion tier.",
                "properties": {
                  "total_amount": {
                    "type": "integer",
                    "description": "Sum of order totals."
                  },
                  "total_discount_amount": {
                    "type": "integer",
                    "description": "Sum of total discount applied using the promotion tier."
                  }
                }
              }
            }
          },
          "object": {
            "type": "string",
            "default": "promotion_tier",
            "description": "The type of object represented by JSON. This object stores information about the promotion tier."
          },
          "validation_rule_assignments": {
            "$ref": "#/components/schemas/ValidationRuleAssignmentsList"
          },
          "category_id": {
            "type": "string",
            "description": "Promotion tier category ID.",
            "example": "cat_0c9da30e7116ba6bba"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "PromotionTiersList": {
        "type": "object",
        "description": "Promotion Tiers",
        "title": "Promotion Tiers",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about promotion tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "tiers",
            "description": "Identifies the name of the attribute that contains the array of promotion tier objects."
          },
          "tiers": {
            "type": "array",
            "description": "Contains array of promotion tier objects.",
            "items": {
              "$ref": "#/components/schemas/PromotionTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of promotion tiers."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the \`has_more\` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        }
      },
      "PublicationsCreateVoucherResponseBody": {
        "title": "Publications Create Voucher Response Body",
        "type": "object",
        "description": "Response body schema for **POST** \`/publication\` and **GET** \`/publications/create\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateBaseResponseBody"
          },
          {
            "type": "object",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/Voucher"
              }
            },
            "required": [
              "voucher"
            ]
          }
        ]
      },
      "PublicationsCreateVouchersResponseBody": {
        "title": "Publications Create Vouchers Response Body",
        "description": "Response body schema for **POST** \`/publication\` and **GET** \`/publications/create\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateBaseResponseBody"
          },
          {
            "type": "object",
            "properties": {
              "vouchers": {
                "type": "array",
                "description": "Contains the unique voucher codes that was assigned by Voucherify.",
                "items": {
                  "type": "string",
                  "example": "Q1K4XT5S"
                }
              }
            },
            "required": [
              "vouchers"
            ]
          }
        ]
      },
      "QualificationsFieldConditions": {
        "title": "Qualifications Field Conditions",
        "type": "object",
        "properties": {
          "conditions": {
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "allOf": [
              {
                "$ref": "#/components/schemas/QualificationsFiltersCondition"
              }
            ]
          }
        }
      },
      "QualificationsRedeemables": {
        "title": "Redeemables",
        "type": "object",
        "description": "List of redeemables for examine qualification.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. Default is \`list\`.",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of qualified redeemables.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "type": "array",
            "description": "Array of qualified redeemables.",
            "items": {
              "$ref": "#/components/schemas/QualificationsRedeemable"
            }
          },
          "total": {
            "type": "integer",
            "example": 5,
            "description": "The number of redeemables returned in the API request."
          },
          "has_more": {
            "type": "boolean",
            "description": "As results are always limited, the \`has_more\` flag indicates whether there are more records for given parameters. This let's you know if you are able to run another request (with different options) to get more records returned in the results."
          },
          "more_starting_after": {
            "type": "string",
            "description": "Timestamp representing the date and time to use in starting_after cursor to get more redeemables.",
            "format": "date-time",
            "example": "2023-10-31T12:13:16.374Z"
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total",
          "has_more"
        ]
      },
      "QualificationsStackingRules": {
        "type": "object",
        "title": "Examine Qualification Stacking Rules",
        "description": "Defines stacking rules for redeemables. Read more in the [Help Center](https://support.voucherify.io/article/604-stacking-rules)",
        "properties": {
          "redeemables_limit": {
            "type": "integer",
            "description": "Defines how many redeemables can be sent in one stacking request (note: more redeemables means more processing time!).",
            "default": 30,
            "maximum": 30,
            "minimum": 1
          },
          "applicable_redeemables_limit": {
            "type": "integer",
            "description": "Defines how many of the sent redeemables will be applied to the order. For example, a user can select 30 discounts but only 5 will be applied to the order and the remaining will be labelled as SKIPPED.",
            "default": 5,
            "maximum": 30,
            "minimum": 1
          },
          "applicable_exclusive_redeemables_limit": {
            "type": "integer",
            "description": "Defines how many redeemables with an exclusive category can be applied in one request.",
            "default": 1,
            "maximum": 30,
            "minimum": 1
          },
          "exclusive_categories": {
            "type": "array",
            "description": "Lists all exclusive categories. A redeemable from a campaign with an exclusive category is the only redeemable to be redeemed when applied with redeemables from other campaigns unless these campaigns are exclusive or joint.",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "joint_categories": {
            "type": "array",
            "description": "Lists all joint categories. A campaign with a joint category is always applied regardless of the exclusivity of other campaigns.",
            "default": [],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "redeemables_limit",
          "applicable_redeemables_limit",
          "applicable_exclusive_redeemables_limit",
          "exclusive_categories",
          "joint_categories"
        ]
      },
      "Redemption": {
        "title": "Redemption",
        "type": "object",
        "description": "This is an object representing a redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON",
            "enum": [
              "redemption"
            ]
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "nullable": true,
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED",
              "ROLLED_BACK"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is \`FAILURE\`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is \`FAILURE\`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A \`USER\` corresponds to the Voucherify Dashboard and an \`API\` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier",
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being added back to the loyalty card for the reward redemption rollback."
              }
            }
          }
        },
        "required": [
          "id",
          "object",
          "date",
          "customer_id",
          "tracking_id",
          "metadata",
          "redemption",
          "result",
          "status",
          "order",
          "channel",
          "customer",
          "related_object_type",
          "related_object_id"
        ]
      },
      "RedemptionRollback": {
        "title": "Redemption Rollback",
        "type": "object",
        "description": "This is an object representing a redemption rollback.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON",
            "enum": [
              "redemption_rollback"
            ]
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "nullable": true,
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the redemption being invalid in the context of the provided parameters."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is \`FAILURE\`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is \`FAILURE\`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A \`USER\` corresponds to the Voucherify Dashboard and an \`API\` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier",
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being added back to the loyalty card for the reward redemption rollback."
              }
            }
          }
        },
        "required": [
          "id",
          "object",
          "date",
          "customer_id",
          "tracking_id",
          "metadata",
          "redemption",
          "result",
          "status",
          "order",
          "channel",
          "customer",
          "related_object_type",
          "related_object_id"
        ]
      },
      "Reward": {
        "type": "object",
        "title": "Reward",
        "properties": {
          "id": {
            "type": "string",
            "example": "rew_nIy4gHpQHle2c3pNMwuj7G6j",
            "description": "Unique reward ID, assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "stock": {
            "type": "integer",
            "nullable": true,
            "description": "Configurable for **material rewards**. The number of units of the product that you want to share as reward."
          },
          "redeemed": {
            "type": "integer",
            "nullable": true,
            "description": "Defines the number of already invoked (successful) reward redemptions.\\t"
          },
          "attributes": {
            "type": "object",
            "description": "These properties are configurable for **material rewards**.",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "The HTTPS URL pointing to the .png or .jpg file."
              },
              "description": {
                "type": "string",
                "description": "An arbitrary string that you can attach to a material reward."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          },
          "parameters": {
            "description": "Defines how the reward is generated.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardType"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "object": {
            "description": "The type of object represented by the JSON. This object stores information about the reward.",
            "enum": [
              "reward"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "stock",
          "redeemed",
          "metadata",
          "created_at",
          "updated_at",
          "object"
        ]
      },
      "RewardAssignment": {
        "title": "Reward Assignment",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignmentBase"
          },
          {
            "$ref": "#/components/schemas/RewardAssignmentParameters"
          }
        ],
        "type": "object"
      },
      "RewardAssignmentsCreateCoinRewardRequestBody": {
        "description": "Request body schema for **POST** \`/rewards/{rewardID}/assignments\`.",
        "title": "Pay with Points Reward",
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "The campaign ID of the campaign to which the reward is to be assigned."
          },
          "validation_rules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "campaign"
        ]
      },
      "RewardAssignmentsCreateDigitalOrMaterialRewardRequestBody": {
        "description": "Request body schema for **POST** \`/rewards/{rewardID}/assignments\`.",
        "title": "Digital Or Material Reward",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "The campaign ID of the campaign to which the reward is to be assigned."
          },
          "parameters": {
            "type": "object",
            "description": "Defines the cost of the reward.",
            "required": [
              "loyalty"
            ],
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Defines the equivalent points value of the reward.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "Number of points that will be subtracted from the loyalty card points balance if the reward is redeemed."
                  }
                }
              }
            }
          }
        },
        "required": [
          "campaign",
          "parameters"
        ]
      },
      "SimpleCustomerRequiredObjectType": {
        "type": "object",
        "description": "This is an object representing a customer with limited properties used in Event Tracking endpoints.",
        "title": "Customer Object Required Object Type",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of a customer that is assigned by Voucherify.",
            "example": "cust_CSnYd37MXmrbS19XCrghjBsv"
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments. "
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the customer.",
            "default": "customer"
          }
        },
        "required": [
          "object"
        ]
      },
      "Sku": {
        "title": "SKU Object",
        "type": "object",
        "description": "This is an object representing a product SKU.",
        "properties": {
          "id": {
            "type": "string",
            "example": "sku_0b1621b319d248b79f",
            "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "example": "sku_source_id_4",
            "description": "A unique SKU identifier from your inventory system."
          },
          "product_id": {
            "type": "string",
            "example": "prod_0b15f6b9f650c16990",
            "description": "The parent product's unique ID."
          },
          "sku": {
            "type": "string",
            "nullable": true,
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "nullable": true,
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
          },
          "currency": {
            "type": "string",
            "nullable": true,
            "description": "SKU price currency.",
            "example": "USD"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          },
          "created_at": {
            "type": "string",
            "example": "2022-05-17T10:36:30.187Z",
            "description": "Timestamp representing the date and time when the SKU was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "example": "2022-05-17T10:55:09.137Z",
            "description": "Timestamp representing the date and time when the SKU was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "sku",
            "description": "The type of object represented by JSON. This object stores information about the \`SKU\`.",
            "enum": [
              "sku"
            ]
          }
        },
        "required": [
          "id",
          "source_id",
          "product_id",
          "sku",
          "price",
          "attributes",
          "metadata",
          "image_url",
          "created_at",
          "updated_at",
          "object"
        ]
      },
      "SkusList": {
        "type": "object",
        "description": "Contains information about SKUs.",
        "title": "SKUs List",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of SKUs.",
            "default": "data"
          },
          "skus": {
            "type": "array",
            "description": "A dictionary that contains an array of SKUs.",
            "items": {
              "$ref": "#/components/schemas/Sku"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of SKUs in the product."
          }
        },
        "required": [
          "object",
          "data_ref",
          "skus",
          "total"
        ]
      },
      "StackableValidateRedeemBase": {
        "title": "Stackable Validate Redeem Base",
        "type": "object",
        "properties": {
          "redeemables": {
            "type": "array",
            "minItems": 1,
            "maxItems": 5,
            "description": "An array of redeemables. You can combine \`voucher\`(s) and \`promotion_tier\`(s). Alternatively, send one unique\`promotion_stack\` in the array.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RedeemVoucher"
                },
                {
                  "$ref": "#/components/schemas/RedeemPromotionTier"
                },
                {
                  "$ref": "#/components/schemas/RedeemPromotionStack"
                },
                {
                  "$ref": "#/components/schemas/RedeemGiftCard"
                },
                {
                  "$ref": "#/components/schemas/RedeemLoyaltyCard"
                }
              ]
            }
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "session": {
            "description": "Schema model for session lock object. The session object is required to establish a session between multiple parallel validation and redemption requests. If you only send the type parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a validation session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can attach to a redemption object. It can be useful for storing additional information about the redemption in a structured format."
          }
        },
        "required": [
          "redeemables"
        ]
      },
      "ValidationRule": {
        "title": "Validation Rule",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          },
          {
            "title": "Validation Rule",
            "type": "object",
            "description": "This is an object representing a response validation rule.",
            "properties": {
              "id": {
                "type": "string",
                "example": "val_eR1c41hu0vUU",
                "description": "Unique validation rule ID."
              },
              "created_at": {
                "type": "string",
                "example": "2022-03-23T07:44:00.444Z",
                "description": "Timestamp representing the date and time when the validation rule was created in ISO 8601 format.",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "example": "2022-04-26T08:35:54.960Z",
                "description": "Timestamp representing the date and time when the validation rule was updated in ISO 8601 format.",
                "format": "date-time"
              },
              "assignments_count": {
                "description": "The number of instances the validation rule has been assigned to different types of redeemables.",
                "type": "integer"
              },
              "object": {
                "type": "string",
                "default": "validation_rules",
                "description": "The type of object represented by JSON. This object stores information about the validation rule."
              }
            },
            "required": [
              "id",
              "name",
              "rules",
              "applicable_to",
              "created_at",
              "type",
              "context_type",
              "object"
            ]
          }
        ]
      },
      "ValidationRuleAssignmentsList": {
        "type": "object",
        "description": "Validation Rule Assignments List",
        "title": "Validation Rule Assignments List",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about validation rule assignments.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of validation rule assignments.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of validation rule assignments.",
            "items": {
              "$ref": "#/components/schemas/ValidationRuleAssignment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of validation rule assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRuleBase": {
        "title": "Validation Rule Base",
        "type": "object",
        "description": "This is an object representing a request validation rule.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Custom, unique name for set of validation rules.",
            "example": "Business Validation Rule"
          },
          "rules": {
            "$ref": "#/components/schemas/ValidationRuleRules"
          },
          "error": {
            "type": "object",
            "description": "Contains the error message returned from API when validation / redemption fails to meet requirements of defined rules.",
            "properties": {
              "message": {
                "type": "string",
                "description": "The error message returned from API when validation / redemption fails to meet requirements of defined rules."
              }
            }
          },
          "applicable_to": {
            "type": "object",
            "properties": {
              "excluded": {
                "type": "array",
                "description": "Defines which items are excluded from a discount.",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTo"
                }
              },
              "included": {
                "type": "array",
                "description": "Defines which items are included in a discount.",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTo"
                }
              },
              "included_all": {
                "type": "boolean",
                "description": "Indicates whether all items are included in the discount."
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "expression",
              "basic",
              "advanced",
              "complex"
            ],
            "default": "expression",
            "description": "Type of validation rule."
          },
          "context_type": {
            "type": "string",
            "default": "global",
            "enum": [
              "earning_rule.order.paid",
              "earning_rule.custom_event",
              "earning_rule.customer.segment.entered",
              "earning_rule.customer.tier.joined",
              "earning_rule.customer.tier.left",
              "earning_rule.customer.tier.upgraded",
              "earning_rule.customer.tier.downgraded",
              "earning_rule.customer.tier.prolonged",
              "campaign.discount_coupons",
              "campaign.discount_coupons.discount.apply_to_order",
              "campaign.discount_coupons.discount.apply_to_items",
              "campaign.discount_coupons.discount.apply_to_items_proportionally",
              "campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity",
              "campaign.discount_coupons.discount.apply_to_items_by_quantity",
              "campaign.discount_coupons.discount.fixed.apply_to_items",
              "campaign.discount_coupons.discount.percent.apply_to_items",
              "campaign.gift_vouchers",
              "campaign.gift_vouchers.gift.apply_to_order",
              "campaign.gift_vouchers.gift.apply_to_items",
              "campaign.referral_program",
              "campaign.referral_program.discount.apply_to_order",
              "campaign.referral_program.discount.apply_to_items",
              "campaign.referral_program.discount.apply_to_items_proportionally",
              "campaign.referral_program.discount.apply_to_items_proportionally_by_quantity",
              "campaign.referral_program.discount.apply_to_items_by_quantity",
              "campaign.referral_program.discount.fixed.apply_to_items",
              "campaign.referral_program.discount.percent.apply_to_items",
              "campaign.promotion",
              "campaign.promotion.discount.apply_to_order",
              "campaign.promotion.discount.apply_to_items",
              "campaign.promotion.discount.apply_to_items_proportionally",
              "campaign.promotion.discount.apply_to_items_proportionally_by_quantity",
              "campaign.promotion.discount.apply_to_items_by_quantity",
              "campaign.promotion.discount.fixed.apply_to_items",
              "campaign.promotion.discount.percent.apply_to_items",
              "campaign.loyalty_program",
              "campaign.lucky_draw",
              "voucher.discount_voucher",
              "voucher.discount_voucher.discount.apply_to_order",
              "voucher.discount_voucher.discount.apply_to_items",
              "voucher.discount_voucher.discount.apply_to_items_proportionally",
              "voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity",
              "voucher.discount_voucher.discount.apply_to_items_by_quantity",
              "voucher.discount_voucher.discount.fixed.apply_to_items",
              "voucher.discount_voucher.discount.percent.apply_to_items",
              "voucher.gift_voucher",
              "voucher.gift_voucher.gift.apply_to_order",
              "voucher.gift_voucher.gift.apply_to_items",
              "voucher.loyalty_card",
              "voucher.lucky_draw_code",
              "distribution.custom_event",
              "distribution.order.paid",
              "distribution.order.created",
              "distribution.order.canceled",
              "distribution.order.updated",
              "reward_assignment.pay_with_points",
              "global"
            ],
            "description": "Validation rule context type.  \\n\\n| **Context Type** | **Definition** |\\n|:---|:---|\\n| earning_rule.order.paid |  |\\n| earning_rule.custom_event |  |\\n| earning_rule.customer.segment.entered |  |\\n| campaign.discount_coupons |  |\\n| campaign.discount_coupons.discount.apply_to_order |  |\\n| campaign.discount_coupons.discount.apply_to_items |  |\\n| campaign.discount_coupons.discount.apply_to_items_proportionally |  |\\n| campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity |  |\\n| campaign.discount_coupons.discount.fixed.apply_to_items |  |\\n| campaign.gift_vouchers |  |\\n| campaign.gift_vouchers.gift.apply_to_order |  |\\n| campaign.gift_vouchers.gift.apply_to_items |  |\\n| campaign.referral_program |  |\\n| campaign.referral_program.discount.apply_to_order |  |\\n| campaign.referral_program.discount.apply_to_items |  |\\n| campaign.referral_program.discount.apply_to_items_proportionally |  |\\n| campaign.referral_program.discount.apply_to_items_proportionally_by_quantity |  |\\n| campaign.referral_program.discount.fixed.apply_to_items |  |\\n| campaign.promotion |  |\\n| campaign.promotion.discount.apply_to_order |  |\\n| campaign.promotion.discount.apply_to_items |  |\\n| campaign.promotion.discount.apply_to_items_proportionally |  |\\n| campaign.promotion.discount.apply_to_items_proportionally_by_quantity |  |\\n| campaign.promotion.discount.fixed.apply_to_items |  |\\n| campaign.loyalty_program |  |\\n| campaign.lucky_draw |  |\\n| voucher.discount_voucher |  |\\n| voucher.discount_voucher.discount.apply_to_order |  |\\n| voucher.discount_voucher.discount.apply_to_items |  |\\n| voucher.discount_voucher.discount.apply_to_items_proportionally |  |\\n| voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity |  |\\n| voucher.discount_voucher.discount.fixed.apply_to_items |  |\\n| voucher.gift_voucher |  |\\n| voucher.gift_voucher.gift.apply_to_order |  |\\n| voucher.gift_voucher.gift.apply_to_items |  |\\n| voucher.loyalty_card |  |\\n| voucher.lucky_draw_code |  |\\n| distribution.custom_event |  |\\n| reward_assignment.pay_with_points |  |\\n| global |  |"
          }
        }
      },
      "ValidationsRedeemableInapplicable": {
        "type": "object",
        "title": "Inapplicable Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "INAPPLICABLE"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "result": {
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      },
      "ValidationsRedeemableSkipped": {
        "type": "object",
        "title": "Skipped Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SKIPPED"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "result": {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          }
        }
      },
      "ValidationsValidateAllResponseBody": {
        "title": "Validations Validate All Response Body",
        "description": "Response body schema for POST \`/validations\` where all promotion must be valid",
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "The result of the validation. It takes all of the redeemables into account and returns a \`false\` if at least one redeemable is inapplicable. Returns \`true\` if all redeemables are applicable."
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
                },
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
                },
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
                }
              ]
            }
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "tracking_id": {
            "type": "string",
            "example": "track_VAVo1/z+G2GI2LPw==",
            "description": "Hashed customer source ID."
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "application_mode": {
            "type": "string",
            "enum": [
              "ALL"
            ]
          }
        },
        "required": [
          "valid",
          "redeemables",
          "application_mode"
        ]
      },
      "ValidationsValidatePartialResponseBody": {
        "title": "Validations Validate Partial Response Body",
        "description": "Response body schema for POST \`/validations\` where at least one promotion must be valid",
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "The result of the validation. It takes all of the redeemables into account and returns a \`false\` if at least one redeemable is inapplicable. Returns \`true\` if all redeemables are applicable."
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns \`\\"status\\": \\"APPLICABLE\\"\`.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
                }
              ]
            }
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
                }
              ]
            }
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "tracking_id": {
            "type": "string",
            "example": "track_VAVo1/z+G2GI2LPw==",
            "description": "Hashed customer source ID."
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "application_mode": {
            "type": "string",
            "enum": [
              "PARTIAL"
            ]
          }
        },
        "required": [
          "valid",
          "redeemables",
          "inapplicable_redeemables",
          "application_mode"
        ]
      },
      "Voucher": {
        "title": "Voucher",
        "type": "object",
        "description": "This is an object representing a voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify.",
            "example": "cat_0bb343dee3cdb5ec0c"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "gift": {
            "type": "object",
            "description": "Object representing gift parameters. Child attributes are present only if \`type\` is \`GIFT_VOUCHER\`. Defaults to \`null\`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "balance": {
                "type": "integer",
                "example": 500,
                "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if \`type\` is \`LOYALTY_CARD\`. Defaults to \`null\`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "format": "date",
                "example": "2023-05-30",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date. "
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a \`duration\` of \`PT1H\` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an \`interval\` of \`P2D\` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* voucher\\n- \`false\` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "$ref": "#/components/schemas/VoucherAssets"
          },
          "is_referral_code": {
            "type": "boolean",
            "nullable": true,
            "description": "Flag indicating whether this voucher is a referral code."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of voucher owner."
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is \`voucher\`.",
            "default": "voucher"
          },
          "distributions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is deleted."
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or <!-- [publish voucher](OpenAPI.json/paths/~1publications/post) -->[publish voucher](ref:create-publication) API method. \\n\\n<!-- title: My Table Title -->\\n\\n| Required | Optional |\\n| -------- | :------: |\\n| \`type\`:\`LOYALTY_CARD\` |  \`type\`:\`DISCOUNT_VOUCHER\`   | \\n| \`is_referral_code\`:\`true\`      |    \`type\`:\`GIFT_VOUCHER\`   |\\n",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default \`list\`. To get this list, you need to make a call to the endpoint returned in the \`url\` attribute."
              },
              "count": {
                "type": "integer",
                "example": 0,
                "description": "Publication events counter."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10",
                "description": "The endpoint where this list of publications can be accessed using a GET method. \`/v1/vouchers/{voucher_code}/publications\`"
              }
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1,
                "description": "How many times a voucher has already been redeemed."
              },
              "redeemed_amount": {
                "type": "integer",
                "example": 100000,
                "description": "Total amount redeemed. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 balance is written as 10000."
              },
              "redeemed_points": {
                "type": "integer",
                "example": 100000,
                "description": "Total loyalty points redeemed."
              },
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default \`list\`. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. \`/v1/vouchers/{voucher_code}/redemptions\`"
              }
            }
          }
        }
      },
      "VoucherTransaction": {
        "title": "Voucher Transaction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique transaction ID."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service. In case of a redemption, this value is null."
          },
          "voucher_id": {
            "type": "string",
            "description": "Unique voucher ID."
          },
          "campaign_id": {
            "type": "string",
            "description": "Unqiue campaign ID of the voucher's parent campaign if it is part of campaign that generates bulk codes."
          },
          "source": {
            "type": "string",
            "nullable": true,
            "description": "The channel through which the transaction took place, whether through the API or the the Dashboard. In case of a redemption, this value is null."
          },
          "reason": {
            "type": "string",
            "nullable": true,
            "description": "Reason why the transaction occurred. In case of a redemption, this value is null."
          },
          "type": {
            "description": "Type of transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoyaltyCardTransactionsType"
              }
            ]
          },
          "details": {
            "type": "object",
            "description": "Contains the detailed information about the transaction.",
            "properties": {
              "balance": {
                "type": "object",
                "description": "Contains information on how the balance was affected by the transaction.",
                "properties": {
                  "type": {
                    "type": "string",
                    "pattern": "loyalty_card",
                    "enum": [
                      "loyalty_card"
                    ],
                    "description": "The type of voucher whose balance is being adjusted due to the transaction."
                  },
                  "total": {
                    "type": "integer",
                    "description": "The available points prior to the transaction."
                  },
                  "object": {
                    "type": "string",
                    "pattern": "balance",
                    "enum": [
                      "balance"
                    ],
                    "description": "The type of object represented by the JSON."
                  },
                  "points": {
                    "type": "integer",
                    "description": "The amount of points being used up in the transaction."
                  },
                  "balance": {
                    "type": "integer",
                    "description": "The points balance on the loyalty card after the points in the transaction are subtracted from the loyalty card."
                  },
                  "related_object": {
                    "type": "object",
                    "required": [
                      "id",
                      "type"
                    ],
                    "description": "Defines the resource that is being modified with the values that are returned in the balance object.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Identifies the voucher that is being modified, this is the ID that was assigned by the Voucherify API."
                      },
                      "type": {
                        "type": "string",
                        "pattern": "voucher",
                        "enum": [
                          "voucher"
                        ],
                        "description": "The object being modified, i.e. voucher."
                      }
                    }
                  }
                },
                "required": [
                  "type",
                  "total",
                  "object",
                  "points",
                  "balance",
                  "related_object"
                ]
              },
              "order": {
                "type": "object",
                "description": "Contains information about the original order.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique order ID."
                  },
                  "source_id": {
                    "type": "string",
                    "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
                  }
                },
                "required": [
                  "id",
                  "source_id"
                ]
              },
              "event": {
                "type": "object",
                "description": "Contains information about the event that triggers the point accrual.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique event ID."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of event."
                  }
                },
                "required": [
                  "id",
                  "type"
                ]
              },
              "earning_rule": {
                "type": "object",
                "description": "Contains information about the earning rule.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique earning rule ID."
                  },
                  "source": {
                    "type": "object",
                    "required": [
                      "banner"
                    ],
                    "description": "Contains the custom earning rule name.",
                    "properties": {
                      "banner": {
                        "type": "string",
                        "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "source"
                ]
              },
              "segment": {
                "type": "object",
                "description": "Contains information about the segment.",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "loyalty_tier": {
                "type": "object",
                "description": "Contains information about the loyalty tier.",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "redemption": {
                "type": "object",
                "description": "Contains information about the original redemption.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique redemption ID."
                  }
                },
                "required": [
                  "id"
                ]
              },
              "rollback": {
                "type": "object",
                "description": "Contains information about the redemption rollback.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique redemption rollback ID."
                  }
                },
                "required": [
                  "id"
                ]
              },
              "custom_event": {
                "type": "object",
                "description": "Contains information about the custom event that triggers the point accrual.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique event ID."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of custom event."
                  }
                },
                "required": [
                  "id",
                  "type"
                ]
              },
              "event_schema": {
                "type": "object",
                "description": "Contains information about the custom event metadata schema.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique metadata schema ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "Type of custom event."
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "reward": {
                "type": "object",
                "description": "Contains information about the pay with points reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique reward ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "Reward name."
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "source_voucher": {
                "description": "Contains information on how the balance on the donor loyalty card was affected by the transaction.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SimpleVoucher"
                  }
                ]
              },
              "destination_voucher": {
                "description": "Contains information on how the balance on the receiving loyalty card was affected by the transaction.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SimpleVoucher"
                  }
                ]
              }
            }
          },
          "related_transaction_id": {
            "type": "string",
            "nullable": true,
            "description": "The related transaction ID on the receiving card."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the transaction was created in ISO 8601 format."
          }
        },
        "required": [
          "id",
          "source_id",
          "voucher_id",
          "campaign_id",
          "source",
          "reason",
          "type",
          "details",
          "related_transaction_id",
          "created_at"
        ]
      },
      "VoucherTransactionsExport": {
        "title": "Voucher Transactions Export",
        "type": "object",
        "description": "This is an object representing an export. \\n\\n Using this endpoint, you can export voucher transactions as a CSV file. This functionality works asynchronously and comes down to the following steps: create an export object and return its id so you can track its status, trigger a CSV file generation, change the status to SCHEDULED when the generation is over, store the file in S3 and change the status to DONE. Now you can download it.\\n\\nWith parameters you can select which fields will be exported. An export request will almost always result in a single file being generated by the system. However, when your volume of data is large, the system may split the results into multiple chunks.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID.",
            "example": "exp_FFfp9o7daWuJqJCKp5xqqli4"
          },
          "object": {
            "type": "string",
            "default": "export",
            "description": "The type of object being represented. This object stores information about the \`export\`.",
            "enum": [
              "export"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2022-04-28T11:23:20.922Z",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.",
            "enum": [
              "SCHEDULED"
            ]
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered.",
            "default": "API"
          },
          "exported_object": {
            "type": "string",
            "description": "The type of exported object.",
            "default": "voucher_transactions",
            "enum": [
              "voucher_transactions"
            ]
          },
          "parameters": {
            "$ref": "#/components/schemas/VoucherTransactionsFilters"
          },
          "result": {
            "type": "object",
            "nullable": true,
            "description": "Contains the URL of the CSV file.",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the CSV file location. It contains the \`token\` used for authorization in the <!-- [Download export](OpenAPI.json/paths/~1exports~1{export_Id}/get) -->[Download export](ref:download-export) method."
              }
            }
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the \`channel\` value is \`WEBSITE\`.",
            "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH"
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "channel",
          "exported_object",
          "parameters",
          "result",
          "user_id"
        ]
      },
      "VoucherTransactionsExportParameters": {
        "description": "List of available fields and filters that can be exported with a gift card or loyalty card transactions export along with the sorting order of the returned data.",
        "title": "Export Transactions",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash \`-\` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_CANCELLATION\` <br> - \`POINTS_REDEMPTION\`<br> - \`POINTS_REFUND\`<br> - \`POINTS_ADDITION\`<br> - \`POINTS_REMOVAL\`<br> - \`POINTS_EXPIRATION\`<br> - \`POINTS_TRANSFER_IN\`<br> - \`POINTS_TRANSFER_OUT\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "type",
                "source_id",
                "reason",
                "balance",
                "amount",
                "created_at",
                "voucher_id",
                "campaign_id",
                "source",
                "details",
                "related_transaction_id"
              ]
            }
          }
        }
      },
      "ApplicableTo": {
        "title": "Applicable To",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "product",
              "sku",
              "products_collection"
            ],
            "description": "This object stores information about the product collection."
          },
          "id": {
            "type": "string",
            "description": "Unique product collection ID assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "The source ID from your inventory system."
          },
          "product_id": {
            "type": "string",
            "description": "Parent product's unique ID assigned by Voucherify."
          },
          "product_source_id": {
            "type": "string",
            "description": "Parent product's source ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "price": {
            "type": "number",
            "description": "New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the price_formula parameter is present in the fixed price definition, this value becomes the fallback value. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price."
          },
          "price_formula": {
            "type": "number",
            "description": "Formula used to calculate the discounted price of an item."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicableToEffect"
              }
            ]
          },
          "quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted per order line item."
          },
          "aggregated_quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted combined across all matched order line items."
          },
          "amount_limit": {
            "type": "integer",
            "description": "Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects:\\n- \`APPLY_TO_ITEMS\` (each item subtotal is discounted equally)\\n- \`APPLY_TO_ITEMS_BY_QUANTITY\` (each unit of matched products has the same discount value)"
          },
          "order_item_indices": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "object",
          "id",
          "strict",
          "effect"
        ]
      },
      "CampaignLoyaltyVoucher": {
        "type": "object",
        "description": "Schema model for a discount voucher.",
        "title": "Campaign Loyalty Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "description": "Type of voucher.",
            "enum": [
              "LOYALTY_CARD"
            ]
          },
          "loyalty_card": {
            "$ref": "#/components/schemas/CampaignLoyaltyCard"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          }
        },
        "required": [
          "type",
          "loyalty_card"
        ]
      },
      "CampaignVoucher": {
        "type": "object",
        "description": "Schema model for a campaign voucher.",
        "title": "Campaign Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher."
          },
          "discount": {
            "description": "Defines the voucher discount type and details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Discount"
              }
            ]
          },
          "gift": {
            "description": "Defines the voucher gift details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the voucher loyalty card details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignLoyaltyCard"
              }
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            },
            "required": [
              "quantity"
            ]
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfigRequiredLengthCharsetPattern"
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          }
        },
        "required": [
          "type",
          "redemption",
          "code_config",
          "is_referral_code"
        ]
      },
      "CampaignsCreateBase": {
        "type": "object",
        "title": "Campaign Create Schema Base",
        "description": "Base body schema for creating a campaign using **POST** \`/campaigns\`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "campaign_type": {
            "type": "string",
            "default": "DISCOUNT_COUPONS",
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \\n\\n- \`AUTO_UPDATE\`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \\n-  \`STATIC\`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign (size of campaign)."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a \`duration\` of \`P24D\` will be valid for a duration of 24 days."
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the promotion tier.",
            "items": {
              "type": "string"
            },
            "maxItems": 1
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the \`category\`.",
            "example": "cat_0b688929a2476386a7"
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          }
        }
      },
      "CampaignsImportVoucherLoyaltyCard": {
        "type": "object",
        "description": "Schema model for a campaign loyalty card.",
        "title": "Campaigns Import Voucher Loyalty Card",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The initial number of points to assign to the loyalty card. This is the current loyalty card score i.e. the number of loyalty points on the card."
          }
        },
        "required": [
          "points"
        ]
      },
      "CampaignsUpdateBase": {
        "type": "object",
        "title": "Campaign Update Schema Base",
        "description": "Base body schema for creating a campaign using **PUT** \`/campaigns\`.",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the \`category_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "unset_metadata_fields": {
            "type": "array",
            "nullable": true,
            "description": "Determine which metadata should be removed from campaign.",
            "items": {
              "type": "string"
            }
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the \`category\`.",
            "example": "cat_0b688929a2476386a7"
          }
        }
      },
      "CampaignsUpdateCouponCampaignBase": {
        "type": "object",
        "title": "Update Coupon Campaign Schema Base",
        "description": "Base body schema for updating a campaign which contains coupon codes using **PUT** \`/campaigns\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateBase"
          },
          {
            "type": "object",
            "title": "",
            "properties": {
              "activity_duration_after_publishing": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a \`duration\` of \`P24D\` will be valid for a duration of 24 days."
              },
              "join_once": {
                "type": "boolean",
                "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
              },
              "auto_join": {
                "type": "boolean",
                "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
              },
              "type": {
                "type": "string",
                "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \\n\\n- \`AUTO_UPDATE\`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \\n-  \`STATIC\`: vouchers need to be manually published.",
                "enum": [
                  "AUTO_UPDATE",
                  "STATIC"
                ]
              }
            }
          }
        ]
      },
      "CreatePublicationBase": {
        "title": "Create Publication Base",
        "type": "object",
        "description": "Create publication",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service.\\nIf \`source_id\` is provided only 1 voucher can be published per request."
          },
          "customer": {
            "description": "Contains information about the customer to whom the publication was directed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          }
        },
        "required": [
          "customer"
        ]
      },
      "CustomerActivityData": {
        "title": "Customer Activity Data",
        "description": "Event data object schema.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConfirmed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerDeleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerReferred"
          },
          {
            "$ref": "#/components/schemas/EventCustomerCustomEvent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSegmentEntered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSegmentLeft"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifySent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifyRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifyFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewarded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardedLoyaltyPoints"
          },
          {
            "$ref": "#/components/schemas/EventCustomerGiftVoucherBalanceAdded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyCardPointsAdded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyCardPointsTransferred"
          },
          {
            "$ref": "#/components/schemas/EventCustomerVouchersLoyaltyPointsExpired"
          },
          {
            "$ref": "#/components/schemas/EventCustomerVoucherDeleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerPublicationSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerPublicationFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerValidationSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerValidationFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionRollbackSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionRollbackFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerConsentsGiven"
          },
          {
            "$ref": "#/components/schemas/EventCustomerConsentsRevoked"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderCanceled"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderFulfilled"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderPaid"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderProcessing"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsPending"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsCompleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsRolledBack"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierUpgraded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierDowngraded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierProlonged"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierExpirationChanged"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierJoined"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierLeft"
          }
        ]
      },
      "CustomerId": {
        "title": "Customer Id",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier of an existing customer."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "customer",
            "enum": [
              "customer"
            ]
          }
        },
        "required": [
          "id",
          "object"
        ]
      },
      "CustomerLoyalty": {
        "title": "Customer Loyalty",
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "description": "Customer's loyalty points."
          },
          "referred_customers": {
            "type": "integer",
            "description": "Total number of customers referred by the customer."
          },
          "campaigns": {
            "type": "object",
            "description": "Contains campaigns with details about point balances and how many customers were referred by the customer.",
            "additionalProperties": {
              "type": "object",
              "description": "Contains details about the point balances left on loyalty cards and the number of referred customers in each campaign.",
              "properties": {
                "points": {
                  "type": "integer",
                  "description": "Remaining point balance in campaign."
                },
                "loyalty_tier": {
                  "type": "string",
                  "example": "ltr_UJ5Q54Q0OvEhua87Qfv2Ki5x",
                  "description": "Customer's loyalty tier within the campaign."
                },
                "referred_customers": {
                  "type": "integer",
                  "description": "Number of customers referred by the customer in campaign."
                }
              }
            }
          }
        },
        "required": [
          "points",
          "referred_customers",
          "campaigns"
        ]
      },
      "CustomerReferrals": {
        "title": "Customer Referrals",
        "type": "object",
        "description": "Summary of customer's referrals, in this case, the customer being the referee, i.e. information about the source of referrals and number of times the customer was referred by other customers.",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of times this customer received a referral, i.e. was referred by another customer."
          },
          "campaigns": {
            "type": "array",
            "description": "Contains an array of campaigns that served as the source of a referral for the customer.",
            "items": {
              "type": "object",
              "description": "Contains information about the source of the referral.",
              "properties": {
                "campaign_id": {
                  "type": "string",
                  "description": "Unique campaign ID, assigned by Voucherify.",
                  "example": "camp_rRsfatlwN7unSeUIJDCYedal"
                },
                "referrer_id": {
                  "type": "string",
                  "example": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                  "description": "Unique referrer ID, assigned by Voucherify. This is the customer ID of a customer that is referring this customer."
                },
                "related_object_id": {
                  "type": "string",
                  "description": "Related object id",
                  "example": "r_0b9d4cc4aa164dd073"
                },
                "related_object_type": {
                  "type": "string",
                  "description": "Related object type, i.e. \`redemption\`."
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-08-30T10:19:39.196Z",
                  "description": "Timestamp representing the date and time when the customer was referred in ISO 8601 format."
                }
              },
              "required": [
                "campaign_id",
                "referrer_id",
                "related_object_id",
                "related_object_type",
                "date"
              ]
            }
          }
        },
        "required": [
          "total",
          "campaigns"
        ]
      },
      "CustomerSummary": {
        "title": "Customer Summary",
        "type": "object",
        "properties": {
          "redemptions": {
            "$ref": "#/components/schemas/CustomerSummaryRedemptions"
          },
          "orders": {
            "$ref": "#/components/schemas/CustomerSummaryOrders"
          }
        },
        "required": [
          "redemptions",
          "orders"
        ]
      },
      "Discount": {
        "title": "Discount",
        "type": "object",
        "description": "Contains information about discount.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DiscountAmount"
          },
          {
            "$ref": "#/components/schemas/DiscountUnit"
          },
          {
            "$ref": "#/components/schemas/DiscountUnitMultiple"
          },
          {
            "$ref": "#/components/schemas/DiscountPercent"
          },
          {
            "$ref": "#/components/schemas/DiscountFixed"
          }
        ]
      },
      "DiscountCouponsCampaignVoucher": {
        "title": "Object representing voucher property for Discount Coupons Campaign",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          }
        },
        "required": [
          "type",
          "discount"
        ]
      },
      "EarningRuleEvent": {
        "title": "Earning Rule Event",
        "type": "string",
        "enum": [
          "order.paid",
          "customer.segment.entered",
          "custom_event",
          "customer.loyalty.tier.upgraded",
          "customer.loyalty.tier.downgraded",
          "customer.loyalty.tier.prolonged",
          "customer.loyalty.tier.joined",
          "customer.loyalty.tier.left"
        ]
      },
      "EarningRuleFixed": {
        "title": "Define fixed amount of points",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FIXED"
            ],
            "description": "The number of points to be added to the loyalty card."
          },
          "points": {
            "type": "integer",
            "description": "Defines how the points will be added to the loyalty card. FIXED adds a fixed number of points."
          }
        }
      },
      "EarningRuleProportional": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrder"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItems"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalCustomerMetadata"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalCustomEvent"
          }
        ],
        "title": "Calculate points proportionally"
      },
      "Error": {
        "title": "Error Object",
        "type": "object",
        "description": "Error details",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "resource_id": {
            "type": "string",
            "description": "Unique resource ID that can be used in another endpoint to get more details.",
            "example": "rf_0c5d710a87c8a31f86"
          },
          "resource_type": {
            "type": "string",
            "description": "The resource type.",
            "example": "voucher"
          }
        },
        "required": [
          "code",
          "key",
          "message",
          "details",
          "request_id"
        ]
      },
      "ExportCustomer": {
        "title": "Export Customers",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          }
        ]
      },
      "ExportCustomerFields": {
        "type": "string",
        "enum": [
          "name",
          "id",
          "description",
          "email",
          "source_id",
          "created_at",
          "address_city",
          "address_state",
          "address_line_1",
          "address_line_2",
          "address_country",
          "address_postal_code",
          "redemptions_total_redeemed",
          "redemptions_total_failed",
          "redemptions_total_succeeded",
          "redemptions_total_rolled_back",
          "redemptions_total_rollback_failed",
          "redemptions_total_rollback_succeeded",
          "orders_total_amount",
          "orders_total_count",
          "orders_average_amount",
          "orders_last_order_amount",
          "orders_last_order_date",
          "loyalty_points",
          "loyalty_referred_customers",
          "updated_at",
          "phone",
          "birthday",
          "metadata",
          "birthdate"
        ],
        "title": "Export Customer Fields"
      },
      "ExportCustomerFilters": {
        "title": "Export Customer Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "name": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "description": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "email": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_city": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_state": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_line_1": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_line_2": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_country": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "address_postal_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_redeemed": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_failed": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_succeeded": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_rolled_back": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_rollback_failed": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemptions_total_rollback_succeeded": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_total_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_total_count": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_average_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_last_order_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "orders_last_order_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_points": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_referred_customers": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "updated_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "phone": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "birthday": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "birthdate": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportCustomerOrder": {
        "title": "Export Customer Order",
        "type": "string",
        "enum": [
          "name",
          "-name",
          "id",
          "-id",
          "description",
          "-description",
          "email",
          "-email",
          "source_id",
          "-source_id",
          "created_at",
          "-created_at",
          "address_city",
          "-address_city",
          "address_state",
          "-address_state",
          "address_line_1",
          "-address_line_1",
          "address_line_2",
          "-address_line_2",
          "address_country",
          "-address_country",
          "address_postal_code",
          "-address_postal_code",
          "redemptions_total_redeemed",
          "-redemptions_total_redeemed",
          "redemptions_total_failed",
          "-redemptions_total_failed",
          "redemptions_total_succeeded",
          "-redemptions_total_succeeded",
          "redemptions_total_rolled_back",
          "-redemptions_total_rolled_back",
          "redemptions_total_rollback_failed",
          "-redemptions_total_rollback_failed",
          "redemptions_total_rollback_succeeded",
          "-redemptions_total_rollback_succeeded",
          "orders_total_amount",
          "-orders_total_amount",
          "orders_total_count",
          "-orders_total_count",
          "orders_average_amount",
          "-orders_average_amount",
          "orders_last_order_amount",
          "-orders_last_order_amount",
          "orders_last_order_date",
          "-orders_last_order_date",
          "loyalty_points",
          "-loyalty_points",
          "loyalty_referred_customers",
          "-loyalty_referred_customers",
          "updated_at",
          "-updated_at",
          "phone",
          "-phone",
          "birthday",
          "-birthday",
          "metadata",
          "-metadata",
          "birthdate",
          "-birthdate"
        ]
      },
      "ExportOrder": {
        "title": "Export Orders",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "ExportPointsExpiration": {
        "title": "Export Points Expiration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          }
        ]
      },
      "ExportPointsExpirationFields": {
        "title": "Export Points Expiration Fields",
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "points",
          "status",
          "expires_at"
        ]
      },
      "ExportPointsExpirationFilters": {
        "title": "Export Points Expiration Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "points": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "status": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "expires_at": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportPointsExpirationOrder": {
        "title": "Export Points Expiration Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "campaign_id",
          "-campaign_id",
          "voucher_id",
          "-voucher_id",
          "points",
          "-points",
          "status",
          "-status",
          "expires_at",
          "-expires_at"
        ]
      },
      "ExportPublication": {
        "title": "Export Publication",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          }
        ]
      },
      "ExportPublicationFields": {
        "title": "Export Publication Fields",
        "type": "string",
        "enum": [
          "voucher_code",
          "customer_id",
          "customer_source_id",
          "date",
          "channel",
          "campaign",
          "is_winner",
          "metadata"
        ]
      },
      "ExportPublicationFilters": {
        "title": "Export Publication Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "voucher_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "channel": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "is_winner": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportPublicationOrder": {
        "title": "Export Publication Order",
        "type": "string",
        "enum": [
          "voucher_code",
          "-voucher_code",
          "customer_id",
          "-customer_id",
          "customer_source_id",
          "-customer_source_id",
          "date",
          "-date",
          "channel",
          "-channel",
          "campaign",
          "-campaign",
          "is_winner",
          "-is_winner",
          "metadata",
          "-metadata"
        ]
      },
      "ExportRedemption": {
        "title": "Export Redemption",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          }
        ]
      },
      "ExportRedemptionFields": {
        "title": "Export Redemption Fields",
        "type": "string",
        "enum": [
          "id",
          "object",
          "date",
          "voucher_code",
          "campaign",
          "promotion_tier_id",
          "customer_id",
          "customer_source_id",
          "customer_name",
          "tracking_id",
          "order_amount",
          "gift_amount",
          "loyalty_points",
          "result",
          "failure_code",
          "failure_message",
          "metadata"
        ]
      },
      "ExportRedemptionFilters": {
        "title": "Export Redemption Filters",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "object": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "promotion_tier_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_name": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "tracking_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "order_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "gift_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_points": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "result": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "failure_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "failure_message": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportRedemptionOrder": {
        "title": "Export Redemption Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "object",
          "-object",
          "date",
          "-date",
          "voucher_code",
          "-voucher_code",
          "campaign",
          "-campaign",
          "promotion_tier_id",
          "-promotion_tier_id",
          "customer_id",
          "-customer_id",
          "customer_source_id",
          "-customer_source_id",
          "customer_name",
          "-customer_name",
          "tracking_id",
          "-tracking_id",
          "order_amount",
          "-order_amount",
          "gift_amount",
          "-gift_amount",
          "loyalty_points",
          "-loyalty_points",
          "result",
          "-result",
          "failure_code",
          "-failure_code",
          "failure_message",
          "-failure_message",
          "metadata",
          "-metadata"
        ]
      },
      "ExportVoucher": {
        "title": "Export Voucher",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          }
        ]
      },
      "ExportVoucherFields": {
        "title": "Export Voucher Fields",
        "type": "string",
        "enum": [
          "code",
          "voucher_type",
          "value",
          "discount_type",
          "campaign",
          "category",
          "start_date",
          "expiration_date",
          "gift_balance",
          "loyalty_balance",
          "redemption_quantity",
          "redemption_count",
          "active",
          "qr_code",
          "bar_code",
          "metadata",
          "id",
          "is_referral_code",
          "created_at",
          "updated_at",
          "validity_timeframe_interval",
          "validity_timeframe_duration",
          "validity_day_of_week",
          "discount_amount_limit",
          "campaign_id",
          "additional_info",
          "customer_id",
          "discount_unit_type",
          "discount_unit_effect",
          "customer_source_id"
        ]
      },
      "ExportVoucherFilters": {
        "title": "Export Voucher Filters",
        "type": "object",
        "properties": {
          "junction": {
            "description": "Filter by conditions set on the junction parameter indicating how the conditions should be accounted for in the query. An AND is an all-inclusive logical operator, meaning the AND operator displays a record if ALL the conditions separated by AND are TRUE, while an OR operator displays a record if ANY of the conditions separated by OR is TRUE.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Junction"
              }
            ]
          },
          "code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "value": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "category": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "start_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "gift_balance": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "loyalty_balance": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemption_quantity": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemption_count": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "active": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "qr_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "bar_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "metadata": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "is_referral_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "updated_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_timeframe_interval": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_timeframe_duration": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_day_of_week": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_amount_limit": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "additional_info": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_unit_type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_unit_effect": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportVoucherOrder": {
        "title": "Export Voucher Order",
        "type": "string",
        "enum": [
          "code",
          "-code",
          "voucher_type",
          "-voucher_type",
          "value",
          "-value",
          "discount_type",
          "-discount_type",
          "campaign",
          "-campaign",
          "category",
          "-category",
          "start_date",
          "-start_date",
          "expiration_date",
          "-expiration_date",
          "gift_balance",
          "-gift_balance",
          "loyalty_balance",
          "-loyalty_balance",
          "redemption_quantity",
          "-redemption_quantity",
          "redemption_count",
          "-redemption_count",
          "active",
          "-active",
          "qr_code",
          "-qr_code",
          "bar_code",
          "-bar_code",
          "metadata",
          "-metadata",
          "id",
          "-id",
          "is_referral_code",
          "-is_referral_code",
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "validity_timeframe_interval",
          "-validity_timeframe_interval",
          "validity_timeframe_duration",
          "-validity_timeframe_duration",
          "validity_day_of_week",
          "-validity_day_of_week",
          "discount_amount_limit",
          "-discount_amount_limit",
          "campaign_id",
          "-campaign_id",
          "additional_info",
          "-additional_info",
          "customer_id",
          "-customer_id",
          "discount_unit_type",
          "-discount_unit_type",
          "discount_unit_effect",
          "-discount_unit_effect",
          "customer_source_id",
          "-customer_source_id"
        ]
      },
      "ExportVoucherTransactionsExpiration": {
        "title": "Export Vouchers Transactions Expiration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsExpirationBase"
          }
        ]
      },
      "ExportVoucherTransactionsFields": {
        "title": "Export Voucher Transactions Fields",
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "type",
          "source_id",
          "reason",
          "source",
          "balance",
          "amount",
          "related_transaction_id",
          "created_at",
          "details"
        ]
      },
      "ExportVoucherTransactionsFilters": {
        "title": "Export Voucher Transactions Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "reason": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "balance": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "related_transaction_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "details": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportVoucherTransactionsOrder": {
        "title": "Export Voucher Transactions Order",
        "type": "string",
        "enum": [
          "id",
          "-id",
          "campaign_id",
          "-campaign_id",
          "voucher_id",
          "-voucher_id",
          "type",
          "-type",
          "source_id",
          "-source_id",
          "reason",
          "-reason",
          "source",
          "-source",
          "balance",
          "-balance",
          "amount",
          "-amount",
          "related_transaction_id",
          "-related_transaction_id",
          "created_at",
          "-created_at",
          "details",
          "-details"
        ]
      },
      "FieldConditions": {
        "title": "Field Conditions",
        "type": "object",
        "properties": {
          "conditions": {
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FiltersCondition"
              }
            ]
          }
        }
      },
      "Gift": {
        "title": "Gift",
        "type": "object",
        "additionalProperties": false,
        "description": "Contains current gift card balance information.",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "balance": {
            "type": "number",
            "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "effect": {
            "type": "string",
            "description": "Defines how the credits are applied to the customer's order.",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ]
          }
        },
        "required": [
          "amount",
          "balance"
        ]
      },
      "GiftCampaignVoucher": {
        "type": "object",
        "description": "Schema model for a discount voucher.",
        "title": "Discount Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "GIFT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "GIFT_VOUCHER"
            ]
          },
          "gift": {
            "$ref": "#/components/schemas/Gift"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          }
        },
        "required": [
          "type",
          "gift"
        ]
      },
      "GiveawayCampaignVoucher": {
        "title": "Object representing voucher property for Giveaway Campaign",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          }
        },
        "required": [
          "type",
          "discount"
        ]
      },
      "ListPublicationsItemBase": {
        "title": "List Publications Item Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pub_BbjAXnmm8e0SIm3zG8qvvFCP0KuLywtp",
            "description": "Unique publication ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "enum": [
              "publication"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the \`publication\`."
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-23T09:57:00.434Z",
            "description": "Timestamp representing the date and time when the publication was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of the customer receiving the publication."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          },
          "channel": {
            "type": "string",
            "description": "How the publication was originated. It can be your own custom channel or an example value provided here."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. "
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "vouchers_id": {
            "type": "array",
            "description": "Contains the unique internal voucher ID that was assigned by Voucherify.",
            "items": {
              "type": "string",
              "example": "v_Bw3qWZWv47yb1Onra8F2LlFI1enLakfA"
            }
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "customer_id",
          "metadata",
          "channel",
          "source_id",
          "customer",
          "vouchers_id"
        ]
      },
      "ListPublicationsItemVoucher": {
        "type": "object",
        "title": "List Publications Item Voucher",
        "properties": {
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "voucher"
            ]
          },
          "campaign": {
            "description": "Campaign name",
            "type": "string"
          },
          "gift": {
            "description": "Gift object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object"
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          }
        },
        "required": [
          "code",
          "object",
          "campaign"
        ]
      },
      "LoyaltyCardTransactionsType": {
        "title": "LoyaltyCardTransactionsType",
        "type": "string",
        "enum": [
          "POINTS_ACCRUAL",
          "POINTS_CANCELLATION",
          "POINTS_REDEMPTION",
          "POINTS_REFUND",
          "POINTS_ADDITION",
          "POINTS_REMOVAL",
          "POINTS_EXPIRATION",
          "POINTS_TRANSFER_IN",
          "POINTS_TRANSFER_OUT"
        ]
      },
      "LoyaltyTierExpiration": {
        "title": "Loyalty Tier Expiration",
        "description": "Defines loyalty tier expiration date.",
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "campaign_id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_rRsfatlwN7unSeUIJDCYedal"
          },
          "tier_id": {
            "type": "string",
            "description": "Unique tier ID, assigned by Voucherify."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the loyalty tier starts to be active in ISO 8601 format. Loyalty tier is inactive before this date."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration timestamp defines when the loyalty tier expires in ISO 8601 format. Loyalty tier is inactive after this date."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the loyalty tier was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the loyalty tier was updated in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "customer_id",
          "campaign_id",
          "tier_id",
          "created_at"
        ]
      },
      "LoyaltyTiersExpirationAll": {
        "title": "Loyalty Tiers Expiration",
        "type": "object",
        "description": "Defines the Loyalty Tiers Expiration.",
        "properties": {
          "qualification_type": {
            "type": "string",
            "enum": [
              "BALANCE",
              "POINTS_IN_PERIOD"
            ],
            "description": "Tier qualification.   \\n\\n\`BALANCE\`: Points balance is based on the customer's current points balance. Customers qualify for the tier if their points balance is in the points range of the tier. \\n \`POINTS_IN_PERIOD\`: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold."
          },
          "qualification_period": {
            "type": "string",
            "description": "Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.    \\n\\n| **Period** | **Definition** |\\n|:---|:---|\\n| **Calendar Month** | Points collected in one calendar month<br>January, February, March, etc. |\\n| **Calendar Quarter** | Points collected in the quarter<br>- January - March<br>- April - June<br>- July - September<br>- October - December |\\n| **Calendar Half-year** | Points collected in the half-year<br>- January - June<br>- July - December |\\n| **Calendar Year** | Points collected in one calendar year<br>January - December |",
            "enum": [
              "MONTH",
              "QUARTER",
              "HALF_YEAR",
              "YEAR"
            ]
          },
          "start_date": {
            "type": "object",
            "description": "Defines the conditions for the start date of the tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IMMEDIATE",
                  "NEXT_PERIOD"
                ],
                "description": "What triggers the tier to be valid for a customer.    \\n\`IMMEDIATE\`: After reaching the minimum required points. \\n\`NEXT_PERIOD\`: When the next qualification period starts."
              }
            },
            "required": [
              "type"
            ]
          },
          "expiration_date": {
            "type": "object",
            "description": "Defines the conditions for the expiration date of a tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "END_OF_PERIOD",
                  "END_OF_NEXT_PERIOD",
                  "BALANCE_DROP",
                  "CUSTOM"
                ],
                "description": "What triggers the tier to expire for a customer.    \\n\`END_OF_PERIOD\`: Expire tier at the end of the period.    \\n\`END_OF_NEXT_PERIOD\`:  Expire tier at the end of the next period. \\n \`BALANCE_DROP\`: Tier expires when the points balance drops below the required range of the tier. \\n \`CUSTOM\`: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier."
              },
              "extend": {
                "type": "string",
                "description": "Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of \`P3M\` will be valid for an additional duration of 3 months and a tier with a duration of \`P1D\` will be valid for an additional duration of 1 day."
              },
              "rounding": {
                "description": "Defines the rounding mechanism for tier expiration.",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "MONTH",
                      "QUARTER",
                      "HALF_YEAR",
                      "YEAR",
                      "CUSTOM"
                    ],
                    "description": "This mechanism describes a custom rounding for the expiration date."
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "START",
                      "END"
                    ],
                    "description": "This mechanism describes a rounding strategy for the expiration date."
                  },
                  "unit": {
                    "type": "string",
                    "description": "Defines the type of unit of time in which the rounding period is counted.",
                    "enum": [
                      "MONTH"
                    ]
                  },
                  "value": {
                    "type": "integer",
                    "description": "Value for the unit of time that the rounding applies to. Units for this parameter are defined by the \`rounding.unit\` parameter.    \\n- \`0\`: January\\n- \`1\`: February\\n- \`2\`: March\\n- \`3\`: April\\n- \`4\`: May\\n- \`5\`: June\\n- \`6\`: July\\n- \`7\`: August\\n- \`8\`: September\\n- \`9\`: October\\n- \`10\`: November\\n- \`11\`: December"
                  }
                }
              }
            },
            "required": [
              "type",
              "extend"
            ]
          }
        },
        "required": [
          "qualification_type",
          "start_date",
          "expiration_date"
        ]
      },
      "LuckyDraw": {
        "type": "object",
        "title": "Lucky Draw",
        "description": "Object for defining detailed information about lucky draw should be applied",
        "properties": {
          "winners_count": {
            "description": "It represents the total number of winners in a lucky draw.",
            "minimum": 1,
            "type": "string"
          },
          "unique_winners_per_draw": {
            "description": "It indicates whether each winner in a draw is unique or not.",
            "type": "string"
          },
          "unique_winners": {
            "description": "Specifies whether each participant can win only once across multiple draws.",
            "type": "string"
          }
        }
      },
      "MappingPoints": {
        "title": "MappingPoints",
        "oneOf": [
          {
            "$ref": "#/components/schemas/MappingMultiply"
          },
          {
            "$ref": "#/components/schemas/MappingFixed"
          }
        ]
      },
      "OrderCalculatedBase": {
        "title": "Order Response Base",
        "type": "object",
        "additionalProperties": false,
        "description": "Order information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the order was last updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order."
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied in a particular request.  \\n\`sum(items, i => i.applied_discount_amount)\`"
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \\n\`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\`"
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/OrderItemCalculated"
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "order"
            ]
          },
          "redemptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OrderRedemptions"
            }
          }
        },
        "required": [
          "id",
          "source_id",
          "customer_id",
          "referrer_id",
          "object"
        ]
      },
      "OrderItem": {
        "type": "object",
        "title": "Order Item",
        "properties": {
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "initial_quantity": {
            "type": "integer",
            "description": "A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items' quantity."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "\\nSum of all order-item-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "product": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the product and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s product ID (if it is different than Voucherify's product ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a product. It can be useful for storing additional information about the product in a structured format."
              },
              "price": {
                "type": "number",
                "description": "Product price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "sku": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related SKU.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s SKU ID (if it is different than Voucherify's SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "sku": {
                "type": "string",
                "description": "The SKU name."
              },
              "price": {
                "type": "number",
                "description": "SKU price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "ProductWithoutSkus": {
        "title": "Product without Skus Object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID assigned by Voucherify.",
            "example": "prod_0b1da8105693710357"
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "example": "productSourceID16",
            "description": "Unique product source ID."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "nullable": true,
            "description": "Product unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: \`[\\"color\\",\\"size\\",\\"ranking\\"]\`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the product was created in ISO 8601 format.",
            "example": "2022-05-23T06:52:55.008Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the product was updated in ISO 8601 format.",
            "example": "2022-05-23T09:24:07.405Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about the product.",
            "default": "product",
            "enum": [
              "product"
            ]
          }
        },
        "required": [
          "id",
          "source_id",
          "name",
          "attributes",
          "metadata",
          "object",
          "price"
        ]
      },
      "PromotionTierCreateParams": {
        "type": "object",
        "description": "This is an object representing a promotion tier create params. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "title": "Promotion Tier Create Params",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "$ref": "#/components/schemas/Discount"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the promotion tier.",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the \`start_date\` and \`expiration_date\`.  \\n\\n- \`true\` indicates an *active* promotion tier\\n- \`false\` indicates an *inactive* promotion tier"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.\`start_date\` **required** when including the \`validity_timeframe\`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an \`interval\` of \`P2D\` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a \`duration\` of \`P1D\` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\\n\\n- \`0\`  Sunday  \\n- \`1\`  Monday  \\n- \`2\`  Tuesday  \\n- \`3\`  Wednesday  \\n- \`4\`  Thursday  \\n- \`5\`  Friday  \\n- \`6\`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "category": {
            "type": "string",
            "description": "Assign category to the promotion tier."
          },
          "category_id": {
            "type": "string",
            "description": "Instead of using the category name, you can alternatively assign a new category to a promotion tier using a unique category ID, i.e. \`cat_0c9da30e7116ba6bba\`.",
            "example": "cat_0c9da30e7116ba6bba"
          }
        },
        "required": [
          "name"
        ]
      },
      "PublicationsCreateBaseResponseBody": {
        "title": "Publications Create Base Response Body",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pub_BbjAXnmm8e0SIm3zG8qvvFCP0KuLywtp",
            "description": "Unique publication ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "enum": [
              "publication"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the \`publication\`."
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-23T09:57:00.434Z",
            "description": "Timestamp representing the date and time when the publication was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of the customer receiving the publication."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's \`source_id\`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          },
          "channel": {
            "type": "string",
            "description": "How the publication was originated. It can be your own custom channel or an example value provided here.",
            "enum": [
              "API"
            ]
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. "
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS"
            ],
            "description": "Status of the publication attempt."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "vouchers_id": {
            "type": "array",
            "description": "Contains the unique internal voucher ID that was assigned by Voucherify.",
            "items": {
              "type": "string",
              "example": "v_Bw3qWZWv47yb1Onra8F2LlFI1enLakfA"
            }
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "customer_id",
          "metadata",
          "channel",
          "source_id",
          "result",
          "customer",
          "vouchers_id"
        ]
      },
      "QualificationsFiltersCondition": {
        "title": "Qualifications Filters Condition\\n",
        "type": "object",
        "properties": {
          "$is": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_not": {
            "$ref": "#/components/schemas/Any"
          },
          "$has_value": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_unknown": {
            "$ref": "#/components/schemas/Any"
          },
          "$in": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_in": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "QualificationsRedeemable": {
        "title": "Combined response of redeemable object and multiple redeemables within",
        "allOf": [
          {
            "$ref": "#/components/schemas/QualificationsRedeemableBase"
          },
          {
            "type": "object",
            "title": "",
            "properties": {
              "redeemables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QualificationsRedeemableBase"
                }
              }
            }
          }
        ]
      },
      "RedeemGiftCard": {
        "title": "Redeem Gift Card",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedeemVoucher"
          },
          {
            "type": "object",
            "properties": {
              "gift": {
                "type": "object",
                "description": "Contains information on the number of gift card credits that the customer wants to apply to the order.",
                "properties": {
                  "credits": {
                    "type": "integer",
                    "description": "The number of credits that the user wants to use from the gift card to fulfill the order. The value of credits cannot be higher than the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
                  }
                }
              }
            }
          }
        ]
      },
      "RedeemLoyaltyCard": {
        "title": "Redeem Loyalty Card",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedeemVoucher"
          },
          {
            "type": "object",
            "properties": {
              "reward": {
                "type": "object",
                "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward.",
                    "example": "rew_EPx1hCTpqzF0HW1z9NKckZH4"
                  },
                  "points": {
                    "type": "integer",
                    "description": "The number of loyalty points that the user wants to spend in order to fulfill the order using a **pay with points** reward. The number of points cannot be higher than the current balance on the loyalty card."
                  }
                }
              }
            }
          }
        ]
      },
      "RedeemPromotionStack": {
        "title": "Redeem Promotion Stack",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "enum": [
              "promotion_stack"
            ],
            "default": "promotion_stack"
          },
          "id": {
            "type": "string",
            "description": "Promotion stack unique id, such as: stack_KxSD0GahLUg9ULB6TseGfUHJ"
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedeemPromotionTier": {
        "title": "Redeem Promotion Tier",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "enum": [
              "promotion_tier"
            ],
            "default": "promotion_tier"
          },
          "id": {
            "type": "string",
            "description": "Promotion tier unique id, such as: promo_Mwy9XpA0TLctSGriM5kum0qp"
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedeemVoucher": {
        "title": "Redeem Voucher",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "enum": [
              "voucher"
            ],
            "default": "voucher"
          },
          "id": {
            "type": "string",
            "description": "Redeemable code."
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedemptionRewardResult": {
        "title": "Redemption Reward Result",
        "type": "object",
        "properties": {
          "reward": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Reward"
              }
            ]
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "assignment_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique reward assignment ID assigned by Voucherify."
          },
          "voucher": {
            "nullable": true,
            "description": "Defines of the voucher.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "product": {
            "nullable": true,
            "description": "Defines of the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "sku": {
            "nullable": true,
            "description": "Defines of the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Sku"
              }
            ]
          },
          "loyalty_tier_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique loyalty tier ID assigned by Voucherify."
          }
        },
        "required": [
          "reward",
          "customer",
          "assignment_id",
          "voucher",
          "product",
          "sku",
          "loyalty_tier_id"
        ]
      },
      "ReferralCampaignVoucher": {
        "title": "Object representing voucher property for Referal Program",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A \`null\` value means unlimited."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          }
        },
        "required": [
          "type",
          "discount",
          "is_referral_code"
        ]
      },
      "ReferralProgram": {
        "title": "Referral Program",
        "description": "Defines the referee reward and the way a referral is triggered. Context: \`REFERRAL_PROGRAM\`.",
        "type": "object",
        "properties": {
          "conversion_event_type": {
            "type": "string",
            "enum": [
              "redemption",
              "custom_event"
            ],
            "description": "Define how a referral is triggered."
          },
          "custom_event": {
            "type": "object",
            "description": "Contains details about the custom event.",
            "properties": {
              "id": {
                "type": "string",
                "example": "ms_Ll9enAm2BCN0M1s4VxWobLFM",
                "description": "Unique custom event ID."
              },
              "name": {
                "type": "string",
                "description": "Custom event name."
              }
            }
          },
          "referee_reward": {
            "type": "object",
            "description": "Defines the referee reward.",
            "properties": {
              "related_object_parent": {
                "type": "object",
                "description": "Details of the resource from which the reward originates.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                    "description": "Unique ID of the reward source."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the reward source."
                  },
                  "object": {
                    "type": "string",
                    "enum": [
                      "CAMPAIGN"
                    ],
                    "description": "Type of resource represented by the source of the reward."
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "DISCOUNT_VOUCHER",
                  "LOYALTY_CARD",
                  "GIFT_VOUCHER",
                  "LUCKY_DRAW_CODE"
                ],
                "description": "Type of reward."
              },
              "amount": {
                "type": "string",
                "description": "Define the number of \`points\` to add to a loyalty card or \`credits\` to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              }
            }
          }
        }
      },
      "Referrer": {
        "title": "Referrer",
        "allOf": [
          {
            "$ref": "#/components/schemas/Customer"
          }
        ]
      },
      "ReferrerId": {
        "title": "Referrer Id",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerId"
          }
        ]
      },
      "ReferrerWithSummaryLoyaltyReferrals": {
        "title": "Referrer With Summary Loyalty Referrals",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "RewardAssignmentBase": {
        "title": "Reward Assignment Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "rewa_PbIRoMXpwe5QhobW4JKu0VjH",
            "description": "Unique reward assignment ID, assigned by Voucherify."
          },
          "reward_id": {
            "type": "string",
            "description": "Associated reward ID.",
            "example": "rew_C7wS9eHFDN4CIbXI5PpLSkGY"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward assignment was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward assignment was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the reward assignment.",
            "enum": [
              "reward_assignment"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Related object ID to which the reward was assigned.",
            "example": "camp_wciTvaOfYmAa3EmIIW3QpXXZ"
          },
          "related_object_type": {
            "type": "string",
            "description": "Related object type to which the reward was assigned.",
            "enum": [
              "campaign"
            ]
          }
        },
        "required": [
          "related_object_id",
          "related_object_type",
          "id",
          "reward_id",
          "created_at",
          "updated_at",
          "object"
        ]
      },
      "RewardAssignmentParameters": {
        "title": "Digital or Material Reward - Parameters",
        "type": "object",
        "properties": {
          "parameters": {
            "description": "Defines the cost of the reward.",
            "type": "object",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Defines the equivalent points value of the reward.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "The number of points required to redeem the reward."
                  }
                }
              }
            },
            "required": [
              "loyalty"
            ]
          }
        }
      },
      "RewardType": {
        "title": "Reward type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RewardTypeCampaign"
          },
          {
            "$ref": "#/components/schemas/RewardTypeCoin"
          },
          {
            "$ref": "#/components/schemas/RewardTypeMaterial"
          }
        ]
      },
      "Session": {
        "type": "object",
        "title": "Session",
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "LOCK"
            ],
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCK"
            ],
            "description": "This parameter is required to establish a new session. The session locks the redemption quantity by 1."
          },
          "ttl": {
            "type": "number",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter."
          },
          "ttl_unit": {
            "type": "string",
            "enum": [
              "DAYS",
              "HOURS",
              "MICROSECONDS",
              "MILLISECONDS",
              "MINUTES",
              "NANOSECONDS",
              "SECONDS"
            ],
            "description": "Defines the type of unit in which the session time is counted."
          }
        }
      },
      "SimpleCustomer": {
        "type": "object",
        "title": "Simple Customer",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of an existing customer that will be linked to redemption in this request."
          },
          "source_id": {
            "type": "string",
            "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "customer",
            "enum": [
              "customer"
            ]
          }
        }
      },
      "SimpleSegment": {
        "title": "Simple Segment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique segment ID.",
            "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
          },
          "name": {
            "type": "string",
            "description": "Segment name."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the ID.",
            "default": "segment",
            "enum": [
              "segment"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "object"
        ]
      },
      "SimpleVoucher": {
        "type": "object",
        "title": "Simple Voucher",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier that represents the voucher assigned by Voucherify."
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "gift": {
            "description": "Gift object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object"
          },
          "type": {
            "type": "string",
            "description": "Type of the object.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "campaign": {
            "description": "Campaign object",
            "type": "object"
          },
          "campaign_id": {
            "type": "string",
            "description": "Campaign unique ID."
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Indicates whether the voucher is a referral code; this is \`true\` for campaign type \`REFERRAL_PROGRAM\`."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of campaign owner."
          },
          "referrer_id": {
            "type": "string",
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "voucher"
            ]
          }
        },
        "required": [
          "valid",
          "code",
          "applicable_to",
          "inapplicable_to",
          "metadata",
          "tracking_id"
        ]
      },
      "SkuWithProduct": {
        "title": "SKU with parent product.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          },
          {
            "type": "object",
            "properties": {
              "product": {
                "$ref": "#/components/schemas/ProductWithoutSkus"
              }
            }
          }
        ]
      },
      "SkusListForProduct": {
        "type": "object",
        "description": "Contains information about child SKUs.",
        "title": "Skus List For Product",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of SKUs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of SKUs.",
            "items": {
              "$ref": "#/components/schemas/Sku"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of SKUs in the product."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRuleAssignment": {
        "title": "Validation Rule Assignment",
        "type": "object",
        "description": "This is an object representing a validation rule assignment.",
        "properties": {
          "id": {
            "type": "string",
            "example": "asgm_74F7QZoYbUoljwQO",
            "description": "Validation rule assignment ID."
          },
          "rule_id": {
            "type": "string",
            "example": "val_4j7DCRm2IS59",
            "description": "Validation rule ID."
          },
          "related_object_id": {
            "type": "string",
            "example": "v_JtWunK6jUo7X2qOFj0SyRHq4p9tgENlT",
            "description": "The resource ID to which the validation rule was assigned."
          },
          "related_object_type": {
            "type": "string",
            "description": "The type of resource to which the validation rule was assigned.",
            "enum": [
              "voucher",
              "campaign",
              "earning_rule",
              "reward_assignment",
              "promotion_tier",
              "distribution"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-17T08:18:15.085Z",
            "description": "Timestamp representing the date and time when the validation rule assignment was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "validation_rules_assignment",
            "description": "The type of object represented by the ID.",
            "enum": [
              "validation_rules_assignment"
            ]
          }
        },
        "required": [
          "id",
          "rule_id",
          "related_object_id",
          "related_object_type",
          "created_at",
          "object"
        ]
      },
      "ValidationRuleRules": {
        "title": "Validation Rule Rules",
        "type": "object",
        "description": "Contains all the rule definitions for the validation rule. It is a set of key value pairs representing the rules and logic between the rules. The keys are numbered consequtively beginning from \`1\`. The values are objects containing the rule conditions."
      },
      "ValidationRulesAssignmentsList": {
        "title": "Validation Rules Assignments List",
        "description": "List of Validation Rules Assignments",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about validation rules assignments."
          },
          "data_ref": {
            "type": "string",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of validation rules assignments."
          },
          "data": {
            "type": "array",
            "description": "Contains array of validation rules assignments.",
            "items": {
              "$ref": "#/components/schemas/BusValRuleAssignment"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of validation rules assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationsRedeemableApplicable": {
        "type": "object",
        "title": "Applicable Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "APPLICABLE"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "applicable_to": {
            "$ref": "#/components/schemas/ApplicableTo"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/InapplicableTo"
          },
          "result": {
            "description": "Specifies the redeemable's end effect on the order. This object is unique to each type of redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RedeemableResultVoucherCode"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultGiftCard"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultLoyaltyCard"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultPromotionTier"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultPromotionStack"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redeemable."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "VoucherAssets": {
        "title": "Voucher Assets",
        "type": "object",
        "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
        "properties": {
          "qr": {
            "type": "object",
            "description": "Stores Quick Response (QR) representation of encrypted code.",
            "properties": {
              "id": {
                "type": "string",
                "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                "description": "Encrypted voucher code ID."
              },
              "url": {
                "type": "string",
                "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                "description": "URL to QR code  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
              }
            }
          },
          "barcode": {
            "type": "object",
            "description": "Stores barcode representation of encrypted code.",
            "properties": {
              "id": {
                "type": "string",
                "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                "description": "Encrypted voucher code ID."
              },
              "url": {
                "type": "string",
                "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                "description": "URL to barcode  \\n\\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \\n\\n- \`size\`: integer value from \`1\` to \`100\`  \\n- \`format\`: string, either \`png\` (default) or \`svg\`"
              }
            }
          }
        }
      },
      "VoucherTransactionsFilters": {
        "description": "List of available fields and filters that can be exported with gift card or loyalty card transactions along with the sorting order of the returned data.",
        "title": "Voucher Transactions",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash \`-\` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_CANCELLATION\` <br> - \`POINTS_REDEMPTION\`<br> - \`POINTS_REFUND\`<br> - \`POINTS_ADDITION\`<br> - \`POINTS_REMOVAL\`<br> - \`POINTS_EXPIRATION\`<br> - \`POINTS_TRANSFER_IN\`<br> - \`POINTS_TRANSFER_OUT\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "type",
                "source_id",
                "reason",
                "balance",
                "amount",
                "created_at",
                "voucher_id",
                "campaign_id",
                "source",
                "details",
                "related_transaction_id"
              ]
            }
          },
          "filters": {
            "$ref": "#/components/schemas/VoucherTransactionsExportFilterConditions"
          }
        },
        "required": [
          "filters"
        ]
      },
      "Any": {
        "oneOf": [
          {
            "title": "array",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "title": "string",
                  "type": "string"
                },
                {
                  "title": "number",
                  "type": "number"
                },
                {
                  "title": "object",
                  "type": "object"
                }
              ]
            }
          },
          {
            "title": "string",
            "type": "string"
          },
          {
            "title": "number",
            "type": "number"
          },
          {
            "title": "object",
            "type": "object"
          }
        ],
        "title": "Any"
      },
      "ApplicableToEffect": {
        "title": "Applicable To Effect",
        "type": "string",
        "enum": [
          "APPLY_TO_EVERY",
          "APPLY_TO_CHEAPEST",
          "APPLY_TO_MOST_EXPENSIVE"
        ]
      },
      "BusValRuleAssignment": {
        "title": "Business Validation Rule Assignment",
        "description": "Assignments of business validation rule",
        "example": {
          "id": "asgm_LnY1g7UNFA9KyDrD",
          "rule_id": "val_3gPNA6SnH4ae",
          "related_object_id": "camp_CZOnEGiZfwIKWmSjhIoIT7Ol",
          "related_object_type": "campaign",
          "object": "validation_rules_assignment",
          "validation_status": "PARTIALLY_VALID",
          "validation_omitted_rules": [
            "1"
          ]
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for a assignment"
          },
          "rule_id": {
            "type": "string",
            "description": "The unique identifier for a rule"
          },
          "related_object_id": {
            "type": "string",
            "description": "The unique identifier for a related object"
          },
          "related_object_type": {
            "type": "string",
            "description": "The type of related object"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was last updated in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "validation_rules_assignment"
            ]
          },
          "validation_status": {
            "type": "string",
            "description": "The validation status of the assignment",
            "enum": [
              "VALID",
              "PARTIALLY_VALID",
              "INVALID"
            ]
          },
          "validation_omitted_rules": {
            "type": "array",
            "description": "The list of omitted rules",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "rule_id",
          "related_object_id",
          "related_object_type",
          "object",
          "validation_status",
          "validation_omitted_rules"
        ]
      },
      "CampaignLoyaltyCard": {
        "type": "object",
        "description": "Schema model for a campaign loyalty card.",
        "title": "Campaign Loyalty Card",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The initial number of points to assign to the loyalty card. This is the current loyalty card score i.e. the number of loyalty points on the card."
          },
          "expiration_rules": {
            "type": "object",
            "properties": {
              "period_type": {
                "type": "string",
                "description": "Type of period"
              },
              "period_value": {
                "type": "integer",
                "description": "Value of the period"
              },
              "rounding_type": {
                "type": "string",
                "description": "Type of rounding"
              },
              "rounding_value": {
                "type": "integer",
                "description": "Value of rounding"
              }
            },
            "required": [
              "period_type",
              "period_value",
              "rounding_type",
              "rounding_value"
            ]
          }
        },
        "required": [
          "points"
        ]
      },
      "CodeConfigRequiredLengthCharsetPattern": {
        "title": "Code Config Required Length Charset Pattern",
        "allOf": [
          {
            "$ref": "#/components/schemas/CodeConfig"
          }
        ],
        "required": [
          "length",
          "charset",
          "pattern"
        ]
      },
      "CustomerSummaryOrders": {
        "title": "Customer Summary Orders",
        "type": "object",
        "properties": {
          "total_amount": {
            "type": "integer",
            "description": "The total amount spent by the customer. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "total_count": {
            "type": "integer",
            "description": "Total number of orders made by the customer."
          },
          "average_amount": {
            "type": "integer",
            "description": "Average amount spent on orders. \`total_amount\` &divide; \`total_count\`. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "last_order_amount": {
            "type": "integer",
            "description": "Amount spent on last order. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "last_order_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-30T11:51:08.029Z",
            "description": "Timestamp representing the date and time of the customer's last order in ISO 8601 format."
          }
        },
        "required": [
          "total_amount",
          "total_count",
          "average_amount",
          "last_order_amount"
        ]
      },
      "CustomerSummaryRedemptions": {
        "title": "Customer Summary Redemptions",
        "type": "object",
        "properties": {
          "total_redeemed": {
            "type": "integer",
            "description": "Total number of redemptions made by the customer."
          },
          "total_failed": {
            "type": "integer",
            "description": "Total number of redemptions that failed."
          },
          "total_succeeded": {
            "type": "integer",
            "description": "Total number of redemptions that succeeded."
          },
          "total_rolled_back": {
            "type": "integer",
            "description": "Total number of redemptions that were rolled back for the customer."
          },
          "total_rollback_failed": {
            "type": "integer",
            "description": "Total number of redemption rollbacks that failed."
          },
          "total_rollback_succeeded": {
            "type": "integer",
            "description": "Total number of redemption rollbacks that succeeded."
          },
          "gift": {
            "type": "object",
            "description": "Summary of gift card credits.",
            "required": [
              "redeemed_amount",
              "amount_to_go"
            ],
            "properties": {
              "redeemed_amount": {
                "type": "integer",
                "description": "Total amount of gift card credits redeemed by customer. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`.",
                "default": 0
              },
              "amount_to_go": {
                "type": "integer",
                "description": "Remaining gift card balance across all gift cards. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`.",
                "default": 0
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Summary of loyalty points.",
            "required": [
              "redeemed_points",
              "points_to_go"
            ],
            "properties": {
              "redeemed_points": {
                "type": "integer",
                "description": "Total number of loyalty points redeemed by the customer."
              },
              "points_to_go": {
                "type": "integer",
                "description": "Sum of remaining available point balance across all loyalty cards."
              }
            }
          }
        },
        "required": [
          "total_redeemed",
          "total_failed",
          "total_succeeded",
          "total_rolled_back",
          "total_rollback_failed",
          "total_rollback_succeeded",
          "gift",
          "loyalty_card"
        ]
      },
      "DiscountAmount": {
        "type": "object",
        "title": "Amount",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AMOUNT"
            ],
            "description": "Defines the type of the voucher."
          },
          "amount_off": {
            "type": "number",
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
          },
          "amount_off_formula": {
            "type": "string"
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountAmountVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "DiscountFixed": {
        "title": "Fixed",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FIXED"
            ],
            "description": "Defines the type of the voucher."
          },
          "fixed_amount": {
            "type": "number",
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the \`fixed_amount_formula\` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value."
          },
          "fixed_amount_formula": {
            "type": "string"
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountFixedVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "DiscountPercent": {
        "type": "object",
        "title": "Percent",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PERCENT"
            ],
            "description": "Defines the type of the voucher."
          },
          "percent_off": {
            "type": "number",
            "description": "The percent discount that the customer will receive."
          },
          "percent_off_formula": {
            "type": "string"
          },
          "amount_limit": {
            "type": "number",
            "description": "Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountPercentVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "DiscountUnit": {
        "type": "object",
        "title": "Unit",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UNIT"
            ],
            "description": "Discount type."
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_off_formula": {
            "type": "string"
          },
          "effect": {
            "description": "Defines how the unit is added to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountUnitVouchersEffectTypes"
              }
            ]
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "description": "Contains information about the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProductDiscountUnit"
              }
            ]
          },
          "sku": {
            "$ref": "#/components/schemas/SimpleSkuDiscountUnit"
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "unit_type"
        ]
      },
      "DiscountUnitMultiple": {
        "type": "object",
        "title": "Unit Multiple",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UNIT"
            ],
            "description": "Discount type."
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MANY_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountUnitMultipleOneUnit"
            }
          }
        },
        "required": [
          "type",
          "units"
        ]
      },
      "EarningRuleProportionalCustomEvent": {
        "title": "Earning Rule Proportional Custom Event",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "CUSTOM_EVENT_METADATA"
            ],
            "description": "CUSTOM_EVENT_METADATA: Custom event metadata (X points for every Y in metadata attribute)."
          },
          "custom_event": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the customer metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "\\nCustom event metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "custom_event"
        ]
      },
      "EarningRuleProportionalCustomerMetadata": {
        "title": "Customer Metadata",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "CUSTOMER_METADATA"
            ],
            "description": "CUSTOMER_METADATA: Customer Metadata (X points for every Y in metadata attribute, defined in the property key under the customer.metadata object)"
          },
          "customer": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the customer metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "Customer metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "customer"
        ]
      },
      "EarningRuleProportionalOrder": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderTotalAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderMetadata"
          }
        ],
        "title": "Order"
      },
      "EarningRuleProportionalOrderItems": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsQuantity"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsSubtotalAmount"
          }
        ],
        "title": "Order Items"
      },
      "EventCustomerActiveCampaignFailed": {
        "title": "Event Customer ActiveCampaign Failed",
        "description": "Event data object schema for \`customer.activecampaign.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerActiveCampaignRecovered": {
        "title": "Event Customer ActiveCampaign Recovered",
        "description": "Event data object schema for \`customer.activecampaign.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerActiveCampaignSent": {
        "title": "Event Customer ActiveCampaign Sent",
        "description": "Event data object schema for \`customer.activecampaign.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerBatchFailed": {
        "title": "Event Customer Batch Failed",
        "description": "Event data object schema for \`customer.batch.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerBatchRecovered": {
        "title": "Event Customer Batch Recovered",
        "description": "Event data object schema for \`customer.batch.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerBatchSent": {
        "title": "Event Customer Batch Sent",
        "description": "Event data object schema for \`customer.batch.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerBrazeFailed": {
        "title": "Event Customer Braze Failed",
        "description": "Event data object schema for \`customer.braze.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerBrazeRecovered": {
        "title": "Event Customer Braze Recovered",
        "description": "Event data object schema for \`customer.braze.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerBrazeSent": {
        "title": "Event Customer Braze Sent",
        "description": "Event data object schema for \`customer.braze.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerConfirmed": {
        "title": "Event Customer Confirmed",
        "description": "Event data object schema for \`customer.confirmed\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "unconfirmed_customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ucust_1qa70mVfYkl11Ab0ZxDPdWNa"
              }
            }
          }
        }
      },
      "EventCustomerConsentsGiven": {
        "title": "Event Customer Consents Given",
        "description": "Event data object schema for \`customer.consents.given\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConsents"
          }
        ]
      },
      "EventCustomerConsentsRevoked": {
        "title": "Event Customer Consents Revoked",
        "description": "Event data object schema for \`customer.consents.revoked\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConsents"
          }
        ]
      },
      "EventCustomerCreated": {
        "title": "Event Customer Created",
        "description": "Event data object schema for \`customer.created\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerCustomEvent": {
        "title": "Event Customer Custom Event",
        "description": "Event data object schema for \`customer.custom_event\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        },
        "additionalProperties": true,
        "required": [
          "customer"
        ]
      },
      "EventCustomerDeleted": {
        "title": "Event Customer Deleted",
        "description": "Event data object schema for \`customer.deleted\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerEmailFailed": {
        "title": "Event Customer Email Failed",
        "description": "Event data object schema for \`customer.email.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerEmailRecovered": {
        "title": "Event Customer Email Recovered",
        "description": "Event data object schema for \`customer.email.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerEmailSent": {
        "title": "Event Customer Email Sent",
        "description": "Event data object schema for \`customer.email.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerGiftVoucherBalanceAdded": {
        "title": "Event Customer Gift Voucher Balance Added",
        "description": "Event data object schema for \`customer.voucher.gift.balance_added\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerIntercomFailed": {
        "title": "Event Customer Intercom Failed",
        "description": "Event data object schema for \`customer.intercom.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerIntercomRecovered": {
        "title": "Event Customer Intercom Recovered",
        "description": "Event data object schema for \`customer.intercom.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerIntercomSent": {
        "title": "Event Customer Intercom Sent",
        "description": "Event data object schema for \`customer.intercom.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerKlaviyoFailed": {
        "title": "Event Customer Klaviyo Failed",
        "description": "Event data object schema for \`customer.klaviyo.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerKlaviyoRecovered": {
        "title": "Event Customer Klaviyo Recovered",
        "description": "Event data object schema for \`customer.klaviyo.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerKlaviyoSent": {
        "title": "Event Customer Klaviyo Sent",
        "description": "Event data object schema for \`customer.klaviyo.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerLoyaltyCardPointsAdded": {
        "title": "Event Customer Loyalty Card Points Added",
        "description": "Event data object schema for \`customer.voucher.loyalty_card.points_added\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerLoyaltyCardPointsTransferred": {
        "title": "Event Customer Loyalty Card Points Transferred",
        "description": "Event data object schema for \`customer.voucher.loyalty_card.points_transferred\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "source_voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "destination_voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerLoyaltyTierDowngraded": {
        "title": "Event Customer Loyalty Tier Downgraded",
        "description": "Event data object schema for \`customer.loyalty.tier.downgraded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Downgraded",
            "type": "object",
            "properties": {
              "loyalty_tier_from": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "loyalty_tier_to": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier_from"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierExpirationChanged": {
        "title": "Event Customer Loyalty Tier Expiration Changed",
        "description": "Event data object schema for \`customer.loyalty.tier.expiration.changed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Expiration Changed",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              },
              "expiration_date": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier",
              "expiration_date"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierJoined": {
        "title": "Event Customer Loyalty Tier Joined",
        "description": "Event data object schema for \`customer.loyalty.tier.joined\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Joined",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierLeft": {
        "title": "Event Customer Loyalty Tier Left",
        "description": "Event data object schema for \`customer.loyalty.tier.left\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Left",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierProlonged": {
        "title": "Event Customer Loyalty Tier Prolonged",
        "description": "Event data object schema for \`customer.loyalty.tier.prolonged\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Prolonged",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierUpgraded": {
        "title": "Event Customer Loyalty Tier Upgraded",
        "description": "Event data object schema for \`customer.loyalty.tier.upgraded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Upgraded",
            "type": "object",
            "properties": {
              "loyalty_tier_from": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "loyalty_tier_to": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier_to"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyUpdated": {
        "title": "Event Customer Loyalty Updated",
        "description": "Event data object schema for \`customer.loyalty.updated\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "loyalty": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-25T13:32:08.734Z",
            "format": "date-time"
          }
        },
        "required": [
          "created_at"
        ]
      },
      "EventCustomerMailchimpFailed": {
        "title": "Event Customer Mailchimp Failed",
        "description": "Event data object schema for \`customer.mailchimp.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerMailchimpRecovered": {
        "title": "Event Customer Mailchimp Recovered",
        "description": "Event data object schema for \`customer.mailchimp.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerMailchimpSent": {
        "title": "Event Customer Mailchimp Sent",
        "description": "Event data object schema for \`customer.mailchimp.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerOrderCanceled": {
        "title": "Event Customer Order Canceled",
        "description": "Event data object schema for \`customer.order.canceled\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderCreated": {
        "title": "Event Customer Order Created",
        "description": "Event data object schema for \`customer.order.created\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderFulfilled": {
        "title": "Event Customer Order Fulfilled",
        "description": "Event data object schema for \`customer.order.fulfilled\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderPaid": {
        "title": "Event Customer Order Paid",
        "description": "Event data object schema for \`customer.order.paid\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderProcessing": {
        "title": "Event Customer Order Processing",
        "description": "Event data object schema for \`customer.order.processing\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderUpdated": {
        "title": "Event Customer Order Updated",
        "description": "Event data object schema for \`customer.order.updated\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerPublicationFailed": {
        "title": "Event Customer Publication Failed",
        "description": "Event data object schema for \`customer.publication.failed\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "publication": {
            "type": "object"
          }
        }
      },
      "EventCustomerPublicationSucceeded": {
        "title": "Event Customer Publication Succeeded",
        "description": "Event data object schema for \`customer.publication.succeeded\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "publication": {
            "type": "object"
          }
        }
      },
      "EventCustomerRedemptionFailed": {
        "title": "Event Customer Redemption Failed",
        "description": "Event data object schema for \`customer.redemption.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          }
        ]
      },
      "EventCustomerRedemptionRollbackFailed": {
        "title": "Event Customer Redemption Rollback Failed",
        "description": "Event data object schema for \`customer.redemption.rollback.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          },
          {
            "type": "object",
            "properties": {
              "redemption_rollback": {
                "$ref": "#/components/schemas/SimpleRedemption"
              }
            }
          }
        ]
      },
      "EventCustomerRedemptionRollbackSucceeded": {
        "title": "Event Customer Redemption Rollback Succeeded",
        "description": "Event data object schema for \`customer.redemption.rollback.succeeded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          },
          {
            "type": "object",
            "properties": {
              "redemption_rollback": {
                "$ref": "#/components/schemas/SimpleRedemption"
              }
            }
          }
        ]
      },
      "EventCustomerRedemptionSucceeded": {
        "title": "Event Customer Redemption Succeeded",
        "description": "Event data object schema for \`customer.redemption.succeeded\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          }
        ]
      },
      "EventCustomerReferred": {
        "title": "Event Customer Referred",
        "description": "Event data object schema for \`customer.referred\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "referrer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "custom_event": {
            "$ref": "#/components/schemas/CustomEvent"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          }
        },
        "required": [
          "referrer",
          "campaign",
          "voucher",
          "custom_event"
        ]
      },
      "EventCustomerRewardRedemptionsCompleted": {
        "title": "Event Customer Reward Redemptions Completed",
        "description": "Event data object schema for \`customer.reward_redemptions.completed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsCreated": {
        "title": "Event Customer Reward Redemptions Created",
        "description": "Event data object schema for \`customer.reward_redemptions.created\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsPending": {
        "title": "Event Customer Reward Redemptions Pending",
        "description": "Event data object schema for \`customer.reward_redemptions.pending\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsRolledBack": {
        "title": "Event Customer Reward Redemptions Rolled Back",
        "description": "Event data object schema for \`customer.reward_redemptions.rolledback\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewarded": {
        "title": "Event Customer Rewarded",
        "description": "Event data object schema for \`customer.rewarded\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "referral_tier": {
            "$ref": "#/components/schemas/SimpleReferralTier"
          },
          "balance": {
            "type": "integer"
          },
          "custom_event": {
            "$ref": "#/components/schemas/CustomEvent"
          },
          "customer_event": {
            "type": "object"
          }
        }
      },
      "EventCustomerRewardedLoyaltyPoints": {
        "title": "Event Customer Rewarded Loyalty Points",
        "description": "Event data object schema for \`customer.rewarded.loyalty_points\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "loyalty_tier": {
            "$ref": "#/components/schemas/LoyaltyTier"
          },
          "earning_rule": {
            "$ref": "#/components/schemas/EarningRule"
          },
          "balance": {
            "type": "integer"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "event": {
            "type": "object"
          }
        }
      },
      "EventCustomerSegmentEntered": {
        "title": "Event Customer Segment Entered",
        "description": "Event data object schema for \`customer.segment.entered\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "segment": {
            "$ref": "#/components/schemas/SimpleSegment"
          }
        },
        "required": [
          "customer",
          "segment"
        ]
      },
      "EventCustomerSegmentLeft": {
        "title": "Event Customer Segment Left",
        "description": "Event data object schema for \`customer.segment.left\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "segment": {
            "$ref": "#/components/schemas/SimpleSegment"
          }
        },
        "required": [
          "customer",
          "segment"
        ]
      },
      "EventCustomerShopifyFailed": {
        "title": "Event Customer Shopify Failed",
        "description": "Event data object schema for \`customer.shopify.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerShopifyRecovered": {
        "title": "Event Customer Shopify Recovered",
        "description": "Event data object schema for \`customer.shopify.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerShopifySent": {
        "title": "Event Customer Shopify Sent",
        "description": "Event data object schema for \`customer.shopify.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerSmsFailed": {
        "title": "Event Customer SMS Failed",
        "description": "Event data object schema for \`customer.sms.failed\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerSmsRecovered": {
        "title": "Event Customer SMS Recovered",
        "description": "Event data object schema for \`customer.sms.recovered\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerSmsSent": {
        "title": "Event Customer SMS Sent",
        "description": "Event data object schema for \`customer.sms.sent\`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerUpdated": {
        "title": "Event Customer Updated",
        "description": "Event data object schema for \`customer.updated\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerValidationFailed": {
        "title": "Event Customer Validation Failed",
        "description": "Event data object schema for \`customer.validation.failed\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "validation": {
            "$ref": "#/components/schemas/ValidationEntity"
          }
        }
      },
      "EventCustomerValidationSucceeded": {
        "title": "Event Customer Validation Succeeded",
        "description": "Event data object schema for \`customer.validation.succeeded\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "validation": {
            "$ref": "#/components/schemas/ValidationEntity"
          }
        }
      },
      "EventCustomerVoucherDeleted": {
        "title": "Event Customer Voucher Deleted",
        "description": "Event data object schema for \`customer.voucher.deleted\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          }
        }
      },
      "EventCustomerVouchersLoyaltyPointsExpired": {
        "title": "Event Customer Loyalty Card Points Expired",
        "description": "Event data object schema for \`customer.voucher.loyalty_card.points_expired\`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "points": {
            "type": "integer"
          },
          "buckets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            }
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "ExportBase": {
        "title": "Export Base",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format."
          },
          "status": {
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "DONE",
              "ERROR"
            ],
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated."
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "result": {
            "type": "object",
            "nullable": true,
            "description": "Contains the URL of the CSV file.",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the CSV file location. It contains the token used for authorization in the Download export method."
              }
            },
            "required": [
              "url"
            ]
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "result",
          "user_id"
        ]
      },
      "FiltersCondition": {
        "title": "Filters Condition",
        "type": "object",
        "properties": {
          "$in": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_in": {
            "$ref": "#/components/schemas/Any"
          },
          "$is": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_days_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_days_in_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_not": {
            "$ref": "#/components/schemas/Any"
          },
          "$has_value": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_unknown": {
            "$ref": "#/components/schemas/Any"
          },
          "$contains": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_contain": {
            "$ref": "#/components/schemas/Any"
          },
          "$starts_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$ends_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$after": {
            "$ref": "#/components/schemas/Any"
          },
          "$before": {
            "$ref": "#/components/schemas/Any"
          },
          "$count": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_less": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_more": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "InapplicableTo": {
        "title": "Inapplicable To",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicableTo"
          }
        ]
      },
      "MappingFixed": {
        "title": "MappingFixed",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CUSTOM"
            ],
            "description": "Type of calculation.\\n\\n"
          },
          "points": {
            "type": "integer",
            "description": "Fixed number of points to be applied."
          }
        }
      },
      "MappingMultiply": {
        "title": "MappingMultiply",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MULTIPLY"
            ],
            "description": "Type of calculation."
          },
          "multiplier": {
            "type": "number",
            "description": "Multiplication factor used to multiply the points to obtain the mapped points."
          }
        }
      },
      "OrderItemCalculated": {
        "type": "object",
        "title": "Order Item Calculated",
        "properties": {
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "initial_quantity": {
            "type": "integer",
            "description": "A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items' quantity."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "\\nSum of all order-item-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \\n\`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\`"
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          },
          "subtotal_amount": {
            "type": "integer",
            "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the \`amount\`.   \\n\`subtotal_amount\`=\`amount\`-\`applied_discount_amount\`"
          },
          "product": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the product and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s product ID (if it is different than Voucherify's product ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a product. It can be useful for storing additional information about the product in a structured format."
              },
              "price": {
                "type": "number",
                "description": "Product price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "sku": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related SKU.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s SKU ID (if it is different than Voucherify's SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to \`true\` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "sku": {
                "type": "string",
                "description": "The SKU name."
              },
              "price": {
                "type": "number",
                "description": "SKU price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "object": {
            "type": "string",
            "enum": [
              "order_item"
            ],
            "description": "The type of object represented by JSON."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format."
          }
        },
        "required": [
          "object"
        ]
      },
      "OrderRedemptions": {
        "title": "Order Redemptions",
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "example": "2022-09-02T17:06:56.649Z",
            "format": "date-time"
          },
          "rollback_id": {
            "type": "string",
            "description": "Unique ID of the redemption rollback.",
            "example": "rr_0c63c84eb78ee0a6c0"
          },
          "rollback_date": {
            "type": "string",
            "description": "Timestamp representing the date and tiem when the redemption rollback was created in ISO 8601 format.",
            "example": "2023-01-31T14:18:37.150Z",
            "format": "date-time"
          },
          "related_object_type": {
            "type": "string",
            "description": "The source of the incentive.",
            "default": "redemption"
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique ID of the parent redemption.",
            "example": "r_0ba186c4824e4881e1"
          },
          "related_object_parent_id": {
            "type": "string",
            "description": "Represent's the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign. In case of a promotion tier, this represents the campaign ID of the promotion tier's parent campaign."
          },
          "stacked": {
            "type": "array",
            "description": "Contains a list of unique IDs of child redemptions, which belong to the stacked incentives.",
            "items": {
              "type": "string"
            }
          },
          "rollback_stacked": {
            "type": "array",
            "description": "Lists the rollback redemption IDs of the particular child redemptions.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QualificationsRedeemableBase": {
        "title": "Single redeemable",
        "description": "Data of single redeemable which was properly qualified.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the redeemable."
          },
          "object": {
            "type": "string",
            "description": "Object type of the redeemable.",
            "enum": [
              "campaign",
              "promotion_tier",
              "promotion_stack",
              "voucher"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "result": {
            "$ref": "#/components/schemas/RedeemableResult"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "validation_rule_id": {
            "type": "string",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "applicable_to": {
            "description": "Contains list of items that qualify in the scope of the discount. These are definitions of included products, SKUs, and product collections. These can be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicableToResultList"
              }
            ]
          },
          "inapplicable_to": {
            "description": "Contains list of items that do not qualify in the scope of the discount. These are definitions of excluded products, SKUs, and product collections. These CANNOT be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InapplicableToResultList"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "categories": {
            "type": "array",
            "description": "List of category information.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "banner": {
            "type": "string",
            "example": "Order Paid - You will get 100 points",
            "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
          },
          "name": {
            "type": "string",
            "example": "promotion_tier_get_points",
            "description": "Name of the redeemable."
          },
          "campaign_name": {
            "type": "string",
            "example": "PromotionCampaign",
            "description": "Name of the campaign associated to the redeemable. This field is available only if object is not \`campaign\`"
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_Mow7u4gSxagLlZ2oDQ01ZS5N",
            "description": "Id of the campaign associated to the redeemable. This field is available only if object is not \`campaign\`"
          },
          "validation_rules_assignments": {
            "$ref": "#/components/schemas/ValidationRulesAssignmentsList"
          }
        }
      },
      "RedeemableResultGiftCard": {
        "type": "object",
        "title": "Gift Card",
        "description": "This is a \`result\` object representing the results for a gift card.",
        "properties": {
          "gift": {
            "description": "Stores the amount of gift card credits to be applied in the redemption.",
            "type": "object",
            "properties": {
              "credits": {
                "type": "integer",
                "description": "Total number of gift card credits to be applied in the redemption expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          }
        }
      },
      "RedeemableResultLoyaltyCard": {
        "type": "object",
        "title": "Loyalty Card",
        "description": "This is a \`result\` object representing the results for a loyalty card.",
        "properties": {
          "loyalty_card": {
            "description": "Stores the amount of loyalty card points to be applied in the redemption.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total number of loyalty points to be applied in the redemption."
              }
            }
          }
        }
      },
      "RedeemableResultPromotionStack": {
        "type": "object",
        "title": "Promotion Stack",
        "description": "This is a \`result\` object representing the results for a promotion stack.",
        "properties": {
          "loyalty_card": {
            "description": "Stores the amount of loyalty card points to be applied in the redemption.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total number of loyalty points to be applied in the redemption."
              }
            }
          }
        }
      },
      "RedeemableResultPromotionTier": {
        "type": "object",
        "title": "Redeemable Result Promotion Tier",
        "description": "This is a \`result\` object representing the results for a promotion tier.",
        "properties": {
          "discount": {
            "description": "Discount details about the type of discount to be applied for the redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DiscountAmount"
              },
              {
                "$ref": "#/components/schemas/DiscountUnit"
              },
              {
                "$ref": "#/components/schemas/DiscountUnitMultiple"
              },
              {
                "$ref": "#/components/schemas/DiscountPercent"
              },
              {
                "$ref": "#/components/schemas/DiscountFixed"
              }
            ]
          }
        }
      },
      "RedeemableResultVoucherCode": {
        "type": "object",
        "title": "Coupon Code",
        "description": "This is a \`result\` object representing the results for a coupon code.",
        "properties": {
          "discount": {
            "description": "Discount details about the type of discount to be applied for the redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DiscountAmount"
              },
              {
                "$ref": "#/components/schemas/DiscountUnit"
              },
              {
                "$ref": "#/components/schemas/DiscountUnitMultiple"
              },
              {
                "$ref": "#/components/schemas/DiscountPercent"
              },
              {
                "$ref": "#/components/schemas/DiscountFixed"
              }
            ]
          }
        }
      },
      "RewardTypeCampaign": {
        "title": "Digital",
        "type": "object",
        "properties": {
          "campaign": {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "description": "Objects stores information about the campaign related to the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID, assigned by Voucherify."
              },
              "balance": {
                "type": "integer",
                "description": "The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "type": {
                "type": "string",
                "enum": [
                  "DISCOUNT_COUPONS",
                  "PROMOTION",
                  "GIFT_VOUCHERS",
                  "REFERRAL_PROGRAM",
                  "LOYALTY_PROGRAM"
                ],
                "description": "Campaign type."
              }
            }
          }
        },
        "required": [
          "campaign"
        ]
      },
      "RewardTypeCoin": {
        "title": "Pay with Points",
        "type": "object",
        "properties": {
          "coin": {
            "type": "object",
            "required": [
              "exchange_ratio"
            ],
            "description": "Defines the ratio by mapping the number of loyalty points in points_ratio to a predefined cash amount in exchange_ratio.",
            "properties": {
              "exchange_ratio": {
                "type": "number",
                "description": "The cash equivalent of the points defined in the points_ratio property."
              },
              "points_ratio": {
                "type": "integer",
                "description": "The number of loyalty points that will map to the predefined cash amount defined by the exchange_ratio property."
              }
            }
          }
        },
        "required": [
          "coin"
        ]
      },
      "RewardTypeMaterial": {
        "title": "Material",
        "type": "object",
        "properties": {
          "product": {
            "type": "object",
            "required": [
              "id",
              "sku_id"
            ],
            "description": "Contains information about the product given as a reward.",
            "properties": {
              "id": {
                "type": "string",
                "example": "prod_0b7d7dfb05cbe5c616",
                "description": "Unique product ID, assigned by Voucherify."
              },
              "sku_id": {
                "type": "string",
                "nullable": true,
                "example": "sku_0b7d7dfb090be5c619",
                "description": "Unique SKU ID, assigned by Voucherify, of the SKU given as a reward."
              }
            }
          }
        },
        "required": [
          "product"
        ]
      },
      "VoucherTransactionsExportFilterConditions": {
        "description": "Filter condition.",
        "title": "Filter by voucher ID",
        "type": "object",
        "required": [
          "voucher_id"
        ],
        "properties": {
          "voucher_id": {
            "type": "object",
            "required": [
              "conditions"
            ],
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "conditions": {
                "type": "object",
                "required": [
                  "$in"
                ],
                "description": "Data filters used to narrow the data records to be returned in the result.",
                "properties": {
                  "$in": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1,
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ApplicableToResultList": {
        "title": "Applicable To Result List",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains array of items to which the discount can apply.",
            "items": {
              "$ref": "#/components/schemas/ApplicableTo"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of objects defining included products, SKUs, or product collections."
          },
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "data"
            ]
          }
        },
        "required": [
          "data",
          "total",
          "object",
          "data_ref"
        ]
      },
      "CustomEvent": {
        "title": "Custom Event",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique custom event ID."
          },
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an \`event\`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "Referral object.",
            "properties": {
              "referrer_id": {
                "type": "string",
                "description": "Unique referrer ID.",
                "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
              },
              "code": {
                "type": "string",
                "description": "Voucher code."
              },
              "id": {
                "type": "string",
                "description": "Unique voucher ID."
              }
            }
          },
          "loyalty": {
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the custom event."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the custom event was created in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "DiscountAmountVouchersEffectTypes": {
        "title": "Discount Amount Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS",
          "APPLY_TO_ITEMS_PROPORTIONALLY",
          "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
          "APPLY_TO_ITEMS_BY_QUANTITY"
        ],
        "type": "string"
      },
      "DiscountFixedVouchersEffectTypes": {
        "title": "Discount Fixed Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS"
        ],
        "type": "string"
      },
      "DiscountPercentVouchersEffectTypes": {
        "title": "Discount Percent Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS"
        ],
        "type": "string"
      },
      "DiscountUnitMultipleOneUnit": {
        "type": "object",
        "title": "One Unit",
        "properties": {
          "unit_off": {
            "type": "number",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_off_formula": {
            "type": "string"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_NEW_ITEMS",
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order.\\n\\n"
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "description": "Contains information about the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProductDiscountUnit"
              }
            ]
          },
          "sku": {
            "description": "Contains information about the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleSkuDiscountUnit"
              }
            ]
          }
        },
        "required": [
          "effect",
          "unit_type"
        ]
      },
      "DiscountUnitVouchersEffectTypes": {
        "title": "Discount Unit Vouchers Effect Types",
        "enum": [
          "ADD_MISSING_ITEMS",
          "ADD_NEW_ITEMS",
          "ADD_MANY_ITEMS"
        ],
        "type": "string"
      },
      "EarningRuleProportionalOrderAmount": {
        "title": "Order Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_AMOUNT"
            ],
            "description": "\`ORDER_AMOUNT\`: Pre-discount order amount (X points for every Y spent excluding discounts)"
          },
          "order": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "object",
                "required": [
                  "every",
                  "points"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EarningRuleProportionalOrderItemsAmount": {
        "title": "Order Items Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_ITEMS_AMOUNT"
            ],
            "description": "ORDER_ITEMS_AMOUNT; Pre-discount amount spent on items defined in the order_items.amount.object & .id (X points for every Y spent on items excluding discounts)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderItemsQuantity": {
        "title": "Order Items Quantity",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_ITEMS_QUANTITY"
            ],
            "description": "\`ORDER_ITEMS_QUANTITY\`: Quantity of items defined in order_items.quantity.object & .id (X points for every Y items excluding free items)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "quantity"
            ],
            "properties": {
              "quantity": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderItemsSubtotalAmount": {
        "title": "Order Items Subtotal Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_ITEMS_SUBTOTAL_AMOUNT"
            ],
            "description": "ORDER_ITEMS_SUBTOTAL_AMOUNT; Amount spent on items defined in the order_items.subtotal_amount.object & .id (X points for every Y spent on items including discounts)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "subtotal_amount"
            ],
            "properties": {
              "subtotal_amount": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderMetadata": {
        "title": "Order Metadata",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_METADATA"
            ],
            "description": "\`ORDER_METADATA\`: Order Metadata (X points for every Y in metadata attribute, defined in the property key under the order.metadata object)"
          },
          "order": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "description": "Defines the formula for calculating points proportionally.",
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the order metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "Order metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EarningRuleProportionalOrderTotalAmount": {
        "title": "Order Total Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "enum": [
              "ORDER_TOTAL_AMOUNT"
            ],
            "description": "\`ORDER_TOTAL_AMOUNT\`: Total order amount (X points for every Y spent including discount)"
          },
          "order": {
            "type": "object",
            "required": [
              "total_amount"
            ],
            "properties": {
              "total_amount": {
                "type": "object",
                "required": [
                  "every",
                  "points"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EventCustomerConsents": {
        "title": "Event Customer Consents",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "consents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleConsent"
            }
          }
        }
      },
      "EventCustomerFailed": {
        "title": "Event Customer Failed",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "failed_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution failed in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "failed_at"
        ]
      },
      "EventCustomerLoyaltyTierBase": {
        "title": "Event Customer Loyalty Tier Base",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          }
        },
        "required": [
          "created_at",
          "loyalty_tier_to"
        ]
      },
      "EventCustomerOrder": {
        "title": "Event Customer Order",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "referrer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          }
        }
      },
      "EventCustomerRecovered": {
        "title": "Event Customer Recovered",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "recovered_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution was recovered in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "recovered_at"
        ]
      },
      "EventCustomerRedemption": {
        "title": "Event Customer Redemption",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "order": {
            "$ref": "#/components/schemas/SimpleOrder"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "promotion_tier": {
            "$ref": "#/components/schemas/SimplePromotionTier"
          },
          "redemption": {
            "$ref": "#/components/schemas/SimpleRedemption"
          }
        }
      },
      "EventCustomerRewardRedemptions": {
        "title": "Event Customer Reward Redemptions",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "reward_redemption": {
            "type": "object"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "reward_assignment": {
            "$ref": "#/components/schemas/RewardAssignment"
          },
          "source": {
            "type": "string"
          },
          "balance": {
            "type": "integer"
          }
        }
      },
      "EventCustomerSent": {
        "title": "Event Customer Sent",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "sent_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution was sent in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "sent_at"
        ]
      },
      "InapplicableToResultList": {
        "title": "Inapplicable To Result List",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains array of items to which the discount cannot apply.",
            "items": {
              "$ref": "#/components/schemas/InapplicableTo"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of objects defining included products, SKUs, or product collections."
          },
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "data"
            ]
          }
        },
        "required": [
          "data",
          "total",
          "object",
          "data_ref"
        ]
      },
      "RedeemableResult": {
        "title": "Redeemable Result",
        "description": "Information about redeemable result.",
        "properties": {
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "gift": {
            "$ref": "#/components/schemas/RedeemableGift"
          },
          "loyalty_card": {
            "description": "Loyalty Card object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/RedeemableLoyaltyCard"
              }
            ]
          },
          "error": {
            "description": "Error in result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Error"
              }
            ]
          }
        }
      },
      "RedemptionInternal": {
        "title": "Redemption Internal",
        "description": "Model Used for internal communication",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the \`redemption\`.",
            "default": "redemption"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "format": "date-time"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "channel_type": {
            "type": "string",
            "description": "The source of the channel for the redemption rollback. A \`USER\` corresponds to the Voucherify Dashboard and an \`API\` corresponds to the API.",
            "enum": [
              "USER",
              "API"
            ]
          },
          "channel_id": {
            "type": "string",
            "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
            "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is \`FAILURE\`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is \`FAILURE\`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "previous_order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the redemption being invalid in the context of the provided parameters."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "parent_redemption_id": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "related_object_parent_id": {
            "type": "string",
            "description": "Unique related parent object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "campaign_name": {
            "type": "string",
            "description": "Campaign name"
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          }
        }
      },
      "SimpleCampaign": {
        "title": "Simple Campaign",
        "type": "object",
        "description": "Request body schema for creating a discount voucher campaign using **POST** \`/campaigns\`.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Campaign name."
          },
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "campaign_type": {
            "type": "string",
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.\\n- \`AUTO_UPDATE\`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).\\n-  \`STATIC\`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code."
          },
          "voucher": {
            "type": "object"
          },
          "lucky_draw": {
            "type": "object"
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to \`true\`, customers will be able to join the campaign only once."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether campaign is active"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "enum": [
              "campaign"
            ],
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          }
        }
      },
      "SimpleProductDiscountUnit": {
        "type": "object",
        "title": "Simple Product Discount Unit",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "Product's source ID."
          },
          "name": {
            "type": "string",
            "description": "Product name."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SimpleRedemption": {
        "type": "object",
        "title": "Simple Redemption",
        "description": "This is an object representing a simple redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "format": "date-time"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "order": {
            "$ref": "#/components/schemas/SimpleOrder"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleVoucher"
              }
            ]
          },
          "promotion_tier": {
            "$ref": "#/components/schemas/SimplePromotionTier"
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the \`redemption\`.",
            "default": "redemption"
          }
        }
      },
      "SimpleRedemptionRewardResult": {
        "title": "Simple Redemption Reward Result",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "assignment_id": {
            "type": "string",
            "description": "Unique reward assignment ID assigned by Voucherify."
          },
          "voucher": {
            "description": "Defines of the voucher.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleVoucher"
              }
            ]
          },
          "product": {
            "description": "Defines of the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProduct"
              }
            ]
          },
          "sku": {
            "description": "Defines of the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleSku"
              }
            ]
          },
          "loyalty_tier_id": {
            "type": "string",
            "description": "Unique loyalty tier ID assigned by Voucherify."
          },
          "id": {
            "type": "string",
            "example": "rew_nIy4gHpQHle2c3pNMwuj7G6j",
            "description": "Unique reward ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "enum": [
              "reward"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the reward."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "parameters": {
            "description": "Defines how the reward is generated.",
            "type": "object"
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          }
        }
      },
      "SimpleReferralTier": {
        "title": "Simple Referral Tier",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique referral tier ID.",
            "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
          },
          "campaign_id": {
            "type": "string",
            "description": "Campaign Id."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "parameters": {
            "type": "object",
            "description": "Referral tier parameters"
          }
        }
      },
      "SimpleSkuDiscountUnit": {
        "type": "object",
        "title": "Simple Sku Discount Unit",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique SKU ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "Product variant's source ID."
          },
          "name": {
            "type": "string",
            "description": "Sku name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ValidationEntity": {
        "title": "Validation Entity",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique validation id."
          },
          "session_id": {
            "type": "string",
            "description": "Unique session id."
          },
          "status": {
            "type": "string",
            "description": "The validation status",
            "enum": [
              "VALID",
              "INVALID"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the validation was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "RedeemableGift": {
        "title": "Redeemable Gift",
        "type": "object",
        "additionalProperties": false,
        "description": "Contains current gift card balance information.",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "credits": {
            "type": "number",
            "description": "The number of credits that the user wants to use from the gift card to fulfil the order. The value of credits cannot be higher than the current balance on the gift card. If the user gives more points than he has on the gift card, the application will return an error code in response. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          }
        }
      },
      "RedeemableLoyaltyCard": {
        "type": "object",
        "title": "Redeemable Loyalty Card",
        "description": "Redeemable loyalty card object response",
        "properties": {
          "points": {
            "type": "integer",
            "example": 7000,
            "description": "Total points incurred over lifespan of loyalty card."
          },
          "balance": {
            "type": "integer",
            "example": 6970,
            "description": "Points available for reward redemption."
          },
          "exchange_ratio": {
            "type": "number",
            "description": "The cash equivalent of the points defined in the points_ratio property."
          },
          "points_ratio": {
            "type": "integer",
            "description": "The number of loyalty points that will map to the predefined cash amount defined by the exchange_ratio property."
          },
          "transfers": {
            "title": "Loyalties Transfer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltiesTransferPoints"
            }
          }
        }
      },
      "SimpleConsent": {
        "title": "Simple Consent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "consent"
            ]
          }
        },
        "required": [
          "object"
        ]
      },
      "SimpleOrder": {
        "title": "Simple Order",
        "type": "object",
        "additionalProperties": false,
        "description": "Order information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request.\\n\\n"
          },
          "source_id": {
            "type": "string",
            "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order."
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied in a particular request.  \\n\`sum(items, i => i.applied_discount_amount)\`"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \\n\`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\`"
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/SimpleOrderItem"
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "enum": [
              "order"
            ]
          }
        },
        "required": [
          "object"
        ]
      },
      "SimpleProduct": {
        "title": "Simple Product",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID."
          },
          "source_id": {
            "type": "string",
            "description": "Product source id."
          },
          "name": {
            "type": "string",
            "description": "Product name."
          }
        }
      },
      "SimplePromotionTier": {
        "title": "Simple Promotion Tier",
        "type": "object",
        "description": "This is an object representing a simple promotion tier. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "properties": {
          "id": {
            "type": "string",
            "example": "promo_63fYCt81Aw0h7lzyRkrGZh9p",
            "description": "Unique promotion tier ID."
          },
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "campaign": {
            "type": "object",
            "description": "Contains details about promotion tier's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID."
              }
            }
          }
        }
      },
      "SimpleSku": {
        "title": "Simple Sku",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique sku ID."
          },
          "source_id": {
            "type": "string",
            "description": "Sku source id."
          },
          "sku": {
            "type": "string",
            "description": "Sku name."
          }
        }
      },
      "SimpleOrderItem": {
        "type": "object",
        "title": "Simple Order Item",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "order_item"
            ],
            "description": "The type of object represented by JSON. This object stores information about the \`order_item\`."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "\\nSum of all order-item-level discounts applied to the order."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example \`10000 cents\` for \`$100.00\`."
          }
        }
      }
    },
    "examples": {
      "req_vouchers_metadata_1": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "res_async_actions": {
        "value": {
          "async_action_id": "aa_0ab2df092385be5ca5"
        }
      }
    }
  },
  "paths": {
    "/v1/vouchers/{code}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "in": "path",
          "name": "code",
          "description": "A unique **code** that identifies the voucher.",
          "required": true
        }
      ],
      "get": {
        "operationId": "get-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Get Voucher",
        "description": "Retrieves the voucher with the given \`code\` or unique Voucherify ID. You can either pass the voucher ID which was assigned by Voucherify, e.g., \`v_7HxHkf4VAkMuc8u4lZs78lyRwhRze5UE\`, or the \`code\` of the voucher as the path parameter value, e.g., \`7fjWdr\`.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object if a valid identifier was provided. \\n\\nAdditionally, the response returns validation rules related to the voucher object. They can be inherited from a campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersGetResponseBody"
                },
                "examples": {
                  "Loyalty Card": {
                    "value": {
                      "id": "v_hrMBBeT4sOP9VSGPmj5KAgJwX202UjiY",
                      "code": "LOYALTY-CARD-xLPbpbXR",
                      "campaign": "Loyalty Program Fall 2022",
                      "campaign_id": "camp_f7fBbQxUuTN7dI7tGOo5XMDA",
                      "category": "First",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "type": "LOYALTY_CARD",
                      "discount": null,
                      "gift": null,
                      "loyalty_card": {
                        "points": 110,
                        "balance": 100,
                        "next_expiration_date": "2023-12-31",
                        "next_expiration_points": 100
                      },
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX19OrTPNyUztbNretF7tPRL4ZlUDPAUXVGL9e5UCPh6dic8zXEP8/6I6hUEqtz/F6IMIghWz1ljdjzpdizGHG3HZBw4c19fd8SD/DjhBRDSr8APqKGpZTLKe4QC2gislFTeDAq2lmJb6T1oOTBUGkUEwMgEX1Vlco9A=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19OrTPNyUztbNretF7tPRL4ZlUDPAUXVGL9e5UCPh6dic8zXEP8%2F6I6hUEqtz%2FF6IMIghWz1ljdjzpdizGHG3HZBw4c19fd8SD%2FDjhBRDSr8APqKGpZTLKe4QC2gislFTeDAq2lmJb6T1oOTBUGkUEwMgEX1Vlco9A%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/SpYuOrU9wd6/o1wzy6E/04wURHJ1xuMutzkIUx6OBTmHX5BO8XZRmEFHkgjC5eWJ27ArgAruJfwRXWuQfTNFD4raI9YvIiQNEzsZ0ydxwKBqJ/FJtiw69djuzQk1f4HdQo8s5gaZ7fd2U+1zbaeAvi9usyvRHZE4=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FSpYuOrU9wd6%2Fo1wzy6E%2F04wURHJ1xuMutzkIUx6OBTmHX5BO8XZRmEFHkgjC5eWJ27ArgAruJfwRXWuQfTNFD4raI9YvIiQNEzsZ0ydxwKBqJ%2FFJtiw69djuzQk1f4HdQo8s5gaZ7fd2U%2B1zbaeAvi9usyvRHZE4%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-19T07:56:22.355Z",
                      "updated_at": "2022-09-19T08:04:22.458Z",
                      "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 1,
                        "redeemed_points": 10,
                        "object": "list",
                        "url": "/v1/vouchers/LOYALTY-CARD-xLPbpbXR/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/LOYALTY-CARD-xLPbpbXR/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Gift Card": {
                    "value": {
                      "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                      "code": "GIFT-CARD-xwc6X7Tk",
                      "campaign": "Gift Cards",
                      "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                      "category": null,
                      "category_id": null,
                      "type": "GIFT_VOUCHER",
                      "discount": null,
                      "gift": {
                        "amount": 55000,
                        "balance": 44700,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM/aTyHCYfr7kRWb2vv08WIgY/Tv53SJGW+k2keqfsTq/Ohb5shkCN3FTFsaI8gulTp616sEGn/JJoIInIoNkO9Vd1+AfrKiAjmirCmekE6cz2SVCyNAXs=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM%2FaTyHCYfr7kRWb2vv08WIgY%2FTv53SJGW%2Bk2keqfsTq%2FOhb5shkCN3FTFsaI8gulTp616sEGn%2FJJoIInIoNkO9Vd1%2BAfrKiAjmirCmekE6cz2SVCyNAXs%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX18vWc/qplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO/199U+zicnFNWqg/jF5ZCQW+6jO1q8=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18vWc%2FqplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO%2F199U%2BzicnFNWqg%2FjF5ZCQW%2B6jO1q8%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-07-08T09:44:33.179Z",
                      "updated_at": "2022-08-29T09:37:20.185Z",
                      "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 7,
                        "redeemed_amount": 10300,
                        "object": "list",
                        "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Amount Discount": {
                    "value": {
                      "id": "v_OBVfpTVf24DBz0HZmKVZa5UEl1DUg2bn",
                      "code": "AMOUNTDISCOUNTUSINGFORMULA",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "First",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "AMOUNT",
                        "amount_off": 400,
                        "amount_off_formula": "IF(CUSTOMER_METADATA(\\"favorite_brands\\") contains \\"Nike\\";20;CUSTOMER_METADATA(\\"age\\"))",
                        "effect": "APPLY_TO_ORDER"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2022-09-01T00:00:00.000Z",
                      "expiration_date": "2022-10-31T00:00:00.000Z",
                      "validity_timeframe": null,
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": true,
                      "additional_info": "This voucher discount is based on a formula, payment must be using VISA, and order must be over $100.",
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX18tV6jdzxWPwEzjeiX4DoM06JpwaoKUNGMNx4Td5e8FwA68uIHQwPaRpJr9CUCpiP4IsSD8nEJn1YtEv6FnY83wIv7uljYoQOYmMPyhKec8Ct3zH7KurMGuj4Fhws3HNA3bqP5MYEy+aA==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX18tV6jdzxWPwEzjeiX4DoM06JpwaoKUNGMNx4Td5e8FwA68uIHQwPaRpJr9CUCpiP4IsSD8nEJn1YtEv6FnY83wIv7uljYoQOYmMPyhKec8Ct3zH7KurMGuj4Fhws3HNA3bqP5MYEy%2BaA%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX181+WljOgxIt9Jg1Urbuv226+8Ug0DIyZiI0WtThPNYKZZEodzqQpIsGSdrDGXr2chLo+4FH3Ey8G2YXCPM6nUhZRSMF5oL3+uNjcLtBvb7MF5+ynY5fIgpXolwUK0R/BuT4Pa8prhgTg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX181%2BWljOgxIt9Jg1Urbuv226%2B8Ug0DIyZiI0WtThPNYKZZEodzqQpIsGSdrDGXr2chLo%2B4FH3Ey8G2YXCPM6nUhZRSMF5oL3%2BuNjcLtBvb7MF5%2BynY5fIgpXolwUK0R%2FBuT4Pa8prhgTg%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-12T07:51:02.145Z",
                      "updated_at": "2022-09-19T08:29:12.566Z",
                      "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_tO5AuzXIkkNPTC50",
                            "rule_id": "val_5h0wc453_2",
                            "related_object_id": "v_OBVfpTVf24DBz0HZmKVZa5UEl1DUg2bn",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-19T08:27:59.160Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 2,
                        "object": "list",
                        "url": "/v1/vouchers/AMOUNTDISCOUNTUSINGFORMULA/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/AMOUNTDISCOUNTUSINGFORMULA/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Percent Discount": {
                    "value": {
                      "id": "v_2LcXRN4X0TNNgPoBceXIsE4LYs13kta1",
                      "code": "PercentDiscountUsingFormula",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "percent_off": 3,
                        "percent_off_formula": "CUSTOMER_METADATA(\\"age\\")",
                        "effect": "APPLY_TO_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+74dNbbuHNdVR+5SXVrdo6Zp2tUInlseZtheoYEvrayBBDEoJFaeDuC1BzQr+j8ayuFU7+BtCdNe25YRae4Mp+3Y1HsrkVudshKRzMBdS/43GT9Qi6tOXQDsYjHh70zNz13lMOC9bnaX6WZCVU0vRWM/VDXbYNxGZH6V1wpcGOkmkhkEYPSuIXBDF65FsgHOAwIPvKBxa/aQ==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2B74dNbbuHNdVR%2B5SXVrdo6Zp2tUInlseZtheoYEvrayBBDEoJFaeDuC1BzQr%2Bj8ayuFU7%2BBtCdNe25YRae4Mp%2B3Y1HsrkVudshKRzMBdS%2F43GT9Qi6tOXQDsYjHh70zNz13lMOC9bnaX6WZCVU0vRWM%2FVDXbYNxGZH6V1wpcGOkmkhkEYPSuIXBDF65FsgHOAwIPvKBxa%2FaQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19t8/dJWDNnnwPtxt3e0kZTDAELYiQcSHWIEO5wr6uLeDbM2KKbGYUfkKKtZRsWtiKhOQQc7zmNoCqR82UB+p0gzGM0tyXa/npbPUTe0Y5Y/arDPnomb9AaUFjK9Uq5OUBYbxi1ERqEhy/20Owr0m0e0E2I3jQmgAxkNokRm1g31zX4zheea8gTtiFwb6ZrYvGbaOhj5IxYWg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19t8%2FdJWDNnnwPtxt3e0kZTDAELYiQcSHWIEO5wr6uLeDbM2KKbGYUfkKKtZRsWtiKhOQQc7zmNoCqR82UB%2Bp0gzGM0tyXa%2FnpbPUTe0Y5Y%2FarDPnomb9AaUFjK9Uq5OUBYbxi1ERqEhy%2F20Owr0m0e0E2I3jQmgAxkNokRm1g31zX4zheea8gTtiFwb6ZrYvGbaOhj5IxYWg%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-15T10:20:46.467Z",
                      "updated_at": "2022-09-15T10:43:51.116Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_EuYasM5fyDR9G2r4",
                            "rule_id": "val_0k19OQHjNZRT",
                            "related_object_id": "v_2LcXRN4X0TNNgPoBceXIsE4LYs13kta1",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-15T10:20:46.460Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 3,
                        "object": "list",
                        "url": "/v1/vouchers/PercentDiscountUsingFormula/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/PercentDiscountUsingFormula/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Fixed Discount": {
                    "value": {
                      "id": "v_zXQtyi5FYQYoRXv459hmK8M5Gi2lLoDl",
                      "code": "FixedDiscountUsingFormula",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "FIXED",
                        "effect": "APPLY_TO_ORDER",
                        "fixed_amount": 200,
                        "fixed_amount_formula": "IF(ORDER_UNITS_QUANTITY > 3;CUSTOMER_METADATA(\\"age\\") + 2;CUSTOMER_METADATA(\\"age\\") - 2)"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+sY8iWRFMrrPOjY6pS7JZSqJUPIzAgFO5oy5GvTj27KrukNxucE4wrA4n9QL7pua3CfJzGWe0Hc5J6XXU2m5ktik4iUNRO6pxZmL4ZuR96C1XHJAGaIiI7lM17OjJD2b72/hyyDUi8DflzcYixFdXTOR3o1rcaPoY=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BsY8iWRFMrrPOjY6pS7JZSqJUPIzAgFO5oy5GvTj27KrukNxucE4wrA4n9QL7pua3CfJzGWe0Hc5J6XXU2m5ktik4iUNRO6pxZmL4ZuR96C1XHJAGaIiI7lM17OjJD2b72%2FhyyDUi8DflzcYixFdXTOR3o1rcaPoY%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1+af+iouhzUVUL0IocB7BAWR8rB0z8/9/OgYi32EHQ9salEEtE3XYPWtseOAxi5keMRp6K3JLDyx4RvYpw3Fe5SN0ed7PEcWr4fLUoUBntHtH0lOPFOtWxpY3tAjnyWpE/CYTR/S135KZ6GIfCS/+VQNrzbS/bFXgY=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2Baf%2BiouhzUVUL0IocB7BAWR8rB0z8%2F9%2FOgYi32EHQ9salEEtE3XYPWtseOAxi5keMRp6K3JLDyx4RvYpw3Fe5SN0ed7PEcWr4fLUoUBntHtH0lOPFOtWxpY3tAjnyWpE%2FCYTR%2FS135KZ6GIfCS%2F%2BVQNrzbS%2FbFXgY%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-15T12:46:55.818Z",
                      "updated_at": "2022-09-16T10:03:25.057Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 5,
                        "object": "list",
                        "url": "/v1/vouchers/FixedDiscountUsingFormula/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/FixedDiscountUsingFormula/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Unit Discount": {
                    "value": {
                      "id": "v_JkjV4v9OKTsaIuHoqXGrkGijNaRGYNzm",
                      "code": "UnitDiscountUsingFormula",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "unit_off": 1,
                        "unit_off_formula": "IF(ORDER_UNITS_QUANTITY > 3;CUSTOMER_METADATA(\\"age\\") / 5;CUSTOMER_METADATA(\\"age\\") / 10)",
                        "unit_type": "sku_0b661e41eccd35a8e9",
                        "effect": "ADD_MISSING_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+6okuUQBKDcu0jGGg0jOU3kwYUFhX79TdwYKjXyV14BX74z/lehzciL0vdtutoiMVf8Nzl+B278gSHI5TiecPsTXChbGKSjH9gYUxZkdQev0qfmR4frKHjKKHHfT9DEcRWCLwKDJ9V+b89EAmbMouLlaDvkD63bZI=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2B6okuUQBKDcu0jGGg0jOU3kwYUFhX79TdwYKjXyV14BX74z%2FlehzciL0vdtutoiMVf8Nzl%2BB278gSHI5TiecPsTXChbGKSjH9gYUxZkdQev0qfmR4frKHjKKHHfT9DEcRWCLwKDJ9V%2Bb89EAmbMouLlaDvkD63bZI%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19E7POETWB9YO+S4gkbGFQSm4VDNXEvqdlln6cWiyWTplnWkiUbs/2XMIva3q2rHDFP4toeKrLOGeS5mqhJcdd3yVsWXjHaALwCJIis2D4l5soDvz+Ka/vTqJdFWQzqsIl0BqEpr1tLLy8JFMGN7MY5nY3nr/ciSN8=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19E7POETWB9YO%2BS4gkbGFQSm4VDNXEvqdlln6cWiyWTplnWkiUbs%2F2XMIva3q2rHDFP4toeKrLOGeS5mqhJcdd3yVsWXjHaALwCJIis2D4l5soDvz%2BKa%2FvTqJdFWQzqsIl0BqEpr1tLLy8JFMGN7MY5nY3nr%2FciSN8%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-15T13:36:27.838Z",
                      "updated_at": "2022-09-16T10:03:25.057Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 5,
                        "object": "list",
                        "url": "/v1/vouchers/UnitDiscountUsingFormula/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/UnitDiscountUsingFormula/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Multiple Unit Discount": {
                    "value": {
                      "id": "v_5Xgi5ht4sw432LQ7bwmyjKnUAYtOrJAh",
                      "code": "UnitDiscountUsingFormulaForMultipleProductVariants",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "effect": "ADD_MANY_ITEMS",
                        "units": [
                          {
                            "unit_off": 3,
                            "unit_off_formula": "IF(ORDER_AMOUNT > 100;CUSTOMER_METADATA(\\"age\\");CUSTOMER_METADATA(\\"age\\") / 2)",
                            "unit_type": "sku_0b661e41fc8d35a8f7",
                            "effect": "ADD_MISSING_ITEMS"
                          },
                          {
                            "unit_off": 4,
                            "unit_off_formula": "IF(ORDER_AMOUNT > 100;CUSTOMER_METADATA(\\"age\\") + 2;CUSTOMER_METADATA(\\"age\\") - -2)",
                            "unit_type": "sku_0b661e41fc8d35a8f6",
                            "effect": "ADD_NEW_ITEMS"
                          }
                        ]
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+qkwm+Yu29uhfotQxirJftPuWjA1P9WGxHqqmOHsU9esf6R5Ln7AeiqX8l9iIpy+D3yav5GmF2UrY6PD6fS9Y+yu+7yTVQu+agFZqdN1jvWw4DBOCHKPgynaMiNS29Cv4EIOFCY9Ux+4Lp8aVdalItCVCEH25DxWD+HUKq1lE31Y0DfWssg95oO2m73ZeGa8je7zd09eW7cg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bqkwm%2BYu29uhfotQxirJftPuWjA1P9WGxHqqmOHsU9esf6R5Ln7AeiqX8l9iIpy%2BD3yav5GmF2UrY6PD6fS9Y%2Byu%2B7yTVQu%2BagFZqdN1jvWw4DBOCHKPgynaMiNS29Cv4EIOFCY9Ux%2B4Lp8aVdalItCVCEH25DxWD%2BHUKq1lE31Y0DfWssg95oO2m73ZeGa8je7zd09eW7cg%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1+poCeZMw207p8HWtpoeokpaPfUQQoRIxpGXmqi5ic2ZPhQwKrUnujPDW4Sw1ODgHV6nLWQQQ9g7j3S4793YfzHDi1H8L3kZroH0TwWFNBgzQkV/QLqc387xUUckr0fvmhTBCarpsB+dWPOwlaNuVivTVB+Yyh/1FcbGbjvbj1Sm12wVNom2KZ3m1K/lJ6vBoGkXqq0jutytA==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BpoCeZMw207p8HWtpoeokpaPfUQQoRIxpGXmqi5ic2ZPhQwKrUnujPDW4Sw1ODgHV6nLWQQQ9g7j3S4793YfzHDi1H8L3kZroH0TwWFNBgzQkV%2FQLqc387xUUckr0fvmhTBCarpsB%2BdWPOwlaNuVivTVB%2BYyh%2F1FcbGbjvbj1Sm12wVNom2KZ3m1K%2FlJ6vBoGkXqq0jutytA%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-16T05:44:50.722Z",
                      "updated_at": "2022-09-19T09:25:17.303Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 3,
                        "object": "list",
                        "url": "/v1/vouchers/UnitDiscountUsingFormulaForMultipleProductVariants/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/UnitDiscountUsingFormulaForMultipleProductVariants/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "Free Shipping": {
                    "value": {
                      "id": "v_gO13ON60WqVmP1DASWuJRF83Xt5KrVNL",
                      "code": "FreeShipping",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "unit_off": 1,
                        "unit_type": "prod_5h1pp1ng",
                        "effect": "ADD_MISSING_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX19R0AaZSL8eog8GYSGvRcADkJ24Hhr52Awb2KNF11CE7oyTHVBq+S3gexrVR8PxHgEz/jR1Hh2YfM5h0k5CYPD24I/pXJYQVTa1CpXFBrrxVET9QyK48z5hxu2nsHHBsV7g0zK1nIVibsw06db8x1F1zaR7Un9oq6A=",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19R0AaZSL8eog8GYSGvRcADkJ24Hhr52Awb2KNF11CE7oyTHVBq%2BS3gexrVR8PxHgEz%2FjR1Hh2YfM5h0k5CYPD24I%2FpXJYQVTa1CpXFBrrxVET9QyK48z5hxu2nsHHBsV7g0zK1nIVibsw06db8x1F1zaR7Un9oq6A%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19XHGrCUHCfcSz/VLWmN1UU13QmDsH9ezEYtzHAUAeaLvN12Yv5eBJ7h7R2Og2pNm7mdHxfMR8gBJWEgHuBkodwXch1llhO6hNy9KXebNU+McRx9iEB/DqSzagjaxCiUNB1xitLgXDlUH5cH9naOCOtCHGMrEQW4h0=",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19XHGrCUHCfcSz%2FVLWmN1UU13QmDsH9ezEYtzHAUAeaLvN12Yv5eBJ7h7R2Og2pNm7mdHxfMR8gBJWEgHuBkodwXch1llhO6hNy9KXebNU%2BMcRx9iEB%2FDqSzagjaxCiUNB1xitLgXDlUH5cH9naOCOtCHGMrEQW4h0%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-16T07:19:53.945Z",
                      "updated_at": "2022-09-16T07:26:35.361Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 2,
                        "object": "list",
                        "url": "/v1/vouchers/FreeShipping/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/FreeShipping/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Delete Voucher",
        "description": "Deletes a voucher. This operation cannot be undone. Additionally, this operation removes any redemptions on the voucher.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the voucher will be removed permanently. Going forward, the user will be able to create another voucher with exactly the same code."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/vouchers/{code}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`.",
          "required": true
        }
      ],
      "post": {
        "operationId": "enable-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Enable Voucher",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \\n___\\nThe method sets the voucher state to **active**. The voucher can be redeemed - only if the redemption occurs after the start date and the voucher is not expired.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersEnableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                      "code": "2CpRCE2c",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "AMOUNT",
                        "amount_off": 300,
                        "effect": "APPLY_TO_ITEMS_PROPORTIONALLY"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+ro/6HLsfI9E/rz0QEoYv+rcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz+WQtg4nKpjUS0wcA7AuIbz2zb870YfJO/r5UBS5gCqQ==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bro%2F6HLsfI9E%2Frz0QEoYv%2BrcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz%2BWQtg4nKpjUS0wcA7AuIbz2zb870YfJO%2Fr5UBS5gCqQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3/4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ+aTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3%2F4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ%2BaTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-19T10:06:07.932Z",
                      "updated_at": "2022-09-19T11:54:17.248Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_HesdqEzt5e9c0T56",
                            "rule_id": "val_gZft0NKZSUWK",
                            "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-19T10:06:07.934Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/2CpRCE2c/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/2CpRCE2c/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "post": {
        "operationId": "disable-voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Disable Voucher",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \\n___\\nThis method sets the voucher state to **inactive**. The voucher cannot be redeemed.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersDisableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                      "code": "2CpRCE2c",
                      "campaign": null,
                      "campaign_id": null,
                      "category": null,
                      "category_id": null,
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "AMOUNT",
                        "amount_off": 300,
                        "effect": "APPLY_TO_ITEMS_PROPORTIONALLY"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": false,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+ro/6HLsfI9E/rz0QEoYv+rcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz+WQtg4nKpjUS0wcA7AuIbz2zb870YfJO/r5UBS5gCqQ==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bro%2F6HLsfI9E%2Frz0QEoYv%2BrcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz%2BWQtg4nKpjUS0wcA7AuIbz2zb870YfJO%2Fr5UBS5gCqQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3/4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ+aTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3%2F4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ%2BaTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-19T10:06:07.932Z",
                      "updated_at": "2022-09-19T11:53:23.452Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_HesdqEzt5e9c0T56",
                            "rule_id": "val_gZft0NKZSUWK",
                            "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                            "related_object_type": "voucher",
                            "created_at": "2022-09-19T10:06:07.934Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/2CpRCE2c/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/2CpRCE2c/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/balance": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "post": {
        "operationId": "update-voucher-balance",
        "tags": [
          "VOUCHERS API"
        ],
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "summary": "Add or Remove Voucher Balance",
        "description": "Add balance to an existing gift card or loyalty card.",
        "requestBody": {
          "required": true,
          "description": "Provide the amount to be added to/subtracted from the voucher.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VouchersBalanceUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "amount": 10000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a balance object if the operation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersBalanceUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "amount": 10000,
                      "total": 20100,
                      "balance": 20100,
                      "type": "gift_voucher",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/transactions": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "get": {
        "operationId": "list-voucher-transactions",
        "tags": [
          "VOUCHERS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "summary": "List Voucher Transactions",
        "description": "List transactions that are associated with credit movements on a gift card or loyalty card.",
        "responses": {
          "200": {
            "description": "Returns a dictionary of transaction objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersTransactionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "vtx_0c9dccc4d5813e71bd",
                          "source_id": "20230317_subtract_1",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "API",
                          "reason": "Subtracting credits from card",
                          "type": "CREDITS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128020,
                              "amount": -2000,
                              "object": "balance",
                              "balance": 121020,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T15:50:00.786Z"
                        },
                        {
                          "id": "vtx_0c9dcc920ac0e9ef82",
                          "source_id": "20230317_add_1",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "API",
                          "reason": "Adding more points to card",
                          "type": "CREDITS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130020,
                              "amount": 20,
                              "object": "balance",
                              "balance": 123020,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T15:49:08.768Z"
                        },
                        {
                          "id": "vtx_0c94f018d30bef6689",
                          "source_id": "HRwc0oHz_reward",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "voucherify-web-ui",
                          "reason": "cash reward",
                          "type": "CREDITS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130000,
                              "amount": 2000,
                              "object": "balance",
                              "balance": 123000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:38:02.055Z"
                        },
                        {
                          "id": "vtx_0c94edbbaccbef5db6",
                          "source_id": null,
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": null,
                          "reason": null,
                          "type": "CREDITS_REFUND",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128000,
                              "amount": 44,
                              "object": "balance",
                              "balance": 121000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_jj5EzDxDOd2xFPsAJJ18IaZK",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c94ed583fcafc31c1"
                            },
                            "rollback": {
                              "id": "rr_0c94edbb8d0bef5d9e"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:27:42.389Z"
                        },
                        {
                          "id": "vtx_0c94ed584f4afc31da",
                          "source_id": null,
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": null,
                          "reason": null,
                          "type": "CREDITS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128000,
                              "amount": -44,
                              "object": "balance",
                              "balance": 120956,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_jj5EzDxDOd2xFPsAJJ18IaZK",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c94ed583fcafc31c1"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:26:00.640Z"
                        },
                        {
                          "id": "vtx_0c94e9432c4afc2134",
                          "source_id": "HRwc0oHz_removal",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "voucherify-web-ui",
                          "reason": "removal",
                          "type": "CREDITS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 128000,
                              "amount": -2000,
                              "object": "balance",
                              "balance": 121000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:08:10.413Z"
                        },
                        {
                          "id": "vtx_0c94e8100f8afc1c6c",
                          "source_id": null,
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": null,
                          "reason": null,
                          "type": "CREDITS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130000,
                              "amount": -7000,
                              "object": "balance",
                              "balance": 123000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_qZX3pEt5rFf5W23qRMDQcVt9",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c94e80fda4afc1c59"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T18:02:55.935Z"
                        },
                        {
                          "id": "vtx_0c94e6b82a4bef406c",
                          "source_id": "walmart",
                          "voucher_id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                          "campaign_id": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
                          "source": "voucherify-web-ui",
                          "reason": "return",
                          "type": "CREDITS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "gift_voucher",
                              "total": 130000,
                              "amount": 5000,
                              "object": "balance",
                              "balance": 130000,
                              "related_object": {
                                "id": "v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-10T17:57:03.758Z"
                        }
                      ],
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/transactions/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "example": "GIFT-CARD-1",
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify, i.e. \`v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u\`."
        }
      ],
      "post": {
        "operationId": "export-voucher-transactions",
        "tags": [
          "VOUCHERS API"
        ],
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "summary": "Export Voucher Transactions",
        "description": "Export transactions that are associated with credit movements on a gift card or loyalty card.\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_CANCELLATION\` <br> - \`POINTS_REDEMPTION\`<br> - \`POINTS_REFUND\`<br> - \`POINTS_ADDITION\`<br> - \`POINTS_REMOVAL\`<br> - \`POINTS_EXPIRATION\`<br> - \`POINTS_TRANSFER_IN\`<br> - \`POINTS_TRANSFER_OUT\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "requestBody": {
          "description": "Specify the parameters for the transaction export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VouchersTransactionsExportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "order": "-created_at",
                      "fields": [
                        "id",
                        "type",
                        "source_id",
                        "reason",
                        "balance",
                        "amount",
                        "created_at",
                        "voucher_id",
                        "campaign_id",
                        "details",
                        "source"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an export object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersTransactionsExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_ARi2UbRjgfrHQJoVcKFrBUgA",
                      "object": "export",
                      "created_at": "2023-05-16T08:30:21.496Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "order": "-created_at",
                        "fields": [
                          "id",
                          "type",
                          "source_id",
                          "reason",
                          "balance",
                          "amount",
                          "created_at",
                          "voucher_id",
                          "campaign_id",
                          "details",
                          "related_transaction_id",
                          "source"
                        ],
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  },
                  "No request body": {
                    "value": {
                      "id": "exp_ExEE5A6OIK4tssuNswr5O6SU",
                      "object": "export",
                      "created_at": "2023-03-21T13:34:57.034Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/importCSV": {
      "post": {
        "operationId": "import-vouchers-using-csv",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Import Vouchers using CSV",
        "description": "Import standalone vouchers into the repository using a CSV file.\\n\\nThe CSV file has to include headers in the first line. All properties listed in the file headers that cannot be mapped to standard voucher fields will be added to the metadata object.  \\n\\nYou can find an example CSV file [here](https://support.voucherify.io/article/45-import-codes-and-share-them-digitally#coupons).\\n___\\n<!--\\ntitle: \\"cURL Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL cURL example\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/vouchers/importCSV \\\\\\n  -F file=@/path/to/vouchers.csv \\\\\\n  -H \\"X-App-Id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\" \\\\\\n  -H \\"X-App-Token: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\"\\n\`\`\`\\n\\n<!-- theme: info -->\\n\\n> 📘 Standard voucher fields mapping\\n>\\n> - Go to the <!-- [import vouchers](OpenAPI.json/paths/~1vouchers~1import) -->[import vouchers](ref:import-vouchers) endpoint to see all standard CSV fields description (body params section).\\n> - Supported CSV file headers: Code,Voucher Type,Value,Discount Type,Category,Start Date,Expiration Date,Redemption Limit,Redeemed Quantity, Redeemed Amount,Active,Additional Info,Custom Metadata Property Name\\n>- **Start and expiration dates** need to be provided in compliance with the ISO 8601 norms. For example, 2020-03-11T09:00:00.000Z.  \\n>    - \`YYYY-MM-DD\`\\n>    - \`YYYY-MM-DDTHH\`\\n>    - \`YYYY-MM-DDTHH:mm\`\\n>    - \`YYYY-MM-DDTHH:mm:ss\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ss.SSSZ\`\\n> - Custom code attributes (not supported by-default) need to be added as code **metadata**.\\n> - You **cannot import the same codes** to a single Voucherify Project.\\n\\n<!-- theme: info -->\\n\\n> 📘 Categories\\n>\\n> In the structure representing your data, you can define a category that the voucher belongs to. You can later use the category of a voucher to group and search by specific criteria in the Dashboard and using the [List Vouchers](ref:list-vouchers) endpoint.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VouchersImportCSVRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and vouchers will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the **response** and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersImportCsvCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/sessions/{sessionKey}": {
      "parameters": [
        {
          "name": "code",
          "in": "path",
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "description": "A **code** that identifies the voucher or a unique voucher ID assigned by Voucherify.",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts",
          "name": "sessionKey",
          "in": "path",
          "required": true,
          "description": "A unique session identifier."
        }
      ],
      "delete": {
        "operationId": "release-validation-session",
        "tags": [
          "VOUCHERS API"
        ],
        "summary": "Release Validation Session",
        "description": "Manually release a validation session that has been set up for the voucher. This method undos the actions that are explained in our guide on how a validation session was established, you can read more [here](doc:locking-validation-session). \\n\\n> 📘 Release Session using Dashboard\\n>\\n> You can also use the Validations Manager in the Dashboard to unlock sessions. [Read more](https://support.voucherify.io/article/16-dashboard-sections#validations).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if the validation session was released successfully."
          }
        }
      }
    },
    "/v1/campaigns": {
      "post": {
        "operationId": "create-campaign",
        "tags": [
          "CAMPAIGNS API",
          "PROMOTIONS API"
        ],
        "summary": "Create Campaign",
        "description": "Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.  \\n<!-- theme: info -->\\n\\n> 📘 Global uniqueness\\n>\\n> All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.  \\n<!-- theme: warning -->\\n> 🚧 Code generation status\\n>\\n> This is an asynchronous action; you can't read or modify a newly created campaign until the code generation is completed. See the \`creation_status\` field in the <!-- [campaign object](OpenAPI.json/components/schemas/Campaign) -->[campaign object](ref:get-campaign) description.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the campaign that you would like to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsCreateRequestBody"
              },
              "examples": {
                "Discount Campaign": {
                  "value": {
                    "name": "Discount Campaign 4",
                    "campaign_type": "DISCOUNT_COUPONS",
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 3,
                    "voucher": {
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "percent_off": 10,
                        "type": "PERCENT"
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "10OFF-#######"
                      }
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "AMER"
                    }
                  }
                },
                "Gift Card Campaign": {
                  "value": {
                    "name": "Gift Card Campaign",
                    "campaign_type": "GIFT_VOUCHERS",
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 2,
                    "voucher": {
                      "type": "GIFT_VOUCHER",
                      "gift": {
                        "amount": 1000,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "GIFT-CARD-#######"
                      }
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                },
                "Loyalty Program": {
                  "value": {
                    "name": "Loyalty Campaign",
                    "campaign_type": "LOYALTY_PROGRAM",
                    "auto_join": true,
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 2,
                    "voucher": {
                      "type": "LOYALTY_CARD",
                      "loyalty_card": {
                        "points": 1000,
                        "expiration_rules": {
                          "period_type": "MONTH",
                          "period_value": 3,
                          "rounding_type": "END_OF_YEAR"
                        }
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "LOYALTY-CARD-#######"
                      }
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                },
                "Promotion": {
                  "value": {
                    "name": "Promotion - API - 4",
                    "campaign_type": "PROMOTION",
                    "type": "STATIC",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "use_voucher_metadata_schema": false,
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "active": false,
                    "promotion": {
                      "tiers": [
                        {
                          "name": "Percent Discount",
                          "banner": "Get 40% off",
                          "action": {
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 40,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {
                            "level": "B"
                          },
                          "active": false,
                          "start_date": "2022-09-21T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": {
                            "interval": "P2D",
                            "duration": "P1D"
                          },
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "validation_rules": [
                            "val_q8qUBMOh5qIQ"
                          ]
                        },
                        {
                          "name": "Order more than $100",
                          "banner": "Get $30 off",
                          "action": {
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 3000,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {
                            "level": "A"
                          },
                          "active": false,
                          "start_date": "2022-09-21T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": {
                            "interval": "P2D",
                            "duration": "P1D"
                          },
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "validation_rules": [
                            "val_q8qUBMOh5qIQ"
                          ]
                        }
                      ]
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                },
                "Referral Program": {
                  "value": {
                    "name": "Referral Campaign 2",
                    "campaign_type": "REFERRAL_PROGRAM",
                    "join_once": true,
                    "type": "AUTO_UPDATE",
                    "category_id": "cat_0bb343dee3cdb5ec0c",
                    "start_date": "2020-08-16T00:00:00Z",
                    "expiration_date": "2023-12-26T00:00:00Z",
                    "vouchers_count": 2,
                    "referral_program": {
                      "conversion_event_type": "redemption"
                    },
                    "voucher": {
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "percent_off": 45,
                        "effect": "APPLY_TO_ORDER",
                        "amount_limit": 15
                      },
                      "redemption": {
                        "quantity": 10
                      },
                      "code_config": {
                        "pattern": "REFERRAL-CODE-#######"
                      },
                      "is_referral_code": true
                    },
                    "validity_timeframe": {
                      "interval": "P2D",
                      "duration": "P1D"
                    },
                    "validity_day_of_week": [
                      0,
                      1,
                      2
                    ],
                    "activity_duration_after_publishing": "P24D",
                    "use_voucher_metadata_schema": false,
                    "metadata": {
                      "region": "APAC"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a campaign object if the call succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsCreateResponseBody"
                },
                "examples": {
                  "Discount Campaign": {
                    "value": {
                      "id": "camp_NdBCAQk1AAZcMcv6kt6X164Q",
                      "name": "Discount Campaign 4",
                      "campaign_type": "DISCOUNT_COUPONS",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "PERCENT",
                          "percent_off": 10
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "10OFF-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": false,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "AMER"
                      },
                      "created_at": "2022-09-21T09:25:49.617Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Gift Card Campaign": {
                    "value": {
                      "id": "camp_B2Gx83JsSbmvj05MOwxYbNm6",
                      "name": "Gift Card Campaign",
                      "campaign_type": "GIFT_VOUCHERS",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "GIFT_VOUCHER",
                        "gift": {
                          "amount": 1000,
                          "effect": "APPLY_TO_ORDER"
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "GIFT-CARD-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": false,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-21T09:31:16.266Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Loyalty Program": {
                    "value": {
                      "id": "camp_FZL4iTTdZw36nZOoXYQ172fQ",
                      "name": "Loyalty Campaign",
                      "campaign_type": "LOYALTY_PROGRAM",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "LOYALTY_CARD",
                        "loyalty_card": {
                          "points": 1000,
                          "expiration_rules": {
                            "period_type": "MONTH",
                            "period_value": 3,
                            "rounding_type": "END_OF_YEAR"
                          }
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "LOYALTY-CARD-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": true,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-21T09:39:45.479Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Promotion": {
                    "value": {
                      "id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                      "name": "Promotion - API - 4",
                      "campaign_type": "PROMOTION",
                      "type": "STATIC",
                      "auto_join": false,
                      "join_once": false,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-23T08:54:38.281Z",
                      "category": "First",
                      "creation_status": "DONE",
                      "vouchers_generation_status": "DONE",
                      "protected": false,
                      "promotion": {
                        "object": "list",
                        "data_ref": "tiers",
                        "tiers": [
                          {
                            "id": "promo_M4OfmMgSUyN12JPAw3l4hWjD",
                            "created_at": "2022-09-23T08:54:38.286Z",
                            "name": "Percent Discount",
                            "banner": "Get 40% off",
                            "action": {
                              "discount": {
                                "type": "PERCENT",
                                "percent_off": 40,
                                "effect": "APPLY_TO_ORDER"
                              }
                            },
                            "metadata": {
                              "level": "B"
                            },
                            "hierarchy": 1,
                            "promotion_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "campaign": {
                              "id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                              "start_date": "2020-08-16T00:00:00.000Z",
                              "expiration_date": "2023-12-26T00:00:00.000Z",
                              "validity_timeframe": {
                                "interval": "P2D",
                                "duration": "P1D"
                              },
                              "validity_day_of_week": [
                                0,
                                1,
                                2
                              ],
                              "active": true,
                              "category_id": "cat_0bb343dee3cdb5ec0c",
                              "object": "campaign"
                            },
                            "campaign_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "active": false,
                            "start_date": "2022-09-21T00:00:00.000Z",
                            "expiration_date": "2022-09-30T00:00:00.000Z",
                            "validity_timeframe": {
                              "interval": "P2D",
                              "duration": "P1D"
                            },
                            "validity_day_of_week": [
                              1,
                              2,
                              3,
                              4
                            ],
                            "summary": {
                              "redemptions": {
                                "total_redeemed": 0
                              },
                              "orders": {
                                "total_amount": 0,
                                "total_discount_amount": 0
                              }
                            },
                            "object": "promotion_tier",
                            "validation_rule_assignments": {
                              "object": "list",
                              "data_ref": "data",
                              "data": [
                                {
                                  "id": "asgm_dr3oXeN98YfiTF60",
                                  "rule_id": "val_q8qUBMOh5qIQ",
                                  "related_object_id": "promo_M4OfmMgSUyN12JPAw3l4hWjD",
                                  "related_object_type": "promotion_tier",
                                  "created_at": "2022-09-23T08:54:38.286Z",
                                  "object": "validation_rules_assignment"
                                }
                              ],
                              "total": 1
                            }
                          },
                          {
                            "id": "promo_uMSxvzhxXDp3Ijs3659npqb2",
                            "created_at": "2022-09-23T08:54:38.314Z",
                            "name": "Order more than $100",
                            "banner": "Get $30 off",
                            "action": {
                              "discount": {
                                "type": "AMOUNT",
                                "amount_off": 3000,
                                "effect": "APPLY_TO_ORDER"
                              }
                            },
                            "metadata": {
                              "level": "A"
                            },
                            "hierarchy": 2,
                            "promotion_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "campaign": {
                              "id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                              "start_date": "2020-08-16T00:00:00.000Z",
                              "expiration_date": "2023-12-26T00:00:00.000Z",
                              "validity_timeframe": {
                                "interval": "P2D",
                                "duration": "P1D"
                              },
                              "validity_day_of_week": [
                                0,
                                1,
                                2
                              ],
                              "active": true,
                              "category_id": "cat_0bb343dee3cdb5ec0c",
                              "object": "campaign"
                            },
                            "campaign_id": "camp_ru1B8mQjY75KxXupt7RPZcb8",
                            "active": false,
                            "start_date": "2022-09-21T00:00:00.000Z",
                            "expiration_date": "2022-09-30T00:00:00.000Z",
                            "validity_timeframe": {
                              "interval": "P2D",
                              "duration": "P1D"
                            },
                            "validity_day_of_week": [
                              1,
                              2,
                              3,
                              4
                            ],
                            "summary": {
                              "redemptions": {
                                "total_redeemed": 0
                              },
                              "orders": {
                                "total_amount": 0,
                                "total_discount_amount": 0
                              }
                            },
                            "object": "promotion_tier",
                            "validation_rule_assignments": {
                              "object": "list",
                              "data_ref": "data",
                              "data": [
                                {
                                  "id": "asgm_jgJlWms7GVK59iNR",
                                  "rule_id": "val_q8qUBMOh5qIQ",
                                  "related_object_id": "promo_uMSxvzhxXDp3Ijs3659npqb2",
                                  "related_object_type": "promotion_tier",
                                  "created_at": "2022-09-23T08:54:38.314Z",
                                  "object": "validation_rules_assignment"
                                }
                              ],
                              "total": 1
                            }
                          }
                        ],
                        "total": 2,
                        "has_more": false
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  },
                  "Referral Program": {
                    "value": {
                      "id": "camp_N8rztKAqOYIdFxNLr9eNIjyB",
                      "name": "Referral Campaign 2",
                      "campaign_type": "REFERRAL_PROGRAM",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "PERCENT",
                          "amount_limit": 15,
                          "percent_off": 45,
                          "effect": "APPLY_TO_ORDER"
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "REFERRAL-CODE-#######"
                        },
                        "is_referral_code": true,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "referral_program": {
                        "conversion_event_type": "redemption"
                      },
                      "auto_join": false,
                      "join_once": true,
                      "use_voucher_metadata_schema": false,
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 0,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-23T09:06:41.757Z",
                      "category": "First",
                      "creation_status": "IN_PROGRESS",
                      "vouchers_generation_status": "IN_PROGRESS",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "list-campaigns",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "List Campaigns",
        "description": "Retrieve a list of campaigns in a project. \\n\\nThe campaigns are returned sorted by creation date, with the most recent campaigns appearing first.  \\n\\nWhen you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using \`limit\`, which page of campaigns to return using \`page\`, sort the campaigns using the \`order\` query parameter and filter the results by the \`campaign_type\`.\\n\\nThis method will return an error when trying to return a limit of more than 100 campaigns.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/campaign_type"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterExpandListCampaigns"
            },
            "in": "query",
            "name": "expand",
            "description": "Include an expanded \`categories\` object in the response."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListCampaigns"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a \`campaign\` property that contains an array of campaigns. The maximum number of campaigns returned is determined by the \`limit\` query parameter. Each entry in the array is a separate campaign object. If no more campaigns are available, the resulting array on a given page will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "campaigns",
                      "campaigns": [
                        {
                          "id": "camp_SibPsDRKQvg3SUtptgPZCNZb",
                          "name": "Voucher Metadata",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "PERCENT",
                              "amount_limit": 4400,
                              "percent_off": 30,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 9,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "#########",
                              "prefix": "Discount-",
                              "postfix": "YY"
                            },
                            "is_referral_code": false,
                            "start_date": "2022-09-20T00:00:00.000Z",
                            "expiration_date": "2022-09-30T00:00:00.000Z",
                            "validity_timeframe": {
                              "interval": "P3D",
                              "duration": "P1D"
                            }
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": false,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": {
                            "interval": "P3D",
                            "duration": "P1D"
                          },
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "activity_duration_after_publishing": "P24D",
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {
                            "region": "AMER"
                          },
                          "created_at": "2022-09-20T09:32:29.530Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        },
                        {
                          "id": "camp_HgsbCKauXmEoPnnh8aas0ISe",
                          "name": "Static Campaign",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "STATIC",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 3000,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": 1
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": true,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-09-20T07:52:34.499Z",
                          "updated_at": "2022-09-20T11:38:13.501Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        },
                        {
                          "id": "camp_f7fBbQxUuTN7dI7tGOo5XMDA",
                          "name": "Loyalty Program Fall 2022",
                          "campaign_type": "LOYALTY_PROGRAM",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "LOYALTY_CARD",
                            "loyalty_card": {
                              "points": 0,
                              "expiration_rules": {
                                "period_type": "MONTH",
                                "period_value": 7,
                                "rounding_type": "END_OF_YEAR"
                              }
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "LOYALTY-CARD-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": true,
                          "join_once": true,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-09-19T07:56:22.103Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": "cat_0bb343dee3cdb5ec0c",
                          "object": "campaign"
                        },
                        {
                          "id": "camp_4tHsQEDUOER6PeW8SoMdnHH6",
                          "name": "Dynamic Discounts",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 5,
                              "percent_off_formula": "IF(ORDER_AMOUNT > 300;15;5)",
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "DYNAMIC-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {
                            "marketing_text": "Purchases above $300 are eligible for a 15% discount."
                          },
                          "created_at": "2022-07-12T15:12:02.575Z",
                          "updated_at": "2022-07-20T10:48:05.617Z",
                          "category": "test",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": "cat_0b688929a2476386a8",
                          "object": "campaign"
                        },
                        {
                          "id": "camp_JlsseNSDO7l4neFtev6p6945",
                          "name": "$20 OFF Entire Order",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 2000,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "$20OFFORDER-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-07-11T09:43:36.057Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        },
                        {
                          "id": "camp_Uj3cNbWSgt7Zl4AyHM7Sa5Qk",
                          "name": "3% OFF Entire Order",
                          "campaign_type": "DISCOUNT_COUPONS",
                          "type": "AUTO_UPDATE",
                          "voucher": {
                            "type": "DISCOUNT_VOUCHER",
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 3,
                              "effect": "APPLY_TO_ORDER"
                            },
                            "redemption": {
                              "quantity": null
                            },
                            "code_config": {
                              "length": 8,
                              "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                              "pattern": "########",
                              "prefix": "3%OFFORDER-"
                            },
                            "is_referral_code": false
                          },
                          "auto_join": false,
                          "join_once": false,
                          "use_voucher_metadata_schema": true,
                          "vouchers_count": 1,
                          "active": true,
                          "metadata": {},
                          "created_at": "2022-07-11T09:41:12.087Z",
                          "creation_status": "DONE",
                          "vouchers_generation_status": "DONE",
                          "protected": false,
                          "category_id": null,
                          "object": "campaign"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}": {
      "parameters": [
        {
          "in": "path",
          "name": "campaignId",
          "description": "You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.",
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "required": true
        }
      ],
      "get": {
        "operationId": "get-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Get Campaign",
        "description": "Retrieves the campaign with the given campaign ID or campaign name.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a campaign object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "camp_JlsseNSDO7l4neFtev6p6945",
                      "name": "$20 OFF Entire Order",
                      "campaign_type": "DISCOUNT_COUPONS",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 2000,
                          "effect": "APPLY_TO_ORDER"
                        },
                        "redemption": {
                          "quantity": null
                        },
                        "code_config": {
                          "length": 8,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "########",
                          "prefix": "$20OFFORDER-"
                        },
                        "is_referral_code": false
                      },
                      "auto_join": false,
                      "join_once": false,
                      "use_voucher_metadata_schema": true,
                      "vouchers_count": 1,
                      "active": true,
                      "metadata": {},
                      "created_at": "2022-07-11T09:43:36.057Z",
                      "creation_status": "DONE",
                      "vouchers_generation_status": "DONE",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": null,
                      "object": "campaign"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Update Campaign",
        "description": "Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. \\n\\nFields other than the ones listed in the request body won't be modified. Even if provided, they will be silently skipped.   \\n<!-- theme: warning -->\\n> #### Vouchers will be affected\\n>\\n> This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the campaign parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "description": "New description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the campaign object if the update succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "camp_FZL4iTTdZw36nZOoXYQ172fQ",
                      "name": "Loyalty Campaign",
                      "campaign_type": "LOYALTY_PROGRAM",
                      "type": "AUTO_UPDATE",
                      "voucher": {
                        "type": "LOYALTY_CARD",
                        "loyalty_card": {
                          "points": 1000,
                          "expiration_rules": {
                            "period_type": "MONTH",
                            "period_value": 3,
                            "rounding_type": "END_OF_YEAR"
                          }
                        },
                        "redemption": {
                          "quantity": 10
                        },
                        "code_config": {
                          "length": 7,
                          "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                          "pattern": "LOYALTY-CARD-#######"
                        },
                        "is_referral_code": false,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": "2023-12-26T00:00:00.000Z",
                        "validity_timeframe": {
                          "interval": "P2D",
                          "duration": "P1D"
                        }
                      },
                      "auto_join": false,
                      "join_once": false,
                      "use_voucher_metadata_schema": false,
                      "description": "New description",
                      "start_date": "2020-08-16T00:00:00.000Z",
                      "expiration_date": "2023-12-26T00:00:00.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "P1D"
                      },
                      "validity_day_of_week": [
                        0,
                        1,
                        2
                      ],
                      "activity_duration_after_publishing": "P24D",
                      "vouchers_count": 2,
                      "active": true,
                      "metadata": {
                        "region": "APAC"
                      },
                      "created_at": "2022-09-21T09:39:45.479Z",
                      "updated_at": "2022-09-23T09:47:00.205Z",
                      "category": "First",
                      "creation_status": "MODIFYING",
                      "vouchers_generation_status": "MODIFYING",
                      "protected": false,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "categories": [
                        {
                          "id": "cat_0bb343dee3cdb5ec0c",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-09-16T11:47:19.568Z",
                          "object": "category"
                        }
                      ],
                      "object": "campaign"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Delete Campaign",
        "description": "Permanently deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "description": "If this flag is set to \`true\`, the campaign and related vouchers will be removed permanently. Going forward, the user will be able to create the next campaign with exactly the same name.",
            "name": "force"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "202": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsDeleteResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/vouchers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "add-vouchers-to-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Add Voucher to Campaign",
        "description": "This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional \`code_config\` parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterInteger"
            },
            "in": "query",
            "name": "vouchers_count",
            "description": "Number of vouchers that should be added."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the voucher parameters that you would like to overwrite.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsVouchersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "start_date": "2022-09-24T00:00:00Z",
                    "expiration_date": "2022-09-25T23:59:59Z",
                    "active": false,
                    "redemption": {
                      "quantity": null
                    },
                    "code_config": {
                      "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                      "length": 8,
                      "prefix": "Add-",
                      "pattern": null,
                      "postfix": "-API"
                    },
                    "additional_info": "Voucher added using API",
                    "metadata": {
                      "Season": "Fall"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded for a voucher count of 1.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsVouchersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0bb96ebb7ec3720252"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Returns an \`async_action_id\` if the request was made to create more than 1 voucher.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsVouchersCreateInBulkResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/vouchers/{code}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A custom **code** that identifies the voucher."
        }
      ],
      "post": {
        "operationId": "add-voucher-with-specific-code-to-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Add Voucher with Specific Code to Campaign",
        "description": "This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the voucher parameters that you would like to overwrite.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsVouchersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "category_id": "cat_0bb81a481615a37b5e",
                    "start_date": "2022-09-24T00:00:00Z",
                    "expiration_date": "2022-09-25T23:59:59Z",
                    "active": false,
                    "redemption": {
                      "quantity": null
                    },
                    "additional_info": "Voucher added using API",
                    "metadata": {
                      "Season": "Fall"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsVouchersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_EJwB9Wy2aOIsDpWhnl2QBY51OqjQ5Ukg",
                      "code": "Code3",
                      "campaign": "Add Voucher to Campaign",
                      "campaign_id": "camp_xxpmFyWO9h9s5cEe7HtmOK5B",
                      "category": null,
                      "category_id": "cat_0bb81a481615a37b5e",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "amount_limit": 2000,
                        "percent_off": 30,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2022-09-24T00:00:00.000Z",
                      "expiration_date": "2022-09-25T23:59:59.000Z",
                      "validity_timeframe": null,
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": true,
                      "additional_info": "Voucher added using API",
                      "metadata": {
                        "Season": "Fall"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+p2kdatp7KAUZxgSATC1gRWgsb1Q3RQyClNOBrfUrRKpTjSPSzBuUSZzb45TIpfWRISSiaz1QXGh8z9sVSHIWQsGLO6+1N81zXuY6/pnC7gRBa4edwMaRoCAwzqO9JDw148AGk4XrXLg==",
                          "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bp2kdatp7KAUZxgSATC1gRWgsb1Q3RQyClNOBrfUrRKpTjSPSzBuUSZzb45TIpfWRISSiaz1QXGh8z9sVSHIWQsGLO6%2B1N81zXuY6%2FpnC7gRBa4edwMaRoCAwzqO9JDw148AGk4XrXLg%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19wrLVWzIOgoVd9an76OxiJWB5/u9yWGoD7cqN6Qd1K9noNyR1YwvHnBrcN5fa5qtY+sOXonn7WsynAWeR289gA0XobsHHE2VWe8BzNZ7h2kH90SsiW+NCQg6Ts8clYWWP5lrGyV/fzoA==",
                          "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19wrLVWzIOgoVd9an76OxiJWB5%2Fu9yWGoD7cqN6Qd1K9noNyR1YwvHnBrcN5fa5qtY%2BsOXonn7WsynAWeR289gA0XobsHHE2VWe8BzNZ7h2kH90SsiW%2BNCQg6Ts8clYWWP5lrGyV%2FfzoA%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-09-21T07:14:28.217Z",
                      "updated_at": null,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/Code3/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/Code3/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/import": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The ID of an existing campaign to which you're importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "import-vouchers-to-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Import Vouchers to Campaign",
        "description": "Imports vouchers to an **existing** campaign.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Discount type, expiration date and the remaining attributes will be taken from the <!-- [Campaign](OpenAPI.json/components/schemas/Campaign) -->[Campaign](ref:get-campaign) settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsImportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "code": "CODE7",
                      "category": "First",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    },
                    {
                      "code": "CODE8",
                      "category": "Second",
                      "redemption": {
                        "quantity": 18
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    },
                    {
                      "code": "CODE9",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "redemption": {
                        "quantity": 4
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    }
                  ]
                },
                "Gift Cards": {
                  "value": [
                    {
                      "code": "CODE13",
                      "category": "First",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "gift": {
                        "amount": 500
                      },
                      "active": true
                    },
                    {
                      "code": "CODE14",
                      "category": "Second",
                      "redemption": {
                        "quantity": 18
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "gift": {
                        "amount": 2000
                      },
                      "active": true
                    },
                    {
                      "code": "CODE15",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "redemption": {
                        "quantity": 4
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": false
                    }
                  ]
                },
                "Loyalty Cards": {
                  "value": [
                    {
                      "code": "CODE10",
                      "category": "First",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "loyalty_card": {
                        "points": 300
                      },
                      "active": true
                    },
                    {
                      "code": "CODE11",
                      "category": "Second",
                      "redemption": {
                        "quantity": 18
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "loyalty_card": {
                        "points": 2000
                      },
                      "active": true
                    },
                    {
                      "code": "CODE12",
                      "category_id": "cat_0bb343dee3cdb5ec0c",
                      "redemption": {
                        "quantity": 4
                      },
                      "metadata": {
                        "season": "Fall"
                      },
                      "additional_info": "secret-code1",
                      "active": true
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the vouchers will be imported to the repository asynchronously. To check the status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsImportCreateResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/importCSV": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "import-vouchers-to-campaign-using-csv",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Import Vouchers to Campaign by CSV",
        "description": "Imports vouchers to an **existing** campaign.  \\n\\n\\nThe CSV file has to include headers in the first line. \\n\\nCurl Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/campaigns/TEST-CAMPAIGN/importCSV \\\\\\n  -F file=@/path/to/campaigns.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n\\nYou can import values for the following fields: \`Code\` (**required**), \`Category\`, \`Active\`. In a gift cards import, you can also include the current card balance using the \`Gift Amount\` header and the amount that was redeemed using the \`Redeemed Amount\` header. In a loyalty cards import, you can also include the current loyalty card score in points using the \`Loyalty Points\` header. Remaining CSV columns will be mapped to metadata properties. \\n\\nDiscount type, time limits, and validation rules will be taken from the <!-- [campaign object](OpenAPI.json/components/schemas/Campaign) -->[campaign object](ref:get-campaign) settings. \\n\\n\\n| **Active** | **Code** | **Loyalty Points** | **Gift Amount** | **Redeemed Amount** | **Redeemed Quantity** | **Category** | **Custom_metadata_property** |\\n|---|---|---|---|---|---|---|---|\\n| Use \`true\` or \`false\` to enable or disable the voucher; this flag can be used to turn off the ability to redeem a voucher even though it is within the campaign's start/end validity timeframe. | The unique voucher code. | The number of points to be added to the loyalty card. If you leave this undefined, then the initial number of points will be set according to the campaign settings.<br>Context: \`LOYALTY_PROGRAM\` | The initial gift card balance.<br>Context: \`GIFT_VOUCHERS\` | The amount that was redeemed from the available balance on a gift card. | The number of times the voucher has been redeemed. | A custom tag for the voucher to help you filter codes; you can either import the category name or a unique Voucherify-assigned category ID. | Any additional data that you would like to store for the given loyalty card as a Custom attribute. Remember to define the metadata schema in the Dashboard prior to importing codes. |\\n|<!-- theme: info -->\\n\\n> 📘 Active\\n>\\n> The CSV file is allowed in two versions; either with or without a column titled \`Active\`. It indicates whether the voucher is enabled after the import event.  \\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CampaignsVouchersImportCSVRequestBody"
              }
            }
          },
          "description": "The file path is stored in the form \`file\` header."
        },
        "responses": {
          "200": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the vouchers will be imported to the repository asynchronously. To check the status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsImportCsvCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/res_async_actions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "enable-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Enable Campaign",
        "description": "There are various times when you'll want to manage a campaign's accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.  \\n\\nSets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty json \`{}\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsEnableResponseBody"
                },
                "examples": {
                  "Empty JSON": {
                    "value": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/campaigns/{campaignId}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value."
        }
      ],
      "post": {
        "operationId": "disable-campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "summary": "Disable Campaign",
        "description": "There are various times when you'll want to manage a campaign's accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.  \\n\\nSets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty json \`{}\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsDisableResponseBody"
                },
                "examples": {
                  "Empty JSON": {
                    "value": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/{campaignId}/tiers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID assigned by Voucherify."
        }
      ],
      "get": {
        "operationId": "list-promotion-tiers-from-campaign",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "List Promotion Tiers from Campaign",
        "description": "This method enables you to list promotion tiers from a specified campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a \`tiers\` property that contains an array of promotion tiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "tiers",
                      "tiers": [
                        {
                          "id": "promo_xyOKjAmysZrwt3aqq1dMUwMU",
                          "created_at": "2022-04-07T08:43:53.730Z",
                          "updated_at": "2022-08-26T05:22:43.220Z",
                          "name": "Amount",
                          "banner": "Get $10 off entire order",
                          "action": {
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 1000,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {},
                          "hierarchy": 2,
                          "promotion_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "campaign": {
                            "id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                            "start_date": null,
                            "expiration_date": null,
                            "active": true,
                            "category_id": "cat_0b5f67863083bf7c05",
                            "object": "campaign"
                          },
                          "campaign_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "active": true,
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 1
                            },
                            "orders": {
                              "total_amount": 2187,
                              "total_discount_amount": 1000
                            }
                          },
                          "object": "promotion_tier",
                          "validation_rule_assignments": null
                        },
                        {
                          "id": "promo_CQonGnrsFAdEJfJQ3oKB3a8G",
                          "created_at": "2022-04-07T08:43:53.581Z",
                          "updated_at": "2022-08-26T05:22:43.008Z",
                          "name": "Percentage",
                          "banner": "Get 10% OFF on entire order",
                          "action": {
                            "discount": {
                              "type": "PERCENT",
                              "percent_off": 10,
                              "effect": "APPLY_TO_ORDER"
                            }
                          },
                          "metadata": {},
                          "hierarchy": 1,
                          "promotion_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "campaign": {
                            "id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                            "start_date": null,
                            "expiration_date": null,
                            "active": true,
                            "category_id": "cat_0b5f67863083bf7c05",
                            "object": "campaign"
                          },
                          "campaign_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0",
                          "active": true,
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 1
                            },
                            "orders": {
                              "total_amount": 71600,
                              "total_discount_amount": 7160
                            }
                          },
                          "object": "promotion_tier",
                          "validation_rule_assignments": null
                        }
                      ],
                      "total": 2,
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ],
      "get": {
        "operationId": "get-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Get Promotion Tier",
        "description": "This method enables you to retrieve a specific promotion tier.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a promotion tier object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersGetResponseBody"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Delete Promotion Tier",
        "description": "This method deletes a promotion tier.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ],
      "post": {
        "operationId": "enable-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Enable Promotion Tier",
        "description": "This method enables a promotion tier, i.e. makes the \`active\` parameter = \`true\`.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the promotion tier object with an updated \`active\` parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersEnableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "promo_NzjTc3ZXTe7md5SziK3uYtei",
                      "created_at": "2022-09-21T11:38:34.962Z",
                      "updated_at": "2022-09-22T10:32:07.712Z",
                      "name": "Order more than $100",
                      "banner": "Order more than $100",
                      "action": {
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 3000,
                          "effect": "APPLY_TO_ORDER"
                        }
                      },
                      "metadata": {},
                      "hierarchy": 1,
                      "campaign": {
                        "id": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                        "start_date": "2022-09-21T00:00:00.000Z",
                        "expiration_date": "2022-09-30T00:00:00.000Z",
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "active": true,
                        "object": "campaign"
                      },
                      "campaign_id": null,
                      "active": true,
                      "start_date": "2022-09-21T00:00:00.000Z",
                      "expiration_date": "2022-09-30T00:00:00.000Z",
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2
                        },
                        "orders": {
                          "total_amount": 37650,
                          "total_discount_amount": 6000
                        }
                      },
                      "object": "promotion_tier",
                      "validation_rule_assignments": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ],
      "post": {
        "operationId": "disable-promotion-tier",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Disable Promotion Tier",
        "description": "This method disables a promotion tier, i.e. makes the \`active\` parameter = \`false\`.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the promotion tier object with an updated \`active\` parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsTiersDisableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "promo_NzjTc3ZXTe7md5SziK3uYtei",
                      "created_at": "2022-09-21T11:38:34.962Z",
                      "updated_at": "2022-09-22T10:34:09.529Z",
                      "name": "Order more than $100",
                      "banner": "Order more than $100",
                      "action": {
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 3000,
                          "effect": "APPLY_TO_ORDER"
                        }
                      },
                      "metadata": {},
                      "hierarchy": 1,
                      "campaign": {
                        "id": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                        "start_date": "2022-09-21T00:00:00.000Z",
                        "expiration_date": "2022-09-30T00:00:00.000Z",
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "active": true,
                        "object": "campaign"
                      },
                      "campaign_id": null,
                      "active": false,
                      "start_date": "2022-09-21T00:00:00.000Z",
                      "expiration_date": "2022-09-30T00:00:00.000Z",
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2
                        },
                        "orders": {
                          "total_amount": 37650,
                          "total_discount_amount": 6000
                        }
                      },
                      "object": "promotion_tier",
                      "validation_rule_assignments": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/stacks": {
      "get": {
        "operationId": "list-all-promotion-stacks",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "List Promotion Stacks",
        "description": "This method enables you to list promotion stacks irrespective of the campaign they are associated with. \\n\\nYou can use filters in the query parameters to specify the stacks to be returned in the response.\\n\\n## Advanced filters for fetching promotion stacks\\n\\n| **Filters** | **Examples** |\\n| :--- | :--- |\\n| Created Before | - \`[created_at][before]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][created_at][conditions][$before][0]=2021-12-30T13:52:18.227Z\` |\\n| Created After | - \`[created_at][after]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][created_at][conditions][$after][0]=2021-12-30T13:52:18.227Z\` |\\n| Updated Before | - \`[updated_at][before]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][updated_at][conditions][$before][0]=2021-12-30T13:52:18.227Z\` |\\n| Updated After | - \`[updated_at][after]=2021-12-30T13:52:18.227Z\`<br>- \`[filters][updated_at][conditions][$after][0]=2021-12-30T13:52:18.227Z\` |",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterLimit"
            },
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterPage"
            },
            "in": "query",
            "description": "Which page of results to return.",
            "name": "page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListAllPromotionStacks"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "$ref": "#/components/parameters/created_at"
          },
          {
            "$ref": "#/components/parameters/updated_at"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a \`data\` property that contains an array of promotion stacks across all your campaigns.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "stack_SLuhQrAt3mXwHg776lYkzZO8",
                          "name": "Stack 2",
                          "created_at": "2022-11-03T10:18:58.356Z",
                          "campaign_id": "camp_h8RyP6FV94F3Ev2odP24j5p1",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Mfww2TuoeU23enqSmnz0f3rh",
                              "promo_vU5IHaLKS7mmZ3ylABET6ikb",
                              "promo_TeHA11JlfN29mUftDcpqIWWq",
                              "promo_bhKBsIX3tO7yqmpTLCLLuaud"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_twQWp1TyaxX5RlSqn061xGVy",
                          "name": "First stack",
                          "created_at": "2021-12-27T11:59:21.838Z",
                          "updated_at": "2022-12-16T08:22:51.970Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_vhCqN5PY7rmPw8yACRvHRZaz",
                          "name": "Second stack",
                          "created_at": "2021-12-27T11:55:47.431Z",
                          "updated_at": "2022-12-16T08:22:52.221Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_zwChew7GY1AnDZJQ6GVP2sdT",
                          "name": "Third stack",
                          "created_at": "2021-12-27T11:54:26.283Z",
                          "updated_at": "2022-12-16T08:22:52.483Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_NS5hEUznL9XPa89rbrOZYMey",
                          "name": "Fourth stack",
                          "created_at": "2021-12-27T11:48:43.982Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_Mwy9XpA0TLctSGriM5kum0qp",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_Rz0NvFtCZOObS3J5R68KET17",
                          "name": "Third stack",
                          "created_at": "2021-12-27T11:40:57.426Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_e8pH0nIuANmYRPE0x8hwDrpm",
                          "name": "Second stack",
                          "created_at": "2021-12-27T08:43:13.875Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Mwy9XpA0TLctSGriM5kum0qp",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_3Q4EJpZqg3DI5IRwgBYfsb37",
                          "name": "First stack",
                          "created_at": "2021-12-27T08:43:13.498Z",
                          "campaign_id": "camp_HXsR22VUMC4hN4DR7eAhCalp",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_Vet0vCNyyo5pOddHfu2X3FCB",
                              "promo_PoIyRVFA5c0Jk514xCpzKHga"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_KxSD0GahLUg9ULB6TseGfUHJ",
                          "name": "Stack 1",
                          "created_at": "2021-12-23T12:28:38.881Z",
                          "campaign_id": "camp_h8RyP6FV94F3Ev2odP24j5p1",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_NMex647s5UushvbBUJmYT2Fc",
                              "promo_4TqHr24boFISDrcOHSlfAxwm"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        }
                      ],
                      "total": 9
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/{campaignId}/stacks": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        }
      ],
      "get": {
        "operationId": "list-promotion-stacks-in-campaign",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "List Promotion Stacks in Campaign",
        "description": "This method enables you to list promotion stacks from a specified campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of promotion stack objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "stack_p0WhtyyDU95crobleMpRabhH",
                          "name": "First stack",
                          "created_at": "2022-09-22T13:03:25.740Z",
                          "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_dJNhAEeV5sR5oPQq1UrUdnMC",
                              "promo_aaAF8mVAzA0PF1igia2OC63d"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        },
                        {
                          "id": "stack_XAzn8AFR3Ks3DBPLAQxV7zHe",
                          "name": "Second stack",
                          "created_at": "2022-09-22T13:03:25.903Z",
                          "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                          "object": "promotion_stack",
                          "tiers": {
                            "ids": [
                              "promo_aaAF8mVAzA0PF1igia2OC63d",
                              "promo_dJNhAEeV5sR5oPQq1UrUdnMC"
                            ],
                            "hierarchy_mode": "MANUAL"
                          }
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Create Promotion Stack",
        "description": "This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the order of promotion tiers for the promotion stack.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionsStacksCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Fifth Stack",
                    "tiers": {
                      "ids": [
                        "promo_aaAF8mVAzA0PF1igia2OC63d",
                        "promo_t9zdL6XMFk7B8fQ23zxELtdE",
                        "promo_dJNhAEeV5sR5oPQq1UrUdnMC"
                      ],
                      "hierarchy_mode": "MANUAL"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a new stack object if a valid promotion campaign identifier was provided in the path and available promotion IDs in the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "stack_q2AmzFvOMCmg4Wdu5bDBlME6",
                      "name": "Fifth Stack",
                      "created_at": "2022-09-23T07:44:53.888Z",
                      "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                      "object": "promotion_stack",
                      "tiers": {
                        "ids": [
                          "promo_aaAF8mVAzA0PF1igia2OC63d",
                          "promo_t9zdL6XMFk7B8fQ23zxELtdE",
                          "promo_dJNhAEeV5sR5oPQq1UrUdnMC"
                        ],
                        "hierarchy_mode": "MANUAL"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/{campaignId}/stacks/{stackId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionStackId"
          },
          "name": "stackId",
          "in": "path",
          "required": true,
          "description": "Promotion stack ID."
        }
      ],
      "get": {
        "operationId": "get-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Get Promotion Stack",
        "description": "This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a stack object if valid identifiers were provided in the path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "stack_p0WhtyyDU95crobleMpRabhH",
                      "name": "First stack",
                      "created_at": "2022-09-22T13:03:25.740Z",
                      "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                      "object": "promotion_stack",
                      "tiers": {
                        "ids": [
                          "promo_dJNhAEeV5sR5oPQq1UrUdnMC",
                          "promo_aaAF8mVAzA0PF1igia2OC63d"
                        ],
                        "hierarchy_mode": "MANUAL"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Update Promotion Stack",
        "description": "This methods allows for editing an existing stack.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the promotion stack parameters that you would like to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionsStacksUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Fifth Stack Modified",
                    "tiers": {
                      "ids": [
                        "promo_aaAF8mVAzA0PF1igia2OC63d",
                        "promo_t9zdL6XMFk7B8fQ23zxELtdE"
                      ],
                      "hierarchy_mode": "MANUAL"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a promotion stack with updated parameters if the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionsStacksUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "stack_q2AmzFvOMCmg4Wdu5bDBlME6",
                      "name": "Fifth Stack Modified",
                      "created_at": "2022-09-23T07:44:53.888Z",
                      "updated_at": "2022-09-23T07:59:44.172Z",
                      "campaign_id": "camp_99HUWI53bVyLzPN1Fg5TBLWX",
                      "object": "promotion_stack",
                      "tiers": {
                        "ids": [
                          "promo_aaAF8mVAzA0PF1igia2OC63d",
                          "promo_t9zdL6XMFk7B8fQ23zxELtdE"
                        ],
                        "hierarchy_mode": "MANUAL"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-promotion-stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "summary": "Delete Promotion Stack",
        "description": "This method deletes a promotion stack.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/rewards/{rewardId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardId"
          },
          "name": "rewardId",
          "in": "path",
          "required": true,
          "description": "A unique reward ID."
        }
      ],
      "delete": {
        "operationId": "delete-reward",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Delete Reward",
        "description": "Delete a reward.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/rewards/{rewardId}/assignments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardId"
          },
          "name": "rewardId",
          "in": "path",
          "required": true,
          "description": "A unique reward ID."
        }
      ],
      "get": {
        "operationId": "list-reward-assignments",
        "tags": [
          "REWARDS API"
        ],
        "summary": "List Reward Assignments",
        "description": "Retrieve reward assignments by the reward ID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of reward assignment objects. Each object contains information regarding the resource to which the reward was assigned and the cost in loyalty points for the reward.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "rewa_PbIRoMXpwe5QhobW4JKu0VjH",
                          "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                          "related_object_id": "camp_wciTvaOfYmAa3EmIIW3QpXXZ",
                          "related_object_type": "campaign",
                          "parameters": {
                            "loyalty": {
                              "points": 15
                            }
                          },
                          "created_at": "2022-08-17T08:13:02.507Z",
                          "updated_at": null,
                          "object": "reward_assignment"
                        },
                        {
                          "id": "rewa_pJYQBXSitK2OVPK3XMXZK76X",
                          "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                          "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                          "related_object_type": "campaign",
                          "parameters": {
                            "loyalty": {
                              "points": 20
                            }
                          },
                          "created_at": "2022-08-24T11:40:22.418Z",
                          "updated_at": null,
                          "object": "reward_assignment"
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Create Reward Assignment",
        "description": "Assigns a reward to a specified loyalty campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardsAssignmentsCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "campaign": "camp_OTuGGP90PivbvROsRvfM65El",
                    "parameters": {
                      "loyalty": {
                        "points": 39
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a reward assignment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_cqD2XE5x8LcD2c1FLlvqikti",
                      "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                      "related_object_id": "camp_OTuGGP90PivbvROsRvfM65El",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 39
                        }
                      },
                      "created_at": "2022-08-24T13:44:42.610Z",
                      "updated_at": null,
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/rewards/{rewardId}/assignments/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardId"
          },
          "name": "rewardId",
          "in": "path",
          "required": true,
          "description": "A unique reward ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "A unique reward assignment ID."
        }
      ],
      "put": {
        "operationId": "update-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Update Reward Assignment",
        "description": "Update the number of points needed to successfully redeem the reward.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Define the number of points required to exchange for the reward.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardsAssignmentsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "loyalty": {
                        "points": 35
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated reward assignment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_pJYQBXSitK2OVPK3XMXZK76X",
                      "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                      "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 35
                        }
                      },
                      "created_at": "2022-08-24T11:40:22.418Z",
                      "updated_at": "2022-08-24T13:02:32.262Z",
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Delete Reward Assignment",
        "description": "This method deletes a reward assignment for a particular reward.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      },
      "get": {
        "operationId": "get-reward-assignment",
        "tags": [
          "REWARDS API"
        ],
        "summary": "Get Reward Assignment",
        "description": "Retrieve a reward assignment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a reward assignment object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardsAssignmentsGetResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/publications/create": {
      "get": {
        "operationId": "create-publication-1",
        "tags": [
          "PUBLICATIONS API"
        ],
        "summary": "Create Publication",
        "description": "This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.\\n\\nA voucher is suitable for publication when it's active and hasn't been published yet.\\n> ❗️ Limited access\\n>\\n> Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &rarr; **Project Settings** &rarr; **General** &rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.  \\n\\n<!-- theme: warning -->\\n> 🚧 Clearly define the source of the voucher\\n>\\n> You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.  \\n<!-- theme: warning -->\\n> 🚧 Publish multiple vouchers\\n> This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](ref:create-publication).  \\n\\n<!-- theme: info -->\\n\\n> 📘 Auto-update campaign\\n>\\n> In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.  \\n\\n## Example Request \\n\`\`\`markdown Publication Query \\n/publications/create?campaign[name]=BlackFriday&customer[source_id]=Customer_Source_ID \\n\`\`\`  \\n\\n<!-- theme: danger -->\\n> ❗️ Required  \\n>\\n> Query param \`voucher\` OR \`campaign\` MUST be filled out. If you provide both, \`campaign\` param will be skipped.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "join_once",
            "description": "Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCode"
            },
            "in": "query",
            "name": "voucher",
            "description": "Code of voucher being published."
          },
          {
            "name": "campaign",
            "in": "query",
            "description": "Create publication with campaign.",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CreatePublicationCampaign"
            }
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "source_id",
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service.\\nIf \`source_id\` is provided only 1 voucher can be published per request."
          },
          {
            "name": "customer",
            "in": "query",
            "required": true,
            "description": "Contains information about the customer to whom the publication was directed.",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ParameterObject"
            }
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a publication object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "pub_ocaXCa023ayJ3WL1ARxUeKgIvg3JcEGh",
                      "object": "publication",
                      "created_at": "2022-09-30T16:30:32.924Z",
                      "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                      "tracking_id": "pub_source_customer_5",
                      "metadata": {
                        "year": 2022
                      },
                      "channel": "myown",
                      "source_id": "publication_source_ID_10",
                      "result": "SUCCESS",
                      "customer": {
                        "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "name": "Bob Jones",
                        "email": "bob.smith@email.com",
                        "source_id": "pub_source_customer_5",
                        "metadata": {
                          "lang": "en",
                          "test": true
                        },
                        "object": "customer"
                      },
                      "voucher": {
                        "id": "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf",
                        "code": "cEsMn0uA",
                        "campaign": "Test - Discount Effect - Amount - Items",
                        "campaign_id": "camp_dphuwqH7BOVkgh4JmpDtS32l",
                        "category": null,
                        "category_id": null,
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 300,
                          "effect": "APPLY_TO_ITEMS"
                        },
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ+6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ%2B6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn+wFkfzcIZGBtUlxrI2KsXciCqF+c93AKzsymq5Yw8eEAFF/FK5f94z4/sgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn%2BwFkfzcIZGBtUlxrI2KsXciCqF%2Bc93AKzsymq5Yw8eEAFF%2FFK5f94z4%2FsgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-30T16:30:32.956Z",
                        "updated_at": null,
                        "holder_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "redemption": {
                          "quantity": 1,
                          "redeemed_quantity": 0,
                          "object": "list",
                          "url": "/v1/vouchers/cEsMn0uA/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/cEsMn0uA/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      },
                      "vouchers_id": [
                        "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/publications": {
      "get": {
        "operationId": "list-publications",
        "tags": [
          "PUBLICATIONS API"
        ],
        "summary": "List Publications",
        "description": "Retrieve a list of publications. To return a **particular** publication, you can use the \`source_id\` query parameter and provide the \`source_id\` of the publication you are looking for specifically.\\n\\n## Pagination\\n\\n<!-- theme: warning -->\\n> 🚧 Important!\\n>\\n> If you want to scroll through a huge set of records, it is recommended to use the <!-- [Exports API](OpenAPI.json/components/schemas/16_obj_export_object) -->[Exports API](ref:create-export). This API will return an error \`page_over_limit\` if you reach a page above 1000.\\n\\n## Filter Query\\n\\nThe \`filters\` query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:\\n\\n<!--\\ntitle: \\"Filter template\\"\\n-->\\n\`\`\`url\\nfilters[<field_name>][conditions][<operator>][<index>]=<value>\\n\`\`\`\\n\\n### Operators:\\n\\n<!--\\ntitle: \\"Operators\\"\\n-->\\n\`\`\`\\n    \\"$in\\"\\n    \\"$not_in\\"\\n    \\"$is\\"\\n    \\"$is_not\\"\\n    \\"$has_value\\"\\n    \\"$is_unknown\\"\\n    \\"$contains\\"\\n    \\"$starts_with\\"\\n    \\"$ends_with\\"\\n    \\"$more_than\\"\\n    \\"$less_than\\"\\n    \\"$more_than_equal\\"\\n    \\"$less_than_equal\\"\\n\`\`\`\\n\\n### Examples\\n\\n<!--\\ntitle: \\"Example 1 - List publications of a given customer\\"\\n-->\\n\`\`\`url\\nGET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL\\n\`\`\`\\n<!--\\ntitle: \\"Example 2 - List publications of 2 customers\\"\\n-->\\n\`\`\`url\\nGET /v1/publications?filters[customer_id][conditions][$in][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$in][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc\\n\`\`\`\\n<!--\\ntitle: \\"Example 3 - List publications of 2 customers using junction operator\\"\\n-->\\n\`\`\`url\\nGET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$is][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc&filters[junction]=OR\\n\`\`\`",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListPublications"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "campaign",
            "description": "Filters by a given campaign name."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCustomerId"
            },
            "in": "query",
            "name": "customer",
            "description": "Filters by a unique customer ID."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCode"
            },
            "in": "query",
            "name": "voucher",
            "description": "Filters by a given voucher code."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterResultListPublications"
            },
            "in": "query",
            "name": "result",
            "description": "Filters by a publication result."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterVoucherTypeListPublications"
            },
            "in": "query",
            "name": "voucher_type",
            "description": "Filters by a voucher type."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "is_referral_code",
            "description": "This filter works only for the \`true\` option. If set to \`true\`, the query returns only publications of codes from referral campaigns. "
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "filters",
            "description": "Allows for combining the filters mentioned in the endpoint description."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "source_id",
            "description": "Using this endpoint with a particular publication \`source_id\`, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of publications you’ve previously created with <!-- [create publication](OpenAPI.json/paths/~1publications/post) -->[create publication](ref:create-publication) or implicitly by the distribution manager. The publications are returned in sorted order, with the most recent ones appearing first.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "publications",
                      "publications": [
                        {
                          "id": "pub_QzQT50e5i2y3bRoEVvhFgrKbZ7t6BRwu",
                          "object": "publication",
                          "created_at": "2022-09-28T13:31:23.522Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "cindy.jones@email.com",
                          "metadata": {
                            "distribution_id": "distr_WXm0CBttar2ug2hBx3EdPtS8Ei",
                            "source_type": "distribution",
                            "source_id": "distr_WXm0CBttar2ug2hBx3EdPtS8Ei"
                          },
                          "channel": "Automation",
                          "source_id": null,
                          "result": "SUCCESS",
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Cindy Jones",
                            "email": "cindy.jones@email.com",
                            "source_id": "cindy.jones@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "voucher": {
                            "code": "FNV5IrtY",
                            "object": "voucher",
                            "campaign": "Loyalty Campaign",
                            "loyalty_card": {
                              "points": 0,
                              "balance": 0
                            },
                            "is_referral_code": false
                          },
                          "vouchers_id": [
                            "v_i3HOzVClfJUDia0qCu7TSuGfDj7c0dgD"
                          ]
                        },
                        {
                          "id": "pub_8KOKHObAjuemuI0b6225emIhmWDL1ZoX",
                          "object": "publication",
                          "created_at": "2022-09-28T13:31:02.766Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "sandy.jones@email.com",
                          "metadata": {},
                          "channel": "voucherify-website",
                          "source_id": null,
                          "result": "SUCCESS",
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Sandy Jones",
                            "email": "sandy.jones@email.com",
                            "source_id": "sandy.jones@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "voucher": {
                            "code": "Voucher-1",
                            "object": "voucher",
                            "campaign": null,
                            "discount": {
                              "type": "AMOUNT",
                              "amount_off": 200,
                              "amount_off_formula": "IF(VOUCHER_PUBLISH_COUNT = 1;25;5)",
                              "effect": "APPLY_TO_ORDER"
                            },
                            "is_referral_code": false
                          },
                          "vouchers_id": [
                            "v_1iEL92K634EIOqeYJw6AHrnjEhGPEdpu"
                          ]
                        },
                        {
                          "id": "pub_DcQPfyVYzomtkQGXFW7dcdyNoJ6vQ4NV",
                          "object": "publication",
                          "created_at": "2022-09-13T06:15:08.249Z",
                          "customer_id": "cust_ur1hIPGflbaAe14mLlLdon3G",
                          "tracking_id": "1",
                          "metadata": {},
                          "channel": "voucherify-website",
                          "source_id": null,
                          "result": "SUCCESS",
                          "customer": {
                            "id": "cust_ur1hIPGflbaAe14mLlLdon3G",
                            "name": "Bob Jones",
                            "email": "bob.jones@email.com",
                            "source_id": "1",
                            "metadata": {
                              "accepts_marketing": false
                            },
                            "object": "customer"
                          },
                          "voucher": {
                            "code": "GIFT-WOZaK5YF1Fs87tAX",
                            "object": "voucher",
                            "campaign": "Gift Cards",
                            "gift": {
                              "amount": 0,
                              "balance": 0
                            },
                            "is_referral_code": false
                          },
                          "vouchers_id": [
                            "v_yzOeb7vw63vbPfA30215dFm7aRXa8Xoc"
                          ]
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-publication",
        "tags": [
          "PUBLICATIONS API"
        ],
        "summary": "Create Publication",
        "description": "This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.\\n\\nA voucher is suitable for publication when it's active and hasn't been published yet.  \\n\\n<!-- theme: warning -->\\n> 🚧 Clearly define the source of the voucher\\n>\\n> You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.  \\n<!-- theme: warning -->\\n> 🚧 Publish multiple vouchers\\n> In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.  \\n<!-- theme: info -->\\n\\n> 📘 Auto-update campaign\\n>\\n> In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "join_once",
            "description": "Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the publication parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicationsCreateRequestBody"
              },
              "examples": {
                "Example - Specific Voucher": {
                  "value": {
                    "campaign": {
                      "name": "campaign-name"
                    },
                    "customer": {
                      "source_id": "source-id",
                      "Name": "Customer Name",
                      "email": "customer email"
                    },
                    "voucher": "voucher-code",
                    "metadata": {
                      "key": "value"
                    }
                  }
                },
                "Example - Random Voucher": {
                  "value": {
                    "campaign": {
                      "name": "campaign-name",
                      "count": 1
                    },
                    "customer": {
                      "source_id": "source-id",
                      "Name": "Customer Name",
                      "email": "customer email"
                    },
                    "voucher": "voucher-code",
                    "metadata": {
                      "key": "value"
                    }
                  }
                },
                "Example 3": {
                  "value": {
                    "source_id": "publication_source_ID_10",
                    "campaign": "Test - Discount Effect - Amount - Items",
                    "channel": "myown",
                    "customer": {
                      "source_id": "pub_source_customer_5",
                      "name": "Bob Jones",
                      "description": "A frequent customer",
                      "email": "bob.smith@email.com",
                      "phone": "+1 933 222 3333",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 5",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthday": "1901-12-01"
                    },
                    "metadata": {
                      "year": 2022
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a publication object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "pub_ocaXCa023ayJ3WL1ARxUeKgIvg3JcEGh",
                      "object": "publication",
                      "created_at": "2022-09-30T16:30:32.924Z",
                      "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                      "tracking_id": "pub_source_customer_5",
                      "metadata": {
                        "year": 2022
                      },
                      "channel": "myown",
                      "source_id": "publication_source_ID_10",
                      "result": "SUCCESS",
                      "customer": {
                        "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "name": "Bob Jones",
                        "email": "bob.smith@email.com",
                        "source_id": "pub_source_customer_5",
                        "metadata": {
                          "lang": "en",
                          "test": true
                        },
                        "object": "customer"
                      },
                      "voucher": {
                        "id": "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf",
                        "code": "cEsMn0uA",
                        "campaign": "Test - Discount Effect - Amount - Items",
                        "campaign_id": "camp_dphuwqH7BOVkgh4JmpDtS32l",
                        "category": null,
                        "category_id": null,
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 300,
                          "effect": "APPLY_TO_ITEMS"
                        },
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ+6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX188XVmOotyCyR2j3G8sJR8HzS3DQ%2B6J1OElPWSmjlEnthuJc7rkc7WIVxjT4pTl1JVVkHEuGXNXdzRik11H8S18HQeQFJFiuwLZ2mzEC2zZitEinyUxtZwhnEHoi0eGAgYCG7iVMNuOQA%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn+wFkfzcIZGBtUlxrI2KsXciCqF+c93AKzsymq5Yw8eEAFF/FK5f94z4/sgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA==",
                            "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18wDd9CcLM0Ef7aBfUSXZUoCQpuNpk4CHGOipbn%2BwFkfzcIZGBtUlxrI2KsXciCqF%2Bc93AKzsymq5Yw8eEAFF%2FFK5f94z4%2FsgzaLDvyBmPCXHuS11Ew9S4ZEMjdTkUJftER2IlxWaCARA%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-30T16:30:32.956Z",
                        "updated_at": null,
                        "holder_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                        "redemption": {
                          "quantity": 1,
                          "redeemed_quantity": 0,
                          "object": "list",
                          "url": "/v1/vouchers/cEsMn0uA/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/cEsMn0uA/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      },
                      "vouchers_id": [
                        "v_6Hy5FdNlu3dP65fJu5BgXma31Sl3rgkf"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/validate": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCode"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A code that identifies the voucher."
        }
      ]
    },
    "/v1/promotions/tiers/{tierId}/validation": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "name": "tierId",
          "in": "path",
          "required": true,
          "description": "Unique promotion tier ID."
        }
      ]
    },
    "/v1/redemptions": {
      "get": {
        "operationId": "list-redemptions",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "List Redemptions",
        "description": "Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers. \\n\\n## Filtering results\\nThe result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date:\\n\`https://api.voucherify.io/v1/redemptions?limit=3&[created_at][before]=2017-09-08T13:52:18.227Z\`. A filter based on the object \`created_at\` field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: \`[created_at][after]\`, \`[created_at][before]\`. A date value must be presented in ISO 8601 format (\`2016-11-16T14:14:31Z\` or \`2016-11-16\`). An example: \`[created_at][before]=2017-09-08T13:52:18.227Z\`.\\n\\n## Failed Redemptions\\n\\nA redemption may fail for various reasons. You can figure out an exact reason from the \`failure_code\`:\\n- \`resource_not_found\` - voucher with given code does not exist\\n- \`voucher_not_active\` - voucher is not active yet (before start date)\\n- \`voucher_expired\` - voucher has already expired (after expiration date)\\n- \`voucher_disabled\` -  voucher has been disabled (\`active: false\`)\\n- \`quantity_exceeded\` - voucher's redemptions limit has been exceeded\\n- \`gift_amount_exceeded\` - gift amount has been exceeded\\n- \`customer_rules_violated\` - customer did not match the segment\\n- \`order_rules_violated\` - order did not match validation rules\\n- \`invalid_order\` - order was specified incorrectly\\n- \`invalid_amount\` - order amount was specified incorrectly\\n- \`missing_amount\` - order amount was not specified\\n- \`missing_order_items\` - order items were not specified\\n- \`missing_customer\` - customer was not specified",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "result",
            "description": "A filter on the list based on the redemption result. Available options are: \`SUCCESS\`, \`FAILURE\`. You can provide multiple values by repeating the param."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "campaign",
            "description": "A filter by the campaign **name** that the redemption resources originate from."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCustomerId"
            },
            "in": "query",
            "name": "customer",
            "description": "Return redemptions performed by the customer with given \`id\`."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListRedemptions"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order."
          },
          {
            "$ref": "#/components/parameters/created_at"
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterFiltersListRedemptions"
            },
            "description": "Filters for listing responses.",
            "style": "deepObject",
            "explode": true
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of redemption objects. Each entry in the array is a separate redemption object. If no more redemptions are available, the resulting array will be empty. If you provide a non-existent customer ID, this call returns an empty object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "redemptions",
                      "redemptions": [
                        {
                          "id": "r_0c0469eaf705889d99",
                          "object": "redemption",
                          "date": "2022-11-18T12:30:32.622Z",
                          "customer_id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                          "tracking_id": "track_5DQxXbK0C0pvAaHk7mnulhyMBo7VratI",
                          "metadata": {
                            "store_names": "Store 2 - Florida - Miami"
                          },
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_ndw5rQJt12zvZ4upF72a3ljh",
                            "source_id": null,
                            "created_at": "2022-11-18T12:30:31.338Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 9680000,
                            "items_discount_amount": 9450000,
                            "total_discount_amount": 9450000,
                            "total_amount": 230000,
                            "items_applied_discount_amount": 9450000,
                            "total_applied_discount_amount": 9450000,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae2dc5a090fd0184",
                                "sku_id": "sku_0bae3b28f610fd0da1",
                                "quantity": 45,
                                "discount_quantity": 45,
                                "initial_quantity": 0,
                                "amount": 9450000,
                                "discount_amount": 9450000,
                                "initial_amount": 0,
                                "applied_discount_amount": 9450000,
                                "price": 210000,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bae2dc5a090fd0184",
                                  "source_id": "first_product",
                                  "name": "Samsung Phone 1",
                                  "price": 220000
                                },
                                "sku": {
                                  "id": "sku_0bae3b28f610fd0da1",
                                  "source_id": "first_product_sku_1",
                                  "sku": "Samsung phone 256GB",
                                  "price": 210000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                              "object": "customer"
                            },
                            "customer_id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0c0469eaf705889d99": {
                                "date": "2022-11-18T12:30:31.388Z",
                                "related_object_type": "promotion_tier",
                                "related_object_id": "promo_ZWkx6R0I1Ts3N9HL4kfTdxOm",
                                "related_object_parent_id": "camp_40LC42P5NFbkkD4RWoJ4btks"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                            "name": "Bob Jones",
                            "email": "bob.smith@email.com",
                            "source_id": "pub_source_customer_5_a",
                            "metadata": {
                              "lang": "en",
                              "test": true
                            },
                            "object": "customer"
                          },
                          "related_object_type": "promotion_tier",
                          "related_object_id": "promo_ZWkx6R0I1Ts3N9HL4kfTdxOm",
                          "voucher": null,
                          "promotion_tier": {
                            "id": "promo_ZWkx6R0I1Ts3N9HL4kfTdxOm",
                            "campaign": {
                              "id": "camp_40LC42P5NFbkkD4RWoJ4btks"
                            }
                          }
                        },
                        {
                          "id": "r_0bf9cf0a8b12dc5ba6",
                          "object": "redemption",
                          "date": "2022-11-10T06:49:03.835Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "amount": 200,
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_jAifScsbOqxgb12hLu7hXrLU",
                            "source_id": null,
                            "created_at": "2022-11-10T06:49:02.703Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 4500,
                            "discount_amount": 4000,
                            "total_discount_amount": 4000,
                            "total_amount": 500,
                            "applied_discount_amount": 4000,
                            "total_applied_discount_amount": 4000,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0b72b0bd64d198e3ae",
                                "quantity": 3,
                                "amount": 4500,
                                "price": 1500,
                                "subtotal_amount": 4500,
                                "product": {
                                  "id": "prod_0b72b0bd64d198e3ae",
                                  "source_id": "vase_1",
                                  "name": "Vase - Boho Vintage",
                                  "price": 1500
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "object": "customer"
                            },
                            "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bf9cf0a8b12dc5ba6": {
                                "date": "2022-11-10T06:49:02.764Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                                "related_object_parent_id": "camp_fkZ28pe7DUAEmmabofkxHI8N"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bobby McDonald",
                            "email": "bobby.mcdonald@email.com",
                            "source_id": "bobby.mcdonald@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook",
                              "customer_life_time_value": 100
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                          "voucher": {
                            "id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                            "code": "LT1-wMPnRhxb",
                            "campaign": "Loyalty Campaign - Tiers - 1",
                            "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N"
                          },
                          "reward": {
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "name": "Bobby McDonald",
                              "email": "bobby.mcdonald@email.com",
                              "source_id": "bobby.mcdonald@email.com",
                              "metadata": {
                                "acquisition_channel": "Facebook",
                                "customer_life_time_value": 100
                              },
                              "object": "customer"
                            },
                            "assignment_id": "rewa_nMXB59qGTNYawMT8eP8M4oUp",
                            "id": "rew_MVXA2kV7lZ1zC057WUaTrvNz",
                            "object": "reward",
                            "name": "100 Points = $20",
                            "created_at": "2022-09-09T06:41:54.496Z",
                            "updated_at": null,
                            "parameters": {
                              "coin": {
                                "exchange_ratio": 20,
                                "points_ratio": 100
                              }
                            },
                            "type": "COIN"
                          },
                          "loyalty_card": {
                            "points": 200
                          }
                        },
                        {
                          "id": "rf_0bf9caf744d2dc593a",
                          "object": "redemption",
                          "date": "2022-11-10T06:31:15.477Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "result": "FAILURE",
                          "failure_code": "loyalty_card_points_exceeded",
                          "failure_message": "loyalty card points exceeded",
                          "order": null,
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bobby McDonald",
                            "email": "bobby.mcdonald@email.com",
                            "source_id": "bobby.mcdonald@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook",
                              "customer_life_time_value": 100
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                          "voucher": {
                            "id": "v_Xak3ViMbxCH8Lb4ZG0lWwC0goMRBXWB4",
                            "code": "LT1-wMPnRhxb",
                            "campaign": "Loyalty Campaign - Tiers - 1",
                            "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N"
                          }
                        },
                        {
                          "id": "rf_0bf8c023eb4d4aa4ad",
                          "object": "redemption",
                          "date": "2022-11-09T11:05:28.074Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "result": "FAILURE",
                          "failure_code": "customer_rules_violated",
                          "failure_message": "customer does not match validation rules",
                          "order": null,
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bob Smith",
                            "email": "bob.smith@email.com",
                            "source_id": "bob.smith@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                          "voucher": {
                            "id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                            "code": "3rqWOTAh",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0ba9fa02fcd28ed8f1",
                          "object": "redemption",
                          "date": "2022-09-09T06:38:20.085Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "amount": 300,
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_G9LBb5SOPa36pHdwxUvzkw4P",
                            "source_id": null,
                            "created_at": "2022-09-09T06:38:17.984Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 4600,
                            "items_discount_amount": 300,
                            "total_discount_amount": 300,
                            "total_amount": 4300,
                            "items_applied_discount_amount": 300,
                            "total_applied_discount_amount": 300,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0b7d7dfb05cbe5c616",
                                "sku_id": "sku_0b7d7dfb090be5c619",
                                "quantity": 1,
                                "amount": 1600,
                                "price": 1600,
                                "subtotal_amount": 1600,
                                "product": {
                                  "id": "prod_0b7d7dfb05cbe5c616",
                                  "source_id": "Books",
                                  "name": "Comic Books1",
                                  "price": 1600
                                },
                                "sku": {
                                  "id": "sku_0b7d7dfb090be5c619",
                                  "source_id": "ComicBook_1",
                                  "sku": "Comics1",
                                  "price": 1600
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0a65b3ff8592d7a5b5",
                                "quantity": 1,
                                "amount": 3000,
                                "discount_amount": 300,
                                "applied_discount_amount": 300,
                                "price": 3000,
                                "subtotal_amount": 2700,
                                "product": {
                                  "id": "prod_0a65b3ff8592d7a5b5",
                                  "name": "Koffee Cup",
                                  "price": 3000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "object": "customer"
                            },
                            "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0ba9fa02fcd28ed8f1": {
                                "date": "2022-09-09T06:38:18.099Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                                "related_object_parent_id": "camp_hC2GdqYtOmTT45zfhib62cK1"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "Bob Smith",
                            "email": "bob.smith@email.com",
                            "source_id": "bob.smith@email.com",
                            "metadata": {},
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                          "voucher": {
                            "id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                            "code": "vTcguVLE",
                            "campaign": "SL-Gift",
                            "campaign_id": "camp_hC2GdqYtOmTT45zfhib62cK1"
                          },
                          "gift": {
                            "amount": 300
                          }
                        },
                        {
                          "id": "rf_0bf8bfe0808d4aa473",
                          "object": "redemption",
                          "date": "2022-11-09T11:04:19.062Z",
                          "customer_id": null,
                          "tracking_id": null,
                          "metadata": {},
                          "result": "FAILURE",
                          "failure_code": "missing_customer",
                          "failure_message": "Missing customer",
                          "order": null,
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": null,
                          "related_object_type": "voucher",
                          "related_object_id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                          "voucher": {
                            "id": "v_FGQjOjqasEbbdpnySdCpUoalJio3OHWK",
                            "code": "3rqWOTAh",
                            "campaign_id": null
                          }
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "redeem-stacked-discounts",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Redeem Stackable Discounts",
        "description": "## How API returns calculated discounts and order amounts in the response\\n\\nIn the table below, you can see the logic the API follows to calculate discounts and amounts:\\n\\n| **Field** | **Calculation** | **Description** |\\n|:---|:---|:---|\\n| amount | N/A | This field shows the order amount before applying any discount |\\n| total_amount | \`total_amount\` = \`amount\` - \`total_discount_amount\` | This field shows the order amount after applying all the discounts |\\n| discount_amount | \`discount_amount\` = \`previous_discount_amount\` + \`applied_discount_amount\` | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. |\\n| items_discount_amount | sum(items, i => i.discount_amount) | This field sums up all product-specific discounts |\\n| total_discount_amount | \`total_discount_amount\` = \`discount_amount\` + \`items_discount_amount\` | This field sums up all order-level and all product-specific discounts |\\n| applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request |\\n| items_applied_discount_amount | sum(items, i => i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request |\\n| total_applied_discount_amount | \`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\` | This field sums up all order-level and all product-specific discounts applied in a particular request |\\n\\n<!-- theme: info -->\\n> 📘 Rollbacks\\n>\\n> You can't roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your <!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) -->[rollback request](ref:rollback-stacked-redemptions).    \\n\\n<!-- theme: info -->\\n> 📘 Also available on client-side\\n>\\n> This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated [endpoint](ref:redeem-stacked-discounts-client-side) to learn more.\\n> - Use \`X-Client-Application-Id\` as the application ID header.\\n> - Use \`X-Client-Token\` as the appliction secret key header.\\n> - Use client-side base URL.\\n> - Use an \`origin\` header for your custom domain.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedemptionsRedeemRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK",
                      "key": "session_key"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid redemption. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsRedeemResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/redemptions/{redemptionId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "name": "redemptionId",
          "in": "path",
          "required": true,
          "description": "ID of previously created redemption."
        }
      ],
      "get": {
        "operationId": "get-redemption",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "Get Redemption",
        "description": "Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a redemption object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsGetResponseBody"
                },
                "examples": {
                  "Discount Voucher": {
                    "value": {
                      "id": "r_0bade27c428db5873e",
                      "object": "redemption",
                      "date": "2022-09-12T07:29:28.211Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_ebmAU9uv3dTE2Khqyh7i5ka7",
                        "source_id": null,
                        "created_at": "2022-09-12T07:29:26.245Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 22500,
                        "discount_amount": 300,
                        "total_discount_amount": 300,
                        "total_amount": 22200,
                        "applied_discount_amount": 300,
                        "total_applied_discount_amount": 300,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 1,
                            "amount": 22500,
                            "price": 22500,
                            "subtotal_amount": 22500,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0bade27c428db5873e": {
                            "date": "2022-09-12T07:29:26.282Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_c1yOEjZXOyVIe89VAYiRvL3QimZjXo8h"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_c1yOEjZXOyVIe89VAYiRvL3QimZjXo8h",
                      "voucher": {
                        "id": "v_c1yOEjZXOyVIe89VAYiRvL3QimZjXo8h",
                        "code": "FB-metadata-string",
                        "campaign": null,
                        "campaign_id": null,
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      }
                    }
                  },
                  "Loyalty Card - Material Reward Product Type": {
                    "value": {
                      "id": "r_0c5bf0e6d601c7d7de",
                      "object": "redemption",
                      "date": "2023-01-25T12:08:09.503Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 4,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dSOsWkNCRT24lHPkMu8o5QbX",
                        "source_id": null,
                        "created_at": "2023-01-25T12:08:07.750Z",
                        "updated_at": null,
                        "status": "PAID",
                        "items": [],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf0e6d601c7d7de": {
                            "date": "2023-01-25T12:08:07.768Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_LRx3Y1iHFWTt217NVrknkpi5",
                        "product": {
                          "id": "prod_0b2c2ddf35150b83bb",
                          "source_id": "97",
                          "name": "[Sample] Tiered Wire Basket",
                          "price": 11995,
                          "attributes": [],
                          "metadata": {
                            "source": "bigcommerce",
                            "bigcommerce_product_categories": [
                              21,
                              23
                            ]
                          },
                          "image_url": null,
                          "created_at": "2022-06-03T13:36:16.084Z",
                          "updated_at": "2022-06-07T09:10:44.644Z",
                          "object": "product"
                        },
                        "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4",
                        "object": "reward",
                        "name": "Present",
                        "created_at": "2022-06-13T06:59:01.694Z",
                        "updated_at": null,
                        "parameters": {
                          "product": {
                            "id": "prod_0b2c2ddf35150b83bb",
                            "sku_id": null
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 4
                      }
                    }
                  },
                  "Loyalty Card - Material Reward SKU Type": {
                    "value": {
                      "id": "r_0c5bf18dad48a34392",
                      "object": "redemption",
                      "date": "2023-01-25T12:11:00.543Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 6,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dwb6bpqjIlMuXFS71NuHed9S",
                        "source_id": null,
                        "created_at": "2023-01-25T12:10:58.598Z",
                        "updated_at": null,
                        "status": "PAID",
                        "items": [],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf18dad48a34392": {
                            "date": "2023-01-25T12:10:58.613Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_gfpRNkOT0pwzF7P5tXWXOs4H",
                        "product": {
                          "id": "prod_5h0wc453_2",
                          "source_id": "jonah-nystrom-bourbon",
                          "name": "Johan & Nyström - Bourbon",
                          "price": null,
                          "attributes": [
                            "categories",
                            "description",
                            "weight"
                          ],
                          "metadata": {
                            "company": "Johan & Nyström",
                            "showcase": true
                          },
                          "image_url": null,
                          "created_at": "2021-12-01T08:00:49.418Z",
                          "updated_at": null,
                          "object": "product"
                        },
                        "sku": {
                          "id": "sku_0a3efc9044dd121803",
                          "source_id": "jonah-nystrom-bourbon-250g",
                          "product_id": "prod_5h0wc453_2",
                          "sku": "250g",
                          "price": 1750,
                          "currency": null,
                          "attributes": {
                            "categories": "Coffee, Whole Bean",
                            "description": "Background for this blend comes from the longing for a real dark roasting of high-quality coffee beans. Although the beans are dark roasted, they keep their clear and intense aroma. This coffee has a smoky flavour with a slight hint of sweetness and loads of fruit notes. Thanks to the experience in the dark roasting of coffee, the beans still retain most of their aromas. Its aftertaste is clear and remains for a long time. This coffee is perfect for a Dripper, French Press, Moka coffee maker and the traditional espresso brewing method.",
                            "weight": 250
                          },
                          "image_url": null,
                          "metadata": {},
                          "created_at": "2021-12-01T08:00:49.427Z",
                          "updated_at": null,
                          "object": "sku"
                        },
                        "id": "rew_SfQCsap5R8UBTVbdMTRx10x8",
                        "object": "reward",
                        "name": "Present - SKU",
                        "created_at": "2023-01-25T12:10:16.060Z",
                        "updated_at": null,
                        "parameters": {
                          "product": {
                            "id": "prod_5h0wc453_2",
                            "sku_id": "sku_0a3efc9044dd121803"
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 6
                      }
                    }
                  },
                  "Loyalty Card - Pay with Points": {
                    "value": {
                      "id": "r_0b5e402ad54a3afe9c",
                      "object": "redemption",
                      "date": "2022-07-12T11:00:26.247Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 5,
                      "redemption": "r_0b5e402ad50a3afe98",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_9akjPYZNskEhKZ4zCZt6TKwq",
                        "source_id": null,
                        "created_at": "2022-07-12T11:00:26.224Z",
                        "amount": 20000,
                        "discount_amount": 5100,
                        "total_discount_amount": 5100,
                        "total_amount": 14900,
                        "applied_discount_amount": 500,
                        "total_applied_discount_amount": 500,
                        "metadata": {},
                        "customer_id": null,
                        "referrer_id": null,
                        "object": "order"
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                      "voucher": {
                        "id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                        "code": "LOYALTY-CARD-zOR2sV9Q",
                        "campaign": "Loyalty Program",
                        "campaign_id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "accepts_marketing": false
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_X3jnD5XFxP6GXCzPZUNknDck",
                        "id": "rew_6rhNwuuWFQJLvTPO34ilg6jq",
                        "object": "reward",
                        "name": "Pay with Points",
                        "created_at": "2022-07-11T08:18:18.205Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 1,
                            "points_ratio": 1
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 5
                      }
                    }
                  },
                  "Loyalty Card - Digital Reward - Discount Voucher": {
                    "value": {
                      "id": "r_0c5bf3323008a35032",
                      "object": "redemption",
                      "date": "2023-01-25T12:18:10.707Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {
                        "redemption_location": {
                          "city": "Warsaw",
                          "state": "Polyork"
                        }
                      },
                      "amount": 2,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dqxr4uzaYWkTZnrSEMoQtCF8",
                        "source_id": null,
                        "created_at": "2023-01-25T12:18:09.203Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 2100,
                        "total_amount": 2100,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 3,
                            "amount": 2100,
                            "price": 700,
                            "subtotal_amount": 2100,
                            "product": {
                              "id": "prod_0bc3bd8a4e072c5275",
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf3323008a35032": {
                            "date": "2023-01-25T12:18:09.216Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_0ZwLAHgeU9IrI2V1ofYRmW7g",
                        "voucher": {
                          "id": "v_4GaEX7clyqMaveT7vHhoyRpsIgxv95Q6",
                          "code": "HAPPY-ORDER5My",
                          "campaign": "$20 off the entire order",
                          "campaign_id": "camp_5h0wc453_4",
                          "category": null,
                          "category_id": "cat_0b688929a2476386a6",
                          "categories": [],
                          "type": "DISCOUNT_VOUCHER",
                          "discount": {
                            "type": "AMOUNT",
                            "amount_off": 2000,
                            "effect": "APPLY_TO_ORDER"
                          },
                          "gift": null,
                          "loyalty_card": null,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "21ceb848-4869-4dac-ba41-f854bda3a101",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/21ceb848-4869-4dac-ba41-f854bda3a101"
                            },
                            "barcode": {
                              "id": "1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2023-01-25T12:18:09.256Z",
                          "updated_at": null,
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 0,
                            "object": "list",
                            "url": "/v1/vouchers/HAPPY-ORDER5My/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/HAPPY-ORDER5My/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_MF4hKh1IKYgJkPjbcFbH94Ho",
                        "object": "reward",
                        "name": "Digital Present",
                        "created_at": "2023-01-25T12:16:44.557Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_5h0wc453_4",
                            "type": "DISCOUNT_COUPONS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 2
                      }
                    }
                  },
                  "Loyalty Card - Digital Reward - Credits on Gift Card": {
                    "value": {
                      "id": "r_0c5c1435d053202118",
                      "object": "redemption",
                      "date": "2023-01-25T14:42:25.206Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_v0r7JfUQgWRpw28UJm9Z5AaH",
                        "source_id": null,
                        "created_at": "2023-01-25T14:42:23.637Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 22500,
                        "total_amount": 22500,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 1,
                            "amount": 22500,
                            "price": 22500,
                            "subtotal_amount": 22500,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5c1435d053202118": {
                            "date": "2023-01-25T14:42:23.681Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_U554pL2BhDIDZOvZ8y9YQ9hA",
                        "voucher": {
                          "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                          "code": "GIFT-CARD-xwc6X7Tk",
                          "campaign": "Gift Cards",
                          "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                          "category": null,
                          "category_id": "cat_0bb81a481615a37b5e",
                          "categories": [],
                          "type": "GIFT_VOUCHER",
                          "discount": null,
                          "gift": {
                            "amount": 55080,
                            "balance": 44780
                          },
                          "loyalty_card": null,
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM/aTyHCYfr7kRWb2vv08WIgY/Tv53SJGW+k2keqfsTq/Ohb5shkCN3FTFsaI8gulTp616sEGn/JJoIInIoNkO9Vd1+AfrKiAjmirCmekE6cz2SVCyNAXs=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM%2FaTyHCYfr7kRWb2vv08WIgY%2FTv53SJGW%2Bk2keqfsTq%2FOhb5shkCN3FTFsaI8gulTp616sEGn%2FJJoIInIoNkO9Vd1%2BAfrKiAjmirCmekE6cz2SVCyNAXs%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX18vWc/qplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO/199U+zicnFNWqg/jF5ZCQW+6jO1q8=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18vWc%2FqplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO%2F199U%2BzicnFNWqg%2FjF5ZCQW%2B6jO1q8%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-08T09:44:33.179Z",
                          "updated_at": "2023-01-11T15:23:02.789Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 7,
                            "redeemed_amount": 10300,
                            "object": "list",
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_6bvM4vnaVdbPVQxYpuN37rhH",
                        "object": "reward",
                        "name": "Present Credits on Gift Card",
                        "created_at": "2023-01-25T14:41:31.858Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                            "balance": 4000,
                            "type": "GIFT_VOUCHERS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Loyalty Card - Digital Reward - Points on Loyalty Card": {
                    "value": {
                      "id": "r_0c5c226f498f1a93f0",
                      "object": "redemption",
                      "date": "2023-01-25T15:44:34.317Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": {},
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_1fv4ITwpUQra6iDTHFPVfnRR",
                        "source_id": null,
                        "created_at": "2023-01-25T15:44:32.494Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 700,
                        "total_amount": 700,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 1,
                            "amount": 700,
                            "price": 700,
                            "subtotal_amount": 700,
                            "product": {
                              "id": "prod_0bc3bd8a4e072c5275",
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5c226f498f1a93f0": {
                            "date": "2023-01-25T15:44:32.550Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_BpytIepuSekuXXwb9qkLJfCU",
                        "voucher": {
                          "id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                          "code": "LOYALTY-CARD-zOR2sV9Q",
                          "campaign": "Loyalty Program",
                          "campaign_id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                          "category": null,
                          "category_id": null,
                          "categories": [],
                          "type": "LOYALTY_CARD",
                          "discount": null,
                          "gift": null,
                          "loyalty_card": {
                            "points": 1000,
                            "balance": 870
                          },
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX1/THRRj1QegAan0r5U+wRoHuFEA6FR7TrvZm8N+8cK7niF/8uAqFdVYTU1JD0/CdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU+YrPDeT2HCB7o0Ts7h1FnbD85+0F7lwrbKmkGW6kub0mjCaRdJYS/axIAq4=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FTHRRj1QegAan0r5U%2BwRoHuFEA6FR7TrvZm8N%2B8cK7niF%2F8uAqFdVYTU1JD0%2FCdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU%2BYrPDeT2HCB7o0Ts7h1FnbD85%2B0F7lwrbKmkGW6kub0mjCaRdJYS%2FaxIAq4%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX1+yREd0zRAfZY9uwtMZsl4eDd8+LeiKGVI5OzOQRpjhtV91IuEe7/SXEW8m4F2Llg2//yieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb+kZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2ByREd0zRAfZY9uwtMZsl4eDd8%2BLeiKGVI5OzOQRpjhtV91IuEe7%2FSXEW8m4F2Llg2%2F%2FyieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb%2BkZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-11T08:19:28.780Z",
                          "updated_at": "2022-10-01T00:02:05.604Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 26,
                            "redeemed_points": 130,
                            "object": "list",
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_7ZM476Q77dH5KvHk4KzoRNvF",
                        "object": "reward",
                        "name": "Present on Loyalty Card",
                        "created_at": "2023-01-25T15:43:40.716Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                            "balance": 20,
                            "type": "LOYALTY_PROGRAM"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Gift Card": {
                    "value": {
                      "id": "r_0b5e7d29ba4fb72ee4",
                      "object": "redemption",
                      "date": "2022-07-12T15:26:52.777Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 5000,
                      "redemption": "r_0b5e7d29ba0fb72ee2",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_5iOTjTG4I3Yo2G2bH1qHk66a",
                        "source_id": null,
                        "created_at": "2022-07-12T15:26:52.773Z",
                        "amount": 30200,
                        "discount_amount": 9530,
                        "total_discount_amount": 9530,
                        "total_amount": 20670,
                        "applied_discount_amount": 5000,
                        "total_applied_discount_amount": 5000,
                        "metadata": {},
                        "customer_id": null,
                        "referrer_id": null,
                        "object": "order"
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                      "voucher": {
                        "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                        "code": "GIFT-CARD-xwc6X7Tk",
                        "campaign": "Gift Cards",
                        "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "gift": {
                        "amount": 5000
                      }
                    }
                  },
                  "Promotion Tier": {
                    "value": {
                      "id": "r_0c5d6689b35320059a",
                      "object": "redemption",
                      "date": "2023-01-26T15:20:35.916Z",
                      "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw==",
                      "metadata": null,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_4kVJ1PiXP3TNfik3pM79KZsn",
                        "source_id": null,
                        "created_at": "2023-01-26T15:20:34.216Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 200000,
                        "discount_amount": 80000,
                        "total_discount_amount": 80000,
                        "total_amount": 120000,
                        "applied_discount_amount": 80000,
                        "total_applied_discount_amount": 80000,
                        "items": [
                          {
                            "object": "order_item",
                            "source_id": "apple534",
                            "related_object": "product",
                            "product_id": "prod_anJ03RZZq74z4v",
                            "quantity": 2,
                            "amount": 100000,
                            "price": 50000,
                            "subtotal_amount": 100000,
                            "product": {
                              "name": "Apple iPhone 8",
                              "metadata": {
                                "shop": "citycenter",
                                "category": "electronics"
                              }
                            },
                            "metadata": {
                              "series": "2022-783CV"
                            }
                          },
                          {
                            "object": "order_item",
                            "source_id": "apple534-ihd5",
                            "related_object": "sku",
                            "sku_id": "sku_0KtP4rvwEECQ2U",
                            "quantity": 1,
                            "amount": 100000,
                            "price": 100000,
                            "subtotal_amount": 100000,
                            "sku": {
                              "sku": "Apple iPad 10 Silver 64GB",
                              "metadata": {
                                "category": "electronics"
                              }
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                          "object": "customer"
                        },
                        "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5d6689b35320059a": {
                            "date": "2023-01-26T15:20:34.253Z",
                            "related_object_type": "promotion_tier",
                            "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                            "related_object_parent_id": "camp_w7BUstntAm8jbIDjfM49volj"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "name": "Annie Lemon",
                        "email": "annie@lemon.com",
                        "source_id": "annie@lemon.com",
                        "object": "customer"
                      },
                      "related_object_type": "promotion_tier",
                      "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                      "voucher": null,
                      "promotion_tier": {
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                        "action": null,
                        "campaign": {
                          "id": "camp_w7BUstntAm8jbIDjfM49volj",
                          "start_date": null,
                          "expiration_date": null,
                          "object": "campaign"
                        },
                        "campaign_id": null,
                        "summary": {
                          "redemptions": {
                            "total_redeemed": 0
                          },
                          "orders": {
                            "total_amount": 0,
                            "total_discount_amount": 0
                          }
                        },
                        "object": "promotion_tier",
                        "validation_rule_assignments": null
                      }
                    }
                  },
                  "Stacked Redemption": {
                    "value": {
                      "id": "r_0b5e3e2b7f851d0192",
                      "object": "redemption",
                      "date": "2022-07-12T10:51:33.098Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_qjnno0eUQ1fs0RMjejfbZp7q",
                        "source_id": null,
                        "created_at": "2022-07-12T10:51:31.687Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 20000,
                        "discount_amount": 6100,
                        "total_discount_amount": 6100,
                        "total_amount": 13900,
                        "applied_discount_amount": 6100,
                        "total_applied_discount_amount": 6100,
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0b5e3e2b7f851d0192": {
                            "date": "2022-07-12T10:51:31.711Z",
                            "related_object_type": "redemption",
                            "related_object_id": "r_0b5e3e2b7f851d0192",
                            "stacked": [
                              "r_0b5e3e2b7f851d0193",
                              "r_0b5e3e2b7fc51d0194",
                              "r_0b5e3e2b7fc51d0195",
                              "r_0b5e3e2b7fc51d0196",
                              "r_0b5e3e2b7fc51d0197"
                            ]
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "accepts_marketing": false
                        },
                        "object": "customer"
                      },
                      "related_object_type": "redemption",
                      "related_object_id": "r_0b5e3e2b7f851d0192",
                      "voucher": null
                    }
                  },
                  "Failed Voucher": {
                    "value": {
                      "id": "rf_0c5bd3c15701c78243",
                      "object": "redemption",
                      "date": "2023-01-25T10:00:47.812Z",
                      "customer_id": "cust_w1aRTTkpzeTGtOauISc8CKUN",
                      "tracking_id": "track_hr0jh/qNQqZWu7gkCEcVwEg27bNVrn2+",
                      "metadata": {
                        "location_id": [],
                        "redemption_location": {
                          "city": "Albany",
                          "state": "New York"
                        }
                      },
                      "result": "FAILURE",
                      "failure_code": "voucher_disabled",
                      "failure_message": "voucher is disabled",
                      "order": null,
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_w1aRTTkpzeTGtOauISc8CKUN",
                        "name": "Bobby's Friend",
                        "email": null,
                        "source_id": "create_order_referrer_1",
                        "metadata": {},
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_zr4XJD6b6JtldZq9EorHf4jxRbahjkfi",
                      "voucher": {
                        "id": "v_zr4XJD6b6JtldZq9EorHf4jxRbahjkfi",
                        "code": "PROMO-CODE2",
                        "campaign": null,
                        "campaign_id": null,
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      }
                    }
                  },
                  "Failed Promotion Tier": {
                    "value": {
                      "id": "rf_0c5d6e47050156bfc2",
                      "object": "redemption",
                      "date": "2023-01-26T15:54:23.508Z",
                      "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw==",
                      "metadata": null,
                      "result": "FAILURE",
                      "failure_code": "promotion_inactive",
                      "failure_message": "Inactive Promotion",
                      "order": null,
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "name": "Annie Lemon",
                        "email": "annie@lemon.com",
                        "source_id": "annie@lemon.com",
                        "metadata": {
                          "age": 2
                        },
                        "object": "customer"
                      },
                      "related_object_type": "promotion_tier",
                      "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                      "voucher": null,
                      "promotion_tier": {
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                        "action": null,
                        "campaign": {
                          "id": "camp_w7BUstntAm8jbIDjfM49volj",
                          "start_date": null,
                          "expiration_date": null,
                          "object": "campaign"
                        },
                        "campaign_id": null,
                        "summary": {
                          "redemptions": {
                            "total_redeemed": 0
                          },
                          "orders": {
                            "total_amount": 0,
                            "total_discount_amount": 0
                          }
                        },
                        "object": "promotion_tier",
                        "validation_rule_assignments": null
                      }
                    }
                  },
                  "Failed Redemption": {
                    "value": {
                      "id": "rf_0c5bde8dfc0156f0e3",
                      "object": "redemption",
                      "date": "2023-01-25T10:47:58.578Z",
                      "customer_id": null,
                      "tracking_id": null,
                      "metadata": null,
                      "result": "FAILURE",
                      "failure_code": "not_found",
                      "failure_message": "Resource not found",
                      "order": null,
                      "channel": {
                        "channel_id": "abcdefg-efgj-ijkl-mnop-qrstuvxyz",
                        "channel_type": "API"
                      },
                      "customer": null,
                      "related_object_type": "redemption",
                      "related_object_id": "rf_0c5bde8dfc0156f0e3",
                      "voucher": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vouchers/{code}/redemption": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "get": {
        "operationId": "get-voucher-redemptions",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "Get Voucher's Redemptions",
        "description": "Retrieve the number of times a voucher was redeemed and each of the redemption details.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a \`redemption_entries\` property that contains an array of voucher's redemptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersRedemptionGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "quantity": null,
                      "redeemed_quantity": 6,
                      "object": "list",
                      "url": "/v1/vouchers/Test - FB - Vouchers - 9/redemptions?page=1&limit=10",
                      "data_ref": "redemption_entries",
                      "total": 6,
                      "redemption_entries": [
                        {
                          "id": "r_0bc92f81a6801f9bca",
                          "object": "redemption",
                          "date": "2022-10-03T12:24:58.008Z",
                          "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                          "tracking_id": "track_fxEMFisanb6bqeHALcTMxy9fmc+1Azdq951CZwGFCweQF8eGLowFHg==",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_bhp1EH2SDz7UwkkurPFPLPhi",
                            "source_id": null,
                            "created_at": "2022-10-03T12:24:56.179Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 100,
                            "total_discount_amount": 100,
                            "total_amount": 229900,
                            "applied_discount_amount": 100,
                            "total_applied_discount_amount": 100,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                              "object": "customer"
                            },
                            "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc92f81a6801f9bca": {
                                "date": "2022-10-03T12:24:56.219Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "name": null,
                            "email": null,
                            "source_id": "johnnyy@email.com",
                            "metadata": {},
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc92e6a68050e118c",
                          "object": "redemption",
                          "date": "2022-10-03T12:20:11.873Z",
                          "customer_id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                          "tracking_id": "track_5DQxXbK0C0pvAaHk7mnulmKhuFqhawWj",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_rBsuJYqf4eFZgqj6IxeJgEcN",
                            "source_id": null,
                            "created_at": "2022-10-03T12:20:10.222Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 100,
                            "total_discount_amount": 100,
                            "total_amount": 229900,
                            "applied_discount_amount": 100,
                            "total_applied_discount_amount": 100,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                              "object": "customer"
                            },
                            "customer_id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc92e6a68050e118c": {
                                "date": "2022-10-03T12:20:10.272Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_TzWOhveicr7BI1Qg4bCFrrQQ",
                            "name": "Bob Jones",
                            "email": "bob.smith@email.com",
                            "source_id": "pub_source_customer_4",
                            "metadata": {
                              "lang": "en",
                              "test": true
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc92db6e6001f9aa8",
                          "object": "redemption",
                          "date": "2022-10-03T12:17:07.780Z",
                          "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                          "tracking_id": "track_5DQxXbK0C0pvAaHk7mnulmYlx396Pk4X",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_JvZbg1LFcXdQ67no5SENGldH",
                            "source_id": null,
                            "created_at": "2022-10-03T12:17:06.404Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 1200,
                            "total_discount_amount": 1200,
                            "total_amount": 228800,
                            "applied_discount_amount": 1200,
                            "total_applied_discount_amount": 1200,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                              "object": "customer"
                            },
                            "customer_id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc92db6e6001f9aa8": {
                                "date": "2022-10-03T12:17:06.456Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_BB6F97yf0XqCe7hxVUV7M4sS",
                            "name": "Bob Jones",
                            "email": "bob.smith@email.com",
                            "source_id": "pub_source_customer_5",
                            "metadata": {
                              "lang": "en",
                              "test": true
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc2dc6404426c0ab3",
                          "object": "redemption",
                          "date": "2022-09-28T14:30:56.199Z",
                          "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                          "tracking_id": "track_fxEMFisanb6bqeHALcTMxy9fmc+1Azdq951CZwGFCweQF8eGLowFHg==",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_6uuhGraDuXMOpVRTJT251kKW",
                            "source_id": null,
                            "created_at": "2022-09-28T14:30:54.681Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 800,
                            "total_discount_amount": 800,
                            "total_amount": 229200,
                            "applied_discount_amount": 800,
                            "total_applied_discount_amount": 800,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                              "object": "customer"
                            },
                            "customer_id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc2dc6404426c0ab3": {
                                "date": "2022-09-28T14:30:54.737Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
                            "name": null,
                            "email": null,
                            "source_id": "jonny@email.com",
                            "metadata": {},
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc2d6f0ebc95f1783",
                          "object": "redemption",
                          "date": "2022-09-28T14:07:07.516Z",
                          "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                          "tracking_id": "track_ThofCMTQe4EVIo0zvvOlTor1twaQNd7E",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_ZQevc2J2sBegsnp5DwanXHsa",
                            "source_id": null,
                            "created_at": "2022-09-28T14:07:06.073Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 0,
                            "total_discount_amount": 0,
                            "total_amount": 230000,
                            "applied_discount_amount": 0,
                            "total_applied_discount_amount": 0,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                              "object": "customer"
                            },
                            "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc2d6f0ebc95f1783": {
                                "date": "2022-09-28T14:07:06.159Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                            "name": "Bob Smith",
                            "email": "bob.smith.1@email.com",
                            "source_id": "bob.smith.1@email.com",
                            "metadata": {
                              "lang": "en",
                              "test": false
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        },
                        {
                          "id": "r_0bc2d3c4f7495f159a",
                          "object": "redemption",
                          "date": "2022-09-28T13:53:16.057Z",
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "tracking_id": "track_fxEMFisanb4sbl4Z4yCnJyDW013IrRbJmqKByTNHbXE=",
                          "metadata": {},
                          "result": "SUCCESS",
                          "order": {
                            "id": "ord_ff6rwr58kmdyuLsi5orplnVW",
                            "source_id": null,
                            "created_at": "2022-09-28T13:53:14.604Z",
                            "updated_at": null,
                            "status": "PAID",
                            "amount": 230000,
                            "discount_amount": 800,
                            "total_discount_amount": 800,
                            "total_amount": 229200,
                            "applied_discount_amount": 800,
                            "total_applied_discount_amount": 800,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_0bae45ffc7003ffc52",
                                "quantity": 1,
                                "amount": 230000,
                                "price": 230000,
                                "subtotal_amount": 230000,
                                "product": {
                                  "id": "prod_0bae45ffc7003ffc52",
                                  "source_id": "second_product",
                                  "name": "Samsung Phone 2",
                                  "price": 230000
                                }
                              }
                            ],
                            "metadata": {},
                            "customer": {
                              "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                              "object": "customer"
                            },
                            "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "referrer_id": null,
                            "object": "order",
                            "redemptions": {
                              "r_0bc2d3c4f7495f159a": {
                                "date": "2022-09-28T13:53:14.717Z",
                                "related_object_type": "voucher",
                                "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
                              }
                            }
                          },
                          "channel": {
                            "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                            "channel_type": "USER"
                          },
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "name": "John Smith",
                            "email": "john.smith@email.com",
                            "source_id": "john.smith@email.com",
                            "metadata": {
                              "acquisition_channel": "Facebook"
                            },
                            "object": "customer"
                          },
                          "related_object_type": "voucher",
                          "related_object_id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                          "voucher": {
                            "id": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno",
                            "code": "Test - FB - Vouchers - 9",
                            "campaign_id": null
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/redemptions/{redemptionId}/rollback": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRedemptionId"
          },
          "name": "redemptionId",
          "in": "path",
          "required": true,
          "description": "The original redemption ID to be rolled back (undone)."
        }
      ],
      "post": {
        "operationId": "rollback-redemption",
        "tags": [
          "REDEMPTIONS API"
        ],
        "summary": "Rollback Redemption",
        "description": "Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. \\n\\n ## Effect \\nThe operation \\n- creates a rollback entry in voucher's redemption history (\`redemption.redemption_entries\`) and \\n- gives 1 redemption back to the pool (decreases \`redeemed_quantity\` by 1). \\n## Returned funds \\nIn case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "reason",
            "description": "Reason for the rollback."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "tracking_id",
            "description": "Customer's \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedemptionsRollbackCreateRequestBody"
              },
              "examples": {
                "Promotion": {
                  "value": {
                    "customer": {
                      "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "name": "Annie Lemons",
                      "email": "annie@lemon.com",
                      "phone": "+1 933 222 3334",
                      "birthday": "1900-12-02",
                      "birthdate": "1900-12-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 5",
                        "country": "United States",
                        "postal_code": "100012"
                      },
                      "metadata": {
                        "age": 23
                      }
                    },
                    "order": {
                      "source_id": "test_rollback_8"
                    },
                    "metadata": {
                      "location_id": [
                        "L2"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a redemption rollback object indicating the result of the rollback.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsRollbackCreateResponseBody"
                },
                "examples": {
                  "Loyalty Card": {
                    "value": {
                      "id": "rr_0c5eba630bc4979e70",
                      "object": "redemption_rollback",
                      "date": "2023-01-27T16:05:23.631Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": -2,
                      "redemption": "r_0c5bf3323008a35032",
                      "reason": "A UI rollback to check for result in API response to listing.",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_dqxr4uzaYWkTZnrSEMoQtCF8",
                        "source_id": null,
                        "created_at": "2023-01-25T12:18:09.203Z",
                        "updated_at": "2023-01-27T16:05:23.687Z",
                        "status": "CANCELED",
                        "amount": 2100,
                        "total_amount": 2100,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 3,
                            "amount": 2100,
                            "price": 700,
                            "subtotal_amount": 2100,
                            "product": {
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5bf3323008a35032": {
                            "date": "2023-01-25T12:18:09.216Z",
                            "rollback_id": "rr_0c5eba630bc4979e70",
                            "rollback_date": "2023-01-27T16:05:23.631Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                        "channel_type": "USER"
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "categories": [],
                        "discount": null,
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "additional_info": null,
                        "assets": {
                          "qr": {},
                          "barcode": {}
                        },
                        "updated_at": null,
                        "object": "voucher"
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_0ZwLAHgeU9IrI2V1ofYRmW7g",
                        "voucher": {
                          "id": "v_4GaEX7clyqMaveT7vHhoyRpsIgxv95Q6",
                          "code": "HAPPY-ORDER5My",
                          "campaign": "$20 off the entire order",
                          "campaign_id": "camp_5h0wc453_4",
                          "category": null,
                          "category_id": "cat_0b688929a2476386a6",
                          "categories": [],
                          "type": "DISCOUNT_VOUCHER",
                          "discount": {
                            "type": "AMOUNT",
                            "amount_off": 2000,
                            "effect": "APPLY_TO_ORDER"
                          },
                          "gift": null,
                          "loyalty_card": null,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "21ceb848-4869-4dac-ba41-f854bda3a101",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/21ceb848-4869-4dac-ba41-f854bda3a101"
                            },
                            "barcode": {
                              "id": "1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/1dba9cb2-fb28-4c8d-8548-5edb2eb01f5a"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2023-01-25T12:18:09.256Z",
                          "updated_at": null,
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 0,
                            "object": "list",
                            "url": "/v1/vouchers/HAPPY-ORDER5My/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/HAPPY-ORDER5My/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_MF4hKh1IKYgJkPjbcFbH94Ho",
                        "object": "reward",
                        "name": "Digital Present",
                        "created_at": "2023-01-25T12:16:44.557Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_5h0wc453_4",
                            "type": "DISCOUNT_COUPONS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": -2
                      }
                    }
                  },
                  "Discount Coupon": {
                    "value": {
                      "id": "rr_0c5eb002b40cce9d62",
                      "object": "redemption_rollback",
                      "date": "2023-01-27T15:20:03.536Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "redemption": "r_0c5e8ef10842da0aad",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_J5ogV1Gkk2yfxmBEhYIg4O65",
                        "source_id": null,
                        "created_at": "2023-01-27T12:55:34.673Z",
                        "updated_at": "2023-01-27T15:20:03.743Z",
                        "status": "CANCELED",
                        "amount": 6000,
                        "total_amount": 6000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9ab4ab019a42d5",
                            "quantity": 1,
                            "amount": 3300,
                            "price": 3000,
                            "subtotal_amount": 3300
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9aeddb019a42db",
                            "quantity": 2,
                            "amount": 3400,
                            "price": 3000,
                            "subtotal_amount": 3400
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5e8ef10842da0aad": {
                            "date": "2023-01-27T12:55:34.689Z",
                            "rollback_id": "rr_0c5eb002b40cce9d62",
                            "rollback_date": "2023-01-27T15:20:03.536Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                      "voucher": {
                        "id": "v_TzD19aeNiqGc9LWciMWknyEZT8IW7u4u",
                        "code": "2CpRCE2c",
                        "campaign": null,
                        "campaign_id": null,
                        "category": null,
                        "category_id": null,
                        "categories": [],
                        "type": "DISCOUNT_VOUCHER",
                        "discount": {
                          "type": "AMOUNT",
                          "amount_off": 300,
                          "effect": "APPLY_TO_ITEMS_PROPORTIONALLY"
                        },
                        "gift": null,
                        "loyalty_card": null,
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1+ro/6HLsfI9E/rz0QEoYv+rcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz+WQtg4nKpjUS0wcA7AuIbz2zb870YfJO/r5UBS5gCqQ==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bro%2F6HLsfI9E%2Frz0QEoYv%2BrcVIEERdbV3gB4104zYyGfpydtSxS1WfpbuiDUfMizQAl1EMzoYsud5XTKBBwUkGkI5IPl84lPz%2BWQtg4nKpjUS0wcA7AuIbz2zb870YfJO%2Fr5UBS5gCqQ%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3/4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ+aTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19SWjP3ZUbFh26gCGb4xm3K95jhzfk1XXlKcYlHPtDTYR3%2F4dYbig4xxRmkgpQLa93Woz9Hq3h4JBQ%2BaTlftkEzL4D4OSAWi1aWlfxVikrJd6TMFLh9mmbmskodjs4MIdOFlluDWyarlw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-19T10:06:07.932Z",
                        "updated_at": "2023-01-27T15:20:03.707Z",
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 1,
                          "object": "list",
                          "url": "/v1/vouchers/2CpRCE2c/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 0,
                          "url": "/v1/vouchers/2CpRCE2c/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      }
                    }
                  },
                  "Gift Card": {
                    "value": {
                      "id": "rr_0c5eb099214ccea115",
                      "object": "redemption_rollback",
                      "date": "2023-01-27T15:22:37.573Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": -2000,
                      "redemption": "r_0c5e8a38730ccec0d5",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_S4BvUj64TlGqVZDOeud7z3rU",
                        "source_id": null,
                        "created_at": "2023-01-27T12:34:57.086Z",
                        "updated_at": "2023-01-27T15:22:37.628Z",
                        "status": "CANCELED",
                        "amount": 6000,
                        "total_amount": 6000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9ab4ab019a42d5",
                            "quantity": 1,
                            "amount": 3300,
                            "price": 3000,
                            "subtotal_amount": 3300
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0a9f9aeddb019a42db",
                            "quantity": 2,
                            "amount": 3400,
                            "price": 3000,
                            "subtotal_amount": 3400
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c5e8a38730ccec0d5": {
                            "date": "2023-01-27T12:34:57.100Z",
                            "rollback_id": "rr_0c5eb099214ccea115",
                            "rollback_date": "2023-01-27T15:22:37.573Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_UFAc7FTVO0HtJV2hWZls4O7eqHMyn62g",
                            "related_object_parent_id": "camp_B2Gx83JsSbmvj05MOwxYbNm6"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_UFAc7FTVO0HtJV2hWZls4O7eqHMyn62g",
                      "voucher": {
                        "id": "v_UFAc7FTVO0HtJV2hWZls4O7eqHMyn62g",
                        "code": "CODE14",
                        "campaign": "Gift Card Campaign",
                        "campaign_id": "camp_B2Gx83JsSbmvj05MOwxYbNm6",
                        "category": "Second",
                        "category_id": "cat_0bb343dee3cdb5ec0c",
                        "categories": [],
                        "type": "GIFT_VOUCHER",
                        "discount": null,
                        "gift": {
                          "amount": 2000,
                          "balance": 2000,
                          "effect": null
                        },
                        "loyalty_card": null,
                        "start_date": "2020-08-16T00:00:00.000Z",
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": "secret-code1",
                        "metadata": {
                          "region": "APAC",
                          "season": "Fall"
                        },
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1+VibJ6VGxrSVw5qmdbPMP3aP8HfcngMxtQc9Bm649CK1dK36e8YR820Ct26IkvDemEDzV8ozhB3F2BpazbgvCmhAo2Gvmo2WtwBwPh2ISAPJiXQCHRjwmKiqogjqQaNKWLxwDIBUc2jQ==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BVibJ6VGxrSVw5qmdbPMP3aP8HfcngMxtQc9Bm649CK1dK36e8YR820Ct26IkvDemEDzV8ozhB3F2BpazbgvCmhAo2Gvmo2WtwBwPh2ISAPJiXQCHRjwmKiqogjqQaNKWLxwDIBUc2jQ%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1/GVIi0p5fL5hxAY/ZBmuAU7nYYS03umjd30dwI5v5ZbpNc3Q5MiYbMuIOIT0H2fUTTwd//S4R9AB+60T/x4kSKu3lgfa9KgJmbyrzXm7Ggly06/qph4/asJaZVZIXEba4WJCeHqXCEgg==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FGVIi0p5fL5hxAY%2FZBmuAU7nYYS03umjd30dwI5v5ZbpNc3Q5MiYbMuIOIT0H2fUTTwd%2F%2FS4R9AB%2B60T%2Fx4kSKu3lgfa9KgJmbyrzXm7Ggly06%2Fqph4%2FasJaZVZIXEba4WJCeHqXCEgg%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-09-23T11:05:42.164Z",
                        "updated_at": "2023-01-27T15:22:37.595Z",
                        "redemption": {
                          "quantity": 18,
                          "redeemed_quantity": 0,
                          "redeemed_amount": 0,
                          "object": "list",
                          "url": "/v1/vouchers/CODE14/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 0,
                          "url": "/v1/vouchers/CODE14/publications?page=1&limit=10"
                        },
                        "object": "voucher"
                      },
                      "gift": {
                        "amount": -2000
                      }
                    }
                  },
                  "Promotion Tier": {
                    "value": {
                      "id": "rr_0ca286e96cc03f3e76",
                      "object": "redemption_rollback",
                      "date": "2023-03-21T07:57:12.526Z",
                      "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw==",
                      "metadata": {
                        "location_id": [
                          "L2"
                        ]
                      },
                      "redemption": "r_0ca286d222d2f7dc1f",
                      "reason": "To undo a redemption.",
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_0FR01SqYIxV4ITzgs1yZjkK6",
                        "source_id": "test_rollback_8",
                        "created_at": "2023-03-21T07:56:48.634Z",
                        "updated_at": "2023-03-21T07:57:12.546Z",
                        "status": "CANCELED",
                        "amount": 200000,
                        "total_amount": 200000,
                        "items": [
                          {
                            "object": "order_item",
                            "source_id": "apple534",
                            "related_object": "product",
                            "product_id": "prod_anJ03RZZq74z4v",
                            "quantity": 2,
                            "amount": 100000,
                            "price": 50000,
                            "subtotal_amount": 100000,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8",
                              "metadata": {
                                "shop": "citycenter",
                                "category": "electronics"
                              }
                            },
                            "metadata": {
                              "series": "2022-783CV"
                            }
                          },
                          {
                            "object": "order_item",
                            "source_id": "apple534-ihd5",
                            "related_object": "sku",
                            "sku_id": "sku_0KtP4rvwEECQ2U",
                            "quantity": 1,
                            "amount": 100000,
                            "price": 100000,
                            "subtotal_amount": 100000,
                            "sku": {
                              "sku": "Apple iPad 10 Silver 64GB",
                              "metadata": {
                                "category": "electronics"
                              }
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                          "object": "customer"
                        },
                        "customer_id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0ca286d222d2f7dc1f": {
                            "date": "2023-03-21T07:56:48.651Z",
                            "rollback_id": "rr_0ca286e96cc03f3e76",
                            "rollback_date": "2023-03-21T07:57:12.526Z",
                            "related_object_type": "promotion_tier",
                            "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                            "related_object_parent_id": "camp_w7BUstntAm8jbIDjfM49volj"
                          }
                        }
                      },
                      "channel": {
                        "channel_id": "e55f3aaa-b303-421a-b562-ca8529ed341d",
                        "channel_type": "API"
                      },
                      "customer": {
                        "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                        "name": "Annie Lemons",
                        "email": "annie@lemon.com",
                        "source_id": "annie@lemon.com",
                        "metadata": {
                          "age": 23
                        },
                        "object": "customer"
                      },
                      "related_object_type": "promotion_tier",
                      "related_object_id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                      "voucher": null,
                      "promotion_tier": {
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                        "created_at": "2022-09-23T08:31:23.022Z",
                        "updated_at": "2023-02-01T07:47:57.324Z",
                        "name": "Percent Discount",
                        "banner": "Get 40% off",
                        "action": {
                          "discount": {
                            "type": "PERCENT",
                            "percent_off": 40,
                            "effect": "APPLY_TO_ORDER"
                          }
                        },
                        "metadata": {},
                        "hierarchy": 2,
                        "campaign": {
                          "id": "camp_w7BUstntAm8jbIDjfM49volj",
                          "start_date": "2019-08-16T00:00:00.000Z",
                          "expiration_date": null,
                          "active": true,
                          "object": "campaign"
                        },
                        "campaign_id": "camp_w7BUstntAm8jbIDjfM49volj",
                        "active": true,
                        "start_date": "2022-09-21T00:00:00.000Z",
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "summary": {
                          "redemptions": {
                            "total_redeemed": 5
                          },
                          "orders": {
                            "total_amount": 616000,
                            "total_discount_amount": 246400
                          }
                        },
                        "object": "promotion_tier",
                        "validation_rule_assignments": null,
                        "category_id": null,
                        "categories": []
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/promotions/tiers/{promotionTierId}/redemption": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterPromotionTierId"
          },
          "name": "promotionTierId",
          "in": "path",
          "required": true,
          "description": "ID of the promotion tier to be redeemed."
        }
      ]
    },
    "/client/v1/redemptions": {
      "post": {
        "operationId": "redeem-stacked-discounts-client-side",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Redeem Stackable Discounts (client-side)",
        "description": "This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.\\n\\n## How API returns calculated discounts and order amounts in the response\\n\\nIn the table below, you can see the logic the API follows to calculate discounts and amounts:\\n\\n| **Field** | **Calculation** | **Description** |\\n|:---|:---|:---|\\n| amount | N/A | This field shows the order amount before applying any discount |\\n| total_amount | \`total_amount\` = \`amount\` - \`total_discount_amount\` | This field shows the order amount after applying all the discounts |\\n| discount_amount | \`discount_amount\` = \`previous_discount_amount\` + \`applied_discount_amount\` | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. |\\n| items_discount_amount | sum(items, i => i.discount_amount) | This field sums up all product-specific discounts |\\n| total_discount_amount | \`total_discount_amount\` = \`discount_amount\` + \`items_discount_amount\` | This field sums up all order-level and all product-specific discounts |\\n| applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request |\\n| items_applied_discount_amount | sum(items, i => i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request |\\n| total_applied_discount_amount | \`total_applied_discount_amount\` = \`applied_discount_amount\` + \`items_applied_discount_amount\` | This field sums up all order-level and all product-specific discounts applied in a particular request |\\n\\n<!-- theme: info -->\\n> 📘 Rollbacks\\n>\\n> You can't roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your <!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) -->[rollback request](ref:rollback-stacked-redemptions).",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRedemptionsRedeemRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK",
                      "key": "session_key"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid redemption. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRedemptionsRedeemResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/validations": {
      "post": {
        "operationId": "validate-stacked-discounts",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Validate Stackable Discounts",
        "description": "Verify redeemables provided in the request. This method is designed for server side integration which means that it is accessible only through private keys.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationsValidateRequestBody"
              },
              "examples": {
                "1 Redeemable": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                },
                "5 Redeemables": {
                  "value": {
                    "customer": {
                      "source_id": "36_bob"
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "GNcuPKGe"
                      },
                      {
                        "object": "voucher",
                        "id": "AnsvocvP",
                        "reward": {
                          "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4"
                        }
                      },
                      {
                        "object": "voucher",
                        "id": "M3X8IwW8",
                        "gift": {
                          "credits": 100
                        }
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W"
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_NDHgTg4VnOLYNjk9r7WOmQxf"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "items": [
                        {
                          "sku_id": "sku_0a3efc90375d1217e2",
                          "quantity": 1
                        },
                        {
                          "product_id": "prod_0bc3bd8a4e072c5275",
                          "quantity": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid validation. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationsValidateResponseBody"
                },
                "examples": {
                  "False": {
                    "value": {
                      "valid": false,
                      "redeemables": [
                        {
                          "status": "INAPPLICABLE",
                          "id": "eee33463",
                          "object": "voucher",
                          "result": {
                            "error": {
                              "code": 404,
                              "key": "not_found",
                              "message": "Resource not found",
                              "details": "Cannot find voucher with id eee33463",
                              "request_id": "v-0c6c6e20dc42940f0b",
                              "resource_id": "eee33463",
                              "resource_type": "voucher"
                            }
                          }
                        },
                        {
                          "status": "SKIPPED",
                          "id": "promo_Mwy9XpA0TLctSGriM5kum0qp",
                          "object": "promotion_tier",
                          "result": {}
                        }
                      ],
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw=="
                    }
                  },
                  "True - 5 Redeemables": {
                    "value": {
                      "valid": true,
                      "redeemables": [
                        {
                          "status": "APPLICABLE",
                          "id": "GNcuPKGe",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1700,
                            "total_amount": 1000,
                            "items_applied_discount_amount": 1700,
                            "total_applied_discount_amount": 1700,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "applied_discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "applied_discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "products_collection",
                                "id": "pc_a11pr0dUc75",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 3,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "AMOUNT",
                              "effect": "APPLY_TO_ITEMS",
                              "amount_off": 1000,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {},
                          "categories": []
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "AnsvocvP",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1700,
                            "total_amount": 1000,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "loyalty_card": {
                              "points": 4
                            }
                          },
                          "metadata": {},
                          "categories": [
                            {
                              "id": "cat_0bb81a481615a37b5e",
                              "name": "Second",
                              "hierarchy": 2,
                              "created_at": "2022-09-20T05:58:01.561Z",
                              "object": "category"
                            }
                          ]
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "M3X8IwW8",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 100,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1800,
                            "total_amount": 900,
                            "applied_discount_amount": 100,
                            "total_applied_discount_amount": 100,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "gift": {
                              "credits": 100
                            }
                          },
                          "metadata": {},
                          "categories": []
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                          "object": "promotion_tier",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 460,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 2160,
                            "total_amount": 540,
                            "applied_discount_amount": 360,
                            "total_applied_discount_amount": 360,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 2,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [
                              {
                                "object": "product",
                                "id": "prod_0b2c2ddf35150b83bb",
                                "source_id": "97",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 1,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "PERCENT",
                              "effect": "APPLY_TO_ORDER",
                              "percent_off": 40,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {}
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "promo_NDHgTg4VnOLYNjk9r7WOmQxf",
                          "object": "promotion_tier",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 490,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 2190,
                            "total_amount": 510,
                            "applied_discount_amount": 30,
                            "total_applied_discount_amount": 30,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 2,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [
                              {
                                "object": "product",
                                "id": "prod_0b2c2ddf35150b83bb",
                                "source_id": "97",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 1,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "AMOUNT",
                              "effect": "APPLY_TO_ORDER",
                              "amount_off": 30,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {}
                        }
                      ],
                      "order": {
                        "amount": 2700,
                        "discount_amount": 490,
                        "items_discount_amount": 1700,
                        "total_discount_amount": 2190,
                        "total_amount": 510,
                        "applied_discount_amount": 490,
                        "items_applied_discount_amount": 1700,
                        "total_applied_discount_amount": 2190,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_s3C0nDpr0DuC7",
                            "sku_id": "sku_0a3efc90375d1217e2",
                            "quantity": 1,
                            "amount": 2000,
                            "discount_amount": 1000,
                            "applied_discount_amount": 1000,
                            "price": 2000,
                            "subtotal_amount": 1000,
                            "product": {
                              "id": "prod_s3C0nDpr0DuC7",
                              "source_id": "test_prod_id_2",
                              "name": "Watchflix"
                            },
                            "sku": {
                              "id": "sku_0a3efc90375d1217e2",
                              "source_id": "test_standard_ultra_hd",
                              "sku": "Premium",
                              "price": 2000
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 1,
                            "amount": 700,
                            "discount_amount": 700,
                            "applied_discount_amount": 700,
                            "price": 700,
                            "subtotal_amount": 0,
                            "product": {
                              "id": "prod_0bc3bd8a4e072c5275",
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer_id": null,
                        "referrer_id": null,
                        "object": "order"
                      },
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "session": {
                        "key": "ssn_pkJfPcWAgp9WyHpA62Eky8X8SzxpKub2",
                        "type": "LOCK",
                        "ttl": 7,
                        "ttl_unit": "DAYS"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/validations": {
      "post": {
        "operationId": "validate-stacked-discounts-client-side",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Validate Stackable Discounts (client-side)",
        "description": "Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientValidationsValidateRequestBody"
              },
              "examples": {
                "1 Redeemable": {
                  "value": {
                    "customer": {
                      "source_id": "sample_customer",
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "voucher-code"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "amount": 55000,
                      "status": "PAID",
                      "items": [
                        {
                          "quantity": 2,
                          "price": 20000,
                          "source_id": "sample product1",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        {
                          "quantity": 1,
                          "price": 15000,
                          "source_id": "sample product2",
                          "related_object": "product",
                          "product": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    }
                  }
                },
                "5 Redeemables": {
                  "value": {
                    "customer": {
                      "source_id": "36_bob"
                    },
                    "options": {
                      "expand": [
                        "order",
                        "redeemable",
                        "category"
                      ]
                    },
                    "redeemables": [
                      {
                        "object": "voucher",
                        "id": "GNcuPKGe"
                      },
                      {
                        "object": "voucher",
                        "id": "AnsvocvP",
                        "reward": {
                          "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4"
                        }
                      },
                      {
                        "object": "voucher",
                        "id": "M3X8IwW8",
                        "gift": {
                          "credits": 100
                        }
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_DE1N30D731Tg2F6NoMwNas2W"
                      },
                      {
                        "object": "promotion_tier",
                        "id": "promo_NDHgTg4VnOLYNjk9r7WOmQxf"
                      }
                    ],
                    "session": {
                      "type": "LOCK"
                    },
                    "order": {
                      "items": [
                        {
                          "sku_id": "sku_0a3efc90375d1217e2",
                          "quantity": 1
                        },
                        {
                          "product_id": "prod_0bc3bd8a4e072c5275",
                          "quantity": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Depending on your project settings: all redeemables must be valid or just one must be valid to result as valid validation. See https://support.voucherify.io/article/604-stacking-rules#application-rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientValidationsValidateResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/redemptions/{parentRedemptionId}/rollbacks": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRedemptionId"
          },
          "name": "parentRedemptionId",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a parent redemption, e.g. \`r_JQfm73zWSJFQxs3bGxweYjgm\`."
        }
      ],
      "post": {
        "operationId": "rollback-stacked-redemptions",
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "summary": "Rollback Stackable Redemptions",
        "description": "Rollback a stackable redemption. When you rollback a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "reason",
            "description": "Reason for the rollback."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "tracking_id",
            "description": "Customer's \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedemptionsRollbacksCreateRequestBody"
              },
              "examples": {
                "Promotion": {
                  "value": {
                    "customer": {
                      "id": "cust_SolpIN5N4oZbCnrxZ5NHrbVB",
                      "name": "Annie Lemons",
                      "email": "annie@lemon.com",
                      "phone": "+1 933 222 3334",
                      "birthday": "1900-12-02",
                      "birthdate": "1900-12-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 5",
                        "country": "United States",
                        "postal_code": "100012"
                      },
                      "metadata": {
                        "age": 23
                      }
                    },
                    "order": {
                      "source_id": "test_rollback_8"
                    },
                    "metadata": {
                      "location_id": [
                        "L2"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an array with the individual redemption rollback results along with the parent rollback result and related order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedemptionsRollbacksCreateResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ],
      "delete": {
        "operationId": "delete-loyalty-program",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Delete Loyalty Campaign",
        "description": "This method permanently deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the campaign and related vouchers will be removed permanently. Going forward, the user will be able to create the next campaign with the same name."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id of the scheduled asynchronous action, informing you that your request has been accepted and the loyalty campaign will be deleted from the repository asynchronously. To check the deletion status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesDeleteResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID of the loyalty program."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/members/{memberId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique code that identifies the loyalty card."
        }
      ]
    },
    "/v1/loyalties/members/{memberId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card code assigned to a particular customer."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/activities": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ]
    },
    "/v1/loyalties/members/{memberId}/activities": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/balance": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ],
      "post": {
        "operationId": "update-loyalty-card-balance-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Add or Remove Loyalty Card Balance",
        "description": "This method adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the point adjustment along with the expiration mechanism.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateRequestBody"
              },
              "examples": {
                "Add points": {
                  "value": {
                    "points": 100,
                    "expiration_type": "CUSTOM_DATE",
                    "expiration_date": "2023-05-30"
                  }
                },
                "Deduct points": {
                  "value": {
                    "points": -100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a balance object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateResponseBody"
                },
                "examples": {
                  "Add balance": {
                    "value": {
                      "points": -100,
                      "total": 13436,
                      "balance": 13136,
                      "type": "loyalty_card",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF"
                      }
                    }
                  },
                  "Deduct balance": {
                    "value": {
                      "points": -100,
                      "total": 13436,
                      "balance": 13136,
                      "type": "loyalty_card",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/balance": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "post": {
        "operationId": "update-loyalty-card-balance",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Add or Remove Loyalty Card Balance",
        "description": "This method gives adds or removes balance to an existing loyalty card. The removal of points will consume the points that expire the soonest. \\n\\n<!-- theme: info -->\\n> 📘 Alternative endpoint\\n> This endpoint is an alternative to this <!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1balance) -->[endpoint](ref:update-loyalty-card-balance-1). The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the \`campaignId\` as a path parameter.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the point adjustment along with the expiration mechanism.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateRequestBody"
              },
              "examples": {
                "Subtract points": {
                  "value": {
                    "points": -100
                  }
                },
                "Add Points": {
                  "value": {
                    "points": 100,
                    "expiration_type": "CUSTOM_DATE",
                    "expiration_date": "2023-05-30"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a balance object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersBalanceUpdateResponseBody"
                },
                "examples": {
                  "Subtract Points": {
                    "value": {
                      "points": 100,
                      "total": 13436,
                      "balance": 13136,
                      "type": "loyalty_card",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/transfers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination)."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination)."
        }
      ],
      "post": {
        "operationId": "transfer-points",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Transfer Loyalty Points",
        "description": "Transfer points between different loyalty cards. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersTransfersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "code": "0PmQ7JQI",
                      "points": 1
                    },
                    {
                      "code": "kCeufB8i",
                      "points": 1
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a loyalty card object for the loaded loyalty card, ie. the one that that points were transferred to from the other cards(s).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransfersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                      "code": "MmFAzfDe",
                      "campaign": "Proportional Earning Rules",
                      "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                      "category": null,
                      "category_id": "cat_0b6152ce12414820de",
                      "categories": [],
                      "type": "LOYALTY_CARD",
                      "discount": null,
                      "gift": null,
                      "loyalty_card": {
                        "points": 13441,
                        "balance": 13141,
                        "next_expiration_date": "2022-11-30",
                        "next_expiration_points": 0
                      },
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX184kVdWUO/msrLg1G0MRf/Cs6QwSN3f6kyWCOTGdijyq8OfUbUpcGx6fjdeIpTf2UilFGNG8aCWVk/dXm/QEJ/sulXKDlUMWf+MN7TRG5LB+wuzqTy7csDBfRoJn0fURpwU4A6VZZSwBQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX184kVdWUO%2FmsrLg1G0MRf%2FCs6QwSN3f6kyWCOTGdijyq8OfUbUpcGx6fjdeIpTf2UilFGNG8aCWVk%2FdXm%2FQEJ%2FsulXKDlUMWf%2BMN7TRG5LB%2BwuzqTy7csDBfRoJn0fURpwU4A6VZZSwBQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/RGZN9VwvkdI6B26PPZQZWjh33USr5NPMXbHuJVkxsH6TUyW/cXen1Lc7gaqik09BGiry0R4QIAP52jnxQuABOsW0HdYfglsLPY7IajGX5rJzZKDKuzioq2vRIPyuE6z03frAod7ptvQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FRGZN9VwvkdI6B26PPZQZWjh33USr5NPMXbHuJVkxsH6TUyW%2FcXen1Lc7gaqik09BGiry0R4QIAP52jnxQuABOsW0HdYfglsLPY7IajGX5rJzZKDKuzioq2vRIPyuE6z03frAod7ptvQ%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-18T14:03:59.954Z",
                      "updated_at": "2022-11-28T17:58:25.607Z",
                      "holder_id": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 1,
                        "redeemed_points": 300,
                        "object": "list",
                        "url": "/v1/vouchers/MmFAzfDe/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 1,
                        "url": "/v1/vouchers/MmFAzfDe/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/transactions": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to retrieve transaction data for."
        }
      ],
      "get": {
        "operationId": "list-loyalty-card-transactions-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Card Transactions",
        "description": "Retrieve transaction data related to point movements for a specific loyalty card.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of loyalty card transaction objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "vtx_0c9dd3c2e392f78613",
                          "source_id": "20230317_transfer_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": "Transferring points to card",
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1396,
                              "object": "balance",
                              "points": -1,
                              "balance": 1396,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1102,
                                "balance": 1102,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 102
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9dd3c2e392f78614",
                          "created_at": "2023-03-17T16:20:33.807Z"
                        },
                        {
                          "id": "vtx_0c9dd2527696ba081b",
                          "source_id": "20230317_add_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Adding points to card",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1397,
                              "object": "balance",
                              "points": 100,
                              "balance": 1397,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:14:16.524Z"
                        },
                        {
                          "id": "vtx_0c9dd1ce1d403f4204",
                          "source_id": "20230317_subtract_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Subtracting points from card",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1297,
                              "object": "balance",
                              "points": -1,
                              "balance": 1297,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:12:00.981Z"
                        },
                        {
                          "id": "vtx_0c9c21df658d03ce3f",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "Automation",
                          "reason": null,
                          "type": "POINTS_ACCRUAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1298,
                              "object": "balance",
                              "points": 200,
                              "balance": 1298,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_QZEKPzYATFjGoos4DonMg0fd",
                              "source_id": "s"
                            },
                            "event": {
                              "id": "evcus_0c9c21def34e3c05bf",
                              "type": "customer.order.paid"
                            },
                            "earning_rule": {
                              "id": "ern_2WsCIBEx6Lzf5IAV5IOR7a23",
                              "source": {
                                "banner": "Order paid"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-16T08:44:52.333Z"
                        },
                        {
                          "id": "vtx_0c9b09673f8a862a51",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REFUND",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 1000,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "rollback": {
                              "id": "rr_0c9b0967244a862a33"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:19:29.149Z"
                        },
                        {
                          "id": "vtx_0c9b08fe530089785c",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": -1000,
                              "balance": 98,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:17:41.708Z"
                        },
                        {
                          "id": "vtx_0c9b074afed3b30e4b",
                          "source_id": "20230309_add_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer purchased points at kiosk.",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 100,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:10:15.917Z"
                        },
                        {
                          "id": "vtx_0c9b073072408969d1",
                          "source_id": "20230309_subtract_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer used points to obtain tickets.",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 998,
                              "object": "balance",
                              "points": -1,
                              "balance": 998,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:09:48.735Z"
                        },
                        {
                          "id": "vtx_0c9afe802593b34b80",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": null,
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 999,
                              "object": "balance",
                              "points": -1,
                              "balance": 999,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1001,
                                "balance": 1001,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 1
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9afe802593b34b81",
                          "created_at": "2023-03-15T11:31:51.062Z"
                        }
                      ],
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/transactions": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to retrieve transaction data for."
        }
      ],
      "get": {
        "operationId": "list-loyalty-card-transactions",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Card Transactions",
        "description": "Retrieve transaction data related to point movements for a specific loyalty card.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of loyalty card transaction objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "vtx_0c9dd3c2e392f78613",
                          "source_id": "20230317_transfer_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": "Transferring points to card",
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1396,
                              "object": "balance",
                              "points": -1,
                              "balance": 1396,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1102,
                                "balance": 1102,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 102
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9dd3c2e392f78614",
                          "created_at": "2023-03-17T16:20:33.807Z"
                        },
                        {
                          "id": "vtx_0c9dd2527696ba081b",
                          "source_id": "20230317_add_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Adding points to card",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1397,
                              "object": "balance",
                              "points": 100,
                              "balance": 1397,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:14:16.524Z"
                        },
                        {
                          "id": "vtx_0c9dd1ce1d403f4204",
                          "source_id": "20230317_subtract_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": "Subtracting points from card",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1297,
                              "object": "balance",
                              "points": -1,
                              "balance": 1297,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-17T16:12:00.981Z"
                        },
                        {
                          "id": "vtx_0c9c21df658d03ce3f",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "Automation",
                          "reason": null,
                          "type": "POINTS_ACCRUAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1298,
                              "object": "balance",
                              "points": 200,
                              "balance": 1298,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_QZEKPzYATFjGoos4DonMg0fd",
                              "source_id": "s"
                            },
                            "event": {
                              "id": "evcus_0c9c21def34e3c05bf",
                              "type": "customer.order.paid"
                            },
                            "earning_rule": {
                              "id": "ern_2WsCIBEx6Lzf5IAV5IOR7a23",
                              "source": {
                                "banner": "Order paid"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-16T08:44:52.333Z"
                        },
                        {
                          "id": "vtx_0c9b09673f8a862a51",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REFUND",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 1000,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "rollback": {
                              "id": "rr_0c9b0967244a862a33"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:19:29.149Z"
                        },
                        {
                          "id": "vtx_0c9b08fe530089785c",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": null,
                          "reason": null,
                          "type": "POINTS_REDEMPTION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": -1000,
                              "balance": 98,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "order": {
                              "id": "ord_DH2gGDlDWB1hRImf1VVB4EIH",
                              "source_id": null
                            },
                            "redemption": {
                              "id": "r_0c9b08fe4b80897849"
                            },
                            "reward": {
                              "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                              "name": "100 = $20"
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:17:41.708Z"
                        },
                        {
                          "id": "vtx_0c9b074afed3b30e4b",
                          "source_id": "20230309_add_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer purchased points at kiosk.",
                          "type": "POINTS_ADDITION",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 1098,
                              "object": "balance",
                              "points": 100,
                              "balance": 1098,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:10:15.917Z"
                        },
                        {
                          "id": "vtx_0c9b073072408969d1",
                          "source_id": "20230309_subtract_points_1",
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "voucherify-web-ui",
                          "reason": "Customer used points to obtain tickets.",
                          "type": "POINTS_REMOVAL",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 998,
                              "object": "balance",
                              "points": -1,
                              "balance": 998,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            }
                          },
                          "related_transaction_id": null,
                          "created_at": "2023-03-15T12:09:48.735Z"
                        },
                        {
                          "id": "vtx_0c9afe802593b34b80",
                          "source_id": null,
                          "voucher_id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                          "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                          "source": "API",
                          "reason": null,
                          "type": "POINTS_TRANSFER_OUT",
                          "details": {
                            "balance": {
                              "type": "loyalty_card",
                              "total": 999,
                              "object": "balance",
                              "points": -1,
                              "balance": 999,
                              "related_object": {
                                "id": "v_lWRrcwNm0vqxBaU5nsSMzRRHusCsS4Vl",
                                "type": "voucher"
                              }
                            },
                            "destination_voucher": {
                              "id": "v_Wak6xlf5WdR4rIcvJxC2olOopk0boK6t",
                              "code": "LOYALTY-CARD-A8XVurg",
                              "type": "LOYALTY_CARD",
                              "campaign": "Loyalty Campaign - Test Initial Points",
                              "campaign_id": "camp_LyAZf94hbZaUbSdKIeAJpjRp",
                              "loyalty_card": {
                                "points": 1001,
                                "balance": 1001,
                                "next_expiration_date": "2023-12-31",
                                "next_expiration_points": 1
                              },
                              "is_referral_code": false
                            }
                          },
                          "related_transaction_id": "vtx_0c9afe802593b34b81",
                          "created_at": "2023-03-15T11:31:51.062Z"
                        }
                      ],
                      "has_more": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/transactions/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to export transaction data for."
        }
      ],
      "post": {
        "operationId": "export-loyalty-card-transactions",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Export Loyalty Card Transactions",
        "description": "Export transactions that are associated with point movements on a loyalty card.\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`POINTS_EXPIRATION\` <br> - \`POINTS_ADDITION\` <br> - \`POINTS_REMOVAL\` <br> - \`POINTS_TRANSFER_OUT\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_REFUND\` <br> - \`POINTS_REDEMPTION\` |\\n| source_id | Custom source ID of the transaction if one was included originally. | source_id_custom |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The loyalty card balance after the transaction. |  |\\n| amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | - \`API\` <br> - \`voucherify-web-ui\` <br> - \`Automation\` |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters and filters for the transaction export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "order": "-created_at",
                      "fields": [
                        "id",
                        "type",
                        "source_id",
                        "reason",
                        "balance",
                        "amount",
                        "created_at",
                        "voucher_id",
                        "campaign_id",
                        "details",
                        "related_transaction_id"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an export object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_8Fwd6Z8NS67ZH314KRtm5xXE",
                      "object": "export",
                      "created_at": "2023-03-21T13:50:43.286Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "order": "-created_at",
                        "fields": [
                          "id",
                          "type",
                          "source_id",
                          "reason",
                          "balance",
                          "amount",
                          "created_at",
                          "voucher_id",
                          "campaign_id",
                          "details",
                          "related_transaction_id"
                        ],
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "LOYALTY-CARD-2IAoDNF"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  },
                  "No request body": {
                    "value": {
                      "id": "exp_ExEE5A6OIK4tssuNswr5O6SU",
                      "object": "export",
                      "created_at": "2023-03-21T13:34:57.034Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/transactions/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card that you are looking to export transaction data for."
        }
      ],
      "post": {
        "operationId": "export-loyalty-card-transactions-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Export Loyalty Card Transactions",
        "description": "Export transactions that are associated with point movements on a loyalty card.\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`POINTS_EXPIRATION\` <br> - \`POINTS_ADDITION\` <br> - \`POINTS_REMOVAL\` <br> - \`POINTS_TRANSFER_OUT\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_REFUND\` <br> - \`POINTS_REDEMPTION\` |\\n| source_id | Custom source ID of the transaction if one was included originally. | source_id_custom |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The loyalty card balance after the transaction. |  |\\n| amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | - \`API\` <br> - \`voucherify-web-ui\` <br> - \`Automation\` |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters and filters for the transaction export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "parameters": {
                      "order": "-created_at",
                      "fields": [
                        "id",
                        "type",
                        "source_id",
                        "reason",
                        "balance",
                        "amount",
                        "created_at",
                        "voucher_id",
                        "campaign_id",
                        "details",
                        "related_transaction_id"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an export object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTransactionsExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_8Fwd6Z8NS67ZH314KRtm5xXE",
                      "object": "export",
                      "created_at": "2023-03-21T13:50:43.286Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "order": "-created_at",
                        "fields": [
                          "id",
                          "type",
                          "source_id",
                          "reason",
                          "balance",
                          "amount",
                          "created_at",
                          "voucher_id",
                          "campaign_id",
                          "details",
                          "related_transaction_id"
                        ],
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "LOYALTY-CARD-2IAoDNF"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  },
                  "No request body": {
                    "value": {
                      "id": "exp_ExEE5A6OIK4tssuNswr5O6SU",
                      "object": "export",
                      "created_at": "2023-03-21T13:34:57.034Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "voucher_transactions",
                      "parameters": {
                        "filters": {
                          "voucher_id": {
                            "conditions": {
                              "$in": [
                                "HRwc0oHz"
                              ]
                            }
                          }
                        }
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/points-expiration": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Loyalty card code."
        }
      ],
      "get": {
        "operationId": "list-points-expiration",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Points Expiration",
        "description": "Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the [Exports API](ref:create-export) to retrieve a list of both \`ACTIVE\` and \`EXPIRED\` point buckets.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of loyalty points expiration buckets along with an expiration date if the points are due to expire. No expiration date parameter is returned if the loyalty points bucket does not expire.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersPointsExpirationListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "lopb_ERSwDxeWTlvWwFrn3AtJxt3s",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 2
                          },
                          "status": "ACTIVE",
                          "expires_at": "2022-11-25",
                          "created_at": "2022-11-25T09:10:20.994Z",
                          "object": "loyalty_points_bucket"
                        },
                        {
                          "id": "lopb_zdeIBq3EsnPnRSDa7Tyyb6X2",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 12
                          },
                          "status": "ACTIVE",
                          "expires_at": "2022-11-30",
                          "created_at": "2022-11-21T13:49:54.949Z",
                          "object": "loyalty_points_bucket"
                        },
                        {
                          "id": "lopb_Mg80vhZtqHFItWlJFYZ2rJAS",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 0
                          },
                          "status": "ACTIVE",
                          "expires_at": "2023-05-30",
                          "created_at": "2022-06-09T11:07:07.344Z",
                          "updated_at": "2022-08-30T08:34:45.989Z",
                          "object": "loyalty_points_bucket"
                        },
                        {
                          "id": "lopb_dQE1TwyTkHAJDlVCPlqSC0nu",
                          "voucher_id": "v_0aMj6Mdp0i3zuXrd9NnBKboc7746mlgF",
                          "campaign_id": "camp_7s3uXI44aKfIk5IhmeOPr6ic",
                          "bucket": {
                            "total_points": 13124
                          },
                          "status": "ACTIVE",
                          "created_at": "2022-02-28T12:13:57.749Z",
                          "updated_at": "2022-11-25T09:09:51.136Z",
                          "object": "loyalty_points_bucket"
                        }
                      ],
                      "total": 4
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/points-expiration/export": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        }
      ]
    },
    "/v1/loyalties/{campaignId}/earning-rules": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ]
    },
    "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterEarningRuleId"
          },
          "name": "earningRuleId",
          "in": "path",
          "required": true,
          "description": "A unique earning rule ID."
        }
      ],
      "get": {
        "operationId": "get-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Earning Rule",
        "description": "Retrieves an earning rule assigned to a campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an earning rule object with the earning rule details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesEarningRulesGetResponseBody"
                },
                "examples": {
                  "Custom Event": {
                    "value": {
                      "id": "ern_abvbD0d7Wv4hgr3fTElLb38G",
                      "created_at": "2022-02-07T08:19:41.810Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 2,
                        "type": "FIXED"
                      },
                      "custom_event": {
                        "schema_id": "ms_7JRYC8jXbezBV8AvGYGA0b5R"
                      },
                      "event": "saw_on_facebook",
                      "source": {
                        "banner": "Saw on Facebook Timeframe",
                        "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-02-07T08:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "object": "earning_rule",
                      "automation_id": "auto_WTxNMXGJMS5ZdU9oZip3AzuA"
                    }
                  },
                  "Order Paid": {
                    "value": {
                      "id": "ern_taClaOIiaGNdmdby8xS0lCcy",
                      "created_at": "2022-02-04T13:27:50.665Z",
                      "updated_at": "2022-02-07T08:19:44.198Z",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "event": "order.paid",
                      "source": {
                        "banner": "Order paid 1000 points",
                        "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        4
                      ],
                      "object": "earning_rule",
                      "automation_id": "auto_RjBuwpeFQZ7TyQ5LP2LFVZYG"
                    }
                  },
                  "Segment Entered": {
                    "value": {
                      "id": "ern_3HlFKLMNIfBme9lcHwnMwXON",
                      "created_at": "2022-02-04T13:02:52.937Z",
                      "updated_at": "2022-02-07T08:19:43.291Z",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "segment": {
                        "id": "seg_WJv55MbzQwnr56ttJ2xUrSgt"
                      },
                      "event": "customer.segment.entered",
                      "source": {
                        "banner": "Entered segment 100 points.",
                        "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "object": "earning_rule",
                      "automation_id": "auto_39wqQSScJJbvpzAF611jnrh9"
                    }
                  },
                  "Loyalty Tier Joined": {
                    "value": {
                      "id": "ern_gVo6CHBduFPoh1hctASfXHLT",
                      "created_at": "2022-11-24T17:01:42.809Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "type": "PROPORTIONAL",
                        "calculation_type": "CUSTOMER_METADATA",
                        "customer": {
                          "metadata": {
                            "every": 4,
                            "points": 4,
                            "property": "customer_life_time_value"
                          }
                        }
                      },
                      "event": "customer.loyalty.tier.joined",
                      "loyalty_tier": {
                        "id": "ltr_pudTGWasuIqxdiDM0go31OV1"
                      },
                      "source": {
                        "banner": "Tier joined",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_wdlEo17wmoqYHGfilbayEUj7",
                      "metadata": {
                        "Type": "Tier joined - customer metadata - proportional"
                      }
                    }
                  },
                  "Loyalty Tier Left": {
                    "value": {
                      "id": "ern_66OdCyLADv5IGFoQe18vGUwa",
                      "created_at": "2022-11-24T17:03:59.414Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "type": "PROPORTIONAL",
                        "calculation_type": "CUSTOMER_METADATA",
                        "customer": {
                          "metadata": {
                            "every": 2,
                            "points": 2,
                            "property": "customer_life_time_value"
                          }
                        }
                      },
                      "event": "customer.loyalty.tier.left",
                      "loyalty_tier": {
                        "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2"
                      },
                      "source": {
                        "banner": "Tier left",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_czm5el1Uz1jeGaO97AYoDNAq",
                      "metadata": {
                        "Type": "Tier left"
                      }
                    }
                  },
                  "Loyalty Tier Upgraded": {
                    "value": {
                      "id": "ern_YR3fDfCjAmz9a5D68nk0i4dm",
                      "created_at": "2022-11-25T07:29:38.961Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "type": "PROPORTIONAL",
                        "calculation_type": "CUSTOMER_METADATA",
                        "customer": {
                          "metadata": {
                            "every": 3,
                            "points": 4,
                            "property": "customer_life_time_value"
                          }
                        }
                      },
                      "event": "customer.loyalty.tier.upgraded",
                      "loyalty_tier": {
                        "id": "ltr_30KHciA0UG8B71Fo51GZqwgN"
                      },
                      "source": {
                        "banner": "Tier upgraded",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_M1OdRH8spk6Fs7yTuPLN2LAv",
                      "metadata": {
                        "Type": "Upgraded"
                      }
                    }
                  },
                  "Loyalty Tier Downgraded": {
                    "value": {
                      "id": "ern_A2RArBE30Tkt56utVLrRv7rZ",
                      "created_at": "2022-11-25T07:31:05.866Z",
                      "updated_at": "2022-11-25T07:31:43.029Z",
                      "validation_rule_id": "val_kfmWpfXMI9P1",
                      "loyalty": {
                        "points": 1,
                        "type": "FIXED"
                      },
                      "event": "customer.loyalty.tier.downgraded",
                      "loyalty_tier": {
                        "id": "__ANY__"
                      },
                      "source": {
                        "banner": "Tier Downgraded",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_TMVZtCNMBgZm0KcPJ7otiHZW",
                      "metadata": {
                        "Type": "Tier"
                      }
                    }
                  },
                  "Loyalty Tier Prolonged": {
                    "value": {
                      "id": "ern_AdlWO2yt6b6llWsibIdiRXVE",
                      "created_at": "2022-11-25T07:31:42.767Z",
                      "updated_at": null,
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 5,
                        "type": "FIXED"
                      },
                      "event": "customer.loyalty.tier.prolonged",
                      "loyalty_tier": {
                        "id": "__ANY__"
                      },
                      "source": {
                        "banner": "Prolonged",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "object": "earning_rule",
                      "automation_id": "auto_4jH1yq9WJS0oJ8suagCrltyb",
                      "metadata": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Delete Earning Rule",
        "description": "This method deletes an earning rule for a specific loyalty campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterEarningRuleId"
          },
          "name": "earningRuleId",
          "in": "path",
          "required": true,
          "description": "Unique earning rule ID."
        }
      ],
      "post": {
        "operationId": "enable-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Enable Earning Rule",
        "description": "Enable an earning rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an earning rule object with the \`active\` parameter set to \`true\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesEarningRulesEnableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ern_raVUcdXruvXGuzm682ESrAzt",
                      "created_at": "2022-11-24T09:03:14.534Z",
                      "updated_at": "2022-11-25T14:07:39.460Z",
                      "loyalty": {
                        "points": 20,
                        "type": "FIXED"
                      },
                      "event": "order.paid",
                      "source": {
                        "banner": "Order has been paid",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": true,
                      "start_date": "2022-11-23T00:00:00.000Z",
                      "expiration_date": "2022-11-30T00:00:00.000Z",
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "object": "earning_rule",
                      "automation_id": "auto_MbEIyLbn7pHyba5Qw5eeb35L",
                      "metadata": {
                        "Type": "Order has been paid - Fixed"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterEarningRuleId"
          },
          "name": "earningRuleId",
          "in": "path",
          "required": true,
          "description": "Unique earning rule ID."
        }
      ],
      "post": {
        "operationId": "disable-earning-rule",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Disable Earning Rule",
        "description": "Disable an earning rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an earning rule object with the \`active\` parameter set to \`false\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesEarningRulesDisableResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ern_A2RArBE30Tkt56utVLrRv7rZ",
                      "created_at": "2022-11-25T07:31:05.866Z",
                      "updated_at": "2022-11-25T14:12:57.167Z",
                      "loyalty": {
                        "points": 1,
                        "type": "FIXED"
                      },
                      "event": "customer.loyalty.tier.downgraded",
                      "loyalty_tier": {
                        "id": "__ANY__"
                      },
                      "source": {
                        "banner": "Tier Downgraded",
                        "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                        "object_type": "campaign"
                      },
                      "active": false,
                      "object": "earning_rule",
                      "automation_id": "auto_TMVZtCNMBgZm0KcPJ7otiHZW",
                      "metadata": {
                        "Type": "Tier"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/rewards": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "get": {
        "operationId": "list-member-rewards",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Member Rewards",
        "description": "Retrieves the list of rewards that the given customer (identified by \`member_id\`, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.  \\n\\nYou can use the \`affordable_only\` parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).  \\n\\nPlease note that rewards that are disabled (i.e. set to \`Not Available\` in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "affordable_only",
            "description": "Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to \`true\` to return rewards which the customer can actually afford.",
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            }
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of rewards for the given \`member_id\`. Returns a filtered list if the query parameter \`affordable_only\` is set to \`true\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersRewardsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "reward": {
                            "id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                            "name": "Material Reward",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b7d7dfb05cbe5c616",
                                "sku_id": "sku_0b7d7dfb090be5c619"
                              }
                            },
                            "stock": 4,
                            "redeemed": 1,
                            "attributes": {
                              "description": "Get a Comic Book in Archie's series."
                            },
                            "created_at": "2022-08-17T07:46:18.619169+00:00",
                            "updated_at": "2022-08-17T08:13:48.30747+00:00",
                            "metadata": {},
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_pJYQBXSitK2OVPK3XMXZK76X",
                            "reward_id": "rew_C7wS9eHFDN4CIbXI5PpLSkGY",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 39
                              }
                            },
                            "created_at": "2022-08-24T11:40:22.418972+00:00",
                            "updated_at": "2022-08-24T13:23:50.409121+00:00",
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_31M6Za6zkMRfhxYJz4aDo11h",
                            "name": "Pay with Points",
                            "type": "COIN",
                            "parameters": {
                              "coin": {
                                "exchange_ratio": 1,
                                "points_ratio": 1
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "attributes": {},
                            "created_at": "2022-06-23T11:06:06.222736+00:00",
                            "updated_at": null,
                            "metadata": null,
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_wrVYAfXWolq52gnl15dumPCq",
                            "reward_id": "rew_31M6Za6zkMRfhxYJz4aDo11h",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "created_at": "2022-08-11T14:13:34.581194+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_Jhq0ecLGSx8eF4pFdlhFr9P6",
                            "name": "20% discount",
                            "type": "CAMPAIGN",
                            "parameters": {
                              "campaign": {
                                "id": "camp_4B1jDE63pCeSij3HU7gx3gPT",
                                "type": "DISCOUNT_COUPONS"
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "attributes": {},
                            "created_at": "2022-08-11T09:52:39.032699+00:00",
                            "updated_at": null,
                            "metadata": {},
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_nFREw86qh1LiqGPRygahNh8Z",
                            "reward_id": "rew_Jhq0ecLGSx8eF4pFdlhFr9P6",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 100
                              }
                            },
                            "created_at": "2022-08-11T14:13:34.581194+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_Dev2yQLodRV33UKPKHTUQWk1",
                            "name": "Get a product",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b2ac1dab28985cb1e",
                                "sku_id": null
                              }
                            },
                            "stock": 1,
                            "redeemed": 1,
                            "attributes": {
                              "description": "Product"
                            },
                            "created_at": "2022-06-13T10:43:15.929621+00:00",
                            "updated_at": "2022-08-11T15:59:30.820937+00:00",
                            "metadata": null,
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_SV4gMgPXTXDrsoTyqhY1B2ut",
                            "reward_id": "rew_Dev2yQLodRV33UKPKHTUQWk1",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 4000
                              }
                            },
                            "created_at": "2022-08-11T14:13:34.581194+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_oQEYtUNYcVe2IdBEUBdLfkCD",
                            "name": "Get a comic book",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b7d7dfb05cbe5c616",
                                "sku_id": null
                              }
                            },
                            "stock": 1,
                            "redeemed": 2,
                            "attributes": {
                              "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_fPH9ohe0pZf4EiIt295sk9Ob.png",
                              "description": "Archie's Series"
                            },
                            "created_at": "2022-08-11T14:35:44.694611+00:00",
                            "updated_at": "2022-08-17T07:52:56.965366+00:00",
                            "metadata": {
                              "Type": "GR-2"
                            },
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_7HHH6TjN7Q9WDr5ZePeZUg5p",
                            "reward_id": "rew_oQEYtUNYcVe2IdBEUBdLfkCD",
                            "related_object_id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 10
                              }
                            },
                            "created_at": "2022-08-11T15:44:12.789086+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_reward"
                        }
                      ],
                      "total": 5
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "Unique reward assignment ID."
        }
      ],
      "get": {
        "operationId": "get-reward-details",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Reward Details",
        "description": "Get reward details in the context of a loyalty campaign and reward assignment ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns reward details in the context of a loyalty *campaign* and reward assignment ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesRewardAssignmentsRewardGetResponseBody"
                },
                "examples": {
                  "Material": {
                    "value": {
                      "id": "rew_Dev2yQLodRV33UKPKHTUQWk1",
                      "name": "Get a product",
                      "type": "MATERIAL",
                      "parameters": {
                        "product": {
                          "id": "prod_0b2ac1dab28985cb1e",
                          "sku_id": null
                        }
                      },
                      "stock": "1",
                      "redeemed": "1",
                      "attributes": {
                        "description": "Product"
                      },
                      "created_at": "2022-06-13T10:43:15.929Z",
                      "updated_at": "2022-08-11T15:59:30.820Z",
                      "metadata": null,
                      "object": "reward"
                    }
                  },
                  "Pay with Points": {
                    "value": {
                      "id": "rew_31M6Za6zkMRfhxYJz4aDo11h",
                      "name": "Pay with Points",
                      "type": "COIN",
                      "parameters": {
                        "coin": {
                          "exchange_ratio": 1,
                          "points_ratio": 1
                        }
                      },
                      "stock": null,
                      "redeemed": null,
                      "attributes": {},
                      "created_at": "2022-06-23T11:06:06.222Z",
                      "updated_at": null,
                      "metadata": null,
                      "object": "reward"
                    }
                  },
                  "Discount Coupon": {
                    "value": {
                      "id": "rew_Jhq0ecLGSx8eF4pFdlhFr9P6",
                      "name": "20% discount",
                      "type": "CAMPAIGN",
                      "parameters": {
                        "campaign": {
                          "id": "camp_4B1jDE63pCeSij3HU7gx3gPT",
                          "type": "DISCOUNT_COUPONS"
                        }
                      },
                      "stock": null,
                      "redeemed": null,
                      "attributes": {},
                      "created_at": "2022-08-11T09:52:39.032Z",
                      "updated_at": null,
                      "metadata": {},
                      "object": "reward"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/reward-assignments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ]
    },
    "/v1/loyalties/{campaignId}/rewards": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        }
      ]
    },
    "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "Unique reward assignment ID."
        }
      ],
      "get": {
        "operationId": "get-reward-assignment-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Reward Assignment",
        "description": "Retrieve specific reward assignment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns specific reward assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesRewardAssignmentsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_1gJ6VyYQI0IcnEvhArbr9XFH",
                      "reward_id": "rew_injbwG52POgfpSogTlQl4hA6",
                      "related_object_id": "camp_Vr97XXNOnFEUIMFymKK99FAA",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 10
                        }
                      },
                      "created_at": "2022-06-13T11:56:49.185Z",
                      "updated_at": null,
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/rewards/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the \`name\` of the campaign as the path parameter value, e.g., \`Loyalty%20Campaign\`. "
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "A unique reward assignment ID."
        }
      ],
      "get": {
        "operationId": "get-reward-assignment-2",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Reward Assignment",
        "description": "Retrieve specific reward assignment.\\n\\n> 📘 Alternative endpoint\\n>\\n> This endpoint is an alternative to this [endpoint](ref:get-reward-assignment-2). ",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns specific reward assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesRewardsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "rewa_1gJ6VyYQI0IcnEvhArbr9XFH",
                      "reward_id": "rew_injbwG52POgfpSogTlQl4hA6",
                      "related_object_id": "camp_Vr97XXNOnFEUIMFymKK99FAA",
                      "related_object_type": "campaign",
                      "parameters": {
                        "loyalty": {
                          "points": 10
                        }
                      },
                      "created_at": "2022-06-13T11:56:49.185Z",
                      "updated_at": null,
                      "object": "reward_assignment"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-reward-assignment-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Delete Reward Assignment",
        "description": "This method deletes a reward assignment for a particular loyalty campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/members/{memberId}/redemption": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ],
      "post": {
        "operationId": "redeem-reward-1",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Redeem Reward",
        "description": "Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a redemption object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemResponseBody"
                },
                "examples": {
                  "Redeem Reward that adds points to a loyalty card": {
                    "value": {
                      "id": "r_0c6b3abbfe8e60a9dd",
                      "object": "redemption",
                      "date": "2023-02-06T09:07:55.514Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6887
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:07:55.515Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 9,
                          "redeemed_points": 1113,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_BpytIepuSekuXXwb9qkLJfCU",
                        "voucher": {
                          "id": "v_pQZDYaH8LzoOvgh3234DqZQjGJgbPov6",
                          "code": "LOYALTY-CARD-zOR2sV9Q",
                          "campaign": "Loyalty Program",
                          "campaign_id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                          "category": null,
                          "category_id": null,
                          "categories": [],
                          "type": "LOYALTY_CARD",
                          "discount": null,
                          "gift": null,
                          "loyalty_card": {
                            "points": 1020,
                            "balance": 890
                          },
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX1/THRRj1QegAan0r5U+wRoHuFEA6FR7TrvZm8N+8cK7niF/8uAqFdVYTU1JD0/CdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU+YrPDeT2HCB7o0Ts7h1FnbD85+0F7lwrbKmkGW6kub0mjCaRdJYS/axIAq4=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FTHRRj1QegAan0r5U%2BwRoHuFEA6FR7TrvZm8N%2B8cK7niF%2F8uAqFdVYTU1JD0%2FCdoSXlYqiGgz3PAFOGWFSJt8vkM50fcMtMNLsaudU%2BYrPDeT2HCB7o0Ts7h1FnbD85%2B0F7lwrbKmkGW6kub0mjCaRdJYS%2FaxIAq4%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX1+yREd0zRAfZY9uwtMZsl4eDd8+LeiKGVI5OzOQRpjhtV91IuEe7/SXEW8m4F2Llg2//yieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb+kZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2ByREd0zRAfZY9uwtMZsl4eDd8%2BLeiKGVI5OzOQRpjhtV91IuEe7%2FSXEW8m4F2Llg2%2F%2FyieX2zsP3UtWasWxw8ZkHMRSIdxfxzSdSj8ap0dI5xwKW4OE1Q6Sgsb%2BkZVfCKUHbwXCcd8y5a6xTpVIg97y74Ng1Vg2PY%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-11T08:19:28.780Z",
                          "updated_at": "2023-01-25T15:44:33.500Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 26,
                            "redeemed_points": 130,
                            "object": "list",
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/LOYALTY-CARD-zOR2sV9Q/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_7ZM476Q77dH5KvHk4KzoRNvF",
                        "object": "reward",
                        "name": "Present on Loyalty Card",
                        "created_at": "2023-01-25T15:43:40.716Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_Hpt5hPTA8kSKRWGxBGw8Y0So",
                            "balance": 20,
                            "type": "LOYALTY_PROGRAM"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Redeem Reward that adds credits to a gift card": {
                    "value": {
                      "id": "r_0c6b3bedf3478a0167",
                      "object": "redemption",
                      "date": "2023-02-06T09:13:08.813Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 1,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6886
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:13:08.814Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 10,
                          "redeemed_points": 1114,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_U554pL2BhDIDZOvZ8y9YQ9hA",
                        "voucher": {
                          "id": "v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk",
                          "code": "GIFT-CARD-xwc6X7Tk",
                          "campaign": "Gift Cards",
                          "campaign_id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                          "category": null,
                          "category_id": "cat_0bb81a481615a37b5e",
                          "categories": [],
                          "type": "GIFT_VOUCHER",
                          "discount": null,
                          "gift": {
                            "amount": 59080,
                            "balance": 48780
                          },
                          "loyalty_card": null,
                          "start_date": null,
                          "expiration_date": null,
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM/aTyHCYfr7kRWb2vv08WIgY/Tv53SJGW+k2keqfsTq/Ohb5shkCN3FTFsaI8gulTp616sEGn/JJoIInIoNkO9Vd1+AfrKiAjmirCmekE6cz2SVCyNAXs=",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19SdT2kQZokSFsMRa5NmGvsHunHReeb4gF9b5LtLA4rCTM%2FaTyHCYfr7kRWb2vv08WIgY%2FTv53SJGW%2Bk2keqfsTq%2FOhb5shkCN3FTFsaI8gulTp616sEGn%2FJJoIInIoNkO9Vd1%2BAfrKiAjmirCmekE6cz2SVCyNAXs%3D"
                            },
                            "barcode": {
                              "id": "U2FsdGVkX18vWc/qplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO/199U+zicnFNWqg/jF5ZCQW+6jO1q8=",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18vWc%2FqplwajJz4RIIy2wDUcAXVo1KEmyXx2IJy44xxHg608po3RizU9OYOzKelOAEjXFf7E4BS5Q01s4dds8Du70LGAp3idYMKAaXIjMTcFjMNczNO6ULK7r4eDx2Np8jvO%2F199U%2BzicnFNWqg%2FjF5ZCQW%2B6jO1q8%3D"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2022-07-08T09:44:33.179Z",
                          "updated_at": "2023-01-25T14:42:25.214Z",
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 7,
                            "redeemed_amount": 10300,
                            "object": "list",
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/GIFT-CARD-xwc6X7Tk/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_6bvM4vnaVdbPVQxYpuN37rhH",
                        "object": "reward",
                        "name": "Present Credits on Gift Card",
                        "created_at": "2023-01-25T14:41:31.858Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                            "balance": 4000,
                            "type": "GIFT_VOUCHERS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 1
                      }
                    }
                  },
                  "Redeem Reward that gives a discount coupon": {
                    "value": {
                      "id": "r_0c6b3ca77e0e60b534",
                      "object": "redemption",
                      "date": "2023-02-06T09:16:18.808Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 2,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6884
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:16:18.809Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 11,
                          "redeemed_points": 1116,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_0ZwLAHgeU9IrI2V1ofYRmW7g",
                        "voucher": {
                          "id": "v_a3Ba1neDwPa3rBE0HkDd0C7CbiehBulo",
                          "code": "HAPPY-ORDERctb",
                          "campaign": "$20 off the entire order",
                          "campaign_id": "camp_5h0wc453_4",
                          "category": null,
                          "category_id": "cat_0b688929a2476386a6",
                          "categories": [],
                          "type": "DISCOUNT_VOUCHER",
                          "discount": {
                            "type": "AMOUNT",
                            "amount_off": 2000,
                            "effect": "APPLY_TO_ORDER"
                          },
                          "gift": null,
                          "loyalty_card": null,
                          "start_date": "2022-09-20T00:00:00.000Z",
                          "expiration_date": "2022-09-30T00:00:00.000Z",
                          "validity_timeframe": null,
                          "validity_day_of_week": null,
                          "active": true,
                          "additional_info": null,
                          "metadata": {},
                          "assets": {
                            "qr": {
                              "id": "7d646e7d-9b5a-40b6-a44e-6bae848e108e",
                              "url": "https://dl.voucherify.io/api/v1/assets/qr/7d646e7d-9b5a-40b6-a44e-6bae848e108e"
                            },
                            "barcode": {
                              "id": "dfb3e48d-ce4f-4187-a114-483feb4ca88d",
                              "url": "https://dl.voucherify.io/api/v1/assets/barcode/dfb3e48d-ce4f-4187-a114-483feb4ca88d"
                            }
                          },
                          "is_referral_code": false,
                          "created_at": "2023-02-06T09:16:18.845Z",
                          "updated_at": null,
                          "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "redemption": {
                            "quantity": null,
                            "redeemed_quantity": 0,
                            "object": "list",
                            "url": "/v1/vouchers/HAPPY-ORDERctb/redemptions?page=1&limit=10"
                          },
                          "publish": {
                            "object": "list",
                            "count": 1,
                            "url": "/v1/vouchers/HAPPY-ORDERctb/publications?page=1&limit=10"
                          },
                          "object": "voucher"
                        },
                        "id": "rew_MF4hKh1IKYgJkPjbcFbH94Ho",
                        "object": "reward",
                        "name": "Digital Present",
                        "created_at": "2023-01-25T12:16:44.557Z",
                        "updated_at": null,
                        "parameters": {
                          "campaign": {
                            "id": "camp_5h0wc453_4",
                            "type": "DISCOUNT_COUPONS"
                          }
                        },
                        "type": "CAMPAIGN"
                      },
                      "loyalty_card": {
                        "points": 2
                      }
                    }
                  },
                  "Redeem a Material reward of a SKU type": {
                    "value": {
                      "id": "r_0c6b3d1357878a0813",
                      "object": "redemption",
                      "date": "2023-02-06T09:18:09.246Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 6,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6878
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:18:09.247Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 12,
                          "redeemed_points": 1122,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_gfpRNkOT0pwzF7P5tXWXOs4H",
                        "product": {
                          "id": "prod_5h0wc453_2",
                          "source_id": "jonah-nystrom-bourbon",
                          "name": "Johan & Nyström - Bourbon",
                          "price": null,
                          "attributes": [
                            "categories",
                            "description",
                            "weight"
                          ],
                          "metadata": {
                            "company": "Johan & Nyström",
                            "showcase": true
                          },
                          "image_url": null,
                          "created_at": "2021-12-01T08:00:49.418Z",
                          "updated_at": null,
                          "object": "product"
                        },
                        "sku": {
                          "id": "sku_0a3efc9044dd121803",
                          "source_id": "jonah-nystrom-bourbon-250g",
                          "product_id": "prod_5h0wc453_2",
                          "sku": "250g",
                          "price": 1750,
                          "currency": null,
                          "attributes": {
                            "categories": "Coffee, Whole Bean",
                            "description": "Background for this blend comes from the longing for a real dark roasting of high-quality coffee beans. Although the beans are dark roasted, they keep their clear and intense aroma. This coffee has a smoky flavour with a slight hint of sweetness and loads of fruit notes. Thanks to the experience in the dark roasting of coffee, the beans still retain most of their aromas. Its aftertaste is clear and remains for a long time. This coffee is perfect for a Dripper, French Press, Moka coffee maker and the traditional espresso brewing method.",
                            "weight": 250
                          },
                          "image_url": null,
                          "metadata": {},
                          "created_at": "2021-12-01T08:00:49.427Z",
                          "updated_at": null,
                          "object": "sku"
                        },
                        "id": "rew_SfQCsap5R8UBTVbdMTRx10x8",
                        "object": "reward",
                        "name": "Present - SKU",
                        "created_at": "2023-01-25T12:10:16.060Z",
                        "updated_at": "2023-01-25T12:10:59.662Z",
                        "parameters": {
                          "product": {
                            "id": "prod_5h0wc453_2",
                            "sku_id": "sku_0a3efc9044dd121803"
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 6
                      }
                    }
                  },
                  "Redeem a Material Reward of a Product Type": {
                    "value": {
                      "id": "r_0c6b3d8c35546f8673",
                      "object": "redemption",
                      "date": "2023-02-06T09:20:13.013Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 4,
                      "result": "SUCCESS",
                      "order": null,
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@voucherify.io",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 6874
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:20:13.014Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 13,
                          "redeemed_points": 1126,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@voucherify.io",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_LRx3Y1iHFWTt217NVrknkpi5",
                        "product": {
                          "id": "prod_0b2c2ddf35150b83bb",
                          "source_id": "97",
                          "name": "[Sample] Tiered Wire Basket",
                          "price": 11995,
                          "attributes": [],
                          "metadata": {
                            "source": "bigcommerce",
                            "bigcommerce_product_categories": [
                              21,
                              23
                            ]
                          },
                          "image_url": null,
                          "created_at": "2022-06-03T13:36:16.084Z",
                          "updated_at": "2022-06-07T09:10:44.644Z",
                          "object": "product"
                        },
                        "id": "rew_EPx1hCTpqzF0HW1z9NKckZH4",
                        "object": "reward",
                        "name": "Present",
                        "created_at": "2022-06-13T06:59:01.694Z",
                        "updated_at": "2023-02-03T15:04:14.102Z",
                        "parameters": {
                          "product": {
                            "id": "prod_0b2c2ddf35150b83bb",
                            "sku_id": null
                          }
                        },
                        "type": "MATERIAL"
                      },
                      "loyalty_card": {
                        "points": 4
                      }
                    }
                  },
                  "Redeem Pay with Points Reward": {
                    "value": {
                      "id": "r_0c6b4142ecc78a21d0",
                      "object": "redemption",
                      "date": "2023-02-06T09:36:26.547Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 2300,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_QBnrJlVWA2EEiZoKOptFROnp",
                        "source_id": null,
                        "created_at": "2023-02-06T09:36:26.503Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 45000,
                        "discount_amount": 45000,
                        "total_discount_amount": 45000,
                        "total_amount": 0,
                        "applied_discount_amount": 45000,
                        "total_applied_discount_amount": 45000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0c5d6689b39320059b",
                            "quantity": 1,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8"
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 2,
                            "amount": 45000,
                            "price": 22500,
                            "subtotal_amount": 45000,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c6b4142ecc78a21d0": {
                            "date": "2023-02-06T09:36:26.547Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8000,
                          "balance": 4574
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:36:26.548Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 14,
                          "redeemed_points": 3426,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
                        "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                        "object": "reward",
                        "name": "100 = $20",
                        "created_at": "2022-11-10T06:28:39.582Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 20,
                            "points_ratio": 100
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 2300
                      }
                    }
                  },
                  "Redeem Pay with Points Reward with a specific amount of points": {
                    "value": {
                      "id": "r_0c6b423368146fa4bb",
                      "object": "redemption",
                      "date": "2023-02-06T09:40:32.800Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 100,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_1L67XS8EYDDp5A4B3k62G2tr",
                        "source_id": null,
                        "created_at": "2023-02-06T09:40:32.784Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 45000,
                        "discount_amount": 2000,
                        "total_discount_amount": 2000,
                        "total_amount": 43000,
                        "applied_discount_amount": 2000,
                        "total_applied_discount_amount": 2000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0c5d6689b39320059b",
                            "quantity": 1,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8"
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 2,
                            "amount": 45000,
                            "price": 22500,
                            "subtotal_amount": 45000,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c6b423368146fa4bb": {
                            "date": "2023-02-06T09:40:32.800Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 8500,
                          "balance": 4974
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T09:40:32.801Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 15,
                          "redeemed_points": 3526,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
                        "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                        "object": "reward",
                        "name": "100 = $20",
                        "created_at": "2022-11-10T06:28:39.582Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 20,
                            "points_ratio": 100
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemRequestBody"
              },
              "examples": {
                "Pay with Points": {
                  "value": {
                    "reward": {
                      "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                      "points": 100
                    },
                    "order": {
                      "items": [
                        {
                          "product_id": "prod_0c5d6689b39320059b",
                          "quantity": "1"
                        },
                        {
                          "product_id": "prod_0b2c36568000039138",
                          "quantity": "2"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/redemption": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "post": {
        "operationId": "redeem-reward",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Redeem Reward",
        "description": "<!-- theme: info -->\\n> 📘 Alternative endpoint\\n>\\n> This endpoint is an alternative to this <!-- [endpoint](OpenAPI.json/paths/~1loyalties~1{campaignId}~1members~1{memberId}~1redemption) -->[endpoint](ref:redeem-reward-1). The URL was re-designed to allow you to redeem a reward without having to provide the \`campaignId\` as a path parameter.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a redemption object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemResponseBody"
                },
                "examples": {
                  "Redeem Pay with Points Reward with a specific number of Points": {
                    "value": {
                      "id": "r_0c6b4bf721439bf02b",
                      "object": "redemption",
                      "date": "2023-02-06T10:23:12.517Z",
                      "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "metadata": null,
                      "amount": 100,
                      "result": "SUCCESS",
                      "order": {
                        "id": "ord_71Ayjxq2gFV80v3OP3qrxh37",
                        "source_id": null,
                        "created_at": "2023-02-06T10:23:12.485Z",
                        "updated_at": null,
                        "status": "PAID",
                        "amount": 45000,
                        "discount_amount": 2000,
                        "total_discount_amount": 2000,
                        "total_amount": 43000,
                        "applied_discount_amount": 2000,
                        "total_applied_discount_amount": 2000,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_0c5d6689b39320059b",
                            "quantity": 1,
                            "product": {
                              "id": "prod_0c5d6689b39320059b",
                              "source_id": "prod_anJ03RZZq74z4v",
                              "name": "Apple iPhone 8"
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0b2c36568000039138",
                            "quantity": 2,
                            "amount": 45000,
                            "price": 22500,
                            "subtotal_amount": 45000,
                            "product": {
                              "id": "prod_0b2c36568000039138",
                              "source_id": "86",
                              "name": "[Sample] Able Brewing System",
                              "price": 22500
                            }
                          }
                        ],
                        "metadata": {},
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "object": "customer"
                        },
                        "customer_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "referrer_id": null,
                        "object": "order",
                        "redemptions": {
                          "r_0c6b4bf721439bf02b": {
                            "date": "2023-02-06T10:23:12.517Z",
                            "related_object_type": "voucher",
                            "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                            "related_object_parent_id": "camp_22noMlhTADb7Fq2UL3vWu3d1"
                          }
                        }
                      },
                      "customer": {
                        "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "name": "Bob Jones",
                        "email": "bob.jones@email.com",
                        "source_id": "36_bob",
                        "metadata": {
                          "age": 26,
                          "favorite_brands": [
                            "Nike",
                            "Adidas",
                            "Reebok"
                          ],
                          "accepts_marketing": false,
                          "acquisition_channel": "Facebook"
                        },
                        "object": "customer"
                      },
                      "related_object_type": "voucher",
                      "related_object_id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                      "voucher": {
                        "id": "v_u3dRiZ0XHqX5Euhy5ezB5UQ5Sf85VXFP",
                        "code": "AnsvocvP",
                        "campaign": "Loyalty Campaign - Test Points",
                        "campaign_id": "camp_22noMlhTADb7Fq2UL3vWu3d1",
                        "category": null,
                        "category_id": "cat_0bb81a481615a37b5e",
                        "categories": [],
                        "type": "LOYALTY_CARD",
                        "discount": null,
                        "gift": null,
                        "loyalty_card": {
                          "points": 9000,
                          "balance": 5374
                        },
                        "start_date": null,
                        "expiration_date": null,
                        "validity_timeframe": null,
                        "validity_day_of_week": null,
                        "active": true,
                        "additional_info": null,
                        "metadata": {},
                        "assets": {
                          "qr": {
                            "id": "U2FsdGVkX1/Au841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm+d2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO+qL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w==",
                            "url": "https://dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2FAu841M0T7UjYYRxYTzCRbNdZW6jW5YRNcV9PgblvN2MD5hdRuZfBRHEAm%2Bd2pvzc2FOVHFkuh9BQoaIq4KVyvy0FvkWtKkMLe4zO%2BqL4ocNUIbaRMSLeY6Xiz4hjxKNq918oLyGrp9w%3D%3D"
                          },
                          "barcode": {
                            "id": "U2FsdGVkX1+xG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA/8H4gu04dxO/hrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY+8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw==",
                            "url": "https://dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BxG42zWo9nivfp6tg5jNuFCYOIFtw7iwas8kcA%2F8H4gu04dxO%2FhrbD41gFvxDhCuTSnIKwIPg9dEXzOvh8qy9VWN0UwDc6PL7lfNQuY%2B8Os7dqVsyNhoRned9pBo1uO6V4pjNu1gRTrw%3D%3D"
                          }
                        },
                        "is_referral_code": false,
                        "created_at": "2022-11-10T06:28:59.970Z",
                        "updated_at": "2023-02-06T10:23:12.517Z",
                        "holder_id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                        "holder": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "validation_rules_assignments": {
                          "object": "list",
                          "data_ref": "data",
                          "data": [],
                          "total": 0
                        },
                        "redemption": {
                          "quantity": null,
                          "redeemed_quantity": 16,
                          "redeemed_points": 3626,
                          "object": "list",
                          "url": "/v1/vouchers/AnsvocvP/redemptions?page=1&limit=10"
                        },
                        "publish": {
                          "object": "list",
                          "count": 1,
                          "url": "/v1/vouchers/AnsvocvP/publications?page=1&limit=10"
                        },
                        "object": "voucher",
                        "applicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        },
                        "inapplicable_to": {
                          "data": [],
                          "total": 0,
                          "data_ref": "data",
                          "object": "list"
                        }
                      },
                      "reward": {
                        "customer": {
                          "id": "cust_eWgXlBBiY6THFRJwX45Iakv4",
                          "name": "Bob Jones",
                          "email": "bob.jones@email.com",
                          "source_id": "36_bob",
                          "metadata": {
                            "age": 26,
                            "favorite_brands": [
                              "Nike",
                              "Adidas",
                              "Reebok"
                            ],
                            "accepts_marketing": false,
                            "acquisition_channel": "Facebook"
                          },
                          "object": "customer"
                        },
                        "assignment_id": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
                        "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                        "object": "reward",
                        "name": "100 = $20",
                        "created_at": "2022-11-10T06:28:39.582Z",
                        "updated_at": null,
                        "parameters": {
                          "coin": {
                            "exchange_ratio": 20,
                            "points_ratio": 100
                          }
                        },
                        "type": "COIN"
                      },
                      "loyalty_card": {
                        "points": 100
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesMembersRedemptionRedeemRequestBody"
              },
              "examples": {
                "Pay with Points": {
                  "value": {
                    "reward": {
                      "id": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
                      "points": 100
                    },
                    "order": {
                      "items": [
                        {
                          "product_id": "prod_0c5d6689b39320059b",
                          "quantity": "1"
                        },
                        {
                          "product_id": "prod_0b2c36568000039138",
                          "quantity": "2"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty campaign ID or name."
        }
      ],
      "get": {
        "operationId": "list-loyalty-tiers",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Tiers",
        "description": "Retrieve a list of loyalty tiers which were added to the loyalty program.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListLoyaltyTiers"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of loyalty tier objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "ltr_30KHciA0UG8B71Fo51GZqwgN",
                          "name": "Bottom",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {},
                          "created_at": "2022-11-10T12:20:52.755Z",
                          "updated_at": "2022-11-25T11:27:58.616Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 1
                            },
                            "ern_raVUcdXruvXGuzm682ESrAzt": {
                              "type": "CUSTOM",
                              "points": 5
                            }
                          },
                          "rewards": {
                            "rewa_t88DnSdNnE0IzQX6gqH3jHGQ": {
                              "type": "MULTIPLY",
                              "multiplier": 4
                            }
                          },
                          "config": {
                            "points": {
                              "from": 1,
                              "to": 249
                            }
                          },
                          "points": {
                            "from": 1,
                            "to": 249
                          },
                          "object": "loyalty_tier"
                        },
                        {
                          "id": "ltr_pudTGWasuIqxdiDM0go31OV1",
                          "name": "Middle",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {},
                          "created_at": "2022-11-10T12:20:52.755Z",
                          "updated_at": "2022-11-25T11:27:58.579Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 2
                            }
                          },
                          "rewards": {},
                          "config": {
                            "points": {
                              "from": 250,
                              "to": 499
                            }
                          },
                          "points": {
                            "from": 250,
                            "to": 499
                          },
                          "object": "loyalty_tier"
                        },
                        {
                          "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                          "name": "Tier 1 - Top",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {
                            "has_funds": true
                          },
                          "created_at": "2022-11-09T06:26:54.797Z",
                          "updated_at": "2022-11-25T11:27:58.578Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_AdlWO2yt6b6llWsibIdiRXVE": {
                              "type": "MULTIPLY",
                              "multiplier": 5
                            },
                            "ern_HnRXyJHoj3E79r3KUWhgMgtD": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_raVUcdXruvXGuzm682ESrAzt": {
                              "type": "CUSTOM",
                              "points": 200
                            }
                          },
                          "rewards": {
                            "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k": {
                              "type": "CUSTOM",
                              "points": 300
                            }
                          },
                          "config": {
                            "points": {
                              "from": 500,
                              "to": 1000
                            }
                          },
                          "points": {
                            "from": 500,
                            "to": 1000
                          },
                          "object": "loyalty_tier"
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-in-bulk-loyalty-tiers",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Create loyalty tiers",
        "description": "Creates loyalty tiers for desired campaign.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns created loyalty tiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersCreateInBulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Provide tier definitions you want to add to existing loyalty campaign.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltiesTiersCreateInBulkRequestBody"
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterLoyaltyTierId"
          },
          "name": "loyaltyTierId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty tier ID."
        }
      ],
      "get": {
        "operationId": "get-loyalty-tier",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "Get Loyalty Tier",
        "description": "Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a loyalty tier object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                      "name": "Tier 1 - Top",
                      "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                      "metadata": {
                        "has_funds": true
                      },
                      "created_at": "2022-11-09T06:26:54.797Z",
                      "updated_at": "2022-11-25T11:27:58.578Z",
                      "earning_rules": {
                        "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                          "type": "MULTIPLY",
                          "multiplier": 3
                        },
                        "ern_AdlWO2yt6b6llWsibIdiRXVE": {
                          "type": "MULTIPLY",
                          "multiplier": 5
                        },
                        "ern_HnRXyJHoj3E79r3KUWhgMgtD": {
                          "type": "MULTIPLY",
                          "multiplier": 3
                        },
                        "ern_raVUcdXruvXGuzm682ESrAzt": {
                          "type": "CUSTOM",
                          "points": 200
                        }
                      },
                      "rewards": {
                        "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k": {
                          "type": "CUSTOM",
                          "points": 300
                        }
                      },
                      "config": {
                        "points": {
                          "from": 500,
                          "to": 1000
                        }
                      },
                      "points": {
                        "from": 500,
                        "to": 1000
                      },
                      "object": "loyalty_tier"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/members/{memberId}/tiers": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterMemberId"
          },
          "name": "memberId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty card assigned to a particular customer."
        }
      ],
      "get": {
        "operationId": "list-member-loyalty-tier",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Member's Loyalty Tiers",
        "description": "Retrieve member tiers using the loyalty card ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a data array containing the member's loyalty tiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesMembersTiersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                          "name": "Tier 1 - Top",
                          "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                          "metadata": {
                            "has_funds": true
                          },
                          "created_at": "2022-11-09T06:26:54.797Z",
                          "updated_at": "2022-11-25T11:27:58.578Z",
                          "earning_rules": {
                            "ern_95aq3JaE5A8xzHjoJPYNRqXZ": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_AdlWO2yt6b6llWsibIdiRXVE": {
                              "type": "MULTIPLY",
                              "multiplier": 5
                            },
                            "ern_HnRXyJHoj3E79r3KUWhgMgtD": {
                              "type": "MULTIPLY",
                              "multiplier": 3
                            },
                            "ern_raVUcdXruvXGuzm682ESrAzt": {
                              "type": "CUSTOM",
                              "points": 200
                            }
                          },
                          "rewards": {
                            "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k": {
                              "type": "CUSTOM",
                              "points": 300
                            }
                          },
                          "config": {
                            "points": {
                              "from": 500,
                              "to": 1000
                            }
                          },
                          "points": {
                            "from": 500,
                            "to": 1000
                          },
                          "expiration": {
                            "customer_id": "cust_qBwHpagDOFu71Z3F22UzR80X",
                            "campaign_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "tier_id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2",
                            "start_date": "2022-11-10",
                            "expiration_date": "2023-02-28",
                            "created_at": "2022-11-09T11:26:26.719Z",
                            "updated_at": "2022-11-10T08:54:47.200Z"
                          },
                          "object": "loyalty_tier"
                        }
                      ],
                      "total": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterLoyaltyTierId"
          },
          "name": "loyaltyTierId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty tier ID."
        }
      ],
      "get": {
        "operationId": "list-loyalty-tier-earning-rules",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Tier Earning Rules",
        "description": "Retrieve available earning rules for a given tier and the calculation method for earning points.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of earning rules for a given tier. The object for each earning rule also contains information about how the points are calculated; this includes mapping. If a specific multiplier was used to calculate points for a given tier, then the \`loyalty.points\` parameter will account for this calculation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersEarningRulesListResponseBody"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "ern_95aq3JaE5A8xzHjoJPYNRqXZ",
                          "created_at": "2022-11-09T06:26:54.332Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 1,
                                "points": 300,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.joined",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Tier Joined",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_bfi69WIbztany4iX6prkKbGN",
                          "metadata": {
                            "Type": "Joined Any"
                          }
                        },
                        {
                          "id": "ern_HnRXyJHoj3E79r3KUWhgMgtD",
                          "created_at": "2022-11-10T12:25:12.927Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 300,
                            "type": "FIXED"
                          },
                          "segment": {
                            "id": "seg_n3vVcU5t0m3rs4rEPr3C1oU5"
                          },
                          "event": "customer.segment.entered",
                          "source": {
                            "banner": "New Customers",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_0gv3v7jQG5U6TtVC8bMEdIap",
                          "metadata": {}
                        },
                        {
                          "id": "ern_raVUcdXruvXGuzm682ESrAzt",
                          "created_at": "2022-11-24T09:03:14.534Z",
                          "updated_at": "2022-11-25T09:48:26.284Z",
                          "validation_rule_id": "val_7SxpdhPeBngA",
                          "loyalty": {
                            "points": 20,
                            "type": "FIXED"
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order has been paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "start_date": "2022-11-23T00:00:00.000Z",
                          "expiration_date": "2022-11-30T00:00:00.000Z",
                          "validity_day_of_week": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "object": "earning_rule",
                          "automation_id": "auto_MbEIyLbn7pHyba5Qw5eeb35L",
                          "metadata": {
                            "Type": "Order has been paid - Fixed"
                          }
                        },
                        {
                          "id": "ern_BmDiQs7T3UHfJQqtI2RfJHFR",
                          "created_at": "2022-11-24T14:48:36.567Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_AMOUNT",
                            "order": {
                              "amount": {
                                "every": 1000,
                                "points": 1
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_IKanVw37J6oFuRrdnryXw8Lz",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 1"
                          }
                        },
                        {
                          "id": "ern_jwtacKdEEHoc85QbouRw3CR8",
                          "created_at": "2022-11-24T15:17:11.539Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_TOTAL_AMOUNT",
                            "order": {
                              "total_amount": {
                                "every": 1100,
                                "points": 1
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order has been paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_Y6IWqhz0cHGkKcteU9PS5nmK",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 2"
                          }
                        },
                        {
                          "id": "ern_fxVdmtJ4u4rlyoH2hIq7m1PQ",
                          "created_at": "2022-11-24T15:20:04.392Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_METADATA",
                            "order": {
                              "metadata": {
                                "every": 10,
                                "points": 2,
                                "property": "number_of_store_visits"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_HyowcdKQ0lsQ1rSxV5tyYr2z",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 3 - Metadata"
                          }
                        },
                        {
                          "id": "ern_Aop1wTrmPv4yBntDcvXNTCWR",
                          "created_at": "2022-11-24T15:23:44.514Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_ITEMS_AMOUNT",
                            "order_items": {
                              "amount": {
                                "every": 1000,
                                "points": 3,
                                "object": "products_collection",
                                "id": "pc_75U0dHlr7u75BJodrW1AE3t6"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_EXRyQ0z0rgtF54PKDGGAF1qg",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 4"
                          }
                        },
                        {
                          "id": "ern_4qSQVjfGEH7OmXKMzotS0juY",
                          "created_at": "2022-11-24T15:44:45.301Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_ITEMS_SUBTOTAL_AMOUNT",
                            "order_items": {
                              "subtotal_amount": {
                                "every": 1000,
                                "points": 4,
                                "object": "sku",
                                "id": "sku_0b7d7dfb090be5c619"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_ID3xLPXCdnOaveJYWiulcNFW",
                          "metadata": {
                            "Type": "Order has been paid - Proportional - 5 - Items"
                          }
                        },
                        {
                          "id": "ern_aJyt4wIrXhmfMxvrLoZjBYrP",
                          "created_at": "2022-11-24T15:56:58.710Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "ORDER_ITEMS_AMOUNT",
                            "order_items": {
                              "amount": {
                                "every": 10000,
                                "points": 1,
                                "object": "product",
                                "id": "prod_0bae32322150fd0546"
                              }
                            }
                          },
                          "event": "order.paid",
                          "source": {
                            "banner": "Order paid",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_EbBqD1SNW70vgDp5icGbWl3e",
                          "metadata": {}
                        },
                        {
                          "id": "ern_v4Blmh9hA3gpnjo93cMAgvHr",
                          "created_at": "2022-11-24T16:19:20.571Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 1,
                                "points": 5,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "segment": {
                            "id": "seg_OlE7DmfzMI5pHyD5VAv512r1"
                          },
                          "event": "customer.segment.entered",
                          "source": {
                            "banner": "Entered Segment",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_wMMDJ86iHKkznz9x0506e30E",
                          "metadata": {}
                        },
                        {
                          "id": "ern_L8dFanPxJzhw0f5voTwPurGP",
                          "created_at": "2022-11-24T16:27:13.917Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 3,
                            "type": "FIXED"
                          },
                          "custom_event": {
                            "schema_id": "ms_gn4Qe4xsFPf7orCArCiNVY13"
                          },
                          "event": "page_view",
                          "source": {
                            "banner": "Custom Event",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_9N69OJzGKGhp2mo7SNsnsF5b",
                          "metadata": {
                            "Type": "Fixed"
                          }
                        },
                        {
                          "id": "ern_ngdugZ2hzg35hGASFF8nDjUO",
                          "created_at": "2022-11-24T16:41:48.830Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOM_EVENT_METADATA",
                            "custom_event": {
                              "metadata": {
                                "every": 2,
                                "points": 2,
                                "property": "volume_number"
                              }
                            }
                          },
                          "custom_event": {
                            "schema_id": "ms_qpRZ3EmRQyszNH6Z52Gkq8au"
                          },
                          "event": "user_subscribed",
                          "source": {
                            "banner": "Custom Event",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_v1eTxL7X63B5IkYgRWHK4leh",
                          "metadata": {
                            "Type": "Event"
                          }
                        },
                        {
                          "id": "ern_afo3Ea760hAKv07JYpycnhiE",
                          "created_at": "2022-11-24T16:50:12.945Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 3,
                                "points": 3,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "custom_event": {
                            "schema_id": "ms_f0r4hcu5T0m3v3nT5ch3ma"
                          },
                          "event": "cart_abandoned",
                          "source": {
                            "banner": "Custom Event",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_7ovoKiXx49fe3nnhEbDlp9FP",
                          "metadata": {}
                        },
                        {
                          "id": "ern_chdlG14W8Sdcq3d6jJQQgRMT",
                          "created_at": "2022-11-24T16:51:31.595Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 1,
                            "type": "FIXED"
                          },
                          "event": "customer.loyalty.tier.joined",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Tier joined - Any",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_W9yMQTz5fgQTgmuu6pTVraBW",
                          "metadata": {
                            "Type": "Tier joined  - any - fixed"
                          }
                        },
                        {
                          "id": "ern_gVo6CHBduFPoh1hctASfXHLT",
                          "created_at": "2022-11-24T17:01:42.809Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 4,
                                "points": 4,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.joined",
                          "loyalty_tier": {
                            "id": "ltr_pudTGWasuIqxdiDM0go31OV1"
                          },
                          "source": {
                            "banner": "Tier joined",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_wdlEo17wmoqYHGfilbayEUj7",
                          "metadata": {
                            "Type": "Tier joined - customer metadata - proportional"
                          }
                        },
                        {
                          "id": "ern_66OdCyLADv5IGFoQe18vGUwa",
                          "created_at": "2022-11-24T17:03:59.414Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 2,
                                "points": 2,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.left",
                          "loyalty_tier": {
                            "id": "ltr_7rVIPlPzdSFwpnbCcUXgwzH2"
                          },
                          "source": {
                            "banner": "Tier left",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_czm5el1Uz1jeGaO97AYoDNAq",
                          "metadata": {
                            "Type": "Tier left"
                          }
                        },
                        {
                          "id": "ern_YR3fDfCjAmz9a5D68nk0i4dm",
                          "created_at": "2022-11-25T07:29:38.961Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "type": "PROPORTIONAL",
                            "calculation_type": "CUSTOMER_METADATA",
                            "customer": {
                              "metadata": {
                                "every": 3,
                                "points": 4,
                                "property": "customer_life_time_value"
                              }
                            }
                          },
                          "event": "customer.loyalty.tier.upgraded",
                          "loyalty_tier": {
                            "id": "ltr_30KHciA0UG8B71Fo51GZqwgN"
                          },
                          "source": {
                            "banner": "Tier upgraded",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_M1OdRH8spk6Fs7yTuPLN2LAv",
                          "metadata": {
                            "Type": "Upgraded"
                          }
                        },
                        {
                          "id": "ern_A2RArBE30Tkt56utVLrRv7rZ",
                          "created_at": "2022-11-25T07:31:05.866Z",
                          "updated_at": "2022-11-25T09:48:26.506Z",
                          "validation_rule_id": "val_kfmWpfXMI9P1",
                          "loyalty": {
                            "points": 1,
                            "type": "FIXED"
                          },
                          "event": "customer.loyalty.tier.downgraded",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Tier Downgraded",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_TMVZtCNMBgZm0KcPJ7otiHZW",
                          "metadata": {
                            "Type": "Tier"
                          }
                        },
                        {
                          "id": "ern_AdlWO2yt6b6llWsibIdiRXVE",
                          "created_at": "2022-11-25T07:31:42.767Z",
                          "updated_at": null,
                          "validation_rule_id": null,
                          "loyalty": {
                            "points": 25,
                            "type": "FIXED"
                          },
                          "event": "customer.loyalty.tier.prolonged",
                          "loyalty_tier": {
                            "id": "__ANY__"
                          },
                          "source": {
                            "banner": "Prolonged",
                            "object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "object_type": "campaign"
                          },
                          "active": true,
                          "object": "earning_rule",
                          "automation_id": "auto_4jH1yq9WJS0oJ8suagCrltyb",
                          "metadata": {}
                        }
                      ],
                      "total": 19
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCampaignId"
          },
          "name": "campaignId",
          "in": "path",
          "required": true,
          "description": "Unique campaign ID or name."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterLoyaltyTierId"
          },
          "name": "loyaltyTierId",
          "in": "path",
          "required": true,
          "description": "Unique loyalty tier ID."
        }
      ],
      "get": {
        "operationId": "list-loyalty-tier-rewards",
        "tags": [
          "LOYALTIES API"
        ],
        "summary": "List Loyalty Tier Rewards",
        "description": "Get available rewards for a given tier.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of loyalty tier reward objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltiesTiersRewardsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "reward": {
                            "id": "rew_QuWYsBNB2G3fikffjnl0G3gH",
                            "name": "API - Testing",
                            "type": "CAMPAIGN",
                            "parameters": {
                              "campaign": {
                                "id": "camp_jcErmtGAOmHUAy0oUgkwKnPZ",
                                "balance": 500,
                                "type": "LOYALTY_PROGRAM"
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "created_at": "2022-08-25T09:32:04.579424+00:00",
                            "updated_at": "2022-08-25T09:33:46.680639+00:00",
                            "metadata": {
                              "Type": "Second campaign"
                            },
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_3Z2sP0bmqcL0ggU28GvFeHU3",
                            "reward_id": "rew_QuWYsBNB2G3fikffjnl0G3gH",
                            "related_object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 40
                              }
                            },
                            "created_at": "2022-11-23T22:11:58.759092+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_tier_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_XoDgmQ2HZX7qPM6aIEuslObo",
                            "name": "Material",
                            "type": "MATERIAL",
                            "parameters": {
                              "product": {
                                "id": "prod_0b15f6b9f650c16990",
                                "sku_id": "sku_0b1621b319d248b79f"
                              }
                            },
                            "stock": 2,
                            "redeemed": 1,
                            "attributes": {
                              "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_fPH9ohe0pZf4EiIt295sk9Ob.png",
                              "description": "Archie's Series"
                            },
                            "created_at": "2022-08-29T06:02:36.753873+00:00",
                            "updated_at": "2022-11-08T08:01:26.883166+00:00",
                            "metadata": {
                              "Type": "Material"
                            },
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_Or6gWZ5ASuGkBLjOf0IyiD4k",
                            "reward_id": "rew_XoDgmQ2HZX7qPM6aIEuslObo",
                            "related_object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "related_object_type": "campaign",
                            "parameters": {
                              "loyalty": {
                                "points": 30
                              }
                            },
                            "created_at": "2022-11-23T22:11:58.759092+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_tier_reward"
                        },
                        {
                          "reward": {
                            "id": "rew_MVXA2kV7lZ1zC057WUaTrvNz",
                            "name": "100 Points = $20",
                            "type": "COIN",
                            "parameters": {
                              "coin": {
                                "exchange_ratio": 20,
                                "points_ratio": 100
                              }
                            },
                            "stock": null,
                            "redeemed": null,
                            "attributes": {},
                            "created_at": "2022-09-09T06:41:54.496035+00:00",
                            "updated_at": null,
                            "metadata": {},
                            "object": "reward"
                          },
                          "assignment": {
                            "id": "rewa_nMXB59qGTNYawMT8eP8M4oUp",
                            "reward_id": "rew_MVXA2kV7lZ1zC057WUaTrvNz",
                            "related_object_id": "camp_fkZ28pe7DUAEmmabofkxHI8N",
                            "related_object_type": "campaign",
                            "created_at": "2022-11-09T11:01:21.065681+00:00",
                            "updated_at": null,
                            "object": "reward_assignment"
                          },
                          "object": "loyalty_tier_reward"
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers": {
      "get": {
        "operationId": "list-customers",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "List Customers",
        "description": "Returns a list of customers.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "email",
            "description": "Limit the customers to the ones that have this specific email address."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Limit the customers to the ones that are located in the specified city.",
            "name": "city"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Filter customers by the name property.",
            "name": "name"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Filter customers by the segment id.",
            "name": "segment_id"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was created.",
            "name": "created_at[before]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was created.",
            "name": "created_at[after]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was updated last time.",
            "name": "updated_at[before]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "description": "Filter customers by date customer was updated last time.",
            "name": "updated_at[after]"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListCustomers"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. This is a date-time value that defines your place in the list based on \`created_at\` property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at \`2020-05-24T13:43:09.024Z\`, your subsequent call can include \`starting_after=2020-05-24T13:43:09.024Z\` in order to fetch the next page of the list. \\n<!-- title: Options -->\\n| **Option** | **Format** | **Sorting** |\\n|:---|:---|:---|\\n| Return customers **before** a specific creation date  | - set \`starting_after\` parameter to the breakpoint date | Sorting order is **descending**; the most recent dates first and least recent dates last. |\\n| Return customers **after** a specific create or update date | - include the \`order\` parameter set to \`created_at\` or \`updated_at\`<br>- set \`starting_after\` to the breakpoint date | Sorting order is **ascending**; the least recent dates first and the most recent dates last. |\\n"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with customer objects. The customers are returned sorted by creation date, with the most recent customers appearing first.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "customers",
                      "customers": [
                        {
                          "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "source_id": "source_123",
                          "name": "Bob Smith",
                          "description": "A frequent customer",
                          "email": "bob.smith@email.com",
                          "phone": "+1 933 222 3333",
                          "birthdate": "2022-01-01",
                          "address": {
                            "city": "New York",
                            "state": "NY",
                            "line_1": "123 Main St.",
                            "line_2": "APT 3 BLG 5",
                            "country": "United States",
                            "postal_code": "10001"
                          },
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 1,
                              "total_failed": 0,
                              "total_succeeded": 1,
                              "total_rolled_back": 0,
                              "total_rollback_failed": 0,
                              "total_rollback_succeeded": 0,
                              "gift": {
                                "redeemed_amount": 0,
                                "amount_to_go": 0
                              },
                              "loyalty_card": {
                                "redeemed_points": 0,
                                "points_to_go": 4200
                              }
                            },
                            "orders": {
                              "total_amount": 1600,
                              "total_count": 1,
                              "average_amount": 1600,
                              "last_order_amount": 1600,
                              "last_order_date": "2022-08-30T10:17:39.220Z"
                            }
                          },
                          "loyalty": {
                            "points": 2200,
                            "referred_customers": 0,
                            "campaigns": {
                              "Christmas Campaign": {
                                "points": 1000,
                                "referred_customers": 0
                              },
                              "Fall Campaign": {
                                "points": 75,
                                "referred_customers": 0
                              },
                              "Winter Campaign": {
                                "points": 75,
                                "referred_customers": 0
                              },
                              "Summer Campaign": {
                                "points": 50,
                                "referred_customers": 0
                              },
                              "Spring Campaign": {
                                "points": 1000,
                                "referred_customers": 0
                              }
                            }
                          },
                          "referrals": {
                            "total": 1,
                            "campaigns": [
                              {
                                "campaign_id": "camp_rRsfatlwN7unSeUIJDCYedal",
                                "referrer_id": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                                "related_object_id": "r_0b9d4c5121d64dd01d",
                                "related_object_type": "redemption",
                                "date": "2022-08-30T10:17:41.089Z"
                              }
                            ]
                          },
                          "metadata": {
                            "lang": "en",
                            "test": true
                          },
                          "system_metadata": {},
                          "created_at": "2022-08-30T06:32:07.380Z",
                          "updated_at": "2022-08-30T10:17:58.049Z",
                          "object": "customer"
                        },
                        {
                          "id": "cust_X0hU04x7FeisPnD5lctZcQkI",
                          "source_id": "jane.smith@email.com",
                          "name": "Jane Smith",
                          "description": "A nice customer",
                          "email": "jane.smith@email.com",
                          "phone": "+1 933 222 3333",
                          "birthdate": "2022-01-02",
                          "address": {
                            "city": "New Yorke",
                            "state": "NY",
                            "line_1": "123 Main Ste.",
                            "line_2": "APT 3 BLG 4e",
                            "country": "United Statese",
                            "postal_code": "10001e"
                          },
                          "summary": {
                            "redemptions": {
                              "total_redeemed": 4,
                              "total_failed": 0,
                              "total_succeeded": 4,
                              "total_rolled_back": 1,
                              "total_rollback_failed": 0,
                              "total_rollback_succeeded": 1,
                              "gift": {
                                "redeemed_amount": 0,
                                "amount_to_go": 0
                              },
                              "loyalty_card": {
                                "redeemed_points": 0,
                                "points_to_go": 15549
                              }
                            },
                            "orders": {
                              "total_amount": 210000,
                              "total_count": 3,
                              "average_amount": 70000,
                              "last_order_amount": 70000,
                              "last_order_date": "2022-08-30T11:51:08.029Z"
                            }
                          },
                          "loyalty": {
                            "points": 15399,
                            "referred_customers": 0,
                            "campaigns": {
                              "Christmas Campaign": {
                                "points": 7000,
                                "referred_customers": 0
                              },
                              "Fall Campaign": {
                                "points": 2299,
                                "referred_customers": 0
                              },
                              "Winter Campaign": {
                                "points": 25,
                                "referred_customers": 0
                              },
                              "Summer Campaign": {
                                "points": 75,
                                "referred_customers": 0
                              },
                              "Spring Campaign": {
                                "points": 6000,
                                "referred_customers": 0
                              }
                            }
                          },
                          "referrals": {
                            "total": 2,
                            "campaigns": [
                              {
                                "campaign_id": "camp_rRsfatlwN7unSeUIJDCYedal",
                                "referrer_id": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                                "related_object_id": "r_0b9d4cc4aa164dd073",
                                "related_object_type": "redemption",
                                "date": "2022-08-30T10:19:39.196Z"
                              },
                              {
                                "campaign_id": "camp_YDsFdX8TgFtT0RUuKEFyhqs3",
                                "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                                "related_object_id": "r_0b9d61b6484ead0324",
                                "related_object_type": "redemption",
                                "date": "2022-08-30T11:51:10.445Z"
                              }
                            ]
                          },
                          "metadata": {
                            "lang": "en",
                            "test": false
                          },
                          "system_metadata": {},
                          "created_at": "2022-08-09T09:50:53.620Z",
                          "updated_at": "2022-08-30T11:51:24.327Z",
                          "object": "customer"
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Create Customer",
        "description": "Creates a customer object.\\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the customer database, Voucherify will return a related customer object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Create a customer with specified parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_id": "source_123",
                    "name": "Bob Smith",
                    "description": "A frequent customer",
                    "email": "bob.smith@email.com",
                    "phone": "+1 933 222 3333",
                    "address": {
                      "city": "New York",
                      "country": "United States",
                      "line_1": "123 Main St.",
                      "line_2": "APT 3 BLG 4",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "metadata": {
                      "lang": "en",
                      "test": true
                    },
                    "birthdate": "2022-01-01"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a customer object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                      "source_id": "source_123",
                      "name": "Bob Smith",
                      "description": "A frequent customer",
                      "email": "bob.smith@email.com",
                      "phone": "+1 933 222 3333",
                      "birthdate": "2022-01-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "country": "United States",
                        "postal_code": "10001"
                      },
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 0,
                          "total_failed": 0,
                          "total_succeeded": 0,
                          "total_rolled_back": 0,
                          "total_rollback_failed": 0,
                          "total_rollback_succeeded": 0,
                          "gift": {
                            "redeemed_amount": 0,
                            "amount_to_go": 0
                          },
                          "loyalty_card": {
                            "redeemed_points": 0,
                            "points_to_go": 0
                          }
                        },
                        "orders": {
                          "total_amount": 0,
                          "total_count": 0,
                          "average_amount": 0,
                          "last_order_amount": 0
                        }
                      },
                      "loyalty": {
                        "points": 0,
                        "referred_customers": 0,
                        "campaigns": {}
                      },
                      "referrals": {
                        "total": 0,
                        "campaigns": []
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "system_metadata": {},
                      "created_at": "2022-08-30T06:32:07.380Z",
                      "object": "customer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer's \`id\` or \`source_id\`."
        }
      ],
      "get": {
        "operationId": "get-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Get Customer",
        "description": "Retrieve customer details.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a customer object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cust_T849EgzNVVmn5icJ2FAkT2rO",
                      "source_id": "alice.morgan@email.com",
                      "name": "Alice Morgan",
                      "email": "alice.morgan@email.com",
                      "address": null,
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2,
                          "total_failed": 0,
                          "total_succeeded": 2,
                          "total_rolled_back": 0,
                          "total_rollback_failed": 0,
                          "total_rollback_succeeded": 0,
                          "gift": {
                            "redeemed_amount": 0,
                            "amount_to_go": 0
                          },
                          "loyalty_card": {
                            "redeemed_points": 0,
                            "points_to_go": 3303
                          }
                        },
                        "orders": {
                          "total_amount": 203900,
                          "total_count": 2,
                          "average_amount": 101950,
                          "last_order_amount": 3900,
                          "last_order_date": "2022-07-26T14:59:52.814Z"
                        }
                      },
                      "loyalty": {
                        "points": 3303,
                        "referred_customers": 0,
                        "campaigns": {
                          "Summer Campaign": {
                            "points": 3303,
                            "referred_customers": 0
                          }
                        }
                      },
                      "referrals": {
                        "total": 0,
                        "campaigns": []
                      },
                      "system_metadata": {},
                      "created_at": "2022-02-07T08:28:23.644Z",
                      "updated_at": "2022-07-26T14:59:59.806Z",
                      "assets": {
                        "cockpit_url": "https://www.url.com"
                      },
                      "object": "customer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Delete Customer",
        "description": "This method deletes a customer.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      },
      "put": {
        "operationId": "update-customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customer",
        "description": "Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Alice McDonald",
                    "email": "alice.mdconald@email.com",
                    "description": "Updating customer data",
                    "phone": "+1 (132) 222-2222",
                    "address": {
                      "city": "New York",
                      "country": "United States",
                      "line_1": "123 Main St.",
                      "line_2": "APT 3 BLG 4",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "metadata": {
                      "lang": "en",
                      "test": true
                    },
                    "birthdate": "2022-01-01",
                    "birthday": "2022-01-02"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a customer object if updates were successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cust_T849EgzNVVmn5icJ2FAkT2rO",
                      "source_id": "alice@morgan.com",
                      "name": "Alice McDonald",
                      "description": "Updating customer data",
                      "email": "alice.mdconald@email.com",
                      "phone": "+1 (132) 222-2222",
                      "birthday": "2022-01-02",
                      "birthdate": "2022-01-01",
                      "address": {
                        "city": "New York",
                        "state": "NY",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "country": "United States",
                        "postal_code": "10001"
                      },
                      "summary": {
                        "redemptions": {
                          "total_redeemed": 2,
                          "total_failed": 0,
                          "total_succeeded": 2,
                          "total_rolled_back": 0,
                          "total_rollback_failed": 0,
                          "total_rollback_succeeded": 0,
                          "gift": {
                            "redeemed_amount": 0,
                            "amount_to_go": 0
                          },
                          "loyalty_card": {
                            "redeemed_points": 0,
                            "points_to_go": 4428
                          }
                        },
                        "orders": {
                          "total_amount": 203900,
                          "total_count": 2,
                          "average_amount": 101950,
                          "last_order_amount": 3900,
                          "last_order_date": "2022-07-26T14:59:52.814Z"
                        }
                      },
                      "loyalty": {
                        "points": 3403,
                        "referred_customers": 0,
                        "campaigns": {
                          "Summer Campaign": {
                            "points": 0,
                            "referred_customers": 0
                          },
                          "Spring Campaign": {
                            "points": 50,
                            "referred_customers": 0
                          },
                          "Fall Campaign": {
                            "points": 50,
                            "referred_customers": 0
                          },
                          "Winter Campaign": {
                            "points": 3303,
                            "referred_customers": 0
                          }
                        }
                      },
                      "referrals": {
                        "total": 0,
                        "campaigns": []
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "system_metadata": {},
                      "created_at": "2022-02-07T08:28:23.644Z",
                      "updated_at": "2022-08-31T09:58:30.475Z",
                      "object": "customer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}/permanent-deletion": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer's \`id\` or \`source_id\`."
        }
      ],
      "post": {
        "operationId": "customer-permanently-deletion",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Delete Customer Permanently",
        "description": "The organization user can remove consumer data permanently from the Voucherify system by using this API method. It d​eletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a permanent deletion object and status of the deletion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersPermanentDeletionCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "del_7k3buMvBsJuXiLRmdh1WZvZs",
                      "created_at": "2022-09-02T17:50:29.302Z",
                      "related_object_id": "cust_XI8sPLvznzVpNI1BMIWGcUJa",
                      "related_object": "customer",
                      "status": "DONE",
                      "data_json": {
                        "events": 16,
                        "customer_events": 28,
                        "daily_events": 0,
                        "segments": 0,
                        "orders": 9,
                        "order_events": 5,
                        "customer": 1
                      },
                      "object": "pernament_deletion"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/importCSV": {
      "post": {
        "operationId": "import-customers-using-csv",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Import and Update Customers using CSV",
        "description": "This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.  \\n\\n## Request Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/customers/importCSV \\\\\\n  -F file=@/path/to/customers.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n## CSV File Format\\n\\nThe CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.\\n\\n<!-- theme: info -->\\n> 📘 Standard customer fields mapping\\n>\\n> **No spaces allowed in field names**  \\n> Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2\\n\\n## Update Customers using CSV\\n\\nIf you would like to update customer's data, you can do it using the CSV file with new data. However, remember to include a \`source_id\` in your CSV file to manage the update successfully.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomersImportCSVRequestBody"
              },
              "examples": {}
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and customers will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersImportCsvCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/bulk/async": {
      "post": {
        "operationId": "update-customers-in-bulk",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customers in bulk",
        "description": "Update several customers in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier.  \\n\\nIf a requested customer object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the customer fields that you would like to update in each customer object.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "title": "Update Customers in bulk Request Body",
                "description": "Request body schema for \`/customers/bulk/async\`.",
                "items": {
                  "$ref": "#/components/schemas/CustomersUpdateInBulkRequestBody"
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "source_id": "John.Smith@email.com",
                      "name": "John Smith",
                      "email": "john.smith@email.com",
                      "description": "Updating customer data",
                      "phone": "+1 (132) 222-2222",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthday": "2022-04-04"
                    },
                    {
                      "source_id": "Jane.Smith@email.com",
                      "name": "Jane Smith",
                      "email": "Jane.Smith@email.com",
                      "description": "Updating customer data",
                      "phone": "+1 (132) 222-2222",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthday": "2022-03-03"
                    },
                    {
                      "source_id": "Sally.Smith@email.com",
                      "name": "Sally Smith",
                      "email": "Sally.Smith@email.com",
                      "description": "Updating customer data",
                      "phone": "+1 (132) 222-2222",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": true
                      },
                      "birthdate": "2022-02-02"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and customers will be updated in the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersUpdateInBulkResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/metadata/async": {
      "post": {
        "operationId": "update-customers-metadata-in-bulk",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customers' Metadata in bulk",
        "description": "Update several customers metadata properties in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier.  \\n\\nIf a requested customer object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "List the \`source_ids\` of the customer's you would like to update along with the metadata key value pairs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersMetadataUpdateInBulkRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_ids": [
                      "source_123",
                      "source_456"
                    ],
                    "metadata": {
                      "lang": "en",
                      "test": false
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and customers will be updated in the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersMetadataUpdateInBulkResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}/consents": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify unique customer identifier or source ID."
        }
      ],
      "put": {
        "operationId": "update-customers-consents",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customer's consents",
        "description": "Update marketing permissions for the specified customer.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use \\"unsubscribed\\" as a consent identifier and \\"true\\" as its value.  \\n\\n#### Examples\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"cnst_aIdUulAh0SCsOCaS3005y7yS\\": true,\\n    \\"cnst_aIdUulAhwewqaS31213fdsfds\\": false\\n}\\n\`\`\`\\n\\nOpt-out from all communication:\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"unsubscribed\\": true\\n}\\n\`\`\`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomersConsentsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I": true,
                    "cnst_VCmucIvAsmDYw2PPAok6bcYy": false
                  }
                },
                "Opt-out of all": {
                  "value": {
                    "unsubscribed": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns no content if the consents were updated successfully."
          }
        }
      }
    },
    "/client/v1/customers/{customerId}/consents": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer identifier or \`source_id\`"
        }
      ],
      "put": {
        "operationId": "update-customers-consents-client-side",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "Update Customer's consents (client-side)",
        "description": "Update marketing permissions for the specified customer.",
        "parameters": [],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use \\"unsubscribed\\" as a consent identifier and \\"true\\" as its value.  \\n\\n#### Examples\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"cnst_aIdUulAh0SCsOCaS3005y7yS\\": true,\\n    \\"cnst_aIdUulAhwewqaS31213fdsfds\\": false\\n}\\n\`\`\`\\n\\nOpt-out from all communication:\\n\\n<!--\\ntitle: \\"Request Body\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"unsubscribed\\": true\\n}\\n\`\`\`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCustomersConsentsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I": true,
                    "cnst_VCmucIvAsmDYw2PPAok6bcYy": false
                  }
                },
                "Opt-out of all": {
                  "value": {
                    "unsubscribed": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns no content if the consents were updated successfully."
          }
        }
      }
    },
    "/v1/customers/{customerId}/activities": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer's \`id\` or source ID of the customer who performed the activities."
        }
      ],
      "get": {
        "operationId": "list-customer-activities",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "List Customer Activities",
        "description": "Retrieve customer activities.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. \`starting_after\` is a date-time value that defines your place in the list based on \`created_at\` property from the activity object. For instance, if you make a list request and receive 100 objects, ending with an object created at \`2020-05-24T13:43:09.024Z\`, your subsequent call can include \`starting_after=2020-05-24T13:43:09.024Z\` in order to fetch the next page of the list."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "starting_after_id",
            "description": "By applying this filter value, you will get events starting after an event with the given ID."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCampaignType"
            },
            "in": "query",
            "name": "campaign_type",
            "description": "Through this parameter you can control a type of campaign by which Voucherify will filter related customer's activity. API will return only records related to that given type. Allowed values: DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterCampaignId"
            },
            "in": "query",
            "name": "campaign_id",
            "description": "By applying this parameter you request only events related to specific campaign identified by its ID."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterProductId"
            },
            "in": "query",
            "name": "product_id",
            "description": "By applying this parameter you request only events related to specific product identified by its ID."
          },
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with customer activities.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersActivitiesListResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customerId}/segments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCustomerId"
          },
          "name": "customerId",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a customer represented by an internal customer ID or customer source ID."
        }
      ],
      "get": {
        "operationId": "list-customer-segments",
        "tags": [
          "CUSTOMERS API"
        ],
        "summary": "List Customer's Segments",
        "description": "Returns the list of segments IDs to which the customer belongs to.  \\n\\nIf you pass a \`customerId\` which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "The method returns segment(s) to which the given customer belongs to.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomersSegmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "seg_DNAOhUtJffvX0f57ajLMFBYR",
                          "name": "area code not 123",
                          "object": "segment"
                        },
                        {
                          "id": "seg_IPIYx96l92Op0Sy5MOaImhgw",
                          "name": "not bob.smith@email.com",
                          "object": "segment"
                        },
                        {
                          "id": "seg_1wc52c5z6r1kQ81brO8j9Hk2",
                          "name": "Birthday After Dec 31",
                          "object": "segment"
                        },
                        {
                          "id": "seg_ZEbbT4mq1ePpM9PzR02lcww2",
                          "name": "Start with S",
                          "object": "segment"
                        },
                        {
                          "id": "seg_WJv55MbzQwnr56ttJ2xUrSgt",
                          "name": "Loyalty Card",
                          "object": "segment"
                        }
                      ],
                      "total": 5
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders": {
      "get": {
        "operationId": "list-orders",
        "tags": [
          "ORDERS API"
        ],
        "summary": "List Orders",
        "description": "Returns a list of orders.\\n\\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListOrders"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with order objects. The orders are returned sorted by creation date by default, with the most recent orders appearing last, unless you specify another sequence using the order query parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "orders",
                      "orders": [
                        {
                          "id": "ord_v5vupdacgud1CwUSyKqSlHuk",
                          "source_id": null,
                          "created_at": "2022-09-09T07:44:41.594Z",
                          "updated_at": "2022-09-09T07:44:42.331Z",
                          "status": "PAID",
                          "amount": 2700,
                          "discount_amount": 1243,
                          "items_discount_amount": 270,
                          "total_discount_amount": 1513,
                          "total_amount": 1187,
                          "items": [
                            {
                              "object": "order_item",
                              "source_id": "prod_5h1pp1ng",
                              "related_object": "product",
                              "quantity": 1,
                              "amount": 700,
                              "discount_amount": 70,
                              "price": 700,
                              "subtotal_amount": 630,
                              "product": {
                                "name": "Shipping"
                              }
                            },
                            {
                              "object": "order_item",
                              "source_id": "roses_1",
                              "related_object": "product",
                              "quantity": 1,
                              "amount": 500,
                              "discount_amount": 50,
                              "price": 500,
                              "subtotal_amount": 450,
                              "product": {
                                "name": "Bouquet - Romantic Roses",
                                "price": 500
                              }
                            },
                            {
                              "object": "order_item",
                              "source_id": "vase_1",
                              "related_object": "product",
                              "quantity": 1,
                              "amount": 1500,
                              "discount_amount": 150,
                              "price": 1500,
                              "subtotal_amount": 1350,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0baa093537528ef645": {
                              "date": "2022-09-09T07:44:41.695Z",
                              "related_object_type": "redemption",
                              "related_object_id": "r_0baa093537528ef645",
                              "stacked": [
                                "r_0baa093537528ef646",
                                "r_0baa093537528ef647",
                                "r_0baa093537528ef648"
                              ]
                            }
                          }
                        },
                        {
                          "id": "ord_3JkWC6jG0JgyRf5lO3r4IyU1",
                          "source_id": null,
                          "created_at": "2022-09-09T07:04:22.597Z",
                          "updated_at": "2022-09-09T07:04:23.743Z",
                          "status": "PAID",
                          "amount": 73100,
                          "items_discount_amount": 7310,
                          "total_discount_amount": 7310,
                          "total_amount": 65790,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "discount_amount": 7000,
                              "price": 70000,
                              "subtotal_amount": 63000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "discount_amount": 160,
                              "price": 1600,
                              "subtotal_amount": 1440,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 1,
                              "amount": 1500,
                              "discount_amount": 150,
                              "price": 1500,
                              "subtotal_amount": 1350,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fffae90e1b2495": {
                              "date": "2022-09-09T07:04:22.692Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_24rljiUfdLNC9poBf0BPNmoh2txzFkLs"
                            }
                          }
                        },
                        {
                          "id": "ord_HwdbziIPvUZJkIC7z74FKmPv",
                          "source_id": null,
                          "created_at": "2022-09-09T06:47:14.195Z",
                          "updated_at": "2022-09-09T06:47:15.369Z",
                          "status": "PAID",
                          "amount": 71600,
                          "discount_amount": 7160,
                          "total_discount_amount": 7160,
                          "total_amount": 64440,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fc0eb00e1b2230": {
                              "date": "2022-09-09T06:47:14.369Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_3vEprqa6tbzfhFtpjr4mDlkNchXepW7s"
                            }
                          }
                        },
                        {
                          "id": "ord_HRluwFS2seoILUkXxWML0D7Z",
                          "source_id": null,
                          "created_at": "2022-09-09T06:44:27.383Z",
                          "updated_at": "2022-09-09T06:44:28.252Z",
                          "status": "PAID",
                          "amount": 71600,
                          "discount_amount": 100,
                          "total_discount_amount": 100,
                          "total_amount": 71500,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "referrer": {
                            "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fb6bb7928ed9ec": {
                              "date": "2022-09-09T06:44:27.486Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_vhHuiEmZSchWHtE0xKm0HM7PFCR9cNkA",
                              "related_object_parent_id": "camp_rRsfatlwN7unSeUIJDCYedal"
                            }
                          }
                        },
                        {
                          "id": "ord_Qg5utCohAZ3tafYvc1O4C80r",
                          "source_id": null,
                          "created_at": "2022-09-09T06:42:34.083Z",
                          "updated_at": "2022-09-09T06:42:35.169Z",
                          "status": "PAID",
                          "amount": 70000,
                          "discount_amount": 4000,
                          "total_discount_amount": 4000,
                          "total_amount": 66000,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fafd11d28ed999": {
                              "date": "2022-09-09T06:42:34.183Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_RaMaTT7F0Q47BetdGcFxsyqwo1aZGzJs",
                              "related_object_parent_id": "camp_hg7ajfHh6DcE1xa18mw3SdF6"
                            }
                          }
                        },
                        {
                          "id": "ord_G9LBb5SOPa36pHdwxUvzkw4P",
                          "source_id": null,
                          "created_at": "2022-09-09T06:38:17.984Z",
                          "updated_at": "2022-09-09T06:38:19.064Z",
                          "status": "PAID",
                          "amount": 4600,
                          "items_discount_amount": 300,
                          "total_discount_amount": 300,
                          "total_amount": 4300,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0a65b3ff8592d7a5b5",
                              "quantity": 1,
                              "amount": 3000,
                              "discount_amount": 300,
                              "price": 3000,
                              "subtotal_amount": 2700,
                              "product": {
                                "name": "Koffee Cup",
                                "price": 3000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                            "object": "customer"
                          },
                          "customer_id": "cust_tAED42tFhLM9v7GmZUaklJFd",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9fa02fcd28ed8f1": {
                              "date": "2022-09-09T06:38:18.099Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_KqP2NOSb4dJb1D6UBhcq7ScPZXun0y40",
                              "related_object_parent_id": "camp_hC2GdqYtOmTT45zfhib62cK1"
                            }
                          }
                        },
                        {
                          "id": "ord_N3YBowDTZs0UH2hHoMZLbUDN",
                          "source_id": null,
                          "created_at": "2022-09-09T06:18:31.459Z",
                          "updated_at": "2022-09-09T06:18:31.624Z",
                          "status": "PAID",
                          "amount": 71600,
                          "discount_amount": 7160,
                          "total_discount_amount": 7160,
                          "total_amount": 64440,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 1,
                              "amount": 1600,
                              "price": 1600,
                              "subtotal_amount": 1600,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                            "object": "customer"
                          },
                          "customer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba9f57c37128ed639": {
                              "date": "2022-09-09T06:18:31.516Z",
                              "related_object_type": "promotion_tier",
                              "related_object_id": "promo_CQonGnrsFAdEJfJQ3oKB3a8G",
                              "related_object_parent_id": "camp_SGq39XXJ47vm7Xys3D0NLgQ0"
                            }
                          }
                        },
                        {
                          "id": "ord_3R6vsxRZRkND8rpe0rAn9Agc",
                          "source_id": null,
                          "created_at": "2022-09-05T08:13:13.720Z",
                          "updated_at": "2022-09-05T08:13:14.498Z",
                          "status": "PAID",
                          "amount": 74000,
                          "items_discount_amount": 1500,
                          "total_discount_amount": 1500,
                          "total_amount": 72500,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 1,
                              "amount": 70000,
                              "price": 70000,
                              "subtotal_amount": 70000,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 2,
                              "amount": 3000,
                              "discount_amount": 500,
                              "price": 1500,
                              "subtotal_amount": 2500,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b00ffed198e344",
                              "quantity": 2,
                              "amount": 1000,
                              "discount_amount": 1000,
                              "price": 500,
                              "subtotal_amount": 0,
                              "product": {
                                "name": "Bouquet - Romantic Roses",
                                "price": 500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                            "object": "customer"
                          },
                          "customer_id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba4e961444579711a": {
                              "date": "2022-09-05T08:13:13.873Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_hwySVBBk6YmMD4GzZHJzke1Fxo3QO7kP",
                              "related_object_parent_id": "camp_Uji5a53s5wRSUHqznncTkhHh"
                            }
                          }
                        },
                        {
                          "id": "ord_7bqlkoHyEJCQuxVZpKfZYNeA",
                          "source_id": null,
                          "created_at": "2022-09-02T17:12:13.213Z",
                          "updated_at": "2022-09-02T17:12:13.969Z",
                          "status": "PAID",
                          "amount": 292400,
                          "items_discount_amount": 900,
                          "total_discount_amount": 900,
                          "total_amount": 291500,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 4,
                              "amount": 6400,
                              "price": 1600,
                              "subtotal_amount": 6400,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 4,
                              "amount": 6000,
                              "price": 1500,
                              "subtotal_amount": 6000,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 4,
                              "amount": 280000,
                              "discount_amount": 900,
                              "price": 70000,
                              "subtotal_amount": 279100,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                            "object": "customer"
                          },
                          "customer_id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba187f9bb45792c13": {
                              "date": "2022-09-02T17:12:13.293Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_pg6DhwhmeZASoSoJ15PdzMT9MhsPjYuc",
                              "related_object_parent_id": "camp_W8DJVd8J0btqXT6FBwn7BSkC"
                            }
                          }
                        },
                        {
                          "id": "ord_7HwbJiHmS07O7FsVAtjJcuRS",
                          "source_id": null,
                          "created_at": "2022-09-02T17:08:37.794Z",
                          "updated_at": "2022-09-02T17:08:38.879Z",
                          "status": "PAID",
                          "amount": 223900,
                          "items_discount_amount": 900,
                          "total_discount_amount": 900,
                          "total_amount": 223000,
                          "items": [
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7dfb05cbe5c616",
                              "sku_id": "sku_0b7d7dfb090be5c619",
                              "quantity": 4,
                              "amount": 6400,
                              "discount_amount": 300,
                              "price": 1600,
                              "subtotal_amount": 6100,
                              "product": {
                                "name": "Comic Books1",
                                "price": 1600
                              },
                              "sku": {
                                "sku": "Comics1",
                                "price": 1600
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b7d7c4e814be5c502",
                              "quantity": 3,
                              "amount": 210000,
                              "discount_amount": 300,
                              "price": 70000,
                              "subtotal_amount": 209700,
                              "product": {
                                "name": "Apple iPhone 12",
                                "price": 70000
                              }
                            },
                            {
                              "object": "order_item",
                              "product_id": "prod_0b72b0bd64d198e3ae",
                              "quantity": 5,
                              "amount": 7500,
                              "discount_amount": 300,
                              "price": 1500,
                              "subtotal_amount": 7200,
                              "product": {
                                "name": "Vase - Boho Vintage",
                                "price": 1500
                              }
                            }
                          ],
                          "metadata": {},
                          "customer": {
                            "id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                            "object": "customer"
                          },
                          "customer_id": "cust_CSnYd37MXmrbS19XCrghjBsv",
                          "referrer_id": null,
                          "object": "order",
                          "redemptions": {
                            "r_0ba1872762c5792b73": {
                              "date": "2022-09-02T17:08:37.899Z",
                              "related_object_type": "voucher",
                              "related_object_id": "v_yQydppWWJpSUuGNEWJ4I2upFGY2Ma4IY",
                              "related_object_parent_id": "camp_A5L21BD4cJii28882owYBqTV"
                            }
                          }
                        }
                      ],
                      "total": 441
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-order",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Create Order",
        "description": "Creates an order object and triggers an order creation event.\\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the order database, Voucherify will return a related order object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the order parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "amount": 20000,
                    "customer": {
                      "source_id": "sample_customer"
                    },
                    "status": "PAID",
                    "items": [
                      {
                        "quantity": 1,
                        "price": 20000,
                        "source_id": "sample product1",
                        "related_object": "product",
                        "product": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    ]
                  }
                },
                "Example 2": {
                  "value": {
                    "source_id": "new",
                    "status": "FULFILLED",
                    "metadata": {
                      "location_id": [
                        "L1",
                        "L2"
                      ],
                      "payment_mean": [
                        "paypal",
                        "credit-card"
                      ]
                    },
                    "customer": {
                      "source_id": "bob.smith.1@email.com",
                      "name": "Bob Smith",
                      "description": "A nice customer",
                      "email": "bob.smith.1@email.com",
                      "phone": "+1 933 222 3333",
                      "address": {
                        "city": "New York",
                        "country": "United Statese",
                        "line_1": "123 Main St",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": false
                      },
                      "birthdate": "2022-01-02"
                    },
                    "referrer": {
                      "source_id": "jane.smith@email.com",
                      "name": "Jane Smith",
                      "description": "A really nice customer",
                      "email": "jane.smith@email.com",
                      "phone": "+1 933 222 3334",
                      "address": {
                        "city": "New York",
                        "country": "United States",
                        "line_1": "123 Main St.",
                        "line_2": "APT 3 BLG 4",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {
                        "lang": "en",
                        "test": false
                      },
                      "birthday": "2022-03-03"
                    },
                    "items": [
                      {
                        "source_id": "prod_1",
                        "related_object": "product",
                        "quantity": 2,
                        "product": {
                          "name": "Apple iPhone 12",
                          "price": 60000,
                          "metadata": {
                            "color": [
                              "purple"
                            ],
                            "vendor": "mall"
                          },
                          "override": true
                        }
                      },
                      {
                        "source_id": "ComicBook_1",
                        "related_object": "sku",
                        "quantity": 1,
                        "product": {
                          "source_id": "Books",
                          "name": "Comic Books1",
                          "price": 2100,
                          "metadata": {
                            "color": [
                              "silver"
                            ],
                            "vendor": "Bookstore1"
                          },
                          "override": true
                        },
                        "sku": {
                          "sku": "Comics1",
                          "source_id": "ComicBook_1",
                          "price": 1700,
                          "metadata": {
                            "color": [
                              "golden"
                            ],
                            "vendor": "islands"
                          },
                          "override": true
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an order object if the operation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ord_cRKOEXiBOj0EZKF7g9n6l0eH",
                      "source_id": "new",
                      "created_at": "2022-09-09T09:20:01.660Z",
                      "updated_at": "2022-09-09T09:24:43.604Z",
                      "status": "FULFILLED",
                      "amount": 121700,
                      "total_amount": 121700,
                      "items": [
                        {
                          "object": "order_item",
                          "source_id": "prod_1",
                          "related_object": "product",
                          "quantity": 2,
                          "amount": 120000,
                          "price": 60000,
                          "subtotal_amount": 120000,
                          "product": {
                            "id": "prod_0b7d7c4e814be5c502",
                            "source_id": "prod_1",
                            "name": "Apple iPhone 12",
                            "metadata": {
                              "color": [
                                "purple"
                              ],
                              "vendor": "mall"
                            },
                            "price": 60000
                          }
                        },
                        {
                          "object": "order_item",
                          "source_id": "ComicBook_1",
                          "related_object": "sku",
                          "product_id": "prod_0b7d7dfb05cbe5c616",
                          "quantity": 1,
                          "amount": 1700,
                          "price": 1700,
                          "subtotal_amount": 1700,
                          "product": {
                            "id": "prod_0b7d7dfb05cbe5c616",
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "Bookstore1"
                            },
                            "price": 2100
                          },
                          "sku": {
                            "id": "sku_0b7d7dfb090be5c619",
                            "source_id": "ComicBook_1",
                            "sku": "Comics1",
                            "metadata": {
                              "color": [
                                "golden"
                              ],
                              "vendor": "islands"
                            },
                            "price": 1700
                          }
                        }
                      ],
                      "metadata": {
                        "location_id": [
                          "L1",
                          "L2"
                        ],
                        "payment_mean": [
                          "paypal",
                          "credit-card"
                        ]
                      },
                      "customer": {
                        "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                        "object": "customer"
                      },
                      "referrer": {
                        "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                        "object": "customer"
                      },
                      "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                      "object": "order"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/{orderId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterOrderId"
          },
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Unique Voucherify order ID or order source ID."
        }
      ],
      "get": {
        "operationId": "get-order",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Get Order",
        "description": "Retrieve an order.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an order object if a valid identifier was provided. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersGetResponseBody"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-order",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Update Order",
        "description": "Updates the specified order by setting the values of the parameters passed in the request body. Any parameters not provided will be left unchanged.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters of the order that are to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "status": "CANCELED"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the order object if the update succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ord_cRKOEXiBOj0EZKF7g9n6l0eH",
                      "source_id": "new",
                      "created_at": "2022-09-09T09:20:01.660Z",
                      "updated_at": "2022-09-09T09:41:00.881Z",
                      "status": "CANCELED",
                      "amount": 121700,
                      "total_amount": 121700,
                      "items": [
                        {
                          "object": "order_item",
                          "source_id": "prod_1",
                          "related_object": "product",
                          "quantity": 2,
                          "amount": 120000,
                          "price": 60000,
                          "subtotal_amount": 120000,
                          "product": {
                            "id": "prod_0b7d7c4e814be5c502",
                            "source_id": "prod_1",
                            "name": "Apple iPhone 12",
                            "metadata": {
                              "color": [
                                "purple"
                              ],
                              "vendor": "mall"
                            },
                            "price": 60000
                          }
                        },
                        {
                          "object": "order_item",
                          "source_id": "ComicBook_1",
                          "related_object": "sku",
                          "product_id": "prod_0b7d7dfb05cbe5c616",
                          "quantity": 1,
                          "amount": 1700,
                          "price": 1700,
                          "subtotal_amount": 1700,
                          "product": {
                            "id": "prod_0b7d7dfb05cbe5c616",
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "Bookstore1"
                            },
                            "price": 2100
                          },
                          "sku": {
                            "id": "sku_0b7d7dfb090be5c619",
                            "source_id": "ComicBook_1",
                            "sku": "Comics1",
                            "metadata": {
                              "color": [
                                "golden"
                              ],
                              "vendor": "islands"
                            },
                            "price": 1700
                          }
                        }
                      ],
                      "metadata": {
                        "location_id": [
                          "L1",
                          "L2"
                        ],
                        "payment_mean": [
                          "paypal",
                          "credit-card"
                        ]
                      },
                      "customer": {
                        "id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                        "object": "customer"
                      },
                      "referrer": {
                        "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                        "object": "customer"
                      },
                      "customer_id": "cust_H0nXrItO1DNV3UiPIl54HA5o",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv",
                      "object": "order"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/import": {
      "post": {
        "operationId": "import-orders",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Import Orders",
        "description": "<!-- theme: info -->\\n\\n> 🚧 Historical orders\\n>\\n> This endpoint should only be used to import historical orders into Voucherify. For on-going synchronization, the <!-- [create order](OpenAPI.json/paths/~1orders/post) -->[create order](ref:create-order) and <!-- [update order](OpenAPI.json/paths/~1orders~1{orderId}/put) -->[update order](ref:update-order) endpoints should be used. This is critical because this endpoint does not store events or launch distributions.\\n\\n## Limitations\\n\\n### Import volume\\n\\nThere can be only a single on-going order import per tenant per project at a given time. The user can schedule more imports but those extra imports will be scheduled to run in sequence one by one.  \\n\\n### Maximum count of orders in single import\\n\\nThere is a \`2000\` limit but we might decide to change it to a lower / higher value at any given time depending if we find this value is too high or too low with time.\\n\\n## Notifications\\n\\nThere are no notifications on the Dashboard because this import is launched via the API.\\n\\n## Triggered actions\\n  \\nIf you import orders with customers, then a logic will be scheduled responsible for placing these customers into segments and refreshing the segment's summary. Consequently, this update will trigger \\n- **customers entering into segments** \\n- **distributions** based on any rules tied to customer entering segment(s)\\n- **earning rules** based on the customer entering segment(s)\\n\\n## What is not triggered\\n\\n1. No webhooks are triggered during the import of orders - for both orders and upserted products / skus.  \\n\\n2. Distributions based on Order Update, Order Paid, Order Created and Order Cancelled. In other words if you have a distribution based on Order Paid and you import an order with a PAID status, the distribution is not going to be triggered.    \\n\\n3. No events are created during the import of orders - for both orders and upserted products / skus. In other words you won't see any events in the Activity tab in the Dashboard such as Order created or Order paid. If you are additionally upserting products / skus, then you won't see the Product created events listed, etc.   \\n\\n4. Earning rules based on Order Paid won't be triggered.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The request body is sent in the form of an array of order objects.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersImportCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "source_id": "orderImport14",
                      "status": "PAID",
                      "metadata": {
                        "location_id": [
                          "L1",
                          "L2"
                        ],
                        "payment_mean": [
                          "paypal",
                          "credit-card"
                        ]
                      },
                      "customer": {
                        "source_id": "bob2.smith@email.com",
                        "name": "Bob Smith",
                        "description": "A nice customer",
                        "email": "bob.smith@email.com",
                        "phone": "+1 933 222 3333",
                        "address": {
                          "city": "New York",
                          "country": "United States",
                          "line_1": "123 Main St.",
                          "line_2": "APT 3 BLG 4",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {
                          "lang": "en",
                          "test": true
                        },
                        "birthdate": "2022-01-01"
                      },
                      "referrer": {
                        "source_id": "jane.smith@email.com",
                        "name": "Jane Smith",
                        "description": "A really nice customer",
                        "email": "jane.smith@email.com",
                        "phone": "+1 933 222 3334",
                        "address": {
                          "city": "New York",
                          "country": "United States",
                          "line_1": "123 Main St.",
                          "line_2": "APT 3 BLG 4",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {
                          "lang": "en",
                          "test": false
                        },
                        "birthday": "2022-03-03"
                      },
                      "items": [
                        {
                          "source_id": "prod_1",
                          "related_object": "product",
                          "quantity": 2,
                          "product": {
                            "name": "Apple iPhone 12",
                            "price": 70000,
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "mall"
                            },
                            "override": true
                          }
                        },
                        {
                          "source_id": "ComicBook_1",
                          "related_object": "sku",
                          "quantity": 1,
                          "product": {
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "price": 1600,
                            "metadata": {
                              "color": [
                                "silver"
                              ],
                              "vendor": "Bookstore1"
                            },
                            "override": true
                          },
                          "sku": {
                            "sku": "Comics1",
                            "source_id": "ComicBook_1",
                            "price": 1600,
                            "metadata": {
                              "color": [
                                "golden"
                              ],
                              "vendor": "islands"
                            },
                            "override": true
                          }
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport15",
                      "status": "PAID",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "customer": {
                        "source_id": "bob2.smith@email.com"
                      },
                      "referrer": {
                        "source_id": "jane.smith@email.com"
                      },
                      "items": [
                        {
                          "source_id": "ComicBook_1",
                          "quantity": 4,
                          "related_object": "sku",
                          "sku": {
                            "source_id": "ComicBook_1"
                          }
                        },
                        {
                          "source_id": "vase_1",
                          "quantity": 1,
                          "related_object": "product",
                          "product": {
                            "source_id": "vase_1"
                          }
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport16",
                      "status": "FULFILLED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "customer": {
                        "id": "cust_LMY4ZylSdUYB1J4tzqNcl5VV"
                      },
                      "referrer": {
                        "id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
                      },
                      "items": [
                        {
                          "product_id": "prod_0b72b0bd64d198e3ae",
                          "quantity": 2
                        },
                        {
                          "sku_id": "sku_0b1621b319d248b79f",
                          "quantity": 2
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport17",
                      "status": "CANCELED",
                      "amount": 7000,
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      }
                    },
                    {
                      "source_id": "orderImport18",
                      "status": "CREATED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "items": [
                        {
                          "source_id": "ComicBook_1",
                          "amount": 900,
                          "related_object": "sku"
                        },
                        {
                          "source_id": "vase_1",
                          "amount": 2000,
                          "related_object": "product"
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport19",
                      "status": "CREATED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "items": [
                        {
                          "amount": 900
                        },
                        {
                          "amount": 2000
                        }
                      ]
                    },
                    {
                      "source_id": "orderImport20",
                      "status": "CREATED",
                      "metadata": {
                        "location_id": [
                          "L3"
                        ],
                        "payment_mean": [
                          "wire-transfer"
                        ]
                      },
                      "items": [
                        {
                          "price": 900,
                          "quantity": 2
                        },
                        {
                          "price": 2000,
                          "quantity": 3
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the ID of the scheduled asynchronous action, informing you that your request has been accepted and the order(s) will be added to the repository asynchronously. To check the status and result, copy the \`async_action_id\` from the response and pass it using <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersImportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/export": {
      "post": {
        "operationId": "create-order-export",
        "tags": [
          "ORDERS API"
        ],
        "summary": "Create Orders Export",
        "description": "Creates a downloadable CSV file containing a list of orders.\\n\\nThe parameters listed in the payload resembles headers in the CSV file. To include a parameter to the file, add it to the \`parameters.fields\` object in the request body.\\n\\nThe available filters are all <!-- [order object](OpenAPI.json/components/schemas/OrdersUpdateResponseBody) -->[order object](ref:get-order) attributes. Additionally, any metadata defined in the metadata schema can be exported.\\n\\nPassing an empty JSON will generate a file containing three default fields: \`id\`, \`source_id\`, and \`status\`.\\n\\nThe fields array is an array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique order ID. | ord_A69RIxEdRsPuC6i8gFGVHUft |\\n| source_id | Unique order source ID. | 8638 |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the order was created. | 2022-03-09T09:16:32.521Z |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the order was last updated. | 2022-03-09T09:16:33.331Z |\\n| status | Order status. | \`PAID\`, \`CREATED\`, \`FULFILLED\`, \`CANCELED\` |\\n| amount | Total amount of order items. | 7700 |\\n| discount_amount | Represents total amount of the discount applied to whole cart. | 500 |\\n| items_discount_amount | Represents total amount of the discount applied to order line items. | 100 |\\n| total_discount_amount | All discounts applied to the order including discounts applied to particular order line items and discounts applied to the whole cart. | 600 |\\n| total_amount | Total order amount after applying all discounts. | 7100 |\\n| customer_id | Customer unique ID. | cust_2G4fUQdCXUqp35nXNleav7bO |\\n| referrer_id | Referrer unique ID. | cust_IkrTR674vvQvr9a4rDMiqglY |\\n| metadata | Returns all order metadata. | Response will include all order metadata. |\\n| metadata.X | Where X is the name of a particular order metadata property. | The returned value will depend on the type of data defined in the Dashboard > Project Settings > Metdata Schemas > Order. |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify which order parameters you would like to export.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersExportCreateRequestBody"
              },
              "examples": {
                "Using fields": {
                  "value": {
                    "parameters": {
                      "fields": [
                        "id",
                        "source_id",
                        "status",
                        "created_at",
                        "updated_at",
                        "amount",
                        "discount_amount",
                        "items_discount_amount",
                        "total_discount_amount",
                        "total_amount",
                        "customer_id",
                        "referrer_id",
                        "metadata.payment_mean"
                      ]
                    }
                  }
                },
                "Using fields and filters": {
                  "value": {
                    "parameters": {
                      "fields": [
                        "id",
                        "source_id",
                        "status",
                        "created_at",
                        "updated_at",
                        "amount",
                        "discount_amount",
                        "items_discount_amount",
                        "total_discount_amount",
                        "total_amount",
                        "customer_id",
                        "referrer_id",
                        "metadata.payment_mean"
                      ],
                      "order": "-updated_at",
                      "filters": {
                        "discount_amount": {
                          "conditions": {
                            "$more_than": 100000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the \`id\` of the export object and \`status\` of the file generation process. The \`id\` is used in the <!-- [Get Export](OpenAPI.json/paths/~1exports~1{exportId}/get) -->[Get Export](ref:get-export) method to generate the url for the downloadable CSV file or in the <!-- [Download Export](OpenAPI.json/paths/~1exports~1{export_Id}/get) -->[Download Export](ref:download-export) method to return the contents of the CSV file. The status indicates whether the file has been scheduled for creation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersExportCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "exp_pT2Y1mgYsAgRAqsWTGf7PQX7",
                      "object": "export",
                      "created_at": "2022-09-09T10:45:52.362Z",
                      "status": "SCHEDULED",
                      "channel": "API",
                      "exported_object": "order",
                      "parameters": {
                        "fields": [
                          "id",
                          "source_id",
                          "status",
                          "created_at",
                          "updated_at",
                          "amount",
                          "discount_amount",
                          "items_discount_amount",
                          "total_discount_amount",
                          "total_amount",
                          "customer_id",
                          "referrer_id",
                          "metadata.payment_mean"
                        ]
                      },
                      "result": null,
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "operationId": "list-products",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "List Products",
        "description": "Retrieve a list of products.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with product objects. The products are returned sorted by creation date by default, with the most recent products appearing last, unless you specify another sequence using the \`order\` query parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "products",
                      "products": [
                        {
                          "id": "prod_f1r5Tpr0DuC7",
                          "source_id": "test_prod_id_1",
                          "name": "Apple iPhone 8",
                          "price": null,
                          "attributes": [
                            "color",
                            "memory"
                          ],
                          "metadata": {
                            "test": true,
                            "vendor": "Cortland"
                          },
                          "image_url": null,
                          "created_at": "2021-12-03T06:33:46.101Z",
                          "updated_at": null,
                          "object": "product",
                          "skus": {
                            "data": [
                              {
                                "id": "sku_0a417bd1d9952f9d6f",
                                "source_id": "test_iphone_8_silver_256gb",
                                "product_id": "prod_f1r5Tpr0DuC7",
                                "sku": "iPhone 8 Silver 256GB",
                                "price": null,
                                "currency": null,
                                "attributes": {
                                  "color": "silver",
                                  "memory": "256"
                                },
                                "image_url": null,
                                "metadata": {},
                                "created_at": "2021-12-03T06:33:46.599097+00:00",
                                "updated_at": null,
                                "object": "sku"
                              },
                              {
                                "id": "sku_0a417bd1d9952f9d6e",
                                "source_id": "test_iphone_8_silver_64gb",
                                "product_id": "prod_f1r5Tpr0DuC7",
                                "sku": "iPhone 8 Silver 64GB",
                                "price": null,
                                "currency": null,
                                "attributes": {
                                  "color": "silver",
                                  "memory": "64"
                                },
                                "image_url": null,
                                "metadata": {},
                                "created_at": "2021-12-03T06:33:46.598595+00:00",
                                "updated_at": null,
                                "object": "sku"
                              }
                            ],
                            "total": 2
                          }
                        },
                        {
                          "id": "prod_0ac67e1bb8072eec48",
                          "source_id": "test_volleyball",
                          "name": "VolleyBall",
                          "price": 1100,
                          "attributes": [],
                          "metadata": {
                            "color": [
                              "white"
                            ],
                            "label": true,
                            "origin": "PL"
                          },
                          "image_url": null,
                          "created_at": "2022-03-16T14:01:45.459Z",
                          "updated_at": "2022-04-26T12:51:35.500Z",
                          "object": "product",
                          "skus": {
                            "data": [
                              {
                                "id": "sku_0ac768973f5c4ea0d0",
                                "source_id": "test_volleyball_pl",
                                "product_id": "prod_0ac67e1bb8072eec48",
                                "sku": "PL",
                                "price": 500,
                                "currency": "USD",
                                "attributes": {},
                                "image_url": null,
                                "metadata": {
                                  "color": [
                                    "red"
                                  ]
                                },
                                "created_at": "2022-03-17T07:06:13.629918+00:00",
                                "updated_at": null,
                                "object": "sku"
                              },
                              {
                                "id": "sku_0ac7689713072e1df6",
                                "source_id": "test_volleyball_us",
                                "product_id": "prod_0ac67e1bb8072eec48",
                                "sku": "US",
                                "price": 1500,
                                "currency": "USD",
                                "attributes": {},
                                "image_url": null,
                                "metadata": {
                                  "color": [
                                    "yellow"
                                  ]
                                },
                                "created_at": "2022-03-17T07:06:13.452532+00:00",
                                "updated_at": null,
                                "object": "sku"
                              }
                            ],
                            "total": 2
                          }
                        }
                      ],
                      "total": 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Create Product",
        "description": "Creates a product object.\\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the product database, Voucherify will return a related product object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the product parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_id": "first_product",
                    "name": "Samsung Phone",
                    "price": 200000,
                    "attributes": [
                      "color",
                      "memory",
                      "processor"
                    ],
                    "metadata": {
                      "test": true,
                      "vendor": "Online Store"
                    },
                    "image_url": "https://www.website.com/image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a product object if the operation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "prod_0bae2dc5a090fd0184",
                      "source_id": "first_product",
                      "name": "Samsung Phone",
                      "price": 200000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Online Store"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "created_at": "2022-09-12T12:58:22.232Z",
                      "updated_at": "2022-09-12T12:59:55.890Z",
                      "object": "product"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductId"
          },
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "A Voucherify product ID or source ID."
        }
      ],
      "get": {
        "operationId": "get-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Get Product",
        "description": "Retrieve product details.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a product object if a valid identifier was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "prod_f1r5Tpr0DuC7",
                      "source_id": "test_prod_id_1",
                      "name": "Apple iPhone 8",
                      "price": null,
                      "attributes": [
                        "color",
                        "memory"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Cortland"
                      },
                      "image_url": null,
                      "created_at": "2021-12-03T06:33:46.101Z",
                      "updated_at": null,
                      "object": "product",
                      "skus": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "sku_0a417bd1d9952f9d6f",
                            "source_id": "test_iphone_8_silver_256gb",
                            "product_id": "prod_f1r5Tpr0DuC7",
                            "sku": "iPhone 8 Silver 256GB",
                            "price": null,
                            "currency": null,
                            "attributes": {
                              "color": "silver",
                              "memory": "256"
                            },
                            "image_url": null,
                            "metadata": {},
                            "created_at": "2021-12-03T06:33:46.599097+00:00",
                            "updated_at": null,
                            "object": "sku"
                          },
                          {
                            "id": "sku_0a417bd1d9952f9d6e",
                            "source_id": "test_iphone_8_silver_64gb",
                            "product_id": "prod_f1r5Tpr0DuC7",
                            "sku": "iPhone 8 Silver 64GB",
                            "price": null,
                            "currency": null,
                            "attributes": {
                              "color": "silver",
                              "memory": "64"
                            },
                            "image_url": null,
                            "metadata": {},
                            "created_at": "2021-12-03T06:33:46.598595+00:00",
                            "updated_at": null,
                            "object": "sku"
                          }
                        ],
                        "total": 2
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update Product",
        "description": "Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters of the product that are to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "price": 210000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an updated product object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "prod_0bae2dc5a090fd0184",
                      "source_id": "first_product",
                      "name": "Samsung Phone",
                      "price": 210000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": false,
                        "vendor": "Online Stores"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "created_at": "2022-09-12T12:58:22.232Z",
                      "updated_at": "2022-09-12T13:33:48.904Z",
                      "object": "product"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Delete Product",
        "description": "This method deletes a product.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the product will be removed permanently. Going forward, the user will be able to create another product with exactly the same \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/products/bulk/async": {
      "post": {
        "operationId": "update-products-in-bulk",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update Products in bulk",
        "description": "Update several products in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier. If a requested product object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Create an array of product objects, each with the parameters which you want to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductsUpdateInBulkRequestBody"
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "source_id": "first_product",
                      "name": "Samsung Phone 1",
                      "price": 220000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Online Store - 3"
                      },
                      "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_Z2qvs2KFnQyo2Ohz4uhsjGtf.png"
                    },
                    {
                      "source_id": "second_product",
                      "name": "Samsung Phone 2",
                      "price": 230000,
                      "attributes": [
                        "color",
                        "memory",
                        "processor"
                      ],
                      "metadata": {
                        "test": true,
                        "vendor": "Online Store - 4"
                      },
                      "image_url": "https://voucherify-uploads.s3.amazonaws.com/org_2qt8DYlM/img_Z2qvs2KFnQyo2Ohz4uhsjGtf.png"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and updates will be added to the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsUpdateInBulkResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/metadata/async": {
      "post": {
        "operationId": "update-products-metadata-in-bulk",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update Products' Metadata in bulk",
        "description": "Update several product metadata properties in one asynchronous operation. \\n\\nIn one request, it is possible to update a maximum of **100** records. In the response body, you get a unique async action identifier. If a requested product object is not found, then an **upsert** occurs. This is reflected in the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint as follows:  \\n\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"found\\": false,\\n    \\"updated\\": true\\n}\\n\`\`\`\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the list of product source IDs and the metadata key value pairs to be udpated for these products.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsMetadataUpdateInBulkRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_ids": [
                      "123-567-3433",
                      "test_volleyball"
                    ],
                    "metadata": {
                      "label": true,
                      "origin": "PL"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and updates will be added to the repository asynchronously. To check the update status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsMetadataUpdateInBulkResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/skus/{skuId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterSkuId"
          },
          "name": "skuId",
          "in": "path",
          "required": true,
          "description": "A Voucherify SKU identifier or SKU source ID."
        }
      ],
      "get": {
        "operationId": "get-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Get SKU",
        "description": "Retrieve details of a SKU.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns requested SKU object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkusGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "sku_0b1621b2f25248b79c",
                      "source_id": "sku_source_id_1",
                      "product_id": "prod_0b15f6b9f650c16990",
                      "sku": "Extra Small Blue Shirt",
                      "price": 1300,
                      "currency": "USD",
                      "attributes": {
                        "size": "XS",
                        "color": "blue",
                        "ranking": 1
                      },
                      "image_url": "",
                      "metadata": {},
                      "created_at": "2022-05-17T10:36:30.057Z",
                      "updated_at": "2022-07-01T05:34:16.822Z",
                      "object": "sku"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/skus": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductId"
          },
          "name": "productId",
          "in": "path",
          "description": "A Voucherify <!-- [product](OpenAPI.json/components/schemas/Product) -->[product](ref:get-product) ID or product source ID.",
          "required": true
        }
      ],
      "get": {
        "operationId": "list-skus-in-product",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "List SKUs in Product",
        "description": "Retrieve all SKUs for a given product.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of SKUs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsSkusListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "skus",
                      "skus": [
                        {
                          "id": "sku_0b1621b2f25248b79c",
                          "source_id": "sku_source_id_1",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Extra Small Blue Shirt",
                          "price": 1300,
                          "currency": "USD",
                          "attributes": {
                            "size": "XS",
                            "color": "blue",
                            "ranking": 1
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.057Z",
                          "updated_at": "2022-07-01T05:34:16.822Z",
                          "object": "sku"
                        },
                        {
                          "id": "sku_0b1621b3181248b79d",
                          "source_id": "sku_source_id_3",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Medium Yellow Shirt",
                          "price": 1450,
                          "currency": "USD",
                          "attributes": {
                            "size": "M",
                            "color": "yellow",
                            "ranking": 3
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.180Z",
                          "updated_at": "2022-07-01T05:34:16.842Z",
                          "object": "sku"
                        },
                        {
                          "id": "sku_0b1621b3199248b79e",
                          "source_id": "sku_source_id_2",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Small Red Shirt",
                          "price": 1400,
                          "currency": "USD",
                          "attributes": {
                            "size": "S",
                            "color": "red",
                            "ranking": 2
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.183Z",
                          "updated_at": "2022-07-01T05:34:16.927Z",
                          "object": "sku"
                        },
                        {
                          "id": "sku_0b1621b319d248b79f",
                          "source_id": "sku_source_id_4",
                          "product_id": "prod_0b15f6b9f650c16990",
                          "sku": "Large Pink Shirt -",
                          "price": 1700,
                          "currency": "USD",
                          "attributes": {
                            "size": "L",
                            "color": "pink",
                            "ranking": 4
                          },
                          "image_url": "",
                          "metadata": {},
                          "created_at": "2022-05-17T10:36:30.187Z",
                          "updated_at": "2022-07-05T08:47:50.680Z",
                          "object": "sku"
                        }
                      ],
                      "total": 4
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Create SKU",
        "description": "This method adds product variants to a <!-- [created product](OpenAPI.json/paths/~1products/post) -->[created product](ref:create-product). \\n\\n<!-- theme: info -->\\n\\n> 📘 Upsert Mode\\n>\\n> If you pass an \`id\` or a \`source_id\` that already exists in the sku database, Voucherify will return a related sku object with updated fields.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the SKU parameters to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsSkusCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "source_id": "first_product_sku_1",
                    "sku": "Samsung phone 256GB",
                    "price": 1300,
                    "currency": "USD",
                    "attributes": {
                      "color": "vintage-black",
                      "memory": "256",
                      "processor": "Intel"
                    },
                    "image_url": "https://www.website.com/image.png",
                    "metadata": {
                      "imported": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created SKU object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsSkusCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "sku_0bae3b28f610fd0da1",
                      "source_id": "first_product_sku_1",
                      "product_id": "prod_0bae2dc5a090fd0184",
                      "sku": "Samsung phone 256GB",
                      "price": 1300,
                      "currency": "USD",
                      "attributes": {
                        "color": "vintage-black",
                        "memory": "256",
                        "processor": "Intel"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "metadata": {
                        "imported": true
                      },
                      "created_at": "2022-09-12T13:56:51.828Z",
                      "updated_at": null,
                      "object": "sku"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{productId}/skus/{skuId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductId"
          },
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "A unique Voucherify <!-- [product](OpenAPI.json/components/schemas/Product) -->[product](ref:get-product) ID or product source ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterSkuId"
          },
          "name": "skuId",
          "in": "path",
          "required": true,
          "description": "A Voucherify <!-- [SKU](OpenAPI.json/components/schemas/Sku) -->[SKU ID](ref:get-sku) or SKU source ID."
        }
      ],
      "put": {
        "operationId": "update-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Update SKU",
        "description": "Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.\\n\\nFields other than the ones listed in the request body schema won't be modified. Even if provided, they will be silently skipped.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsSkusUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "price": 210000,
                    "currency": "PLN"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the SKU object with the updated parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsSkusUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "sku_0bae3b28f610fd0da1",
                      "source_id": "first_product_sku_1",
                      "product_id": "prod_0bae2dc5a090fd0184",
                      "sku": "Samsung phone 256GB",
                      "price": 210000,
                      "currency": "PLN",
                      "attributes": {
                        "color": "vintage-black",
                        "memory": "256",
                        "processor": "Intel"
                      },
                      "image_url": "https://www.website.com/image.png",
                      "metadata": {
                        "imported": true
                      },
                      "created_at": "2022-09-12T13:56:51.828Z",
                      "updated_at": "2022-09-12T14:09:40.859Z",
                      "object": "sku"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-sku",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Delete SKU",
        "description": "This method deletes a product SKU.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterBoolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to \`true\`, the SKU will be removed permanently. Going forward, the user will be able to create another SKU with exactly the same \`source_id\`."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/products/importCSV": {
      "post": {
        "operationId": "import-products-using-csv",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Import Products using CSV",
        "description": "Import products into the repository using a CSV file.  \\n\\nCurl Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/products/importCSV \\\\\\n  -F file=@/path/to/products.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n\\nThe CSV file has to include headers in the first line.\\n\\n<!-- theme: info -->\\n\\n> 📘 Standard product fields mapping\\n>\\n> - Create a **comma separated value (CSV) file** or download our CSV import template. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b82ed68d51e779443f550/Import_products_template.csv).\\n> - Supported CSV file headers: \`name,source_id,price,attributes,image_url,Metadata_property_name\`\\n> - **Name** is a **required** field. The remaining fields in the CSV template are optional.\\n> - Override/Update products' **names** in Voucherify using this method. Data will be updated for each product included in the CSV file whose **source_id** matches a source ID in Voucherify. No other data can be updated other than the product name.\\n> - Note that dates and date-time attributes need to be provided in compliance with the **ISO 8601 norms**. For example, 2022-03-11T09:00:00.000Z or 2022-03-11\\n>    - \`YYYY-MM-DD\`\\n>    - \`YYYY-MM-DDTHH\`\\n>    - \`YYYY-MM-DDTHH:mm\`\\n>    - \`YYYY-MM-DDTHH:mm:ss\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ssZ\`\\n>    - \`YYYY-MM-DDTHH:mm:ss.SSSZ\`\\n> - Columns that can't be mapped to standard fields, will be mapped to **Custom attributes** and added as **products' metadata**. There is no limit on the number of custom attributes that you can import as metadata. \\n> - To provide the proper data type, you need to add all custom attributes to the metadata schema **before importing the file**. Read more [here](https://support.voucherify.io/article/99-schema-validation-metadata#add-metadata).\\n> - **Product attributes** (not custom attributes) need to be separated by a comma and enclosed in double quotes, i.e \\"attribute1,attribute2\\".\\n> - Headers with metadata names **can't contain white-space characters**.\\n> - If you import metadata defined in the schema as **arrays (multiple)**, you need to separate each value using a comma, for example:  \\n>    - array of strings: \\"subscribed,premium\\"  \\n>    - array of numbers: \\"123,234\\". \\n>    - array of dates: \\"2000-01-01,2000-01-02\\"\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProductsImportCSVRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and products will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsImportCsvCreateResponseBody"
                },
                "examples": {
                  "Async Action": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/skus/importCSV": {
      "post": {
        "operationId": "import-skus-using-csv",
        "tags": [
          "PRODUCTS API"
        ],
        "summary": "Import SKUs using CSV",
        "description": "Import SKUs into the repository using a CSV file.\\n\\nThe CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv). \\n\\nCurl Example\\n<!--\\ntitle: \\"Example Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`cURL\\ncurl -X POST \\\\\\n  https://api.voucherify.io/v1/skus/importCSV \\\\\\n  -F file=@/path/to/skus.csv \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\"\\n\`\`\`\\n> 🚧 Import sequence\\n>\\n> First import products using the [dedicated endpoint](ref:import-products-using-csv), then import SKUs using this endpoint to properly match SKUs to products.\\n\\n<!-- theme: info -->\\n\\n> 📘 Standard SKU fields mapping\\n>\\n> - **Required** fields are source_id and product_id.\\n> - Supported CSV file headers: \`product_id,sku,source_id,price,image_url,attributes\`\\n> - SKU **source_id**'s must be unique in the entire product catalog, no duplicates allowed.\\n> - SKU attributes need to be in the form of a stringy-fied json, i.e.\`\\"{'color':'blue'}\\"\`. These attributes must be defined in the **product** beforehand in order for you to be able to import them to the SKU.\\n> - You can use this method to update the following parameters in bulk: **sku** and the sku **price**.\\n\\nThis API request starts a process that affects Voucherify data in bulk. \\n\\nIn case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the \`IN_PROGRESS\` status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window. \\n\\nThe result will return the async ID. You can verify the status of your request via this [API request](ref:get-async-action).",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "The file path is stored in the form \`file\` header.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SkusImportCSVRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns ID of the scheduled async action. The response informs you that your request has been accepted and SKUs will be added to the repository asynchronously. To check the import status and result, copy the \`async_action_id\` from the response and pass it using the <!-- [Get Async Action](OpenAPI.json/paths/~1async-actions~1{asyncActionId}/get) -->[Get Async Action](ref:get-async-action) endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkusImportCsvCreateResponseBody"
                },
                "examples": {
                  "Async Action": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/product-collections": {
      "get": {
        "operationId": "list-product-collections",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "List Product Collections",
        "description": "This method returns a list of product collections.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary containing a list of product collections and details about each product collection.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "pc_Dj1qSH7bho4SVh7aSDKjU174",
                          "name": "Products in Poland",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "metadata.product_location": {
                              "conditions": {
                                "$in_location": [
                                  "loc_RcYz537sV07e1t5aG5tIH9FD"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-07-14T16:12:26.377Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_FJdBpaQyvK6Gcdul4D2HRChI",
                          "name": "Price less than 10",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "price": {
                              "conditions": {
                                "$less_than": [
                                  1000
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-17T07:11:25.406Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                          "name": "Color is brown",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "metadata.color": {
                              "conditions": {
                                "$is": [
                                  "brown"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T14:27:49.612Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_BxofAP7pyM9FO7M6iaIzIouy",
                          "name": "Color not brown",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "metadata.color": {
                              "conditions": {
                                "$is_not": [
                                  "brown"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T13:49:05.697Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_uHpM9ipEQH2yEpm3D8aohkBM",
                          "name": "Price less than 20",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "price": {
                              "conditions": {
                                "$less_than": [
                                  2000
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T13:46:01.102Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_ZgM25PcZAMp6qItKJRtR2mEi",
                          "name": "Name starts with S",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "name": {
                              "conditions": {
                                "$starts_with": [
                                  "S"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-16T13:42:35.917Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_41V4DiQQO8YGqj0J2oZD57j4",
                          "name": "Ends with baby",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "source_id": {
                              "conditions": {
                                "$ends_with": [
                                  "baby"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-14T12:50:19.885Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_0cRX5wAFt1R1R5Ir6WdTowui",
                          "name": "C start",
                          "type": "AUTO_UPDATE",
                          "filter": {
                            "junction": "and",
                            "name": {
                              "conditions": {
                                "$starts_with": [
                                  "C"
                                ]
                              }
                            }
                          },
                          "created_at": "2022-03-14T12:18:15.588Z",
                          "object": "products_collection"
                        },
                        {
                          "id": "pc_bQ2p9TycbEhd3YzwFCR3JQYA",
                          "name": "Shirts",
                          "type": "STATIC",
                          "products": [
                            {
                              "id": "prod_0a9f9aeddb019a42db",
                              "object": "product"
                            },
                            {
                              "id": "prod_0a9f9ab4ab019a42d5",
                              "object": "product"
                            }
                          ],
                          "created_at": "2022-02-28T11:42:12.484Z",
                          "object": "products_collection"
                        }
                      ],
                      "total": 9
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-product-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "Create Product Collection",
        "description": "This method creates a new product collection.",
        "responses": {
          "200": {
            "description": "Returns information about the newly created collection, as well as an array containing the products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsCreateResponseBody"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCollectionsCreateRequestBody"
              }
            }
          }
        }
      }
    },
    "/v1/product-collections/{productCollectionId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductCollectionId"
          },
          "name": "productCollectionId",
          "in": "path",
          "required": true,
          "description": "A unique product collection ID."
        }
      ],
      "get": {
        "operationId": "get-product-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "Get Product Collection",
        "description": "Retrieves the product collection.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a product collection object if a valid identifier was provided in the path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsGetResponseBody"
                },
                "examples": {
                  "Dynamic": {
                    "value": {
                      "id": "pc_Dj1qSH7bho4SVh7aSDKjU174",
                      "name": "Products in Poland",
                      "type": "AUTO_UPDATE",
                      "filter": {
                        "junction": "and",
                        "metadata.product_location": {
                          "conditions": {
                            "$in_location": [
                              "loc_RcYz537sV07e1t5aG5tIH9FD"
                            ]
                          }
                        }
                      },
                      "created_at": "2022-07-14T16:12:26.377Z",
                      "object": "products_collection"
                    }
                  },
                  "Static": {
                    "value": {
                      "id": "pc_bQ2p9TycbEhd3YzwFCR3JQYA",
                      "name": "Shirts",
                      "type": "STATIC",
                      "products": [
                        {
                          "id": "prod_0a9f9aeddb019a42db",
                          "object": "product"
                        },
                        {
                          "id": "prod_0a9f9ab4ab019a42d5",
                          "object": "product"
                        }
                      ],
                      "created_at": "2022-02-28T11:42:12.484Z",
                      "object": "products_collection"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-product-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "Delete Product Collection",
        "description": "This method deletes a product collection.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/product-collections/{productCollectionId}/products": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterProductCollectionId"
          },
          "name": "productCollectionId",
          "in": "path",
          "required": true,
          "description": "Unique product collection ID."
        }
      ],
      "get": {
        "operationId": "list-products-in-collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "summary": "List Products in Collection",
        "description": "Retrieves list of products from a product collection; works for both dynamic and static product collections.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/starting_after"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of products and/or SKUs grouped in the collection with each product's/SKU's details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollectionsProductsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "prod_0bae45ffc7003ffc52",
                          "source_id": "second_product",
                          "name": "Samsung Phone 2",
                          "price": 230000,
                          "attributes": [
                            "color",
                            "memory",
                            "processor"
                          ],
                          "metadata": {
                            "test": true,
                            "vendor": "Online Store - 4"
                          },
                          "image_url": "https://www.images.com/image4.png",
                          "created_at": "2022-09-12T14:44:13.212Z",
                          "updated_at": null,
                          "object": "product"
                        },
                        {
                          "id": "sku_0bae3b28f610fd0da1",
                          "source_id": "first_product_sku_1",
                          "product_id": "prod_0bae2dc5a090fd0184",
                          "sku": "Samsung phone 256GB",
                          "price": 210000,
                          "attributes": {
                            "color": "vintage-black",
                            "memory": "256",
                            "processor": "Intel"
                          },
                          "image_url": "https://www.website.com/image.png",
                          "metadata": {
                            "test": false,
                            "vendor": "Online Stores",
                            "imported": true
                          },
                          "created_at": "2022-09-12T13:56:51.828Z",
                          "updated_at": "2022-09-12T14:09:40.859Z",
                          "object": "sku",
                          "product": {
                            "id": "prod_0bae2dc5a090fd0184",
                            "source_id": "first_product",
                            "name": "Samsung Phone",
                            "price": null,
                            "attributes": [],
                            "metadata": {},
                            "object": "product"
                          }
                        },
                        {
                          "id": "prod_0bae2dc5a090fd0184",
                          "source_id": "first_product",
                          "name": "Samsung Phone 1",
                          "price": 220000,
                          "attributes": [
                            "color",
                            "memory",
                            "processor"
                          ],
                          "metadata": {
                            "test": true,
                            "vendor": "Online Store - 3"
                          },
                          "image_url": "https://www.images.com/image2.png",
                          "created_at": "2022-09-12T12:58:22.232Z",
                          "updated_at": "2022-09-12T14:44:13.208Z",
                          "object": "product"
                        },
                        {
                          "id": "sku_0b7d7dfb090be5c619",
                          "source_id": "ComicBook_1",
                          "product_id": "prod_0b7d7dfb05cbe5c616",
                          "sku": "Comics1",
                          "price": 1700,
                          "attributes": {},
                          "image_url": null,
                          "metadata": {
                            "color": [
                              "golden"
                            ],
                            "vendor": "islands"
                          },
                          "created_at": "2022-08-05T17:23:14.084Z",
                          "updated_at": "2022-09-09T09:24:43.806Z",
                          "object": "sku",
                          "product": {
                            "id": "prod_0b7d7dfb05cbe5c616",
                            "source_id": "Books",
                            "name": "Comic Books1",
                            "price": null,
                            "attributes": [],
                            "metadata": {},
                            "object": "product"
                          }
                        },
                        {
                          "id": "prod_0b7d7dfb05cbe5c616",
                          "source_id": "Books",
                          "name": "Comic Books1",
                          "price": 2100,
                          "attributes": [],
                          "metadata": {
                            "color": [
                              "silver"
                            ],
                            "vendor": "Bookstore1"
                          },
                          "image_url": "https://www.images.com/image1.png",
                          "created_at": "2022-08-05T17:23:14.071Z",
                          "updated_at": "2022-09-09T09:24:43.728Z",
                          "object": "product"
                        },
                        {
                          "id": "prod_0b7d7c4e814be5c502",
                          "source_id": "prod_1",
                          "name": "Apple iPhone 12",
                          "price": 60000,
                          "attributes": [],
                          "metadata": {
                            "color": [
                              "purple"
                            ],
                            "vendor": "mall"
                          },
                          "image_url": null,
                          "created_at": "2022-08-05T17:15:55.270Z",
                          "updated_at": "2022-09-09T09:24:43.704Z",
                          "object": "product"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules": {
      "get": {
        "operationId": "list-validation-rules",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "List Validation Rules",
        "description": "Retrieve validation rules.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListValidationRules"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          },
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must start on. Represented in ISO 8601 format."
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ParameterDate"
            },
            "description": "Timestamp representing the date and time which results must end on. Represented in ISO 8601 format."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of validation rules.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "val_auLlxlfTR9Ps",
                          "name": "Customer in Segment",
                          "rules": {
                            "1": {
                              "name": "customer.segment",
                              "rules": {},
                              "property": null,
                              "conditions": {
                                "$is": [
                                  "seg_18tD3HR0h8ymPC07rBMLryk3"
                                ]
                              }
                            },
                            "logic": "1"
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [],
                            "included_all": false
                          },
                          "created_at": "2021-12-10T11:08:16.499Z",
                          "updated_at": "2021-12-10T12:01:41.665Z",
                          "type": "advanced",
                          "context_type": "earning_rule.order.paid",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_AvIe1WWuBXre",
                          "name": "Order Volume - Price of Any Item - = 1500 USD",
                          "rules": {
                            "1": {
                              "name": "order.items.price_any",
                              "rules": {},
                              "property": null,
                              "conditions": {
                                "$is": [
                                  150000
                                ]
                              }
                            },
                            "logic": "1"
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [],
                            "included_all": false
                          },
                          "created_at": "2021-12-13T06:54:06.864Z",
                          "type": "advanced",
                          "context_type": "reward_assignment.pay_with_points",
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_aZhPe4tQYMgr",
                          "name": "Business Validation Rule - excluded",
                          "rules": {
                            "logic": ""
                          },
                          "applicable_to": {
                            "excluded": [
                              {
                                "object": "products_collection",
                                "id": "pc_7fVU2RxybhR66YxC7r7BKKRh",
                                "source_id": null
                              },
                              {
                                "object": "sku",
                                "id": "sku_0bae3b28f610fd0da1",
                                "source_id": "first_product_sku_1"
                              }
                            ],
                            "included": [],
                            "included_all": true
                          },
                          "created_at": "2022-09-13T14:38:33.710Z",
                          "type": "basic",
                          "context_type": "campaign.discount_coupons.discount.apply_to_items_by_quantity",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_bbJCAXAWtYX0",
                          "name": "Business Validation Rule - Test - Discount Effect - Amount - Items - each unit of matched product",
                          "rules": {
                            "logic": ""
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [
                              {
                                "object": "products_collection",
                                "id": "pc_a11pr0dUc75",
                                "source_id": null,
                                "effect": "APPLY_TO_EVERY",
                                "quantity_limit": 1
                              }
                            ],
                            "included_all": false
                          },
                          "created_at": "2022-09-02T17:04:23.814Z",
                          "type": "basic",
                          "context_type": "campaign.discount_coupons.discount.apply_to_items_by_quantity",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_BkV21MUJGaiT",
                          "name": "Order Volume -  Total Amount More than 100",
                          "rules": {
                            "1": {
                              "name": "order.amount",
                              "rules": {},
                              "property": null,
                              "conditions": {
                                "$more_than": [
                                  10000
                                ]
                              }
                            },
                            "logic": "1"
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [],
                            "included_all": false
                          },
                          "created_at": "2021-12-10T14:01:10.750Z",
                          "type": "advanced",
                          "context_type": "reward_assignment.pay_with_points",
                          "object": "validation_rules"
                        },
                        {
                          "id": "val_BTQg027UGl0v",
                          "name": "Business Validation Rule - Get some $ off",
                          "rules": {
                            "logic": ""
                          },
                          "applicable_to": {
                            "excluded": [],
                            "included": [
                              {
                                "object": "product",
                                "id": "prod_0a41dd45dc85fcab40",
                                "source_id": "10474",
                                "strict": false
                              }
                            ],
                            "included_all": false
                          },
                          "created_at": "2021-12-07T06:58:23.759Z",
                          "updated_at": "2021-12-22T08:11:18.773Z",
                          "type": "advanced",
                          "context_type": "campaign.discount_coupons.discount.apply_to_items",
                          "assignments_count": 1,
                          "object": "validation_rules"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-validation-rules",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Create Validation Rules",
        "description": "Create validation rules.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationRulesCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Set of Validation Rules",
                    "error": {
                      "message": "Your order does not meet at least one of the required criteria."
                    },
                    "applicable_to": {
                      "included_all": false,
                      "excluded": [
                        {
                          "object": "product",
                          "id": "prod_0bae45ffc7003ffc52",
                          "source_id": "second_product",
                          "strict": false,
                          "effect": "APPLY_TO_EVERY"
                        }
                      ],
                      "included": [
                        {
                          "object": "product",
                          "id": "prod_0b72b00ffed198e344",
                          "source_id": null,
                          "effect": "APPLY_TO_MOST_EXPENSIVE",
                          "quantity_limit": 1
                        },
                        {
                          "object": "products_collection",
                          "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                          "source_id": null,
                          "effect": "APPLY_TO_EVERY",
                          "quantity_limit": 5
                        }
                      ]
                    },
                    "rules": {
                      "1": {
                        "name": "order.metadata",
                        "property": "location",
                        "rules": {},
                        "conditions": {
                          "$is": [
                            "Santorini"
                          ]
                        },
                        "error": {
                          "message": "Your order must be placed at one of our Santorini shops."
                        }
                      },
                      "2": {
                        "name": "custom_event.metadata",
                        "property": "test",
                        "rules": {},
                        "conditions": {
                          "$greater_than_or_equal": [
                            1
                          ]
                        }
                      },
                      "3": {
                        "name": "order.items.every",
                        "rules": {
                          "1": {
                            "name": "order.items.metadata",
                            "property": "test",
                            "rules": {},
                            "conditions": {
                              "$greater_than_or_equal": [
                                1
                              ]
                            }
                          }
                        },
                        "conditions": {
                          "$is": [
                            {
                              "id": "<PROD_ID>",
                              "effect": "APPLY_TO_EVERY",
                              "object": "product",
                              "source_id": "<SOURCE_ID>"
                            }
                          ]
                        }
                      },
                      "logic": "1 or 2"
                    }
                  }
                }
              }
            }
          },
          "description": "Specify the validation rules parameters."
        },
        "responses": {
          "200": {
            "description": "Returns a validation rule object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "val_eR1c41hu0vUU",
                      "name": "Business Validation Rule",
                      "rules": {
                        "1": {
                          "name": "string",
                          "property": "string",
                          "conditions": {
                            "$one_of_voucherify_conditions": [
                              "string"
                            ]
                          },
                          "rules": {
                            "1": {
                              "name": "string",
                              "property": "string",
                              "conditions": {},
                              "rules": {}
                            },
                            "logic": "string"
                          },
                          "error": {
                            "message": "string"
                          }
                        },
                        "logic": "(1 and 2) and (3)"
                      },
                      "error": {
                        "message": "string"
                      },
                      "applicable_to": {
                        "excluded": [
                          {
                            "object": "product",
                            "id": "string",
                            "source_id": "string",
                            "strict": true,
                            "effect": "APPLY_TO_EVERY"
                          }
                        ],
                        "included": [
                          {
                            "object": "product",
                            "id": "string",
                            "source_id": "string",
                            "strict": true,
                            "effect": "APPLY_TO_EVERY",
                            "quantity_limit": 0
                          }
                        ],
                        "included_all": true
                      },
                      "created_at": "2022-03-23T07:44:00.444Z",
                      "updated_at": "2022-04-26T08:35:54.960Z",
                      "type": "basic",
                      "context_type": "earning_rule.order.paid",
                      "object": "validation_rules"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules/{validationRuleId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterValidationRuleId"
          },
          "name": "validationRuleId",
          "in": "path",
          "required": true,
          "description": "A unique validation rule ID."
        }
      ],
      "get": {
        "operationId": "get-validation-rule",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Get Validation Rule",
        "description": "Retrieve the details of a validation rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the validation rule object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "val_TU4de3EP4dlL",
                      "name": "Order is less than $40",
                      "rules": {
                        "1": {
                          "name": "order.amount",
                          "property": null,
                          "conditions": {
                            "$less_than": [
                              4000
                            ]
                          },
                          "rules": {}
                        },
                        "logic": "1"
                      },
                      "applicable_to": {
                        "excluded": [],
                        "included": [],
                        "included_all": false
                      },
                      "created_at": "2022-08-11T16:42:13.630Z",
                      "type": "advanced",
                      "context_type": "reward_assignment.pay_with_points",
                      "object": "validation_rules"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-validation-rule",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Update Validation Rule",
        "description": "Update validation rule parameters.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the parameters to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationRulesUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Set of Validation Rules Updated",
                    "error": {
                      "message": "Your orders do not meet at least one of the required criteria."
                    },
                    "applicable_to": {
                      "included_all": false,
                      "excluded": [
                        {
                          "object": "product",
                          "id": "prod_0bae45ffc7003ffccc",
                          "source_id": "second_product",
                          "strict": false,
                          "effect": "APPLY_TO_EVERY"
                        }
                      ],
                      "included": [
                        {
                          "object": "product",
                          "id": "prod_0b72b00ffed198e333",
                          "source_id": null,
                          "effect": "APPLY_TO_CHEAPEST",
                          "quantity_limit": 1
                        },
                        {
                          "object": "products_collection",
                          "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                          "source_id": null,
                          "effect": "APPLY_TO_EVERY",
                          "quantity_limit": 5
                        }
                      ]
                    },
                    "rules": {
                      "1": {
                        "name": "order.metadata",
                        "property": "place",
                        "rules": {},
                        "conditions": {
                          "$is": [
                            "Santorini"
                          ]
                        },
                        "error": {
                          "message": "Your order must be placed at one of our Santorini shops on the beach."
                        }
                      },
                      "2": {
                        "name": "custom_event.metadata",
                        "property": "lining",
                        "rules": {},
                        "conditions": {
                          "$greater_than_or_equal": [
                            1
                          ]
                        }
                      },
                      "3": {
                        "name": "order.items.every",
                        "rules": {
                          "1": {
                            "name": "order.items.metadata",
                            "property": "test",
                            "rules": {},
                            "conditions": {
                              "$greater_than_or_equal": [
                                1
                              ]
                            }
                          }
                        },
                        "conditions": {
                          "$is": [
                            {
                              "id": "<PRODs_ID>",
                              "effect": "APPLY_TO_EVERY",
                              "object": "product",
                              "source_id": "<SOURCEs_ID>"
                            }
                          ]
                        }
                      },
                      "logic": "1 and 2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the validation rule object with the updated parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "val_VZ91fqqtoVmw",
                      "name": "Set of Validation Rules Updated",
                      "rules": {
                        "1": {
                          "name": "order.metadata",
                          "property": "place",
                          "conditions": {
                            "$is": [
                              "Santorini"
                            ]
                          },
                          "rules": {},
                          "error": {
                            "message": "Your order must be placed at one of our Santorini shops on the beach."
                          }
                        },
                        "2": {
                          "name": "custom_event.metadata",
                          "property": "lining",
                          "conditions": {
                            "$greater_than_or_equal": [
                              1
                            ]
                          },
                          "rules": {}
                        },
                        "3": {
                          "name": "order.items.every",
                          "conditions": {
                            "$is": [
                              {
                                "id": "<PRODs_ID>",
                                "effect": "APPLY_TO_EVERY",
                                "object": "product",
                                "source_id": "<SOURCEs_ID>"
                              }
                            ]
                          },
                          "rules": {
                            "1": {
                              "name": "order.items.metadata",
                              "property": "test",
                              "conditions": {
                                "$greater_than_or_equal": [
                                  1
                                ]
                              },
                              "rules": {}
                            }
                          }
                        },
                        "logic": "1 and 2"
                      },
                      "error": {
                        "message": "Your orders do not meet at least one of the required criteria."
                      },
                      "applicable_to": {
                        "excluded": [
                          {
                            "object": "product",
                            "id": "prod_0bae45ffc7003ffccc",
                            "source_id": "second_product",
                            "strict": false,
                            "effect": "APPLY_TO_EVERY"
                          }
                        ],
                        "included": [
                          {
                            "object": "product",
                            "id": "prod_0b72b00ffed198e333",
                            "source_id": null,
                            "strict": false,
                            "effect": "APPLY_TO_CHEAPEST",
                            "quantity_limit": 1
                          },
                          {
                            "object": "products_collection",
                            "id": "pc_4ndRXAsTOzwSdHcQcxf489uU",
                            "source_id": null,
                            "strict": false,
                            "effect": "APPLY_TO_EVERY",
                            "quantity_limit": 5
                          }
                        ],
                        "included_all": false
                      },
                      "created_at": "2022-09-14T05:54:51.099Z",
                      "updated_at": "2022-09-14T06:06:32.855Z",
                      "type": "complex",
                      "context_type": "global",
                      "object": "validation_rules"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-validation-rules",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Delete Validation Rule",
        "description": "This method deletes a validation rule.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/validation-rules-assignments": {
      "get": {
        "operationId": "list-validation-rules-assignments",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "List Validation Rules' Assignment(s)",
        "description": "List all validation rules' assignments or filter the results using the related object ID or the validation rule ID query parameters. \\n\\n## How to retrieve specific validation rule assignments(s)\\n\\n### Related object ID\\n\\nTo find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.  \\n\\n\\n<!--\\ntitle: \\"Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`curl\\ncurl -X GET \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\" \\\\\\n  -H \\"Content-Type: application/json\\" \\\\\\n  https://api.voucherify.io/v1/validation-rules-assignments?related_object_id=promo_kJliy076IuJYtuYWSHE9fSuT\\n\`\`\`\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"object\\": \\"list\\",\\n    \\"data_ref\\": \\"data\\",\\n    \\"data\\": [\\n        {\\n            \\"id\\": \\"asgm_tZaqxeO8gP4q91jG\\",\\n            \\"rule_id\\": \\"val_WB6ETAiFztw5\\",\\n            \\"related_object_id\\": \\"promo_kJliy076IuJYtuYWSHE9fSuT\\",\\n            \\"related_object_type\\": \\"promotion_tier\\",\\n            \\"created_at\\": \\"2022-08-10T10:30:39.986Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        }\\n    ],\\n    \\"total\\": 1\\n}\\n\`\`\`\\n\\n### Validation rule ID\\n\\nYou can use the validation rule ID to find assignment(s) for a specific validation rule.\\n\\n\\n<!--\\ntitle: \\"Request\\"\\nlineNumbers: true\\n-->\\n\`\`\`curl\\ncurl -X GET \\\\\\n  -H \\"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\\" \\\\\\n  -H \\"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\\" \\\\\\n  -H \\"Content-Type: application/json\\" \\\\\\n  https://api.voucherify.io/v1/validation-rules-assignments?rule=val_ZEZmA9oit8aU\\n\`\`\`\\n<!--\\ntitle: \\"Response\\"\\nlineNumbers: true\\n-->\\n\`\`\`json\\n{\\n    \\"object\\": \\"list\\",\\n    \\"data_ref\\": \\"data\\",\\n    \\"data\\": [\\n        {\\n            \\"id\\": \\"asgm_vef0G6d9Al0rABxq\\",\\n            \\"rule_id\\": \\"val_ZEZmA9oit8aU\\",\\n            \\"related_object_id\\": \\"camp_rRsfatlwN7unSeUIJDCYedal\\",\\n            \\"related_object_type\\": \\"campaign\\",\\n            \\"created_at\\": \\"2022-06-29T11:43:52.953Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        },\\n        {\\n            \\"id\\": \\"asgm_sFV4wEFvldwIvgfb\\",\\n            \\"rule_id\\": \\"val_ZEZmA9oit8aU\\",\\n            \\"related_object_id\\": \\"distr_9QKI02wqgjWyvZXeQkFEPmkkYe\\",\\n            \\"related_object_type\\": \\"distribution\\",\\n            \\"created_at\\": \\"2022-06-29T11:41:07.680Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        },\\n        {\\n            \\"id\\": \\"asgm_69Qifyv6UZynFIIQ\\",\\n            \\"rule_id\\": \\"val_ZEZmA9oit8aU\\",\\n            \\"related_object_id\\": \\"promo_g83qUzYZpfX0OMAFOVoQuOYG\\",\\n            \\"related_object_type\\": \\"promotion_tier\\",\\n            \\"created_at\\": \\"2022-06-29T11:29:41.906Z\\",\\n            \\"object\\": \\"validation_rules_assignment\\"\\n        }\\n    ],\\n    \\"total\\": 3\\n}\\n\`\`\`\\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "name": "related_object_id",
            "description": "The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution."
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterValidationRuleId"
            },
            "in": "query",
            "name": "rule",
            "description": "Validation rule ID."
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterString"
            },
            "in": "query",
            "description": "Sorts the results using one of the filtering options: \`-created_at\`, \`created_at\`, where the dash \`-\` preceding a sorting option means sorting in a descending order.",
            "name": "order"
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary with a data property that contains an array of validation rule assignments. Each entry in the array is a separate object. If no more validation rule assignments are available, the resulting array will be empty. The result can be narrowed down according to default filters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesAssignmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "asgm_2S7Xm4dab4UvYAgm",
                          "rule_id": "val_5ix74ru7e",
                          "related_object_id": "camp_YDsFdX8TgFtT0RUuKEFyhqs3",
                          "related_object_type": "campaign",
                          "created_at": "2022-02-08T10:49:30.534Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_sFV4wEFvldwIvgfb",
                          "rule_id": "val_ZEZmA9oit8aU",
                          "related_object_id": "distr_9QKI02wqgjWyvZXeQkFEPmkkYe",
                          "related_object_type": "distribution",
                          "created_at": "2022-06-29T11:41:07.680Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_8xelF5R4zB8ue168",
                          "rule_id": "val_ggDODO6fakMs",
                          "related_object_id": "ern_xrRuGEV7EW0X8wtMaze3HOfw",
                          "related_object_type": "earning_rule",
                          "created_at": "2022-02-28T12:25:56.783Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_tZaqxeO8gP4q91jG",
                          "rule_id": "val_WB6ETAiFztw5",
                          "related_object_id": "promo_kJliy076IuJYtuYWSHE9fSuT",
                          "related_object_type": "promotion_tier",
                          "created_at": "2022-08-10T10:30:39.986Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_xTMHiyPGSz3rp5m2",
                          "rule_id": "val_2AxnWmW2ra6X",
                          "related_object_id": "rewa_m9hEAu10KsPcLhGXiHG85aY0",
                          "related_object_type": "reward_assignment",
                          "created_at": "2021-12-10T11:38:35.922Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_DhlDn54JwqVFJzR6",
                          "rule_id": "val_eR1c41hu0vUU",
                          "related_object_id": "v_XuF7icVlUcVpHsSY9nG7n7yJa5wx27Va",
                          "related_object_type": "voucher",
                          "created_at": "2022-03-23T07:50:31.068Z",
                          "object": "validation_rules_assignment"
                        }
                      ],
                      "total": 6
                    }
                  },
                  "No Assignments": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [],
                      "total": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules/{validationRuleId}/assignments": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterValidationRuleId"
          },
          "name": "validationRuleId",
          "in": "path",
          "required": true,
          "description": "Unique validation rule ID."
        }
      ],
      "get": {
        "operationId": "list-validation-rule-assignments",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "List Validation Rule Assignments",
        "description": "Retrieve validation rule assignments for a specific validation rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListValidationRuleAssignments"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of validation rule assignments.  If the validation rule ID provided in the path parameter cannot be found, the endpoint will return an empty \`data\` array and a total of \`0\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesAssignmentsListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "asgm_74F7QZoYbUoljwQO",
                          "rule_id": "val_4j7DCRm2IS59",
                          "related_object_id": "v_MBOEmHelKwvykVZ8JcT4TE5Kla5IMJyc",
                          "related_object_type": "voucher",
                          "created_at": "2022-02-17T09:05:34.642Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_zzLBm8mIzGQStXl9",
                          "rule_id": "val_4j7DCRm2IS59",
                          "related_object_id": "v_JtWunK6jUo7X2qOFj0SyRHq4p9tgENlT",
                          "related_object_type": "voucher",
                          "created_at": "2022-02-17T08:18:15.085Z",
                          "object": "validation_rules_assignment"
                        },
                        {
                          "id": "asgm_JztMAws0e0Qx2Xy6",
                          "rule_id": "val_4j7DCRm2IS59",
                          "related_object_id": "camp_kjja4moiVB7hQKPGOT61026Z",
                          "related_object_type": "campaign",
                          "created_at": "2022-02-15T13:26:34.807Z",
                          "object": "validation_rules_assignment"
                        }
                      ],
                      "total": 3
                    }
                  },
                  "No Assignments": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [],
                      "total": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/validation-rules/{validationRuleId}/assignments/{assignmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterValidationRuleId"
          },
          "name": "validationRuleId",
          "in": "path",
          "required": true,
          "description": "A unique validation rule ID."
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterRewardAssignmentId"
          },
          "name": "assignmentId",
          "in": "path",
          "required": true,
          "description": "A unique validation rule assignment ID."
        }
      ],
      "delete": {
        "operationId": "delete-validation-rule-assignment",
        "tags": [
          "VALIDATION RULES API"
        ],
        "summary": "Delete Validation Rule Assignment",
        "description": "This method deletes a validation rule assignment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/segments/{segmentId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterSegmentId"
          },
          "name": "segmentId",
          "in": "path",
          "required": true,
          "description": "A unique customer segment ID."
        }
      ],
      "delete": {
        "operationId": "delete-segment",
        "tags": [
          "SEGMENTS API"
        ],
        "summary": "Delete Segment",
        "description": "This method deletes a customer segment.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/events": {
      "post": {
        "operationId": "track-custom-event",
        "tags": [
          "EVENTS API"
        ],
        "summary": "Track Custom Event",
        "description": "To track a custom event, you create an event object.  \\n\\nThe event object must be linked to the customer who performs the action. If a customer doesn't exist in Voucherify, the customer will be created.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the custom event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "event": "event-name",
                    "customer": {
                      "source_id": "referee-source_id"
                    },
                    "referral": {
                      "code": "voucher-code",
                      "referrer_id": "referrer-source_id"
                    }
                  }
                },
                "Referral triggered by custom event": {
                  "value": {
                    "event": "user_subscribed",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "referral": {
                      "code": "46jL0kYI",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
                    },
                    "metadata": {
                      "login": "bob",
                      "pricing_plan": "PP1",
                      "volume_number": 4
                    }
                  }
                },
                "Earning rule triggered by custom event": {
                  "value": {
                    "event": "cart_abandoned",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "loyalty": {
                      "code": "6CB4KDAu"
                    },
                    "metadata": {
                      "date": "2022-12-01",
                      "flag": true,
                      "text": "Cart abandoned event",
                      "date_time": "2022-12-01T09:24:33.061Z",
                      "number": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the event type if the event was received by the application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "event",
                      "type": "cart_abandoned",
                      "customer": {
                        "id": "cust_ypePCF6IU6fnUvec6RMXZuH4",
                        "name": "John Doe",
                        "email": "john@voucherify.io",
                        "source_id": "source_customer_event",
                        "metadata": {
                          "prop": "value"
                        },
                        "object": "customer"
                      },
                      "referral": null,
                      "loyalty": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/events": {
      "post": {
        "operationId": "track-custom-event-client-side",
        "tags": [
          "EVENTS API"
        ],
        "summary": "Track Custom Event (client-side)",
        "description": "To track a custom event, you create an event object.  \\n\\nThe event object must be linked to the customer who performs the action. If a customer doesn't exist in Voucherify, the customer will be created.",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the custom event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientEventsCreateRequestBody"
              },
              "examples": {
                "Referral triggered by custom event": {
                  "value": {
                    "event": "user_subscribed",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "referral": {
                      "code": "46jL0kYI",
                      "referrer_id": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
                    },
                    "metadata": {
                      "login": "bob",
                      "pricing_plan": "PP1",
                      "volume_number": 4
                    }
                  }
                },
                "Earning rule triggered by custom event": {
                  "value": {
                    "event": "cart_abandoned",
                    "customer": {
                      "source_id": "source_customer_event"
                    },
                    "loyalty": {
                      "code": "6CB4KDAu"
                    },
                    "metadata": {
                      "date": "2022-12-01",
                      "flag": true,
                      "text": "Cart abandoned event",
                      "date_time": "2022-12-01T09:24:33.061Z",
                      "number": 1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the event type if the event was received by the application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientEventsCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "event",
                      "type": "cart_abandoned",
                      "customer": {
                        "id": "cust_ypePCF6IU6fnUvec6RMXZuH4",
                        "name": "John Doe",
                        "email": "john@voucherify.io",
                        "source_id": "source_customer_event",
                        "metadata": {
                          "prop": "value"
                        },
                        "object": "customer"
                      },
                      "referral": null,
                      "loyalty": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/consents": {
      "get": {
        "operationId": "list-consents-client-side",
        "tags": [
          "CONSENTS API"
        ],
        "summary": "List Consents (client-side)",
        "description": "List the Marketing Permission definitions within the project along with opt-in consents.",
        "parameters": [
          {
            "$ref": "#/components/parameters/origin"
          }
        ],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns marketing permission groups and opt-in consents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/18_res_list_consents_GET"
                },
                "examples": {
                  "Marketing Permissions Groups and Consents": {
                    "value": {
                      "groups": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "cnstgr_3c7Z3rcOLv51bsXlRtTZPYj8",
                            "name": "Consent group",
                            "description": "Consent group",
                            "consents": [
                              "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                              "cnst_VCmucIvAsmDYw2PPAok6bcYy"
                            ],
                            "created_at": "2022-04-13T09:12:47.743Z",
                            "updated_at": "2022-04-13T09:45:46.616Z",
                            "object": "consent_group"
                          },
                          {
                            "id": "cnstgr_EAIakTj5lNG2ZpiQEauGqBlY",
                            "name": "Consent group 2",
                            "description": "Consent group 2",
                            "consents": [
                              "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                              "cnst_VCmucIvAsmDYw2PPAok6bcYy"
                            ],
                            "created_at": "2022-04-13T10:03:46.564Z",
                            "updated_at": null,
                            "object": "consent_group"
                          }
                        ],
                        "total": 2
                      },
                      "consents": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                            "name": "Consent",
                            "description": "Consent for marketing",
                            "category": "New",
                            "created_at": "2022-04-13T09:11:27.037Z",
                            "updated_at": null,
                            "object": "consent"
                          },
                          {
                            "id": "cnst_VCmucIvAsmDYw2PPAok6bcYy",
                            "name": "Consent 2",
                            "description": "Consent 2",
                            "category": "Trial",
                            "created_at": "2022-04-13T09:45:37.597Z",
                            "updated_at": null,
                            "object": "consent"
                          }
                        ],
                        "total": 2
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/async-actions/{asyncActionId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterAsyncActionId"
          },
          "name": "asyncActionId",
          "in": "path",
          "required": true,
          "description": "Unique ID of the asynchronous operation."
        }
      ]
    },
    "/v1/exports": {
      "post": {
        "operationId": "create-export",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "Create Export",
        "description": "Create export object. The export can be any of the following types: \`voucher\`, \`redemption\`, \`publication\`, \`customer\`, \`order\`, \`points_expiration\`, or \`voucher_transactions\`.  \\n\\n## Defaults\\n\\nIf you only specify the object type in the request body without specifying the fields, the API will return the following fields per export object:\\n\\n| **Export Object** | **Default fields returned** |\\n|:---|:---|\\n| order | \`id\`, \`source_id\`, \`status\` |\\n| voucher | \`code\`, \`voucher_type\`, \`value\`, \`discount_type\` |\\n| publication | \`code\`, \`customer_id\`, \`date\`, \`channel\` |\\n| redemption | \`id\`, \`object\`, \`voucher_code\`, \`customer_id\`, \`date\`, \`result\` |\\n| customer | \`name\`, \`source_id\` |\\n| points_expiration | \`id\`, \`campaign_id\`, \`voucher_id\`, \`status\`, \`expires_at\`, \`points\` |\\n| voucher_transactions | \`id\`, \`type\`, \`source_id\`, \`status\`, \`reason\`, \`source\`, \`balance\`, \`amount\`, \`created_at\` |\\n\\n\\n## Fetching particular data sets\\n\\nUsing the \`parameters\` body parameter, you can narrow down which fields to export and how to filter the results. The fields are an array of strings containing the data that you would like to export. These fields define the headers in the CSV file. The array can be a combintation of any of the following available fields:\\n\\n## Orders  \\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique order ID. | ord_A69RIxEdRsPuC6i8gFGVHUft |\\n| source_id | Unique order source ID. | 8638 |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the order was created. | 2022-03-09T09:16:32.521Z |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the order was last updated. | 2022-03-09T09:16:33.331Z |\\n| status | Order status. | \`PAID\`, \`CREATED\`, \`FULFILLED\`, \`CANCELED\` |\\n| amount | Total amount of order items. | 7700 |\\n| discount_amount | Represents total amount of the discount applied to whole cart. | 500 |\\n| items_discount_amount | Represents total amount of the discount applied to order line items. | 100 |\\n| total_discount_amount | All discounts applied to the order including discounts applied to particular order line items and discounts applied to the whole cart. | 600 |\\n| total_amount | Total order amount after applying all discounts. | 7100 |\\n| customer_id | Customer unique ID. | cust_2G4fUQdCXUqp35nXNleav7bO |\\n| referrer_id | Referrer unique ID. | cust_IkrTR674vvQvr9a4rDMiqglY |\\n| metadata | Order metadata; expressed as metadata.X, where X is the name of the custom metadata property. | 1 |\\n\\n## Vouchers  \\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique voucher ID. | v_HSnGD2vNIHYighTQxwcB4dtVAv8VOmZD |\\n| code | Unique voucher code. | WELCOME100 |\\n| voucher_type | Type of voucher. | \`DISCOUNT_VOUCHER\`, \`GIFT_VOUCHER\`, \`LOYALTY_CARD\` |\\n| value | Value of voucher. | \`DISCOUNT_VOUCHER\` : amount, percent, unit<br>\`GIFT_VOUCHER\`: amount left to spend<br>\`LOYALTY_CARD\`: available usable points |\\n| discount_type | The type of discount for a \`DISCOUNT_VOUCHER\`. | \`AMOUNT\`, \`PERCENT\`, \`UNIT\`, \`FIXED\` |\\n| campaign | Unique campaign name. | Summer Discounts 20% off |\\n| category | Tag defining the category that this voucher belongs to. |  |\\n| start_date | Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is _inactive_ before this date. | 2020-12-10T23:00:00.000Z |\\n| expiration_date | Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format. Voucher is _inactive_ after this date. | 2023-12-31T23:00:00.000Z |\\n| gift_balance | Amount left to spend. | 1000 |\\n| loyalty_balance | Available usable points. | 2000 |\\n| redemption_quantity | Maximum number of times a voucher can be redeemed. | 2 |\\n| redemption_count | Total redemptions. | 59 |\\n| active | Boolean indicating whether the voucher is available for use. | \`true\`, \`false\` |\\n| qr_code | URL to QR representation of encrypted code. |  |\\n| bar_code | URL to barcode representation of encrypted code. |  |\\n| metadata | Custom voucher metadata. |  |\\n| is_referral_code | Boolean indicating whether the voucher is a referral code. | \`true\`, \`false\` |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the voucher was created. | 2022-04-14T09:55:46.814Z |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the voucher was last updated. | 2022-04-14T10:02:18.036Z |\\n| validity_timeframe_interval | Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an interval of \`P2D\` will be active every other day. | P2D |\\n| validity_timeframe_duration | Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a duration of \`PT1H\` will be valid for a duration of one hour. | PT1H |\\n| validity_day_of_week | Array corresponding to the particular days of the week in which the voucher is valid. | \\"1,2,3,4,5\\" |\\n| discount_amount_limit | For \`PERCENT\` discount type, this is the maximum threshold allowed to be deducted. | 50 |\\n| campaign_id | Parent campaign ID. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\\n| additional_info | An optional field to keep any extra textual information about the code such as a code description and details. |  |\\n| customer_id | Unique customer ID of the assigned owner to whom the voucher was published. | cust_7iUa6ICKyU6gH40dBU25kQU1 |\\n| discount_unit_type | For \`UNIT\` discount type, either a shipping or product ID for a \`UNIT\` discount with one product. | prod_5h1pp1ng, prod_0a9f9aeddb019a42db |\\n| discount_unit_effect | \`UNIT\` discount effect. | \`ADD_MANY_ITEMS\`, \`ADD_MISSING_ITEMS\`,\`ADD_NEW_ITEMS\` |\\n| customer_source_id | Unique customer source id of the assigned owner to whom the voucher was published. | name.lastname@email.com |\\n\\n\\n## Publications\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| voucher_code | Unique voucher code. | WELCOME100 |\\n| customer_id | Customer unique ID. | cust_7iUa6ICKyU6gH40dBU25kQU1 |\\n| customer_source_id | Unique customer source id of the assigned owner to whom the voucher was published. | name.lastname@email.com |\\n| date | Timestamp in ISO 8601 format representing the date and time when the voucher was published. | 2022-04-28T10:19:30.792Z |\\n| channel | Publication channel. | voucherify-website |\\n| campaign | Unique campaign name. | Summer Discounts 20% off |\\n| is_winner |  |  |\\n| metadata | Custom publication metadata. |  |\\n\\n## Redemptions\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique redemption ID. | r_0acf3a6dae00e679c8, rf_0acf3a495740e679b8 |\\n| object | Object being exported; by default \`redemption\`. | redemption |\\n| date | Timestamp in ISO 8601 format representing the date and time when the voucher was redeemed. | 2022-03-23T08:52:24.867Z |\\n| voucher_code | Unique voucher code redeemed. | WELCOME100 |\\n| campaign | Parent campaign name of voucher if applicable. | Summer Discounts 20% off |\\n| promotion_tier_id |  | promo_Mwy9XpA0TLctSGriM5kum0qp |\\n| customer_id | Unique customer ID of redeeming customer. | cust_nk0N1uNQ1YnupAoJGOgvsODC |\\n| customer_source_id | Unique source ID of redeeming customer. | name.lastname@email.com |\\n| customer_name | Customer name. | John Smith |\\n| tracking_id |  | track_Pw6r3ejnml43kIwNS4Zj09KZ67xOfLUy |\\n| order_amount | Total order amount before applying all discounts. | 1000 |\\n| gift_amount | Gift credits used for redemption. | 10 |\\n| loyalty_points |  | 12 |\\n| result | Tells you whether the redemption succeeded. | \`SUCCESS\`, \`FAILURE\` |\\n| failure_code | Internal Voucherify code for reason why redemption failed. | invalid_customer |\\n| failure_message | A human-readable message providing a short description explaining why the redemption failed. | Customer must be a holder of a loyalty card. |\\n| metadata | Custom redemption metadata. |  |\\n\\n## Customers\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| name | Customer name. | John Smith |\\n| id | Unique customer ID. | cust_J1CDUdbqn5Exva8ASWk1Fq0j |\\n| description | An arbitrary string that you can attach to a customer object. | Customer requesting to be added to VIP tier. |\\n| email | Customer's email. | name.lastname@email.com |\\n| source_id | Unique custom customer identifier. | name.lastname@email.com |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the customer was created. | 2022-02-03T13:10:11.928Z |\\n| address_city | City | Houston |\\n| address_state | State | TX |\\n| address_line_1 | First line of customer's address. | 72738 Main St |\\n| address_line_2 | Second line of customer's address. | Bld 2, Apt 4 |\\n| address_country | Country | United States of America |\\n| address_postal_code | Postal code (ZIP code) | 77042-4143 |\\n| redemptions_total_redeemed | Total customer redemptions. | 5 |\\n| redemptions_total_failed | Total customer failed redemptions. | 2 |\\n| redemptions_total_succeeded | Total customer succeeded redemptions. | 3 |\\n| redemptions_total_rolled_back | Total customer redemptions that were rolled back. | 3 |\\n| redemptions_total_rollback_failed | Total customer redemptions that were unsuccessfully rolled back. | 2 |\\n| redemptions_total_rollback_succeeded | Total customer redemptions that were successfully rolled back. | 1 |\\n| orders_total_amount | Total sum of order amounts over customer lifetime. Value is multiplied by 100 to precisely represent 2 decimal places. | 10000 (represents $100) |\\n| orders_total_count | Total number of customer orders. | 2 |\\n| orders_average_amount | Average amount spent on orders. Value is multiplied by 100 to precisely represent 2 decimal places. | 5000 (represents $50) |\\n| orders_last_order_amount | How much did the customer spend on their last order. Value is multiplied by 100 to precisely represent 2 decimal places. | 5000 (represents $50) |\\n| orders_last_order_date | When was the last customer order; timestamp in ISO 8601 format representing the date and time. | 2022-02-03T13:17:30.630Z |\\n| loyalty_points | Sum of customer's loyalty points to go across all loyalty cards. | 2000 |\\n| loyalty_referred_customers | How many customers were referred by this customer. | 3 |\\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the customer was updated. | 2022-02-14T14:10:14.305Z |\\n| phone | Customer's phone number. | +1 (294) 752-1846 |\\n| birthday | Customer's birthday. | 2022-01-01 |\\n| metadata | Customer metadata. | All metadata fields defined in Metadata Schema for the Customer object. |\\n| birthdate | Customer's birthdate. | 2022-01-01 |\\n\\n## Points Expirations\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Loyalty points bucket ID. | lopb_Wl1o3EjJIHSNjvO5BDLy4z1n |\\n| campaign_id | Campaign ID of the parent loyalty campaign. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\\n| voucher_id | Voucher ID of the parent loyalty card. | v_YLn0WVWXSXbUfDvxgrgUbtfJ3SQIY655 |\\n| status | Status of the loyalty points bucket. | \`ACTIVE\` or \`INACTIVE\` |\\n| expires_at | Timestamp in ISO 8601 format representing the date when the points expire. | 2022-06-30 |\\n| points | Number of points. | 1000 |\\n\\n ## Gift Card Transactions\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`CREDITS_REMOVAL\` <br> - \`CREDITS_ADDITION\` <br> - \`CREDITS_REFUND\` <br> - \`CREDITS_REDEMPTION\` |\\n| source_id | Unique transaction source ID. | 8638 |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The gift card or loyalty card balance after the transaction. |  |\\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | API |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n\\n ## Loyalty Card Transactions\\n\\n| **Field** | **Definition** | **Example Export** |\\n|:---|:---|:---|\\n| id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 |\\n| type | Transaction type. | - \`POINTS_EXPIRATION\` <br> - \`POINTS_ADDITION\` <br> - \`POINTS_REMOVAL\` <br> - \`POINTS_TRANSFER_OUT\` <br> - \`POINTS_ACCRUAL\` <br> - \`POINTS_REFUND\` <br> - \`POINTS_REDEMPTION\` |\\n| source_id | Custom source ID of the transaction if one was included originally. | source_id_custom |\\n| reason | Contains the reason for the transaction if one was included originally. |  |\\n| balance | The loyalty card balance after the transaction. |  |\\n| amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\\n| source|  Channel through which the transaction was initiated. | - \`API\` <br> - \`voucherify-web-ui\` <br> - \`Automation\` |\\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the export that you would like to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportsCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns export object and URL of CSV file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsCreateResponseBody"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "list-exports",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "List Exports",
        "description": "List all exports. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/ParameterOrderListExports"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash \`-\` preceding a sorting option means sorting in a descending order."
          }
        ],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "A dictionary with an exports property that contains an array of exports. Each entry in the array is a separate export object. The list will return the following types of exported objects: \`voucher\`, \`redemption\`, \`publication\`, \`customer\`, \`order\`, \`points_expiration\`, or \`voucher_transactions\`. \\n\\nThe \`channel\` parameter in the response body returns the channel that was used to generate the particular export. The \`user_id\` identifies the specific user who initiated the export through the Voucherify Dashboard; this \`user_id\` is returned when the channel value is \`WEBSITE\`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsListResponseBody"
                },
                "examples": {
                  "List Exports": {
                    "value": {
                      "object": "list",
                      "data_ref": "exports",
                      "exports": [
                        {
                          "id": "exp_323UOPsH42twhJVaDZXf4UNo",
                          "object": "export",
                          "created_at": "2022-08-04T09:11:25.208Z",
                          "status": "DONE",
                          "channel": "API",
                          "exported_object": "order",
                          "parameters": {
                            "order": "-created_at",
                            "fields": [
                              "id",
                              "source_id",
                              "status"
                            ],
                            "filters": {
                              "junction": "and"
                            }
                          },
                          "result": {
                            "url": "https://download.voucherify.io/v1/exports/exp_323UOPsH42twhJVaDZXf4UNo?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnQiOiJzYW11ZWwuamFuaWtAdm91Y2hlcmlmeS5pbyIsImV4cG9ydElkIjoiZXhwXzMyM1VPUHNINDJ0d2hKVmFEWlhmNFVObyIsImlhdCI6MTY1OTYwNDI4NiwiZXhwIjoxNjU5NjA1MTg2fQ.IgFnKagyoQ7_O2tGswZxpegUMtllSbzMfPMX-_89W7o"
                          },
                          "user_id": null
                        },
                        {
                          "id": "exp_sPQR0na2gU0pIVUKIz4wdQI9",
                          "object": "export",
                          "created_at": "2022-05-02T06:44:03.186Z",
                          "status": "DONE",
                          "channel": "API",
                          "exported_object": "voucher",
                          "parameters": {
                            "order": "-created_at",
                            "fields": [
                              "id",
                              "code",
                              "voucher_type",
                              "value"
                            ],
                            "filters": {
                              "junction": "and"
                            }
                          },
                          "result": {
                            "url": "https://download.voucherify.io/v1/exports/exp_sPQR0na2gU0pIVUKIz4wdQI9?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnQiOiJzYW11ZWwuamFuaWtAdm91Y2hlcmlmeS5pbyIsImV4cG9ydElkIjoiZXhwX3NQUVIwbmEyZ1UwcElWVUtJejR3ZFFJOSIsImlhdCI6MTY1MTQ3Mzg0NCwiZXhwIjoxNjUxNDc0NzQ0fQ.yNIQHcHMO-HSKYejtgNjRVh3cRa_JqnmhBXdnAX2vHQ"
                          },
                          "user_id": null
                        },
                        {
                          "id": "exp_CGnCVltmWjI9V1pGlnunw2Nf",
                          "object": "export",
                          "created_at": "2022-01-13T09:03:18.293Z",
                          "status": "DONE",
                          "channel": "API",
                          "exported_object": "customer",
                          "parameters": {
                            "order": "",
                            "fields": [
                              "name",
                              "id",
                              "email",
                              "source_id",
                              "created_at"
                            ],
                            "filters": {
                              "junction": "and"
                            },
                            "response_format": "CSV"
                          },
                          "result": {
                            "url": "https://download.voucherify.io/v1/exports/exp_CGnCVltmWjI9V1pGlnunw2Nf?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ"
                          },
                          "user_id": null
                        }
                      ],
                      "total": 3
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/exports/{exportId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterExportId"
          },
          "name": "exportId",
          "in": "path",
          "required": true,
          "description": "Unique export object ID of previously created export. This object can be a: \`voucher\`, \`redemption\`, \`publication\`, \`customer\`, \`order\`, \`points_expiration\`, or \`voucher_transactions\`."
        }
      ],
      "get": {
        "operationId": "get-export",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "Get Export",
        "description": "Retrieves the URL of the downloadable file, which was generated via the <!-- [Create Export](OpenAPI.json/paths/~1exports/post) -->[Create Export](ref:create-export) method.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the export object if a valid identifier was provided in the path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportsGetResponseBody"
                },
                "examples": {
                  "Get Export": {
                    "value": {
                      "id": "exp_CGnCVltmWjI9V1pGlnunw2Nf",
                      "object": "export",
                      "created_at": "2022-01-13T09:03:18.293Z",
                      "status": "DONE",
                      "channel": "API",
                      "exported_object": "customer",
                      "parameters": {
                        "order": "",
                        "fields": [
                          "name",
                          "id",
                          "email",
                          "source_id",
                          "created_at"
                        ],
                        "filters": {
                          "junction": "and"
                        },
                        "response_format": "CSV"
                      },
                      "result": {
                        "url": "https://download.voucherify.io/v1/exports/exp_CGnCVltmWjI9V1pGlnunw2Nf?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ"
                      },
                      "user_id": null
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-export",
        "tags": [
          "EXPORTS API"
        ],
        "summary": "Delete Export",
        "description": "This method deletes a previously created export object.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if deletion is successful."
          }
        }
      }
    },
    "/v1/categories": {
      "get": {
        "operationId": "list-categories",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "List Categories",
        "description": "List all categories.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary of category objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesListResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "object": "list",
                      "data_ref": "data",
                      "data": [
                        {
                          "id": "cat_0b5f49fb31c3bf6ab0",
                          "name": "Sixth",
                          "hierarchy": 6,
                          "created_at": "2022-07-13T06:21:36.852Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f49e6e1ce5bd2ba",
                          "name": "Fifth",
                          "hierarchy": 5,
                          "created_at": "2022-07-13T06:21:16.039Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f49deafce5bd2b5",
                          "name": "Fourth",
                          "hierarchy": 4,
                          "created_at": "2022-07-13T06:21:07.662Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f49d45c43bf6a99",
                          "name": "Third",
                          "hierarchy": 3,
                          "created_at": "2022-07-13T06:20:57.094Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b5f3f9881ce5bccb6",
                          "name": "Second",
                          "hierarchy": 2,
                          "created_at": "2022-07-13T05:36:14.355Z",
                          "object": "category"
                        },
                        {
                          "id": "cat_0b53bc388dc2f108ba",
                          "name": "First",
                          "hierarchy": 1,
                          "created_at": "2022-07-04T06:58:57.734Z",
                          "object": "category"
                        }
                      ],
                      "total": 6
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Create Category",
        "description": "Create category with a specific name and hierarchy.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the category that you would like to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoriesCreateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Eighth",
                    "hierarchy": 8
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a newly created category object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesCreateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cat_0b8b5a427a0283c854",
                      "name": "Eighth",
                      "hierarchy": 8,
                      "created_at": "2022-08-16T11:45:54.171Z",
                      "object": "category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/categories/{categoryId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterCategoryId"
          },
          "name": "categoryId",
          "in": "path",
          "required": true,
          "description": "Unique category ID assigned by Voucherify."
        }
      ],
      "get": {
        "operationId": "get-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Get Category",
        "description": "Retrieve a category by the category ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a category object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesGetResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cat_0b5f49fb31c3bf6ab0",
                      "name": "Sixth",
                      "hierarchy": 6,
                      "created_at": "2022-07-13T06:21:36.852Z",
                      "object": "category"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Delete Category",
        "description": "Delete a category by the category ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          }
        }
      },
      "put": {
        "operationId": "update-category",
        "tags": [
          "CATEGORIES API"
        ],
        "summary": "Update Category",
        "description": "Update category using the category ID.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Specify the details of the category that you would like to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoriesUpdateRequestBody"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Summer",
                    "hierarchy": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a category object with a refreshed \`updated_at\` property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesUpdateResponseBody"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "cat_0b60cfe7d0d7ddbb55",
                      "name": "Update",
                      "hierarchy": 1,
                      "created_at": "2022-07-14T10:45:13.156Z",
                      "updated_at": "2022-08-16T11:03:54.727Z",
                      "object": "category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/metadata-schemas/{resource}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ParameterString"
          },
          "name": "resource",
          "in": "path",
          "required": true,
          "description": "There is an infinite number of possibilities for retrieving metadata schemas by the resource type because you can define custom metadata schemas."
        }
      ]
    },
    "/v1/qualifications": {
      "post": {
        "operationId": "check-eligibility",
        "tags": [
          "QUALIFICATIONS API"
        ],
        "summary": "Check Eligibility",
        "description": "<!-- theme: warning -->\\n> 🚧 The Qualifications endpoint in the basic mode ignores the rules checking:\\n> \\n> - Limit of total redeemed discount amount per campaign\\n> - Limit of total redemptions count per campaign\\n> - Redemptions per customer\\n> - Redemptions per customer in a campaign \\n\\nGenerate a list of redeemables that are applicable in the context of the customer and order.\\n\\nThe new qualifications method is an improved version of [Campaign Qualifications](ref:examine-campaigns-qualification), [Voucher Qualifications](ref:examine-vouchers-qualification), and [Promotions Validation](ref:validate-promotions) API requests. The new qualification method introduces the following improvements:\\n\\n- Qualification results are returned faster\\n- No limit on the number of returned redeemables\\n- Introduces new qualification scenarios, not available in the previous version\\n\\n> 👍 Scenario Guide\\n>\\n> Read our dedicated guide to learn about some use cases this endpoint can cover [here](doc:checking-eligibility).\\n\\n## Paging \\n\\nThe Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the \`starting_after\` cursor.\\n\\nTo process of paging the redeemables works in the following manner:\\n\\n- You send the first API request for Qualifications without the \`starting_after\` parameter.\\n- The response will contain a parameter named \`has_more\`. If the parameter's value is set to \`true\`, then more redeemables are available.\\n- Get the value of the \`created_at\` parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables.\\n- Send another API request for Qualification with the \`starting_after\` parameter set to the value taken from the \`created_at\` parameter from the last returned redeemable.\\n- Voucherify will return the next page of redeemables.\\n- If the \`has_more\` parameter is set to \`true\`, apply steps 3-5 to get the next page of redeemables.",
        "parameters": [],
        "security": [
          {
            "X-App-Id-1": [],
            "X-App-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Define order and customer context.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QualificationsCheckEligibilityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a qualifications object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualificationsCheckEligibilityResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/client/v1/qualifications": {
      "post": {
        "operationId": "check-eligibility-client-side",
        "tags": [
          "QUALIFICATIONS API"
        ],
        "summary": "Check Eligibility (client-side)",
        "description": "Generate a list of redeemables that are applicable in the context of the customer and order.\\n\\nThe new qualifications method is an improved version of [Campaign Qualifications](ref:examine-campaigns-qualification), [Voucher Qualifications](ref:examine-vouchers-qualification), and [Promotions Validation](ref:validate-promotions) API requests. The new qualification method introduces the following improvements:\\n\\n- Qualification results are returned faster\\n- No limit on the number of returned redeemables\\n- Introduces new qualification scenarios, not available in the previous version\\n\\n> 👍 Scenario Guide\\n>\\n> Read our dedicated guide to learn about some use cases this endpoint can cover [here](doc:checking-eligibility).\\n\\n## Paging \\n\\nThe Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the \`starting_after\` cursor.\\n\\nTo process of paging the redeemables works in the following manner:\\n\\n- You send the first API request for Qualifications without the \`starting_after\` parameter.\\n- The response will contain a parameter named \`has_more\`. If the parameter's value is set to \`true\`, then more redeemables are available.\\n- Get the value of the \`created_at\` parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables.\\n- Send another API request for Qualification with the \`starting_after\` parameter set to the value taken from the \`created_at\` parameter from the last returned redeemable.\\n- Voucherify will return the next page of redeemables.\\n- If the \`has_more\` parameter is set to \`true\`, apply steps 3-5 to get the next page of redeemables.",
        "parameters": [],
        "security": [
          {
            "X-Client-Application-Id-1": [],
            "X-Client-Token-1": []
          }
        ],
        "requestBody": {
          "description": "Define order and customer context.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientQualificationsCheckEligibilityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a qualifications object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientQualificationsCheckEligibilityResponseBody"
                }
              }
            }
          }
        }
      }
    }
  }
}"
`;
