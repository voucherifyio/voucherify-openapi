{
  "openapi": "3.1.0",
  "info": {
    "title": "Webhooks",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Events redemption",
      "description": "Events redemption"
    },
    {
      "name": "Events customer",
      "description": "Events customer"
    }
  ],
  "paths": {
    "/EVENTS.REDEMPTION.FAILED": {
      "post": {
        "summary": "Failed",
        "tags": [
          "Events redemption"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualificationsCheckEligibilityResponseBody"
                },
                "examples": {
                  "False": {
                    "value": {
                      "valid": false,
                      "redeemables": [
                        {
                          "status": "INAPPLICABLE",
                          "id": "eee33463",
                          "object": "voucher",
                          "result": {
                            "error": {
                              "code": 404,
                              "key": "not_found",
                              "message": "Resource not found",
                              "details": "Cannot find voucher with id eee33463",
                              "request_id": "v-0c6c6e20dc42940f0b",
                              "resource_id": "eee33463",
                              "resource_type": "voucher"
                            }
                          }
                        },
                        {
                          "status": "SKIPPED",
                          "id": "promo_Mwy9XpA0TLctSGriM5kum0qp",
                          "object": "promotion_tier",
                          "result": {}
                        }
                      ],
                      "tracking_id": "track_VAVW6qltuo1/z+G2GI2LPw=="
                    }
                  },
                  "True - 5 Redeemables": {
                    "value": {
                      "valid": true,
                      "redeemables": [
                        {
                          "status": "APPLICABLE",
                          "id": "GNcuPKGe",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1700,
                            "total_amount": 1000,
                            "items_applied_discount_amount": 1700,
                            "total_applied_discount_amount": 1700,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "applied_discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "applied_discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "products_collection",
                                "id": "pc_a11pr0dUc75",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 3,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "AMOUNT",
                              "effect": "APPLY_TO_ITEMS",
                              "amount_off": 1000,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {},
                          "categories": []
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "AnsvocvP",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1700,
                            "total_amount": 1000,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "loyalty_card": {
                              "points": 4
                            }
                          },
                          "metadata": {},
                          "categories": [
                            {
                              "id": "cat_0bb81a481615a37b5e",
                              "name": "Second",
                              "hierarchy": 2,
                              "created_at": "2022-09-20T05:58:01.561Z",
                              "object": "category"
                            }
                          ]
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "M3X8IwW8",
                          "object": "voucher",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 100,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 1800,
                            "total_amount": 900,
                            "applied_discount_amount": 100,
                            "total_applied_discount_amount": 100,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [],
                            "total": 0,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "gift": {
                              "credits": 100
                            }
                          },
                          "metadata": {},
                          "categories": []
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "promo_DE1N30D731Tg2F6NoMwNas2W",
                          "object": "promotion_tier",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 460,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 2160,
                            "total_amount": 540,
                            "applied_discount_amount": 360,
                            "total_applied_discount_amount": 360,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 2,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [
                              {
                                "object": "product",
                                "id": "prod_0b2c2ddf35150b83bb",
                                "source_id": "97",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 1,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "PERCENT",
                              "effect": "APPLY_TO_ORDER",
                              "percent_off": 40,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {}
                        },
                        {
                          "status": "APPLICABLE",
                          "id": "promo_NDHgTg4VnOLYNjk9r7WOmQxf",
                          "object": "promotion_tier",
                          "order": {
                            "amount": 2700,
                            "discount_amount": 490,
                            "items_discount_amount": 1700,
                            "total_discount_amount": 2190,
                            "total_amount": 510,
                            "applied_discount_amount": 30,
                            "total_applied_discount_amount": 30,
                            "items": [
                              {
                                "object": "order_item",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "sku_id": "sku_0a3efc90375d1217e2",
                                "quantity": 1,
                                "amount": 2000,
                                "discount_amount": 1000,
                                "price": 2000,
                                "subtotal_amount": 1000,
                                "product": {
                                  "id": "prod_s3C0nDpr0DuC7",
                                  "source_id": "test_prod_id_2",
                                  "name": "Watchflix"
                                },
                                "sku": {
                                  "id": "sku_0a3efc90375d1217e2",
                                  "source_id": "test_standard_ultra_hd",
                                  "sku": "Premium",
                                  "price": 2000
                                }
                              },
                              {
                                "object": "order_item",
                                "product_id": "prod_0bc3bd8a4e072c5275",
                                "quantity": 1,
                                "amount": 700,
                                "discount_amount": 700,
                                "price": 700,
                                "subtotal_amount": 0,
                                "product": {
                                  "id": "prod_0bc3bd8a4e072c5275",
                                  "name": "Bouquet - Romantic Roses",
                                  "price": 700
                                }
                              }
                            ],
                            "metadata": {},
                            "customer_id": null,
                            "referrer_id": null,
                            "object": "order"
                          },
                          "applicable_to": {
                            "data": [
                              {
                                "object": "sku",
                                "id": "sku_0a3efc90375d1217e2",
                                "source_id": "test_standard_ultra_hd",
                                "product_id": "prod_s3C0nDpr0DuC7",
                                "product_source_id": "test_prod_id_2",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              },
                              {
                                "object": "product",
                                "id": "prod_0bc3bd8a4e072c5275",
                                "source_id": "prod_0bc3bd8a4e072c5275",
                                "strict": true,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 2,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "inapplicable_to": {
                            "data": [
                              {
                                "object": "product",
                                "id": "prod_0b2c2ddf35150b83bb",
                                "source_id": "97",
                                "strict": false,
                                "effect": "APPLY_TO_EVERY"
                              }
                            ],
                            "total": 1,
                            "data_ref": "data",
                            "object": "list"
                          },
                          "result": {
                            "discount": {
                              "type": "AMOUNT",
                              "effect": "APPLY_TO_ORDER",
                              "amount_off": 30,
                              "is_dynamic": false
                            }
                          },
                          "metadata": {}
                        }
                      ],
                      "order": {
                        "amount": 2700,
                        "discount_amount": 490,
                        "items_discount_amount": 1700,
                        "total_discount_amount": 2190,
                        "total_amount": 510,
                        "applied_discount_amount": 490,
                        "items_applied_discount_amount": 1700,
                        "total_applied_discount_amount": 2190,
                        "items": [
                          {
                            "object": "order_item",
                            "product_id": "prod_s3C0nDpr0DuC7",
                            "sku_id": "sku_0a3efc90375d1217e2",
                            "quantity": 1,
                            "amount": 2000,
                            "discount_amount": 1000,
                            "applied_discount_amount": 1000,
                            "price": 2000,
                            "subtotal_amount": 1000,
                            "product": {
                              "id": "prod_s3C0nDpr0DuC7",
                              "source_id": "test_prod_id_2",
                              "name": "Watchflix"
                            },
                            "sku": {
                              "id": "sku_0a3efc90375d1217e2",
                              "source_id": "test_standard_ultra_hd",
                              "sku": "Premium",
                              "price": 2000
                            }
                          },
                          {
                            "object": "order_item",
                            "product_id": "prod_0bc3bd8a4e072c5275",
                            "quantity": 1,
                            "amount": 700,
                            "discount_amount": 700,
                            "applied_discount_amount": 700,
                            "price": 700,
                            "subtotal_amount": 0,
                            "product": {
                              "id": "prod_0bc3bd8a4e072c5275",
                              "name": "Bouquet - Romantic Roses",
                              "price": 700
                            }
                          }
                        ],
                        "metadata": {},
                        "customer_id": null,
                        "referrer_id": null,
                        "object": "order"
                      },
                      "tracking_id": "track_9B0kB92+bJa8a+PegaWREw==",
                      "session": {
                        "key": "ssn_pkJfPcWAgp9WyHpA62Eky8X8SzxpKub2",
                        "type": "LOCK",
                        "ttl": 7,
                        "ttl_unit": "DAYS"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "events-redemption-failed"
      }
    },
    "/EVENTS.REDEMPTION.ROLLBACK.FAILED": {
      "post": {
        "summary": "Rollback failed",
        "tags": [
          "Events redemption"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualificationsCheckEligibilityResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-redemption-rollback-failed"
      }
    },
    "/EVENTS.REDEMPTION.ROLLBACK.SUCCEEDED": {
      "post": {
        "summary": "Rollback succeeded",
        "tags": [
          "Events redemption"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationsValidateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-redemption-rollback-succeeded"
      }
    },
    "/EVENTS.REDEMPTION.SUCCEEDED": {
      "post": {
        "summary": "Succeeded",
        "tags": [
          "Events redemption"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationsValidateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-redemption-succeeded"
      }
    },
    "/EVENTS.CUSTOMER.CREATED": {
      "post": {
        "summary": "Created",
        "tags": [
          "Events customer"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsCreateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-customer-created"
      }
    },
    "/EVENTS.CUSTOMER.DELETED": {
      "delete": {
        "summary": "Deleted",
        "tags": [
          "Events customer"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicationsCreateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-customer-deleted"
      }
    },
    "/EVENTS.CUSTOMER.REWARDED.MAIN": {
      "post": {
        "summary": "Rewarded main",
        "tags": [
          "Events customer"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersValidateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-customer-rewarded-main"
      }
    },
    "/EVENTS.CUSTOMER.REWARDED.LOYALTY_POINTS": {
      "post": {
        "summary": "Rewarded loyalty_points",
        "tags": [
          "Events customer"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersValidateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-customer-rewarded-loyalty_points"
      }
    },
    "/EVENTS.CUSTOMER.CONSENTS.REVOKED": {
      "put": {
        "summary": "Consents revoked",
        "tags": [
          "Events customer"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersValidateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-customer-consents-revoked"
      }
    },
    "/EVENTS.CUSTOMER.CONSENTS.GIVEN": {
      "put": {
        "summary": "Consents given",
        "tags": [
          "Events customer"
        ],
        "responses": {
          "200": {
            "description": "Indicates that a customer has given their consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VouchersValidateResponseBody"
                }
              }
            }
          }
        },
        "operationId": "events-customer-consents-given"
      }
    }
  },
  "components": {
    "schemas": {
      "ParameterOrder": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "type",
          "-type",
          "code",
          "-code",
          "campaign",
          "-campaign",
          "category",
          "-category"
        ]
      },
      "ParameterOrderListLocations": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterFiltersListLocations": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/22_filter_updated_at"
          },
          {
            "$ref": "#/components/schemas/22_filter_created_at"
          },
          {
            "$ref": "#/components/schemas/22_filter_name"
          },
          {
            "$ref": "#/components/schemas/22_filter_id"
          }
        ]
      },
      "ParameterResultListPublications": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ]
      },
      "ParameterVoucherTypeListPublications": {
        "type": "string",
        "enum": [
          "discount",
          "loyalty",
          "lucky_draw"
        ]
      },
      "ParameterOrderListPublications": {
        "type": "string",
        "enum": [
          "id",
          "-id",
          "voucher_code",
          "-voucher_code",
          "tracking_id",
          "-tracking_id",
          "customer_id",
          "-customer_id",
          "created_at",
          "-created_at",
          "channel",
          "-channel"
        ]
      },
      "ParameterOrderListPromotionTiers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListCustomers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "source_id",
          "-source_id"
        ]
      },
      "ParameterOrderListPromotionTiersClientSide": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterExpandListCampaigns": {
        "type": "string",
        "default": "category",
        "enum": [
          "category"
        ]
      },
      "ParameterOrderListCampaigns": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderVouchers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "code",
          "-code"
        ]
      },
      "ParameterOrderExamineVouchersQualification": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "code",
          "-code"
        ]
      },
      "ParameterLimit": {
        "type": "integer",
        "maximum": 100,
        "minimum": 1
      },
      "ParameterLimitExamineVouchersQualification": {
        "type": "integer",
        "maximum": 50,
        "minimum": 1
      },
      "ParameterLimitExamineCampaignsQualification": {
        "type": "integer",
        "maximum": 50,
        "minimum": 1
      },
      "ParameterOrderExamineCampaignsQualification": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "type",
          "-type",
          "code",
          "-code",
          "category",
          "-category",
          "campaign",
          "-campaign"
        ]
      },
      "ParameterOrderListAllPromotionStacks": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "name",
          "-name"
        ]
      },
      "ParameterOrderListExports": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "status",
          "-status"
        ]
      },
      "ParameterPage": {
        "type": "integer",
        "maximum": 100
      },
      "ParameterString": {
        "type": "string"
      },
      "ParameterCode": {
        "type": "string",
        "example": "2CpRCE2c"
      },
      "ParameterBoolean": {
        "type": "boolean"
      },
      "ParameterInteger": {
        "type": "integer"
      },
      "ParameterCustomerId": {
        "type": "string",
        "example": "cust_nk0N1uNQ1YnupAoJGOgvsODC"
      },
      "ParameterOrderId": {
        "type": "string",
        "example": "ord_smEh8p1p6W6DgOmeERk092LG"
      },
      "ParameterCampaignId": {
        "type": "string",
        "example": "camp_rRsfatlwN7unSeUIJDCYedal"
      },
      "ParameterEarningRuleId": {
        "type": "string",
        "example": "ern_CFuv1O0IDl8Jgph0ojhMu8bH"
      },
      "ParameterValidationRuleId": {
        "type": "string",
        "example": "val_TU4de3EP4dlL"
      },
      "ParameterSegmentId": {
        "type": "string",
        "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
      },
      "ParameterAsyncActionId": {
        "type": "string",
        "example": "aa_0afb3d009a55814a48"
      },
      "ParameterMemberId": {
        "type": "string",
        "example": "MmFAzfDe"
      },
      "ParameterRedemptionId": {
        "type": "string",
        "example": "r_0ba186c4824e4881e1"
      },
      "ParameterOrderListRedemptions": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "id",
          "-id",
          "voucher_code",
          "-voucher_code",
          "tracking_id",
          "-tracking_id",
          "customer_id",
          "-customer_id"
        ]
      },
      "ParameterOrderListValidationRuleAssignments": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at"
        ]
      },
      "ParameterOrderListLoyaltyTiers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListOrders": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListValidationRules": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at",
          "name",
          "-name"
        ]
      },
      "ParameterOrderListLoyaltyPrograms": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListEarningRules": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterOrderListMembers": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "updated_at",
          "-updated_at"
        ]
      },
      "ParameterFiltersListRedemptions": {
        "type": "object",
        "properties": {
          "voucher_code": {
            "type": "object",
            "description": "Unique voucher code.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "related_object_id": {
            "type": "object",
            "description": "Unique related object ID, i.e. v_hS8JFl8S6lNcd1L69wLIoXgTio7eWEgk.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "related_object_parent_id": {
            "type": "object",
            "description": "Unique related object parent ID, i.e. camp_22noMlhTADb7Fq2UL3vWu3d1.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "parent_redemption_id": {
            "type": "object",
            "description": "Unique parent redemption ID, i.e. r_0c5952900bcbfd54b6.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "failure_code": {
            "type": "object",
            "description": "Failure code, i.e. quantity_exceeded.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "result": {
            "type": "object",
            "description": "Result, i.e. `SUCCESS` or `FAILURE`.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "object": {
            "type": "object",
            "description": "Specify which type of object to return, i.e. `redemption` or `redemption_rollback`.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "customer_id": {
            "type": "object",
            "description": "Unique customer ID, i.e. cust_sehkNIi8Uq2qQuRqSr7xn4Zi.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "campaign_name": {
            "type": "object",
            "description": "Campaign name.",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          },
          "user_login": {
            "type": "object",
            "description": "User login used to login to Voucherify, i.e. name.lastname@email.com",
            "properties": {
              "conditions": {
                "$ref": "#/components/schemas/FilterConditionsString"
              },
              "junction": {
                "$ref": "#/components/schemas/Junction"
              }
            }
          }
        }
      },
      "ParameterFiltersValidatePromotions": {
        "type": "object",
        "title": "Promotion filters",
        "description": "Promotion filter conditions.",
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Allows you to create a filter based on the conditions set for promotion metadata values. The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that are attached to a promotion tier object. Stores additional information about the promotion tier in a structured format."
          },
          "promotion_id": {
            "type": "object",
            "description": "Allows you to create a filter based on the unique promotion ID."
          }
        }
      },
      "ParameterCustomerValidateVoucherClientSide": {
        "oneOf": [
          {
            "type": "object",
            "title": "Customer details",
            "description": "Customer source ID and/or customer metadata.",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "Customer source ID.",
                "example": "name.lastname@email.com"
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
              }
            }
          },
          {
            "type": "string",
            "title": "Customer ID",
            "description": "Unique customer ID assigned by Voucherify, i.e. `cust_eWgXlBBiY6THFRJwX45Iakv4`.",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
          }
        ]
      },
      "ParameterOrderValidateVoucherClientSide": {
        "type": "object",
        "title": "Order details",
        "description": "Order details.",
        "properties": {
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are attached to an order object. Stores additional information about the order in a structured format."
          }
        }
      },
      "ParameterSessionKey": {
        "type": "string",
        "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
      },
      "ParameterSessionTtlUnit": {
        "type": "string",
        "enum": [
          "HOURS",
          "DAYS",
          "MINUTES",
          "SECONDS",
          "MILLISECONDS",
          "MICROSECONDS",
          "NANOSECONDS"
        ]
      },
      "ParameterPromotionTierId": {
        "type": "string",
        "example": "promo_2EnAik6Jt7dKTOMkRTIgEjZH"
      },
      "ParameterExportId": {
        "type": "string",
        "example": "exp_2bYLdY2lQ2886wmYIHyeBWUZ"
      },
      "ParameterLocationId": {
        "type": "string",
        "example": "loc_NoMGXmHO9OUs7iz9mGWpamma"
      },
      "ParameterCategoryId": {
        "type": "string",
        "example": "cat_0bb81a481615a37b5e"
      },
      "ParameterLoyaltyTierId": {
        "type": "string",
        "example": "promo_2EnAik6Jt7dKTOMkRTIgEjZH"
      },
      "ParameterProductId": {
        "type": "string",
        "example": "prod_3ttSkdxGuAfcv3"
      },
      "ParameterProductCollectionId": {
        "type": "string",
        "example": "pc_41V4DiQQO8YGqj0J2oZD57j4"
      },
      "ParameterSkuId": {
        "type": "string",
        "example": "sku_0b661e41eccd35a8e9"
      },
      "ParameterPromotionStackId": {
        "type": "string",
        "example": "stack_KOIde7AUf08at12lZ1r3OfFL"
      },
      "ParameterRewardAssignmentId": {
        "type": "string",
        "example": "rewa_m9hEAu10KsPcLhGXiHG85aY0"
      },
      "ParameterRewardId": {
        "type": "string",
        "example": "rew_2erjvECLs92GYzKbak3QkyTV"
      },
      "ParameterCreatedBeforeAfter": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time before the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "after": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time after the voucher was created in ISO 8601 format.",
            "format": "date-time"
          }
        }
      },
      "ParameterUpdatedBeforeAfter": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time before the voucher was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "after": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time after the voucher was updated in ISO 8601 format.",
            "format": "date-time"
          }
        }
      },
      "ParameterDate": {
        "type": "string",
        "example": "2023-12-22T10:13:06.487Z",
        "format": "date-time"
      },
      "ParameterCampaignType": {
        "type": "string",
        "enum": [
          "PROMOTION",
          "GIFT_VOUCHERS",
          "REFERRAL_PROGRAM",
          "DISCOUNT_COUPONS",
          "LOYALTY_PROGRAM",
          "LUCKY_DRAW"
        ]
      },
      "ParameterOrigin": {
        "type": "string",
        "format": "hostname"
      },
      "ParameterObject": {
        "type": "object"
      },
      "VouchersValidateRequestBody": {
        "title": "Validate Voucher Request Body",
        "description": "Request schema model for validating a voucher using **POST** `/vouchers/{code}/validate`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/VouchersValidateDiscountRequestBody"
          },
          {
            "$ref": "#/components/schemas/VouchersValidateGiftRequestBody"
          },
          {
            "$ref": "#/components/schemas/VouchersValidateLoyaltyRequestBody"
          }
        ]
      },
      "OrderBase": {
        "title": "Order Base",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.\n\n"
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "customer": {
            "description": "This is an object containing information about the customer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer": {
            "description": "This is an object containing information about the referrer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Referrer"
              }
            ]
          },
          "referrer_id": {
            "type": "string",
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          }
        }
      },
      "SimpleOrder": {
        "title": "Simple Order",
        "type": "object",
        "additionalProperties": false,
        "description": "Order information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request.\n\n"
          },
          "source_id": {
            "type": "string",
            "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order."
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied in a particular request.  \n`sum(items, i => i.applied_discount_amount)`"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \n`total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount`"
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/SimpleOrderItem"
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "order",
            "enum": [
              "order"
            ]
          }
        },
        "required": [
          "object"
        ]
      },
      "Order": {
        "title": "Order",
        "allOf": [
          {
            "title": "Order Ids",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request."
              },
              "source_id": {
                "type": "string",
                "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
              }
            }
          },
          {
            "$ref": "#/components/schemas/OrderBase"
          }
        ]
      },
      "OrderCalculatedBase": {
        "title": "Order Response Base",
        "type": "object",
        "additionalProperties": false,
        "description": "Order information.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the order was last updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order."
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied in a particular request.  \n`sum(items, i => i.applied_discount_amount)`"
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \n`total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount`"
          },
          "items": {
            "type": "array",
            "description": "Array of items applied to the order.",
            "items": {
              "$ref": "#/components/schemas/OrderItemCalculated"
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "order",
            "enum": [
              "order"
            ]
          },
          "redemptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OrderRedemptions"
            }
          }
        },
        "required": [
          "source_id",
          "customer_id",
          "referrer_id",
          "object"
        ]
      },
      "OrderCalculated": {
        "title": "Order Calculated",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedBase"
          },
          {
            "title": "Order Calculated",
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "customer": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerId"
                  }
                ]
              },
              "referrer": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ReferrerWithSummaryLoyaltyReferrals"
                  },
                  {
                    "$ref": "#/components/schemas/ReferrerId"
                  }
                ]
              }
            }
          }
        ]
      },
      "OrderCalculatedNoCustomerData": {
        "title": "Order Calculated No Customer Data",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedBase"
          },
          {
            "title": "Order Customer And Referrer Ids Objects",
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "customer": {
                "description": "If only `customer_id` was provided, customer return data will be limited.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerId"
                  }
                ]
              },
              "referrer": {
                "description": "If only `referrer_id` was provided, referrer return data will be limited.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReferrerId"
                  }
                ]
              }
            }
          }
        ]
      },
      "OrdersGetResponseBody": {
        "title": "Orders Get Response Body",
        "description": "Response body schema for **GET** `/orders/{orderId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
          }
        ]
      },
      "OrderRedemptions": {
        "title": "Order Redemptions",
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "example": "2022-09-02T17:06:56.649Z",
            "format": "date-time"
          },
          "rollback_id": {
            "type": "string",
            "description": "Unique ID of the redemption rollback.",
            "example": "rr_0c63c84eb78ee0a6c0"
          },
          "rollback_date": {
            "type": "string",
            "description": "Timestamp representing the date and tiem when the redemption rollback was created in ISO 8601 format.",
            "example": "2023-01-31T14:18:37.150Z",
            "format": "date-time"
          },
          "related_object_type": {
            "type": "string",
            "description": "The source of the incentive.",
            "default": "redemption"
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique ID of the parent redemption.",
            "example": "r_0ba186c4824e4881e1"
          },
          "related_object_parent_id": {
            "type": "string",
            "description": "Represent's the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign. In case of a promotion tier, this represents the campaign ID of the promotion tier's parent campaign."
          },
          "stacked": {
            "type": "array",
            "description": "Contains a list of unique IDs of child redemptions, which belong to the stacked incentives.",
            "items": {
              "type": "string"
            }
          },
          "rollback_stacked": {
            "type": "array",
            "description": "Lists the rollback redemption IDs of the particular child redemptions.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VouchersValidateDiscountRequestBody": {
        "type": "object",
        "title": "Vouchers Validate Discount Request Body",
        "description": "Request schema model for validating a voucher using **POST** `/vouchers/{code}/validate`.",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "session": {
            "description": "Schema model for session lock object. The session object is required to establish a session between multiple parallel validation and redemption requests. If you only send the type parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a validation session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "tracking_id": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "options": {
            "type": "object",
            "properties": {
              "expand": {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "category",
                  "enum": [
                    "category"
                  ]
                }
              }
            }
          }
        }
      },
      "VouchersValidateGiftRequestBody": {
        "type": "object",
        "title": "Vouchers Validate Gift Request Body",
        "description": "Request schema model for **POST** `/vouchers/{code}/validate`.",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request.\n\n"
              },
              "source_id": {
                "type": "string",
                "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
              },
              "status": {
                "type": "string",
                "description": "The order status.",
                "enum": [
                  "CREATED",
                  "PAID",
                  "CANCELED",
                  "FULFILLED"
                ]
              },
              "amount": {
                "type": "string",
                "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
              },
              "items": {
                "type": "array",
                "description": "Array of items applied to the order.",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              },
              "customer": {
                "description": "This is an object containing information about the customer.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Customer"
                  }
                ]
              },
              "customer_id": {
                "type": "string"
              },
              "referrer": {
                "description": "This is an ojbect containing information about the referrer.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Referrer"
                  }
                ]
              },
              "referrer_id": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
              }
            }
          },
          "gift": {
            "type": "object",
            "additionalProperties": false,
            "description": "Contains information on the number of gift card credits that the customer wants to apply to the order.",
            "properties": {
              "credits": {
                "type": "number",
                "minimum": 0,
                "description": "The number of credits that the user wants to use from the gift card to fulfil the order. The value of credits cannot be higher than the current balance on the gift card. If the user gives more points than he has on the gift card, the application will return an error code in response. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
              }
            },
            "required": [
              "credits"
            ]
          },
          "session": {
            "description": "Schema model for session lock object. The session object is required to establish a session between multiple parallel validation and redemption requests. If you only send the type parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a validation session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "tracking_id": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "options": {
            "type": "object",
            "properties": {
              "expand": {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "category",
                  "enum": [
                    "category"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "gift"
        ]
      },
      "VouchersValidateLoyaltyRequestBody": {
        "type": "object",
        "title": "Vouchers Validate Loyalty Request Body",
        "description": "Request schema model for **POST** `/vouchers/{code}/validate`.",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "type": "object",
            "additionalProperties": false,
            "description": "Order information.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request.\n\n"
              },
              "source_id": {
                "type": "string",
                "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
              },
              "status": {
                "type": "string",
                "description": "The order status.",
                "enum": [
                  "CREATED",
                  "PAID",
                  "CANCELED",
                  "FULFILLED"
                ]
              },
              "amount": {
                "type": "string",
                "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.\n\n"
              },
              "items": {
                "type": "array",
                "description": "Array of items applied to the order.",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              },
              "customer": {
                "description": "This is an object containing information about the customer.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Customer"
                  }
                ]
              },
              "customer_id": {
                "type": "string"
              },
              "referrer": {
                "description": "This is an ojbect containing information about the referrer.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Referrer"
                  }
                ]
              },
              "referrer_id": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
              }
            }
          },
          "reward": {
            "type": "object",
            "additionalProperties": false,
            "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward."
              },
              "assignment_id": {
                "type": "string"
              },
              "points": {
                "type": "number",
                "description": "The number of loyalty points that the user wants to spend in order to fulfill the order. The number of points cannot be higher than the current balance on the loyalty card. If the user gives more points than he/she has on the loyalty card, the application will return an error code in response."
              }
            },
            "required": [
              "id"
            ]
          },
          "session": {
            "description": "Schema model for session lock object. The session object is required to establish a session between multiple parallel validation and redemption requests. If you only send the type parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a validation session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "tracking_id": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "options": {
            "type": "object",
            "properties": {
              "expand": {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "category",
                  "enum": [
                    "category"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "reward"
        ]
      },
      "Referrer": {
        "title": "Referrer",
        "allOf": [
          {
            "$ref": "#/components/schemas/Customer"
          }
        ]
      },
      "ReferrerWithSummaryLoyaltyReferrals": {
        "title": "Referrer With Summary Loyalty Referrals",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "ReferrerId": {
        "title": "Referrer Id",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerId"
          }
        ]
      },
      "CustomerBase": {
        "title": "Customer Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone number. This parameter is mandatory when you try to send out codes to customers via an SMS channel."
          },
          "birthday": {
            "type": "string",
            "description": "*Deprecated* Customer's birthdate; format YYYY-MM-DD.",
            "format": "date"
          },
          "birthdate": {
            "type": "string",
            "description": "Customer's birthdate; format YYYY-MM-DD.",
            "format": "date"
          },
          "address": {
            "type": "object",
            "nullable": true,
            "description": "Customer's address.",
            "properties": {
              "city": {
                "type": "string",
                "description": "City"
              },
              "state": {
                "type": "string",
                "description": "State"
              },
              "line_1": {
                "type": "string",
                "description": "First line of address."
              },
              "line_2": {
                "type": "string",
                "description": "Second line of address."
              },
              "country": {
                "type": "string",
                "description": "Country."
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          }
        }
      },
      "CustomersCreateRequestBody": {
        "title": "Customers Create Request Body",
        "description": "Request body schema for **POST** `/customers`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Customer"
          }
        ]
      },
      "CustomersUpdateRequestBody": {
        "title": "Customers Update Request Body",
        "description": "Request body schema for **PUT** `/customers/{customerId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomersUpdateResponseBody": {
        "title": "Customers Update Response Body",
        "description": "Response body schema for **PUT** `/customers/{customerId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "Customer": {
        "title": "Customer",
        "allOf": [
          {
            "type": "object",
            "title": "Customer Id And Source Id",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer."
              },
              "source_id": {
                "type": "string",
                "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
              }
            }
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomerId": {
        "title": "Customer Id",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier of an existing customer."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "customer",
            "enum": [
              "customer"
            ]
          }
        },
        "required": [
          "id",
          "object"
        ]
      },
      "CustomersCreateResponseBody": {
        "description": "Response bofy for **POST** `/customers`.",
        "title": "Customers Create Response Body",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "CustomerWithSummaryLoyaltyReferrals": {
        "title": "Customer With Summary Loyalty Referrals",
        "allOf": [
          {
            "type": "object",
            "title": "Customer Response Data",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer that will be linked to redemption in this request."
              },
              "source_id": {
                "type": "string",
                "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
              },
              "summary": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerSummary"
                  }
                ]
              },
              "loyalty": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerLoyalty"
                  }
                ]
              },
              "referrals": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomerReferrals"
                  }
                ]
              },
              "system_metadata": {
                "type": "object",
                "description": "Object used to store system metadata information."
              },
              "created_at": {
                "type": "string",
                "description": "Timestamp representing the date and time when the customer was created in ISO 8601 format.",
                "example": "2022-08-30T06:32:07.380Z",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "description": "Timestamp representing the date and time when the customer was updated in ISO 8601 format.",
                "example": "2022-08-31T06:32:07.380Z",
                "format": "date-time"
              },
              "assets": {
                "type": "object",
                "description": "Contains information about the customer's cockpit.",
                "properties": {
                  "cockpit_url": {
                    "type": "string",
                    "description": "Customer's cockpit URL address."
                  }
                }
              },
              "object": {
                "type": "string",
                "description": "The type of object represented by JSON.",
                "default": "customer",
                "enum": [
                  "customer"
                ]
              }
            },
            "required": [
              "summary",
              "loyalty",
              "referrals",
              "object"
            ]
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "CustomerReferrals": {
        "title": "Customer Referrals",
        "type": "object",
        "description": "Summary of customer's referrals, in this case, the customer being the referee, i.e. information about the source of referrals and number of times the customer was referred by other customers.",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of times this customer received a referral, i.e. was referred by another customer."
          },
          "campaigns": {
            "type": "array",
            "description": "Contains an array of campaigns that served as the source of a referral for the customer.",
            "items": {
              "title": "Customer Referrals Campaigns Item",
              "type": "object",
              "description": "Contains information about the source of the referral.",
              "properties": {
                "campaign_id": {
                  "type": "string",
                  "description": "Unique campaign ID, assigned by Voucherify.",
                  "example": "camp_rRsfatlwN7unSeUIJDCYedal"
                },
                "referrer_id": {
                  "type": "string",
                  "example": "cust_sehkNIi8Uq2qQuRqSr7xn4Zi",
                  "description": "Unique referrer ID, assigned by Voucherify. This is the customer ID of a customer that is referring this customer."
                },
                "related_object_id": {
                  "type": "string",
                  "description": "Related object id",
                  "example": "r_0b9d4cc4aa164dd073"
                },
                "related_object_type": {
                  "type": "string",
                  "description": "Related object type, i.e. `redemption`."
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-08-30T10:19:39.196Z",
                  "description": "Timestamp representing the date and time when the customer was referred in ISO 8601 format."
                }
              },
              "required": [
                "campaign_id",
                "referrer_id",
                "related_object_id",
                "related_object_type",
                "date"
              ]
            }
          }
        },
        "required": [
          "total",
          "campaigns"
        ]
      },
      "CustomerLoyalty": {
        "title": "Customer Loyalty",
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "description": "Customer's loyalty points."
          },
          "referred_customers": {
            "type": "integer",
            "description": "Total number of customers referred by the customer."
          },
          "campaigns": {
            "type": "object",
            "description": "Contains campaigns with details about point balances and how many customers were referred by the customer.",
            "additionalProperties": {
              "type": "object",
              "description": "Contains details about the point balances left on loyalty cards and the number of referred customers in each campaign.",
              "properties": {
                "points": {
                  "type": "integer",
                  "description": "Remaining point balance in campaign."
                },
                "loyalty_tier": {
                  "type": "string",
                  "example": "ltr_UJ5Q54Q0OvEhua87Qfv2Ki5x",
                  "description": "Customer's loyalty tier within the campaign."
                },
                "referred_customers": {
                  "type": "integer",
                  "description": "Number of customers referred by the customer in campaign."
                }
              }
            }
          }
        },
        "required": [
          "points",
          "referred_customers",
          "campaigns"
        ]
      },
      "CustomerSummary": {
        "title": "Customer Summary",
        "type": "object",
        "properties": {
          "redemptions": {
            "$ref": "#/components/schemas/CustomerSummaryRedemptions"
          },
          "orders": {
            "$ref": "#/components/schemas/CustomerSummaryOrders"
          }
        },
        "required": [
          "redemptions",
          "orders"
        ]
      },
      "CustomerSummaryOrders": {
        "title": "Customer Summary Orders",
        "type": "object",
        "properties": {
          "total_amount": {
            "type": "integer",
            "description": "The total amount spent by the customer. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          },
          "total_count": {
            "type": "integer",
            "description": "Total number of orders made by the customer."
          },
          "average_amount": {
            "type": "integer",
            "description": "Average amount spent on orders. `total_amount` &divide; `total_count`. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          },
          "last_order_amount": {
            "type": "integer",
            "description": "Amount spent on last order. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          },
          "last_order_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-30T11:51:08.029Z",
            "description": "Timestamp representing the date and time of the customer's last order in ISO 8601 format."
          }
        },
        "required": [
          "total_amount",
          "total_count",
          "average_amount",
          "last_order_amount"
        ]
      },
      "CustomerSummaryRedemptions": {
        "title": "Customer Summary Redemptions",
        "type": "object",
        "properties": {
          "total_redeemed": {
            "type": "integer",
            "description": "Total number of redemptions made by the customer."
          },
          "total_failed": {
            "type": "integer",
            "description": "Total number of redemptions that failed."
          },
          "total_succeeded": {
            "type": "integer",
            "description": "Total number of redemptions that succeeded."
          },
          "total_rolled_back": {
            "type": "integer",
            "description": "Total number of redemptions that were rolled back for the customer."
          },
          "total_rollback_failed": {
            "type": "integer",
            "description": "Total number of redemption rollbacks that failed."
          },
          "total_rollback_succeeded": {
            "type": "integer",
            "description": "Total number of redemption rollbacks that succeeded."
          },
          "gift": {
            "type": "object",
            "description": "Summary of gift card credits.",
            "required": [
              "redeemed_amount",
              "amount_to_go"
            ],
            "properties": {
              "redeemed_amount": {
                "type": "integer",
                "description": "Total amount of gift card credits redeemed by customer. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "default": 0
              },
              "amount_to_go": {
                "type": "integer",
                "description": "Remaining gift card balance across all gift cards. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "default": 0
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Summary of loyalty points.",
            "required": [
              "redeemed_points",
              "points_to_go"
            ],
            "properties": {
              "redeemed_points": {
                "type": "integer",
                "description": "Total number of loyalty points redeemed by the customer."
              },
              "points_to_go": {
                "type": "integer",
                "description": "Sum of remaining available point balance across all loyalty cards."
              }
            }
          }
        },
        "required": [
          "total_redeemed",
          "total_failed",
          "total_succeeded",
          "total_rolled_back",
          "total_rollback_failed",
          "total_rollback_succeeded",
          "gift",
          "loyalty_card"
        ]
      },
      "SimpleCustomer": {
        "type": "object",
        "title": "Simple Customer",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of an existing customer that will be linked to redemption in this request."
          },
          "source_id": {
            "type": "string",
            "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "customer",
            "enum": [
              "customer"
            ]
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "title": "Order Item",
        "properties": {
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "initial_quantity": {
            "type": "integer",
            "description": "A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items' quantity."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "\nSum of all order-item-level discounts applied to the order."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          },
          "product": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the product and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s product ID (if it is different than Voucherify's product ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to `true` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a product. It can be useful for storing additional information about the product in a structured format."
              },
              "price": {
                "type": "number",
                "description": "Product price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "sku": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related SKU.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s SKU ID (if it is different than Voucherify's SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to `true` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "sku": {
                "type": "string",
                "description": "The SKU name."
              },
              "price": {
                "type": "number",
                "description": "SKU price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "SimpleOrderItem": {
        "type": "object",
        "title": "Simple Order Item",
        "properties": {
          "object": {
            "type": "string",
            "default": "order_item",
            "enum": [
              "order_item"
            ],
            "description": "The type of object represented by JSON. This object stores information about the `order_item`."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-item-level discounts applied to the order."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          }
        }
      },
      "OrderItemCalculated": {
        "type": "object",
        "title": "Order Item Calculated",
        "properties": {
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify."
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "Used along with the source_id property, can be set to either sku or product."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "discount_quantity": {
            "type": "integer",
            "description": "Number of dicounted items."
          },
          "initial_quantity": {
            "type": "integer",
            "description": "A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items' quantity."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (price * quantity)."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-item-level discounts applied to the order."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "initial_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied in a particular request.  \n`total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount`"
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          },
          "subtotal_amount": {
            "type": "integer",
            "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the `amount`.   \n`subtotal_amount`=`amount`-`applied_discount_amount`"
          },
          "product": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the product and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s product ID (if it is different than Voucherify's product ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to `true` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a product. It can be useful for storing additional information about the product in a structured format."
              },
              "price": {
                "type": "number",
                "description": "Product price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "sku": {
            "type": "object",
            "additionalProperties": false,
            "description": "An object containing details of the related SKU.",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s SKU ID (if it is different than Voucherify's SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
              },
              "override": {
                "type": "boolean",
                "description": "The override set to `true` is used to store the product information in the system. If the product does not exist, it will be created with a source_id; if it does exist, the provided values for the name, price, and metadata will replace those already stored in the system."
              },
              "sku": {
                "type": "string",
                "description": "The SKU name."
              },
              "price": {
                "type": "number",
                "description": "SKU price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "object": {
            "type": "string",
            "default": "order_item",
            "enum": [
              "order_item"
            ],
            "description": "The type of object represented by JSON."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format."
          }
        },
        "required": [
          "object"
        ]
      },
      "Session": {
        "type": "object",
        "title": "Session",
        "properties": {
          "key": {
            "type": "string",
            "default": "LOCK",
            "enum": [
              "LOCK"
            ],
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated."
          },
          "type": {
            "type": "string",
            "default": "LOCK",
            "enum": [
              "LOCK"
            ],
            "description": "This parameter is required to establish a new session. The session locks the redemption quantity by 1."
          },
          "ttl": {
            "type": "number",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter."
          },
          "ttl_unit": {
            "type": "string",
            "enum": [
              "DAYS",
              "HOURS",
              "MICROSECONDS",
              "MILLISECONDS",
              "MINUTES",
              "NANOSECONDS",
              "SECONDS"
            ],
            "description": "Defines the type of unit in which the session time is counted."
          }
        }
      },
      "VouchersValidateValidResponseBody": {
        "type": "object",
        "description": "Response body schema for **POST** `/vouchers/{code}/validate`.",
        "title": "Vouchers Validate Valid Response Body",
        "properties": {
          "valid": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether the voucher is valid within the context of the parameters provided in the request body."
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "applicable_to": {
            "description": "Contains list of items that qualify in the scope of the discount. These are definitions of included products, SKUs, and product collections. These can be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicableToResultList"
              }
            ]
          },
          "inapplicable_to": {
            "description": "Contains list of items that do not qualify in the scope of the discount. These are definitions of excluded products, SKUs, and product collections. These CANNOT be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InapplicableToResultList"
              }
            ]
          },
          "campaign": {
            "type": "string",
            "description": "Voucher's parent campaign name."
          },
          "campaign_id": {
            "type": "string",
            "description": "Voucher's parent campaign's unique ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "gift": {
            "description": "Gift object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty": {
            "type": "object",
            "additionalProperties": false,
            "description": "Contains the cost of reward in points.",
            "properties": {
              "points_cost": {
                "type": "number",
                "description": "Number of points that wlil be deducted from loyaty card for the associated reward."
              }
            },
            "required": [
              "points_cost"
            ]
          },
          "reward": {
            "type": "object",
            "additionalProperties": false,
            "description": "Contains information about the reward that is being validated.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique reward ID assigned by Voucherify."
              },
              "assignment_id": {
                "type": "string",
                "description": "Unique reward assignment ID assigned by Voucherify."
              },
              "points": {
                "type": "number",
                "description": "Number of points applied to the reward."
              }
            },
            "required": [
              "id",
              "assignment_id",
              "points"
            ]
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "session": {
            "description": "Schema model for session lock object. The session object contains information about the session key that was used to establish a session between multiple parallel validation and redemption requests.\n\n\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is inactive before this date."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format. Voucher is inactive after this date."
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed order source ID."
          }
        },
        "required": [
          "valid",
          "code",
          "applicable_to",
          "inapplicable_to",
          "metadata",
          "tracking_id"
        ]
      },
      "VouchersValidateInvalidResponseBody": {
        "type": "object",
        "title": "Vouchers Validate Invalid Response Body",
        "description": "Response body schema for **POST** `/vouchers/{code}/validate`.",
        "properties": {
          "valid": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the voucher is valid within the context of the parameters provided in the request body."
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "error": {
            "type": "object",
            "additionalProperties": false,
            "description": "Detailed failure cause for the invalid voucher if the reason has a translation defined in the Dashboard → Project Settings → Error Messages.",
            "properties": {
              "code": {
                "type": "number",
                "description": "Voucher code."
              },
              "key": {
                "type": "string"
              },
              "message": {
                "type": "string",
                "description": "Customized error message."
              },
              "details": {
                "type": "string"
              },
              "request_id": {
                "type": "string"
              },
              "resource_id": {
                "type": "string"
              },
              "resource_type": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "key",
              "message",
              "details"
            ]
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "valid",
          "code"
        ]
      },
      "SimpleProductDiscountUnit": {
        "type": "object",
        "title": "Simple Product Discount Unit",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "Product's source ID."
          },
          "name": {
            "type": "string",
            "description": "Product name."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SimpleSkuDiscountUnit": {
        "type": "object",
        "title": "Simple Sku Discount Unit",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique SKU ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "Product variant's source ID."
          },
          "name": {
            "type": "string",
            "description": "Sku name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "DiscountUnit": {
        "type": "object",
        "title": "Unit",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "enum": [
              "UNIT"
            ],
            "description": "Discount type."
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_off_formula": {
            "type": "string"
          },
          "effect": {
            "description": "Defines how the unit is added to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountUnitVouchersEffectTypes"
              }
            ]
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "description": "Contains information about the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProductDiscountUnit"
              }
            ]
          },
          "sku": {
            "$ref": "#/components/schemas/SimpleSkuDiscountUnit"
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "unit_type"
        ]
      },
      "DiscountUnitMultiple": {
        "type": "object",
        "title": "Unit Multiple",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "enum": [
              "UNIT"
            ],
            "description": "Discount type."
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "enum": [
              "ADD_MANY_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountUnitMultipleOneUnit"
            }
          }
        },
        "required": [
          "type",
          "units"
        ]
      },
      "DiscountUnitMultipleOneUnit": {
        "type": "object",
        "title": "One Unit",
        "properties": {
          "unit_off": {
            "type": "number",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_off_formula": {
            "type": "string"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_NEW_ITEMS",
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order.\n\n"
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "description": "Contains information about the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProductDiscountUnit"
              }
            ]
          },
          "sku": {
            "description": "Contains information about the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleSkuDiscountUnit"
              }
            ]
          }
        },
        "required": [
          "effect",
          "unit_type"
        ]
      },
      "DiscountAmount": {
        "type": "object",
        "title": "Amount",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "enum": [
              "AMOUNT"
            ],
            "description": "Defines the type of the voucher."
          },
          "amount_off": {
            "type": "number",
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
          },
          "amount_off_formula": {
            "type": "string"
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountAmountVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "DiscountPercent": {
        "type": "object",
        "title": "Percent",
        "properties": {
          "type": {
            "type": "string",
            "default": "PERCENT",
            "enum": [
              "PERCENT"
            ],
            "description": "Defines the type of the voucher."
          },
          "percent_off": {
            "type": "number",
            "description": "The percent discount that the customer will receive."
          },
          "percent_off_formula": {
            "type": "string"
          },
          "amount_limit": {
            "type": "number",
            "description": "Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountPercentVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "percent_off"
        ]
      },
      "DiscountFixed": {
        "title": "Fixed",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "enum": [
              "FIXED"
            ],
            "description": "Defines the type of the voucher."
          },
          "fixed_amount": {
            "type": "number",
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value."
          },
          "fixed_amount_formula": {
            "type": "string"
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountFixedVouchersEffectTypes"
              }
            ]
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        },
        "required": [
          "type",
          "fixed_amount"
        ]
      },
      "DiscountAmountVouchersEffectTypes": {
        "title": "Discount Amount Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS",
          "APPLY_TO_ITEMS_PROPORTIONALLY",
          "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
          "APPLY_TO_ITEMS_BY_QUANTITY"
        ],
        "type": "string"
      },
      "DiscountPercentVouchersEffectTypes": {
        "title": "Discount Percent Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS"
        ],
        "type": "string"
      },
      "DiscountFixedVouchersEffectTypes": {
        "title": "Discount Fixed Vouchers Effect Types",
        "enum": [
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS"
        ],
        "type": "string"
      },
      "DiscountUnitVouchersEffectTypes": {
        "title": "Discount Unit Vouchers Effect Types",
        "enum": [
          "ADD_MISSING_ITEMS",
          "ADD_NEW_ITEMS",
          "ADD_MANY_ITEMS"
        ],
        "type": "string"
      },
      "DiscountVouchersEffectTypes": {
        "title": "Discount Vouchers Effect Types",
        "enum": [
          "ADD_MISSING_ITEMS",
          "ADD_NEW_ITEMS",
          "ADD_MANY_ITEMS",
          "APPLY_TO_ORDER",
          "APPLY_TO_ITEMS",
          "APPLY_TO_ITEMS_PROPORTIONALLY",
          "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
          "APPLY_TO_ITEMS_BY_QUANTITY"
        ],
        "type": "string"
      },
      "DiscountVouchersTypes": {
        "title": "Discount Vouchers Types",
        "enum": [
          "AMOUNT",
          "PERCENT",
          "UNIT",
          "FIXED"
        ],
        "type": "string"
      },
      "VouchersGetResponseBody": {
        "type": "object",
        "title": "Vouchers Get Response Body",
        "description": "Response body schema for **GET** `/vouchers/{code}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersUpdateResponseBody": {
        "type": "object",
        "title": "Vouchers Update Response Body",
        "description": "Response body schema for **PUT** `/vouchers/{code}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersCreateResponseBody": {
        "type": "object",
        "title": "Vouchers Create Response Body",
        "description": "Response body schema for **POST** `/vouchers/{code}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersEnableResponseBody": {
        "type": "object",
        "title": "Vouchers Enable Response Body",
        "description": "Response body schema for **POST** `/vouchers/{code}/enable`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersDisableResponseBody": {
        "type": "object",
        "title": "Vouchers Disable Response Body",
        "description": "Response body schema for **POST** `/vouchers/{code}/disable`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "Voucher": {
        "title": "Voucher",
        "type": "object",
        "description": "This is an object representing a voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify.",
            "example": "cat_0bb343dee3cdb5ec0c"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "gift": {
            "type": "object",
            "description": "Object representing gift parameters. Child attributes are present only if `type` is `GIFT_VOUCHER`. Defaults to `null`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "balance": {
                "type": "integer",
                "example": 500,
                "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if `type` is `LOYALTY_CARD`. Defaults to `null`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "format": "date",
                "example": "2023-05-30",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date. "
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "$ref": "#/components/schemas/VoucherAssets"
          },
          "is_referral_code": {
            "type": "boolean",
            "nullable": true,
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of voucher owner."
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `voucher`.",
            "default": "voucher"
          },
          "distributions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is deleted."
          },
          "validation_rules_assignments": {
            "$ref": "#/components/schemas/ValidationRulesAssignmentsList"
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or <!-- [publish voucher](OpenAPI.json/paths/~1publications/post) -->[publish voucher](ref:create-publication) API method. \n\n<!-- title: My Table Title -->\n\n| Required | Optional |\n| -------- | :------: |\n| `type`:`LOYALTY_CARD` |  `type`:`DISCOUNT_VOUCHER`   | \n| `is_referral_code`:`true`      |    `type`:`GIFT_VOUCHER`   |\n",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the `url` attribute."
              },
              "count": {
                "type": "integer",
                "example": 0,
                "description": "Publication events counter."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10",
                "description": "The endpoint where this list of publications can be accessed using a GET method. `/v1/vouchers/{voucher_code}/publications`"
              }
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1,
                "description": "How many times a voucher has already been redeemed."
              },
              "redeemed_amount": {
                "type": "integer",
                "example": 100000,
                "description": "Total amount redeemed. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 balance is written as 10000."
              },
              "redeemed_points": {
                "type": "integer",
                "example": 100000,
                "description": "Total loyalty points redeemed."
              },
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. `/v1/vouchers/{voucher_code}/redemptions`"
              }
            }
          }
        }
      },
      "VoucherAssets": {
        "title": "Voucher Assets",
        "type": "object",
        "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
        "properties": {
          "qr": {
            "type": "object",
            "description": "Stores Quick Response (QR) representation of encrypted code.",
            "properties": {
              "id": {
                "type": "string",
                "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                "description": "Encrypted voucher code ID."
              },
              "url": {
                "type": "string",
                "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                "description": "URL to QR code  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
              }
            }
          },
          "barcode": {
            "type": "object",
            "description": "Stores barcode representation of encrypted code.",
            "properties": {
              "id": {
                "type": "string",
                "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                "description": "Encrypted voucher code ID."
              },
              "url": {
                "type": "string",
                "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                "description": "URL to barcode  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
              }
            }
          }
        }
      },
      "1_obj_voucher_object_list_vouchers": {
        "title": "Voucher Object",
        "type": "object",
        "description": "This is an object representing a voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify.",
            "example": "cat_0bb343dee3cdb5ec0c"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping"
              }
            ]
          },
          "gift": {
            "type": "object",
            "description": "Object representing gift parameters. Child attributes are present only if `type` is `GIFT_VOUCHER`. Defaults to `null`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "balance": {
                "type": "integer",
                "example": 500,
                "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if `type` is `LOYALTY_CARD`. Defaults to `null`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "format": "date",
                "example": "2023-05-30",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date. "
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of voucher owner."
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1,
                "description": "How many times a voucher has already been redeemed."
              },
              "redeemed_amount": {
                "type": "integer",
                "example": 100000,
                "description": "Total amount redeemed. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 balance is written as 10000."
              },
              "redeemed_points": {
                "type": "integer",
                "example": 100000,
                "description": "Total loyalty points redeemed."
              },
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. `/v1/vouchers/{voucher_code}/redemptions`"
              }
            }
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or <!-- [publish voucher](OpenAPI.json/paths/~1publications/post) -->[publish voucher](ref:create-publication) API method. \n\n<!-- title: My Table Title -->\n\n| Required | Optional |\n| -------- | :------: |\n| `type`:`LOYALTY_CARD` |  `type`:`DISCOUNT_VOUCHER`   | \n| `is_referral_code`:`true`      |    `type`:`GIFT_VOUCHER`   |\n",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the `url` attribute."
              },
              "count": {
                "type": "integer",
                "example": 0,
                "description": "Publication events counter."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10",
                "description": "The endpoint where this list of publications can be accessed using a GET method. `/v1/vouchers/{voucher_code}/publications`"
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `voucher`.",
            "default": "voucher"
          }
        }
      },
      "1_req_vouchers__POST": {
        "title": "Create Voucher Request Body",
        "type": "object",
        "description": "Request body schema for creating a voucher.",
        "properties": {
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters. Pass this attribute in the request body if you want to deliberately create a distinct code. Otherwise, either use the `code_config` object to design rules that the Voucherify API should use to create a random code or don't pass any code and the application will generate a random code."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "Identifies the voucher's parent campaign using a unique campaign name. **Required** for `LOYALTY_CARD` type."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Identifies the voucher's parent campaign using a unique campaign ID assigned by the Voucherify API."
          },
          "category": {
            "type": "string",
            "description": "The name of the tag defining the category that this voucher belongs to. Useful when listing vouchers using the <!-- [List Vouchers](OpenAPI.json/paths/~1vouchers/get) -->[List Vouchers](ref:list-vouchers) endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "The unique ID assigned by Voucherify of the tag defining the category that this voucher belongs to. Useful when listing vouchers using the <!-- [List Vouchers](OpenAPI.json/paths/~1vouchers/get) -->[List Vouchers](ref:list-vouchers) endpoint.",
            "example": "cat_0b6152ce12414820dc"
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping_POST"
              }
            ]
          },
          "gift": {
            "type": "object",
            "description": "Defines gift card; **required** when type parameter is `GIFT_VOUCHER`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Define how many credits the gift card should have initially. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Defines loyalty card; **required** when type parameter is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Define how many points the loyalty card should have initially."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date."
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is active. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the id of the validation rule associated with the voucher.",
            "items": {
              "type": "string",
              "example": "[val_4j7DCRm2IS59]"
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "type": "object",
            "description": "Defines code's pattern (prefix, suffix, length, charset, etc). Pass this attribute in the request body if you want to design rules that the Voucherify API should use to create a random code. Otherwise, either use the `code` parameter to define a distinct code or don't pass any code and the application will generate a random code.",
            "properties": {
              "length": {
                "type": "integer",
                "description": "Number of characters in a generated code (excluding prefix and postfix)."
              },
              "charset": {
                "type": "string",
                "description": "Characters that can appear in the code.  \n\nExamples:\n\n- Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz` \n- Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Numbers: `0123456789`  \n- Custom: a custom character set"
              },
              "prefix": {
                "type": "string",
                "description": "A text appended before the code."
              },
              "postfix": {
                "type": "string",
                "description": "A text appended after the code."
              },
              "pattern": {
                "type": "string",
                "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`."
              }
            }
          }
        }
      },
      "1_req_vouchers_code_POST": {
        "title": "Create Voucher Request Body",
        "type": "object",
        "description": "Request body schema for creating a voucher.",
        "properties": {
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "Identifies the voucher's parent campaign using a unique campaign name. **Required** for `LOYALTY_CARD` type."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Identifies the voucher's parent campaign using a unique campaign ID assigned by the Voucherify API."
          },
          "category": {
            "type": "string",
            "description": "The name of the tag defining the category that this voucher belongs to. Useful when listing vouchers using the <!-- [List Vouchers](OpenAPI.json/paths/~1vouchers/get) -->[List Vouchers](ref:list-vouchers) endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "The unique ID assigned by Voucherify of the tag defining the category that this voucher belongs to. Useful when listing vouchers using the <!-- [List Vouchers](OpenAPI.json/paths/~1vouchers/get) -->[List Vouchers](ref:list-vouchers) endpoint.",
            "example": "cat_0b6152ce12414820dc"
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping_POST"
              }
            ]
          },
          "gift": {
            "type": "object",
            "description": "Defines gift card; **required** when type parameter is `GIFT_VOUCHER`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Define how many credits the gift card should have initially. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order"
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Defines loyalty card; **required** when type parameter is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Define how many points the loyalty card should have initially."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date."
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is active. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid; can be a combination of any of the following integers:\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 6
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the voucher.",
            "items": {
              "type": "string",
              "example": "[val_4j7DCRm2IS59]"
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          }
        }
      },
      "1_res_vouchers_GET": {
        "title": "List vouchers",
        "type": "object",
        "description": "Array list of vouchers",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "default": "vouchers",
            "description": "Identifies the name of the attribute that contains the array of voucher objects."
          },
          "vouchers": {
            "type": "array",
            "description": "A dictionary that contains an array of  vouchers. Each entry in the array is a separate voucher object.",
            "items": {
              "$ref": "#/components/schemas/1_obj_voucher_object_list_vouchers"
            }
          },
          "total": {
            "type": "integer",
            "example": 20,
            "description": "Returns how many vouchers in the project meet the limits defined by the query parameter definitions."
          }
        }
      },
      "1_req_vouchers_code_PUT": {
        "title": "Update Voucher Request Body",
        "type": "object",
        "description": "Request body schema for updating a voucher.",
        "properties": {
          "category": {
            "type": "string",
            "description": "The name of the tag defining the category that this voucher belongs to. Useful when listing vouchers using the [List Vouchers](ref:list-vouchers) endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "The unique ID assigned by Voucherify of the tag defining the category that this voucher belongs to. Useful when listing vouchers using the [List Vouchers](ref:list-vouchers) endpoint.",
            "example": "cat_0bb81a481615a37b5e"
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple_PUT"
              }
            ]
          },
          "gift": {
            "type": "object",
            "description": "Defines gift card; **required** when type parameter is `GIFT_VOUCHER`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Update the total voucher income incurred over the lifespan of the gift card. If you set a value higher than the stored value for the `amount` parameter of this gift voucher, then the `balance` parameter of the gift card will increase by the difference. If you set a value lower than the stored value for the `amount` parameter, then the `balance` parameter of the gift gard will decrease by the difference. Remember that the  value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.    \nExpect this result:    \n\n&Delta; `balance` parameter: credits(amount)<sub>in request body</sub> - credits(amount)<sub>stored in Voucherify system</sub>"
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order"
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Defines loyalty card; **required** when the voucher type parameter is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Update the total points incurred over lifespan of loyalty card. If you set a value higher than the stored value for this parameter, then the `balance` parameter of the loyalty card will increase by the difference. If you set a value lower than the stored value for this parameter, then the `balance` parameter of the loyalty card will decrease by the difference.    \nExpect this result:    \n\n&Delta; `balance` parameter: points<sub>in request body</sub> - points<sub>stored in Voucherify system</sub>"
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date."
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is active. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          }
        }
      },
      "1_obj_voucher_object_discount_amount": {
        "title": "Amount",
        "type": "object",
        "description": "Amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Applies an amount discount."
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. In case of the amount being calculated by the formula, i.e. the `amount_off_formula` parameter is present in the amount definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the amount off."
          },
          "amount_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects:\n- `APPLY_TO_ITEMS` (each item subtotal is discounted equally)\n- `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
              "APPLY_TO_ITEMS_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order. The discount effects are defined as follows:\n- `APPLY_TO_ORDER` (discount applies to the total order amount)\n- `APPLY_TO_ITEMS` (each item subtotal is discounted equally)\n- `APPLY_TO_ITEMS_PROPORTIONALLY` (split discount proportionally to amount)\n- `APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY` (split discount proportionally to quantity)\n- `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)"
          }
        }
      },
      "1_obj_voucher_object_discount_percentage": {
        "title": "Percentage",
        "type": "object",
        "description": "Percentage discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "PERCENT",
            "description": "Applies a percentage discount."
          },
          "amount_limit": {
            "type": "string",
            "description": "Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. This value is definable for the `APPLY_TO_ITEMS` discount effect. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600."
          },
          "percent_off": {
            "type": "integer",
            "description": "Percent taken off the subtotal amount. In case of the percent being calculated by the formula, i.e. the `percent_off_formula` parameter is present in the percent definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the percent off.",
            "minimum": 0,
            "maximum": 100
          },
          "percent_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "1_obj_voucher_object_discount_fixed": {
        "title": "Fixed",
        "description": "Fixed discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Sets a fixed total on cart or item(s) and then calculates the discount to apply."
          },
          "fixed_amount": {
            "type": "integer",
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.",
            "example": 1000
          },
          "fixed_amount_formula": {
            "type": "string",
            "description": "Formula used to calculate the discounted price of an item or a new order total."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "\n| **Effect** | **Definition** |\n|:---|:---|\n| **APPLY_TO_ORDER** | Sets the order total amount to the value of the fixed amount. The discount value is calculated dynamically during the redemption as it's a difference between the total amount of the customer's order and the fixed amount. For example, if the fixed amount is set to equal $10 and the order amount equals $25, then the calculated discount will be $15. |\n| **APPLY_TO_ITEMS** | Sets a new price on items. The total discount amount is dynamically calculated during the redemption and it's a difference between the initial item price and the fixed amount. During the redemption, prices for items will change only if the new price is lower than the original price. If the new product price you set is different from the product price in a collection, then the new product price will be passed during the redemption. If a prodct is in more than one collection, the price is always changed to the lowest price. The new price for products with several SKUs will force the price change for SKUs if their original price is higher than the new price. |"
          }
        }
      },
      "1_obj_voucher_object_discount_unit_one": {
        "title": "Unit, single item",
        "type": "object",
        "description": "Single item type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)."
          },
          "unit_off": {
            "type": "number",
            "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
            "example": 1,
            "format": "float"
          },
          "unit_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the number of units."
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from the product  inventory (e.g. time, items).",
            "example": "prod_f1r5Tpr0DuC7"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_NEW_ITEMS",
              "ADD_MISSING_ITEMS"
            ],
            "default": "ADD_MISSING_ITEMS",
            "description": "Defines how the unit is added to the customer's order."
          }
        }
      },
      "1_obj_voucher_object_discount_unit_multiple": {
        "title": "Unit, multiple items",
        "type": "object",
        "description": "Multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s).",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
                  "example": 1
                },
                "unit_off_formula": {
                  "type": "string",
                  "description": "Formula used to calculate the number of units."
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from the product  inventory (e.g. time, items).",
                  "example": "prod_f1r5Tpr0DuC7"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order."
                }
              }
            }
          }
        }
      },
      "1_obj_voucher_object_discount_shipping": {
        "title": "Shipping",
        "description": "Shipping discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)."
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Subtracts 1 shipping item from the subtotal.",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping product deemed as free.",
            "default": "prod_5h1pp1ng"
          },
          "effect": {
            "type": "string",
            "description": "Defines how the unit is added to the customer's order.",
            "default": "ADD_MISSING_ITEMS"
          }
        }
      },
      "1_obj_voucher_object_discount_amount_POST": {
        "title": "Amount",
        "type": "object",
        "description": "Create amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Applies an amount discount."
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. In case of the amount being calculated by the formula, i.e. the `amount_off_formula` parameter is present in the amount definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the amount off."
          },
          "amount_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects:\n- `APPLY_TO_ITEMS` (each item subtotal is discounted equally)\n- `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
              "APPLY_TO_ITEMS_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order. The discount effects are defined as follows:\n- `APPLY_TO_ORDER` (discount applies to the total order amount)\n- `APPLY_TO_ITEMS` (each item subtotal is discounted equally)\n- `APPLY_TO_ITEMS_PROPORTIONALLY` (split discount proportionally to amount)\n- `APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY` (split discount proportionally to quantity)\n- `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)"
          }
        }
      },
      "1_obj_voucher_object_discount_percentage_POST": {
        "title": "Percentage",
        "type": "object",
        "description": "Create percentage discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "PERCENT",
            "description": "Applies a percentage discount."
          },
          "percent_off": {
            "type": "integer",
            "example": 10,
            "description": "Percent taken off the subtotal amount. In case of the percent being calculated by the formula, i.e. the `percent_off_formula` parameter is present in the percent definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the percent off.",
            "minimum": 0,
            "maximum": 100
          },
          "percent_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "amount_limit": {
            "type": "integer",
            "description": "Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. This value is definable for the `APPLY_TO_ITEMS` discount effect. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "1_obj_voucher_object_discount_fixed_POST": {
        "title": "Fixed",
        "description": "Create fixed discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Sets a fixed total on cart or item(s) and then calculates the discount to apply."
          },
          "fixed_amount": {
            "type": "integer",
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.",
            "example": 1000
          },
          "fixed_amount_formula": {
            "type": "string",
            "description": "Formula used to calculate the discounted price of an item or a new order total."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "\n| **Effect** | **Definition** |\n|---|---|\n| **APPLY_TO_ORDER** | Sets the order total amount to the value of the fixed amount. The discount value is calculated dynamically during the redemption as it's a difference between the total amount of the customer's order and the fixed amount. For example, if the fixed amount is set to equal $10 and the order amount equals $25, then the calculated discount will be $15. |\n| **APPLY_TO_ITEMS** | Sets a new price on items. The total discount amount is dynamically calculated during the redemption and it's a difference between the initial item price and the fixed amount. During the redemption, prices for items will change only if the new price is lower than the original price. If the new product price you set is different from the product price in a collection, then the new product price will be passed during the redemption. If a prodct is in more than one collection, the price is always changed to the lowest price. The new price for products with several SKUs will force the price change for SKUs if their original price is higher than the new price. |"
          }
        }
      },
      "1_obj_voucher_object_discount_unit_one_POST": {
        "title": "Unit, single item",
        "type": "object",
        "description": "Define single item type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)."
          },
          "unit_off": {
            "type": "number",
            "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
            "example": 1,
            "format": "float"
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from the product  inventory (e.g. time, items).",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "unit_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_NEW_ITEMS",
              "ADD_MISSING_ITEMS"
            ],
            "default": "ADD_MISSING_ITEMS",
            "description": "Defines how the unit is added to the customer's order."
          }
        }
      },
      "1_obj_voucher_object_discount_unit_multiple_POST": {
        "title": "Unit, multiple items",
        "type": "object",
        "description": "Define multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s).",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
                  "example": 1
                },
                "unit_off_formula": {
                  "type": "string",
                  "description": "Formula used to calculate the discount."
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from the product  inventory (e.g. time, items).",
                  "example": "prod_0a9f9aeddb019a42db"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order."
                }
              }
            }
          }
        }
      },
      "1_obj_voucher_object_discount_shipping_POST": {
        "title": "Shipping",
        "description": "Create shipping discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)."
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Subtracts 1 shipping item from the subtotal.",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping product deemed as free.",
            "default": "prod_5h1pp1ng"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MISSING_ITEMS",
            "enum": [
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order."
          }
        }
      },
      "1_obj_voucher_object_discount_amount_PUT": {
        "title": "Amount",
        "type": "object",
        "description": "Update amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "example": "AMOUNT",
            "description": "Applies an amount type discount. **Requires** child attribute\n `type`=`AMOUNT` when modifying this discount."
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. In case of the amount being calculated by the formula, i.e. the `amount_off_formula` parameter is present in the amount definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the amount off."
          },
          "amount_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects:\n- `APPLY_TO_ITEMS` (each item subtotal is discounted equally)\n- `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
              "APPLY_TO_ITEMS_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order. The discount effects are defined as follows:\n- `APPLY_TO_ORDER` (discount applies to the total order amount)\n- `APPLY_TO_ITEMS` (each item subtotal is discounted equally)\n- `APPLY_TO_ITEMS_PROPORTIONALLY` (split discount proportionally to amount)\n- `APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY` (split discount proportionally to quantity)\n- `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)"
          }
        }
      },
      "1_obj_voucher_object_discount_percentage_PUT": {
        "title": "Percentage",
        "type": "object",
        "description": "Update percentage discount type.",
        "properties": {
          "percent_off": {
            "type": "integer",
            "example": 10,
            "description": "Percent taken off the subtotal amount. In case of the percent being calculated by the formula, i.e. the `percent_off_formula` parameter is present in the percent definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the percent off.",
            "minimum": 0,
            "maximum": 100
          },
          "percent_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. This value is definable for the `APPLY_TO_ITEMS` discount effect. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600."
          },
          "amount_limit": {
            "type": "integer",
            "description": "Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "1_obj_voucher_object_discount_fixed_PUT": {
        "title": "Fixed",
        "type": "object",
        "description": "Update fixed discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Sets a fixed total on cart or item(s) and then calculates the discount to apply. **Requires** child attribute\n `type`=`FIXED` when modifying this discount."
          },
          "fixed_amount": {
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.",
            "example": 1000,
            "type": "integer"
          },
          "fixed_amount_formula": {
            "type": "string",
            "description": "Formula used to calculate the discounted price of an item or a new order total."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "\n| **Effect** | **Definition** |\n|---|---|\n| **APPLY_TO_ORDER** | Sets the order total amount to the value of the fixed amount. The discount value is calculated dynamically during the redemption as it's a difference between the total amount of the customer's order and the fixed amount. For example, if the fixed amount is set to equal $10 and the order amount equals $25, then the calculated discount will be $15. |\n| **APPLY_TO_ITEMS** | Sets a new price on items. The total discount amount is dynamically calculated during the redemption and it's a difference between the initial item price and the fixed amount. During the redemption, prices for items will change only if the new price is lower than the original price. If the new product price you set is different from the product price in a collection, then the new product price will be passed during the redemption. If a prodct is in more than one collection, the price is always changed to the lowest price. The new price for products with several SKUs will force the price change for SKUs if their original price is higher than the new price. |"
          }
        }
      },
      "1_obj_voucher_object_discount_unit_one_PUT": {
        "title": "Unit, single item",
        "type": "object",
        "description": "Update single item type.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s). **Requires** child attribute `type`=`UNIT` when modifying this discount.",
            "default": "UNIT"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
            "example": 1
          },
          "unit_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from the product inventory (e.g. time, items).",
            "example": "prod_f1r5Tpr0DuC7"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order.",
            "default": "ADD_MISSING_ITEMS"
          }
        }
      },
      "1_obj_voucher_object_discount_unit_multiple_PUT": {
        "title": "Unit, multiple items",
        "type": "object",
        "description": "Update multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s)",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
                  "example": 1
                },
                "unit_off_formula": {
                  "type": "string",
                  "description": "Formula used to calculate the discount."
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from the product  inventory (e.g. time, items).",
                  "example": "prod_f1r5Tpr0DuC7"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order."
                }
              }
            }
          }
        }
      },
      "1_obj_vouchers_import_discount_amount": {
        "title": "Import amount discount type",
        "type": "object",
        "description": "Import amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Applies an amount type discount. **Requires** child attribute\n `type`=`AMOUNT` when importing this discount."
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. In case of the amount being calculated by the formula, i.e. the `amount_off_formula` parameter is present in the amount definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the amount off."
          },
          "amount_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
              "APPLY_TO_ITEMS_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        },
        "required": [
          "type",
          "amount_off",
          "effect"
        ]
      },
      "1_obj_vouchers_import_discount_percentage": {
        "title": "Import percentage discount type",
        "type": "object",
        "description": "Import percentage discount type.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a percentage discount. Requires child attribute `type`=`PERCENT` when importing this discount.",
            "default": "PERCENT"
          },
          "percent_off": {
            "type": "integer",
            "example": 10,
            "description": "Percent taken off the subtotal amount. In case of the percent being calculated by the formula, i.e. the `percent_off_formula` parameter is present in the percent definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the percent off.",
            "minimum": 0,
            "maximum": 100
          },
          "percent_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "amount_limit": {
            "type": "integer",
            "description": "Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        },
        "required": [
          "type",
          "percent_off",
          "effect"
        ]
      },
      "1_obj_vouchers_import_discount_fixed": {
        "title": "Import fixed discount type",
        "type": "object",
        "description": "Import fixed discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Sets a fixed total on cart or item(s) and then calculates the discount to apply. **Requires** child attribute\n `type`=`FIXED` when importing this discount."
          },
          "fixed_amount": {
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.",
            "example": 1000,
            "type": "integer"
          },
          "fixed_amount_formula": {
            "type": "string",
            "description": "Formula used to calculate the discounted price of an item or a new order total."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "\n| **Effect** | **Definition** |\n|---|---|\n| **APPLY_TO_ORDER** | Sets the order total amount to the value of the fixed amount. The discount value is calculated dynamically during the redemption as it's a difference between the total amount of the customer's order and the fixed amount. For example, if the fixed amount is set to equal $10 and the order amount equals $25, then the calculated discount will be $15. |\n| **APPLY_TO_ITEMS** | Sets a new price on items. The total discount amount is dynamically calculated during the redemption and it's a difference between the initial item price and the fixed amount. During the redemption, prices for items will change only if the new price is lower than the original price. If the new product price you set is different from the product price in a collection, then the new product price will be passed during the redemption. If a prodct is in more than one collection, the price is always changed to the lowest price. The new price for products with several SKUs will force the price change for SKUs if their original price is higher than the new price. |"
          }
        },
        "required": [
          "type",
          "fixed_amount",
          "effect"
        ]
      },
      "1_obj_vouchers_import_discount_unit_one": {
        "title": "Import unit discount type, single item",
        "type": "object",
        "description": "Define single item type.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s). **Requires** child attribute `type`=`UNIT` when importing this discount.",
            "default": "UNIT"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
            "example": 1
          },
          "unit_off_formula": {
            "type": "string",
            "description": "Formula used to calculate the discount."
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from the product  inventory (e.g. time, items).",
            "example": "prod_f1r5Tpr0DuC7"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order.",
            "default": "ADD_MISSING_ITEMS"
          }
        },
        "required": [
          "type",
          "unit_off",
          "unit_type",
          "effect"
        ]
      },
      "1_obj_vouchers_import_discount_unit_multiple": {
        "title": "Import unit discount type, multiple items",
        "type": "object",
        "description": "Define multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s).",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to be granted a full value discount. In case of the unit being calculated by the formula, i.e. the `unit_off_formula` parameter is present in the unit definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the unit value.",
                  "example": 1
                },
                "unit_off_formula": {
                  "type": "string",
                  "description": "Formula used to calculate the discount."
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from the product  inventory (e.g. time, items).",
                  "example": "prod_f1r5Tpr0DuC7"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order."
                }
              },
              "required": [
                "unit_off",
                "unit_type",
                "effect"
              ]
            }
          }
        },
        "required": [
          "type",
          "effect",
          "units"
        ]
      },
      "1_obj_vouchers_import_discount_shipping": {
        "title": "Import shipping discount type",
        "description": "Import shipping discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s).",
            "default": "UNIT"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Subtracts 1 shipping item from the subtotal.",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping product deemed as free.",
            "default": "prod_5h1pp1ng"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MISSING_ITEMS",
            "enum": [
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order."
          }
        },
        "required": [
          "type",
          "unit_off",
          "unit_type",
          "effect"
        ]
      },
      "VouchersTransactionsListResponseBody": {
        "title": "Vouchers Transactions List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** `/vouchers/{code}/transactions`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of transaction objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            },
            "description": "A dictionary that contains an array of transactions. Each entry in the array is a separate transaction object."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the `has_more` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "has_more"
        ]
      },
      "VoucherTransactionsExportParameters": {
        "description": "List of available fields and filters that can be exported with a gift card or loyalty card transactions export along with the sorting order of the returned data.",
        "title": "Export Transactions",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\n| type | Transaction type. | - `CREDITS_REMOVAL` <br> - `CREDITS_ADDITION` <br> - `CREDITS_REFUND` <br> - `CREDITS_REDEMPTION` <br> - `POINTS_ACCRUAL` <br> - `POINTS_CANCELLATION` <br> - `POINTS_REDEMPTION`<br> - `POINTS_REFUND`<br> - `POINTS_ADDITION`<br> - `POINTS_REMOVAL`<br> - `POINTS_EXPIRATION`<br> - `POINTS_TRANSFER_IN`<br> - `POINTS_TRANSFER_OUT` |\n| source_id | Unique transaction source ID. | 8638 |\n| reason | Contains the reason for the transaction if one was included originally. |  |\n| balance | The gift card or loyalty card balance after the transaction. |  |\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\n| source|  Channel through which the transaction was initiated. | API |\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "type",
                "source_id",
                "reason",
                "balance",
                "amount",
                "created_at",
                "voucher_id",
                "campaign_id",
                "source",
                "details",
                "related_transaction_id"
              ]
            }
          }
        }
      },
      "VoucherTransactionsExport": {
        "title": "Voucher Transactions Export",
        "type": "object",
        "description": "This is an object representing an export. \n\n Using this endpoint, you can export voucher transactions as a CSV file. This functionality works asynchronously and comes down to the following steps: create an export object and return its id so you can track its status, trigger a CSV file generation, change the status to SCHEDULED when the generation is over, store the file in S3 and change the status to DONE. Now you can download it.\n\nWith parameters you can select which fields will be exported. An export request will almost always result in a single file being generated by the system. However, when your volume of data is large, the system may split the results into multiple chunks.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID.",
            "example": "exp_FFfp9o7daWuJqJCKp5xqqli4"
          },
          "object": {
            "type": "string",
            "default": "export",
            "description": "The type of object being represented. This object stores information about the `export`.",
            "enum": [
              "export"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2022-04-28T11:23:20.922Z",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.",
            "default": "SCHEDULED",
            "enum": [
              "SCHEDULED"
            ]
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered.",
            "default": "API"
          },
          "exported_object": {
            "type": "string",
            "description": "The type of exported object.",
            "default": "voucher_transactions",
            "enum": [
              "voucher_transactions"
            ]
          },
          "parameters": {
            "$ref": "#/components/schemas/VoucherTransactionsFilters"
          },
          "result": {
            "type": "object",
            "nullable": true,
            "description": "Contains the URL of the CSV file.",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the CSV file location. It contains the `token` used for authorization in the <!-- [Download export](OpenAPI.json/paths/~1exports~1{export_Id}/get) -->[Download export](ref:download-export) method."
              }
            }
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the `channel` value is `WEBSITE`.",
            "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH"
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "channel",
          "exported_object",
          "parameters",
          "result",
          "user_id"
        ]
      },
      "1_req_vouchers_import": {
        "title": "Import Vouchers Request Body",
        "type": "array",
        "description": "Request body schema for **POST** `/vouchers/import`.",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/1_obj_vouchers_import_gift_voucher"
            },
            {
              "$ref": "#/components/schemas/1_obj_vouchers_import_discount_voucher"
            }
          ]
        }
      },
      "1_obj_vouchers_import_gift_voucher": {
        "title": "Import Gift Voucher",
        "type": "object",
        "description": "Object model for gift voucher object being imported.",
        "properties": {
          "code": {
            "type": "string",
            "description": "Value representing the imported code."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the [List Vouchers](ref:list-vouchers) endpoint."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "type": {
            "type": "string",
            "description": "Represents the voucher type.  ",
            "default": "GIFT_VOUCHER"
          },
          "gift": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "Total gift card income. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              }
            },
            "required": [
              "amount"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date. Start date defines when the code starts to be active.\nAllowed date formats are:\n- YYYY-MM-DD\n- YYYY-MM-DDTHH\n- YYYY-MM-DDTHH:mm\n- YYYY-MM-DDTHH:mm:ss\n- YYYY-MM-DDTHH:mm:ssZ\n- YYYY-MM-DDTHH:mm:ss.SSSZ",
            "format": "date-time",
            "example": "2020-12-28T12:49:16.272Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date.\nAllowed date formats are:\n- YYYY-MM-DD\n- YYYY-MM-DDTHH\n- YYYY-MM-DDTHH:mm\n- YYYY-MM-DDTHH:mm:ss\n- YYYY-MM-DDTHH:mm:ssZ\n- YYYY-MM-DDTHH:mm:ss.SSSZ",
            "format": "date-time",
            "example": "2053-12-28T12:49:16.272Z"
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited.",
                "example": 10
              }
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          }
        },
        "required": [
          "code"
        ]
      },
      "1_obj_vouchers_import_discount_voucher": {
        "title": "Import Discount Voucher",
        "type": "object",
        "description": "Object model for discount voucher object being imported.",
        "properties": {
          "code": {
            "type": "string",
            "description": "Value representing the imported code."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the [List Vouchers](ref:list-vouchers) endpoint."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "type": {
            "type": "string",
            "description": "Represents the voucher type.",
            "default": "DISCOUNT_VOUCHER"
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_amount"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_percentage"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_unit_one"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_shipping"
              }
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date. Start date defines when the code starts to be active.\nAllowed formats of dates are:\n- YYYY-MM-DD\n- YYYY-MM-DDTHH\n- YYYY-MM-DDTHH:mm\n- YYYY-MM-DDTHH:mm:ss\n- YYYY-MM-DDTHH:mm:ssZ\n- YYYY-MM-DDTHH:mm:ss.SSSZ",
            "format": "date-time",
            "example": "2020-12-28T12:49:16.272Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date.\nAllowed formats of dates are:\n- YYYY-MM-DD\n- YYYY-MM-DDTHH\n- YYYY-MM-DDTHH:mm\n- YYYY-MM-DDTHH:mm:ss\n- YYYY-MM-DDTHH:mm:ssZ\n- YYYY-MM-DDTHH:mm:ss.SSSZ",
            "format": "date-time",
            "example": "2053-12-28T12:49:16.272Z"
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited.",
                "example": 10
              }
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          }
        },
        "required": [
          "code"
        ]
      },
      "Discount": {
        "title": "Discount",
        "type": "object",
        "description": "Contains information about discount.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DiscountAmount"
          },
          {
            "$ref": "#/components/schemas/DiscountUnit"
          },
          {
            "$ref": "#/components/schemas/DiscountUnitMultiple"
          },
          {
            "$ref": "#/components/schemas/DiscountPercent"
          },
          {
            "$ref": "#/components/schemas/DiscountFixed"
          }
        ]
      },
      "Gift": {
        "title": "Gift",
        "type": "object",
        "additionalProperties": false,
        "description": "Contains current gift card balance information.",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "balance": {
            "type": "number",
            "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "effect": {
            "type": "string",
            "description": "Defines how the credits are applied to the customer's order.",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ]
          }
        },
        "required": [
          "amount",
          "balance"
        ]
      },
      "RedeemableGift": {
        "title": "Redeemable Gift",
        "type": "object",
        "additionalProperties": false,
        "description": "Contains current gift card balance information.",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "credits": {
            "type": "number",
            "description": "The number of credits that the user wants to use from the gift card to fulfil the order. The value of credits cannot be higher than the current balance on the gift card. If the user gives more points than he has on the gift card, the application will return an error code in response. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          }
        }
      },
      "1_res_vouchers_qualification": {
        "title": "Vouchers Qualification Response Body",
        "type": "object",
        "description": "Response body schema for vouchers/qualification",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. Default is `list`."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of qualified vouchers."
          },
          "data": {
            "type": "array",
            "description": "Array of qualified vouchers.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Voucher"
                },
                {
                  "$ref": "#/components/schemas/1_res_obj_vouchers_qualification_applicable_to"
                },
                {
                  "$ref": "#/components/schemas/1_res_obj_vouchers_qualification_inapplicable_to"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "example": 37,
            "description": "Total valid and active vouchers matching the qualification criteria in given context. "
          },
          "id": {
            "type": "string",
            "example": "qfl_nAMVLoxIqSLh9O6YmfoAXRPG",
            "description": "Unique qualification ID."
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-25T13:32:08.734Z",
            "description": "Timestamp representing the date and time when the qualification was created in ISO 8601 format.",
            "format": "date-time"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          }
        }
      },
      "1_res_obj_vouchers_qualification_applicable_to": {
        "title": "ApplicableToObject",
        "type": "object",
        "description": "",
        "properties": {
          "applicable_to": {
            "$ref": "#/components/schemas/6_res_applicable_to_object"
          }
        }
      },
      "1_res_obj_vouchers_qualification_inapplicable_to": {
        "title": "InapplicableToObject",
        "type": "object",
        "properties": {
          "inapplicable_to": {
            "$ref": "#/components/schemas/6_res_inapplicable_to_object"
          }
        }
      },
      "1_req_vouchers_bulk_async": {
        "title": "Vouchers Bulk Async Request Body",
        "type": "array",
        "description": "Array of objects each containing the code to be updated and the metadata object containing the key/value pairs to be updated.",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Unique voucher code."
            },
            "metadata": {
              "type": "object",
              "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
            }
          }
        }
      },
      "1_req_vouchers_qualification": {
        "title": "Vouchers Qualification Request Body",
        "type": "object",
        "description": "Request body schema for /vouchers/qualification.",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_customer"
          },
          "order": {
            "type": "object",
            "description": "Tracks purchase transactions. You can send the order in the request body to check against vouchers requiring specific order validation rules to be satisfied. The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing order in Voucherify's system that will be linked to the redemption of this request. This ID was assigned by the Voucherify API. You can send the order id in the request body to check against vouchers requiring specific order validation rules to be satisfied.",
                "example": "ord_gqj1QYW2j2A1E3Ula2YjdPf4"
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of an integration between multiple systems. It can be an order ID from a CRM system, database or 3rd-party service."
              },
              "amount": {
                "type": "integer",
                "minimum": 0,
                "description": "Pre-discount order amount represents the total amount of order items' amounts (sum of each item's `amount` property). You can send the total order amount or the amount of each item individually in the request body to check against vouchers requiring specific total order amount validation rules to be satisfied. The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_ \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "example": 10000
              },
              "items": {
                "type": "array",
                "description": "List of Order Items constituting the order. Order items can be defined either by `product_id` or `sku_id`. For every item, you must define the quantity.",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_product"
                    },
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_sku"
                    },
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_product_using_product_id"
                    },
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_product_using_source_id"
                    }
                  ]
                }
              },
              "customer": {
                "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_customer"
              },
              "referrer": {
                "description": "The person who referred the customer to make the order.",
                "type": "object"
              },
              "metadata": {
                "type": "object",
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Order metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _ORDER METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          },
          "reward": {
            "type": "object",
            "properties": {
              "points": {
                "type": "integer"
              },
              "assignment_id": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "1_req_obj_vouchers_qualification_customer": {
        "title": "Customer Object",
        "type": "object",
        "description": "This object stores customer details. You can send this object in the request body to check against vouchers requiring specific customer validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Audience_ &rarr; _Customer segment_ or _Basic Builder_ &rarr; _Customer Activity_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule). ",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of an existing customer that will be linked to the redemption in this request. This ID was assigned by the Voucherify API.",
            "example": "cust_J1CDUdbqn5Exva8ASWk1Fq0j"
          },
          "source_id": {
            "type": "string",
            "description": "A unique customer identifier. This is a tracking identifier of a user that is validating a voucher. The `source_id` is built based on your internal id (e.g., email, database ID). If you also pass a customer ID, the source ID will be ignored. Otherwise, if you do not pass a customer ID, the source ID you provide must either be a token, like the one returned in the original voucher validation method done by a specific customer, or a string identifying the customer (e.g., email, database ID, CRM ID).",
            "example": "firstname.lastname@mycompany.com"
          },
          "name": {
            "type": "string",
            "description": "First and Last Name. You can send the name in the request body to check against vouchers requiring specific name validation rules to be satisfied.",
            "example": "FirstName LastName"
          },
          "email": {
            "type": "string",
            "description": "You can send the email in the request body to check against vouchers requiring specific email validation rules to be satisfied.",
            "example": "firstname.lastname@mycompany.com"
          },
          "phone": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "pattern": "^[-+.() 0-9]",
            "description": "You can send the phone in the request body to check against vouchers requiring specific phone validation rules to be satisfied."
          },
          "address": {
            "type": "object",
            "additionalProperties": false,
            "description": "A set of key/value pairs which describes the address. You can send the address in the request body to check against vouchers requiring specific address validation rules to be satisfied.",
            "properties": {
              "city": {
                "type": "string",
                "description": "You can send the city in the request body to check against vouchers requiring specific city validation rules to be satisfied.",
                "example": "New York"
              },
              "country": {
                "type": "string",
                "description": "You can send the country in the request body to check against vouchers requiring specific country validation rules to be satisfied.",
                "example": "United States of America"
              },
              "postal_code": {
                "type": "string",
                "description": "You can send the postal code in the request body to check against vouchers requiring specific postal code validation rules to be satisfied.",
                "example": "10001"
              },
              "state": {
                "type": "string",
                "description": "You can send the state in the request body to check against vouchers requiring specific state validation rules to be satisfied.",
                "example": "NY"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **customer** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Audience_ &rarr; _Customer metadata satisfy_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "birthdate": {
            "type": "string",
            "example": "2022-01-01",
            "format": "date",
            "description": "You can send the birthdate in the request body to check against vouchers requiring specific birthdate validation rules to be satisfied."
          }
        }
      },
      "1_req_obj_vouchers_qualification_product": {
        "title": "Product Item",
        "type": "object",
        "description": "Schema model for a product item. You can send this object in the request body to check against vouchers requiring specific product validation rules to be satisfied. The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "A unique product identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "product_id": {
            "type": "string",
            "description": "A unique identifier that represents the product and is assigned by Voucherify.",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "amount": {
            "type": "integer",
            "description": "Represents a total pre-discount amount of order item (`price` * `quantity`). You can send the total item amount to check against vouchers requiring specific order amount validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_. The qualification adds the individual amounts of the items and checks whether the sum meets the limits set by the _Total amount_. Additionally, another rule checked is one that is defined in _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Subtotal of matched items_.  \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
            "example": 10000
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the item in the cart. \n\nThe qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. Another validation rule against which the qualification does the checks is defined in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Quantity of matched items_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. [This is not true in the case of using sourceid what was the case that this happened.]This `price` property takes precedence. If you provide a value at this level, then a price property defined once again in the `related_object` will be ignored. If this property will not be defined here, then the `price` property in the `related_object` will be used in the qualification.\n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Unit Price of any matching order line_ and also _Order Volume_ &rarr; _Price of each item/Price of any item_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).\n\n Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
            "example": 10000
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order line item** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Metadata of matched items_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "related_object": {
            "type": "string",
            "default": "product",
            "enum": [
              "product"
            ],
            "description": "A reference to the object containing details of the related product. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": "object",
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": "string",
                "description": "Product name.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on name filters_.",
                "example": "Phone"
              },
              "price": {
                "type": "integer",
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "example": 10000
              },
              "metadata": {
                "type": "object",
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          }
        }
      },
      "1_req_obj_vouchers_qualification_product_using_product_id": {
        "title": "Product Item using product_id",
        "type": "object",
        "description": "Schema model for a product item sent using the `product_id`. \n\nYou can send this object in the request body to check against vouchers requiring specific product validation rules to be satisfied. \nThe qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
        "properties": {
          "product_id": {
            "type": "string",
            "description": "A unique identifier that represents the product and is assigned by Voucherify.",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "amount": {
            "type": "integer",
            "description": "Represents a total pre-discount amount of order item (`price` * `quantity`). You can send the total item amount to check against vouchers requiring specific order amount validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_. The qualification adds the individual amounts of the items and checks whether the sum meets the limits set by the _Total amount_. Additionally, another rule checked is one that is defined in _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Subtotal of matched items_.  \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
            "example": 10000
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the item in the cart. \n\nThe qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. Another validation rule against which the qualification does the checks is defined in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Quantity of matched items_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. [This is not true in the case of using sourceid what was the case that this happened.]This `price` property takes precedence. If you provide a value at this level, then a price property defined once again in the `related_object` will be ignored. If this property will not be defined here, then the `price` property in the `related_object` will be used in the qualification.\n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Unit Price of any matching order line_ and also _Order Volume_ &rarr; _Price of each item/Price of any item_. Even if this price is explicitly provided, it will not override the `price` when running qualifications against _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select/create a product collection filtered by a Price_.   [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).\n\n Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
            "example": 10000
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order line item** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Metadata of matched items_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "product": {
            "type": "object",
            "description": "An object containing details of the related product. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Product name.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on name filters_.",
                "example": "Phone"
              },
              "price": {
                "type": "integer",
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "example": 10000
              },
              "metadata": {
                "type": "object",
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          }
        }
      },
      "1_req_obj_vouchers_qualification_product_using_source_id": {
        "title": "Product Item using source_id",
        "type": "object",
        "description": "Schema model for a product item. You can send this object in the request body to check against vouchers requiring specific product validation rules to be satisfied. The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "A unique product identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "amount": {
            "type": "integer",
            "description": "Represents a total pre-discount amount of order item (`price` * `quantity`). You can send the total item amount to check against vouchers requiring specific order amount validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_. The qualification adds the individual amounts of the items and checks whether the sum meets the limits set by the _Total amount_. Additionally, another rule checked is one that is defined in _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Subtotal of matched items_.  \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
            "example": 10000
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the item in the cart. \n\nThe qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. Another validation rule against which the qualification does the checks is defined in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Quantity of matched items_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "price": {
            "type": "integer",
            "description": "Unit price of an item. [This is not true in the case of using sourceid what was the case that this happened.]This `price` property takes precedence. If you provide a value at this level, then a price property defined once again in the `related_object` will be ignored. If this property will not be defined here, then the `price` property in the `related_object` will be used in the qualification.\n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Unit Price of any matching order line_ and also _Order Volume_ &rarr; _Price of each item/Price of any item_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).\n\n Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
            "example": 10000
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order line item** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Metadata of matched items_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "related_object": {
            "type": "string",
            "default": "product",
            "enum": [
              "product"
            ],
            "description": "A reference to the object containing details of the related product. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": "object",
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": "string",
                "description": "Product name.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on name filters_.",
                "example": "Phone"
              },
              "price": {
                "type": "integer",
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "example": 10000
              },
              "metadata": {
                "type": "object",
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          }
        },
        "required": [
          "source_id",
          "related_object"
        ]
      },
      "1_req_obj_vouchers_qualification_sku": {
        "title": "SKU Item",
        "type": "object",
        "description": "Schema model for a SKU item.",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "A unique sku identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "sku_id": {
            "type": "string",
            "example": "sku_0a41e31c7b41c28358",
            "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
          },
          "amount": {
            "type": "integer",
            "description": "Represents a total amount of order item (price * quantity).\n\nYou should provide it to retrieve `discount_amount` if the discount is applied only to this item.[I'm not sure what this means here, it's from the original docs]",
            "example": 10000
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the item in the cart. The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "related_object": {
            "type": "string",
            "enum": [
              "product",
              "sku"
            ],
            "description": "A reference to the object containing details of the related product/sku. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": "object",
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": "string",
                "description": "Product name.",
                "example": "Phone"
              },
              "price": {
                "type": "integer",
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "example": 10000
              },
              "metadata": {
                "type": "object",
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          },
          "sku": {
            "type": "object",
            "description": "An object containing details of the related SKU. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "A unique SKU identifier from your inventory system.",
                "example": "sku_1234"
              },
              "sku": {
                "type": "string",
                "description": "SKU name.",
                "example": "iPhone 12"
              },
              "price": {
                "type": "integer",
                "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.",
                "example": 10000
              },
              "metadata": {
                "type": "object",
                "description": "A set of custom key/value pairs that you can attach to a SKU."
              }
            }
          }
        }
      },
      "EmptyJson": {
        "type": "object",
        "description": "Schema model for an empty json.",
        "title": "Empty JSON"
      },
      "CampaignBase": {
        "type": "object",
        "title": "Campaign Base",
        "description": "This is an object representing a campaign.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_f7fBbQxUuTN7dI7tGOo5XMDA"
          },
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "campaign_type": {
            "type": "string",
            "enum": [
              "LOYALTY_PROGRAM",
              "GIFT_VOUCHERS",
              "DISCOUNT_COUPONS",
              "PROMOTION",
              "REFERRAL_PROGRAM",
              "LUCKY_DRAW"
            ],
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: the campaign is dynamic, i.e. vouchers will generate based on set criteria    \n-  `STATIC`: vouchers need to be manually published",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "voucher": {
            "$ref": "#/components/schemas/CampaignVoucher"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the campaign on or off. You can disable a campaign even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-01T08:00:50.038Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-20T09:18:19.623Z",
            "description": "Timestamp representing the date and time when the voucher was updated in ISO 8601 format."
          },
          "category": {
            "type": "string",
            "description": "Unique category name."
          },
          "creation_status": {
            "type": "string",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ],
            "description": "Indicates the status of the campaign creation."
          },
          "vouchers_generation_status": {
            "type": "string",
            "description": "Indicates the status of the campaign's vouchers.",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ]
          },
          "protected": {
            "type": "boolean",
            "description": "Indicates whether the resource can be deleted."
          },
          "category_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique category ID that this campaign belongs to.",
            "example": "cat_0b688929a2476386a7"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "object": {
            "type": "string",
            "default": "campaign",
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "loyalty_tiers_expiration": {
            "$ref": "#/components/schemas/LoyaltyTiersExpirationAll"
          }
        },
        "required": [
          "id",
          "name",
          "campaign_type",
          "type",
          "auto_join",
          "join_once",
          "use_voucher_metadata_schema",
          "created_at",
          "creation_status",
          "vouchers_generation_status",
          "protected",
          "category_id",
          "categories",
          "object"
        ]
      },
      "Campaign": {
        "title": "Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignBase"
          },
          {
            "title": "Campaign Additional Data",
            "type": "object",
            "properties": {
              "promotion": {
                "$ref": "#/components/schemas/PromotionTiersList"
              },
              "validation_rules_assignments": {
                "$ref": "#/components/schemas/ValidationRulesAssignmentsList"
              }
            }
          }
        ]
      },
      "CampaignVoucher": {
        "type": "object",
        "description": "Schema model for a campaign voucher.",
        "title": "Campaign Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher."
          },
          "discount": {
            "description": "Defines the voucher discount type and details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Discount"
              }
            ]
          },
          "gift": {
            "description": "Defines the voucher gift details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the voucher loyalty card details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignLoyaltyCard"
              }
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            },
            "required": [
              "quantity"
            ]
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfigRequiredLengthCharsetPattern"
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          }
        },
        "required": [
          "type",
          "redemption",
          "code_config",
          "is_referral_code"
        ]
      },
      "CodeConfig": {
        "title": "Code Config",
        "type": "object",
        "description": "Schema containing information about config used for voucher. Defines code's pattern (prefix, suffix, length, charset, etc).",
        "properties": {
          "length": {
            "type": "number",
            "description": "Number of characters in a generated code (excluding prefix and postfix)."
          },
          "charset": {
            "type": "string",
            "description": "Characters that can appear in the code.  \n\nExamples:\n\n- Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz` \n- Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Numbers: `0123456789`  \n- Custom: a custom character set"
          },
          "prefix": {
            "type": "string",
            "description": "A text appended before the code."
          },
          "postfix": {
            "type": "string",
            "description": "A text appended after the code."
          },
          "pattern": {
            "type": "string",
            "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`."
          },
          "initial_count": {
            "type": "integer",
            "description": "The initial count"
          }
        }
      },
      "CodeConfigRequiredLengthCharsetPattern": {
        "title": "Code Config Required Length Charset Pattern",
        "allOf": [
          {
            "$ref": "#/components/schemas/CodeConfig"
          }
        ],
        "required": [
          "length",
          "charset",
          "pattern"
        ]
      },
      "CampaignsImportVoucherLoyaltyCard": {
        "type": "object",
        "description": "Schema model for a campaign loyalty card.",
        "title": "Campaigns Import Voucher Loyalty Card",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The initial number of points to assign to the loyalty card. This is the current loyalty card score i.e. the number of loyalty points on the card."
          }
        },
        "required": [
          "points"
        ]
      },
      "CampaignLoyaltyCard": {
        "type": "object",
        "description": "Schema model for a campaign loyalty card.",
        "title": "Campaign Loyalty Card",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The initial number of points to assign to the loyalty card. This is the current loyalty card score i.e. the number of loyalty points on the card."
          },
          "expiration_rules": {
            "type": "object",
            "properties": {
              "period_type": {
                "type": "string",
                "description": "Type of period"
              },
              "period_value": {
                "type": "integer",
                "description": "Value of the period"
              },
              "rounding_type": {
                "type": "string",
                "description": "Type of rounding"
              },
              "rounding_value": {
                "type": "integer",
                "description": "Value of rounding"
              }
            },
            "required": [
              "period_type",
              "period_value",
              "rounding_type",
              "rounding_value"
            ]
          }
        },
        "required": [
          "points"
        ]
      },
      "2_loyalty_tiers_expiration_balance": {
        "title": "Balance",
        "type": "object",
        "description": "Defines the Balance expiration mechanism for loyalty tiers.",
        "properties": {
          "qualification_type": {
            "type": "string",
            "default": "BALANCE",
            "enum": [
              "BALANCE"
            ],
            "description": "Tier qualification.   \n\n`BALANCE`: Points balance is based on the customer's current points balance. Customers qualify for the tier if their points balance is in the points range of the tier."
          },
          "start_date": {
            "type": "object",
            "description": "Defines the conditions for the start date of the tier.",
            "properties": {
              "type": {
                "type": "string",
                "default": "IMMEDIATE",
                "enum": [
                  "IMMEDIATE"
                ],
                "description": "What triggers the tier to be valid for a customer.    \n`IMMEDIATE`: After reaching the minimum required points."
              }
            }
          },
          "expiration_date": {
            "description": "Defines the conditions for the expiration date of a tier.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_balance_expiration_date_balance_drop"
              },
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_balance_expiration_date_custom"
              }
            ]
          }
        }
      },
      "2_loyalty_tiers_expiration_balance_expiration_date_balance_drop": {
        "title": "Balance Drop",
        "type": "object",
        "description": "Defines the conditions for the expiration date of a tier based on a pure balance drop.",
        "properties": {
          "type": {
            "type": "string",
            "default": "BALANCE_DROP",
            "enum": [
              "BALANCE_DROP"
            ],
            "description": "What triggers the tier to expire for a customer.    \n`BALANCE_DROP`: Tier expires when the points balance drops below the required range of the tier."
          }
        }
      },
      "2_loyalty_tiers_expiration_balance_expiration_date_custom": {
        "title": "Custom",
        "type": "object",
        "description": "Defines the custom conditions for the expiration date of a tier.",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM",
            "enum": [
              "CUSTOM"
            ],
            "description": "What triggers the tier to expire for a customer.    \n`CUSTOM`: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier."
          },
          "extend": {
            "type": "string",
            "description": "Defines the amount of time the tier will remain active in ISO 8601 format. The expiration date counter starts at the moment when the customer reaches the minimum required points that are required to be in the tier. For example, a tier with a duration of P3M will be valid for a duration of 3 months."
          },
          "rounding": {
            "description": "Defines the rounding mechanism for tier expiration.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_expiration_date_rounding_default_options"
              },
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_expiration_date_rounding_custom"
              }
            ]
          }
        }
      },
      "2_loyalty_tiers_expiration_expiration_date_rounding_default_options": {
        "title": "Calendar Periods",
        "type": "object",
        "description": "Defines the rounding mechanism for tier expiration based on a list of available time periods.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MONTH",
              "QUARTER",
              "HALF_YEAR",
              "YEAR"
            ],
            "description": "Period to which the expiration will be rounded to.    \n- `MONTH`: The expiration date will be rounded to the end of the month. \n- `QUARTER`: The expiration date will be rounded to the end of the quarter. \n- `HALF_YEAR`: The expiration date will be rounded to the half year. \n- `YEAR`: The expiration date will be rounded to the end of the year."
          },
          "strategy": {
            "type": "string",
            "description": "Which portion of the given period should the rounding be applied to.",
            "default": "END",
            "enum": [
              "END"
            ]
          }
        }
      },
      "2_loyalty_tiers_expiration_expiration_date_rounding_custom": {
        "title": "Specific Month",
        "type": "object",
        "description": "Defines the custom rounding mechanism for tier expiration.",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM",
            "enum": [
              "CUSTOM"
            ],
            "description": "This mechanism describes a custom rounding for the expiration date."
          },
          "strategy": {
            "type": "string",
            "description": "Which portion of the given period should the rounding be applied to.",
            "default": "END",
            "enum": [
              "END"
            ]
          },
          "unit": {
            "type": "string",
            "description": "Defines the type of unit of time in which the rounding period is counted.",
            "default": "MONTH",
            "enum": [
              "MONTH"
            ]
          },
          "value": {
            "type": "integer",
            "description": "Value for the unit of time that the rounding applies to. Units for this parameter are defined by the `rounding.unit` parameter.    \n- `0`: January\n- `1`: February\n- `2`: March\n- `3`: April\n- `4`: May\n- `5`: June\n- `6`: July\n- `7`: August\n- `8`: September\n- `9`: October\n- `10`: November\n- `11`: December"
          }
        }
      },
      "2_loyalty_tiers_expiration_points_in_period": {
        "title": "Points in Period",
        "type": "object",
        "description": "Defines the Points in Period expiration mechanism for loyalty tiers.",
        "properties": {
          "qualification_type": {
            "type": "string",
            "default": "POINTS_IN_PERIOD",
            "enum": [
              "POINTS_IN_PERIOD"
            ],
            "description": "Tier qualification.   \n\n`POINTS_IN_PERIOD`: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold."
          },
          "qualification_period": {
            "type": "string",
            "description": "Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.    \n\n| **Period** | **Definition** |\n|:---|:---|\n| **Calendar Month** | Points collected in one calendar month<br>January, February, March, etc. |\n| **Calendar Quarter** | Points collected in the quarter<br>- January - March<br>- April - June<br>- July - September<br>- October - December |\n| **Calendar Half-year** | Points collected in the half-year<br>- January - June<br>- July - December |\n| **Calendar Year** | Points collected in one calendar year<br>January - December |",
            "enum": [
              "MONTH",
              "QUARTER",
              "HALF_YEAR",
              "YEAR"
            ]
          },
          "start_date": {
            "type": "object",
            "description": "Defines the conditions for the start date of the tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IMMEDIATE",
                  "NEXT_PERIOD"
                ],
                "description": "What triggers the tier to be valid for a customer.    \n`IMMEDIATE`: After reaching the minimum required points.    \n`NEXT_PERIOD`: When the next qualification period starts."
              }
            }
          },
          "expiration_date": {
            "type": "object",
            "description": "Defines the conditions for the expiration date of a tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "END_OF_PERIOD",
                  "END_OF_NEXT_PERIOD"
                ],
                "description": "What triggers the tier to expire for a customer.    \n`END_OF_PERIOD`: Expire tier at the end of the period.    \n`END_OF_NEXT_PERIOD`:  Expire tier at the end of the next period."
              },
              "extend": {
                "type": "string",
                "description": "Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of `P3M` will be valid for an additional duration of 3 months and a tier with a duration of `P1D` will be valid for an additional duration of 1 day."
              }
            }
          }
        }
      },
      "LuckyDraw": {
        "type": "object",
        "title": "Lucky Draw",
        "description": "Object for defining detailed information about lucky draw should be applied",
        "properties": {
          "winners_count": {
            "description": "It represents the total number of winners in a lucky draw.",
            "minimum": 1,
            "type": "string"
          },
          "unique_winners_per_draw": {
            "description": "It indicates whether each winner in a draw is unique or not.",
            "type": "string"
          },
          "unique_winners": {
            "description": "Specifies whether each participant can win only once across multiple draws.",
            "type": "string"
          }
        }
      },
      "CampaignsCreateBase": {
        "type": "object",
        "title": "Campaign Create Schema Base",
        "description": "Base body schema for creating a campaign using **POST** `/campaigns`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \n-  `STATIC`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign (size of campaign)."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the promotion tier.",
            "items": {
              "type": "string"
            },
            "maxItems": 1
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the `category`.",
            "example": "cat_0b688929a2476386a7"
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the `category_id`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          }
        }
      },
      "CampaignsUpdateBase": {
        "type": "object",
        "title": "Campaign Update Schema Base",
        "description": "Base body schema for creating a campaign using **PUT** `/campaigns`.",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the `category_id`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "unset_metadata_fields": {
            "type": "array",
            "nullable": true,
            "description": "Determine which metadata should be removed from campaign.",
            "items": {
              "type": "string"
            }
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the `category`.",
            "example": "cat_0b688929a2476386a7"
          }
        }
      },
      "CampaignsUpdateCouponCampaignBase": {
        "type": "object",
        "title": "Update Coupon Campaign Schema Base",
        "description": "Base body schema for updating a campaign which contains coupon codes using **PUT** `/campaigns`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateBase"
          },
          {
            "type": "object",
            "properties": {
              "activity_duration_after_publishing": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
              },
              "join_once": {
                "type": "boolean",
                "description": "If this value is set to `true`, customers will be able to join the campaign only once."
              },
              "auto_join": {
                "type": "boolean",
                "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
              },
              "type": {
                "type": "string",
                "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \n-  `STATIC`: vouchers need to be manually published.",
                "enum": [
                  "AUTO_UPDATE",
                  "STATIC"
                ]
              }
            }
          }
        ]
      },
      "CampaignsUpdateDiscountCouponsCampaign": {
        "type": "object",
        "title": "Update Discount Coupons Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Discount Coupons Campaign",
            "description": "Body schema for update a campaign of discount coupons type using **PUT** `/campaigns`.",
            "properties": {
              "discount": {
                "description": "Defines the voucher discount type and details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Discount"
                  }
                ]
              }
            }
          }
        ]
      },
      "CampaignsUpdateGiftCampaign": {
        "type": "object",
        "title": "Update Gift Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Gift Campaign",
            "description": "Body schema for update a campaign of give type using **PUT** `/campaigns`.",
            "properties": {
              "gift": {
                "description": "Defines the voucher gift details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Gift"
                  }
                ]
              }
            }
          }
        ]
      },
      "CampaignsUpdateReferralCampaign": {
        "type": "object",
        "title": "Update Referral Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Referral Campaign",
            "description": "Body schema for update a campaign of referral type using **PUT** `/campaigns`.",
            "properties": {
              "discount": {
                "description": "Defines the voucher discount type and details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Discount"
                  }
                ]
              },
              "referral_program": {
                "$ref": "#/components/schemas/ReferralProgram"
              }
            }
          }
        ]
      },
      "CampaignsUpdateLoyaltyCampaign": {
        "type": "object",
        "title": "Update Loyalty Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "type": "object",
            "title": "Properties For Loyalty Campaign",
            "description": "Body schema for update a campaign of loyalty type using **PUT** `/campaigns`.",
            "properties": {
              "loyalty_tiers_expiration": {
                "$ref": "#/components/schemas/LoyaltyTiersExpirationAll"
              },
              "options": {
                "type": "object",
                "properties": {
                  "recalculate_tiers": {
                    "type": "boolean",
                    "description": "Determine if tiers should be recalculated or no."
                  }
                }
              }
            }
          }
        ]
      },
      "CampaignsUpdateGiveawayCampaign": {
        "type": "object",
        "title": "Update Giveaway Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateCouponCampaignBase"
          },
          {
            "title": "Properties For Giveaway Campaign",
            "description": "Body schema for update a campaign of giveaway type using **PUT** `/campaigns`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LuckyDraw"
              }
            ]
          }
        ]
      },
      "CampaignsUpdatePromotionCampaign": {
        "type": "object",
        "title": "Update Promotion Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateBase"
          }
        ]
      },
      "CampaignsCreateRequestBody": {
        "type": "object",
        "title": "Campaigns Create Request Body",
        "description": "Request body schema for **POST** `/campaigns`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateDiscountCouponsCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateReferralCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateGiftCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateLoyaltyCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreatePromotionCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsCreateGiveawayCampaign"
          }
        ]
      },
      "CampaignsUpdateRequestBody": {
        "type": "object",
        "title": "Campaigns Update Request Body",
        "description": "Request body schema for **PUT** `/campaigns/{campaignId}`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CampaignsUpdateDiscountCouponsCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateReferralCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateGiftCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateLoyaltyCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdatePromotionCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignsUpdateGiveawayCampaign"
          }
        ]
      },
      "CampaignsCreateDiscountCouponsCampaign": {
        "title": "Create Discount Coupons Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Discount Coupons Campaign",
            "description": "Body schema for creating a campaign of discount coupons type using **POST** `/campaigns`.",
            "properties": {
              "campaign_type": {
                "type": "string",
                "default": "DISCOUNT_COUPONS",
                "enum": [
                  "DISCOUNT_COUPONS"
                ],
                "description": "Type of campaign."
              },
              "voucher": {
                "$ref": "#/components/schemas/DiscountCouponsCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreateReferralCampaign": {
        "title": "Create Referral Program",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Referral Program",
            "description": "Body schema for creating a campaign of referral type using **POST** `/campaigns`.",
            "properties": {
              "campaign_type": {
                "type": "string",
                "default": "REFERRAL_PROGRAM",
                "enum": [
                  "REFERRAL_PROGRAM"
                ],
                "description": "Type of campaign."
              },
              "referral_program": {
                "$ref": "#/components/schemas/ReferralProgram"
              },
              "voucher": {
                "$ref": "#/components/schemas/ReferralCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreateGiftCampaign": {
        "title": "Create Gift Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Gift Campaign",
            "description": "Body schema for creating a campaign of gift type using **POST** `/campaigns`.",
            "properties": {
              "campaign_type": {
                "type": "string",
                "default": "GIFT_VOUCHERS",
                "enum": [
                  "GIFT_VOUCHERS"
                ],
                "description": "Type of campaign."
              },
              "voucher": {
                "$ref": "#/components/schemas/GiftCampaignVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreateLoyaltyCampaign": {
        "title": "Create Loyalty Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Loyalty Campaign",
            "description": "Body schema for creating a campaign of loyalty type using **POST** `/campaigns`.",
            "properties": {
              "campaign_type": {
                "type": "string",
                "default": "LOYALTY_CARD",
                "enum": [
                  "LOYALTY_CARD"
                ],
                "description": "Type of campaign."
              },
              "voucher": {
                "$ref": "#/components/schemas/CampaignLoyaltyVoucher"
              }
            }
          }
        ]
      },
      "CampaignsCreatePromotionCampaign": {
        "title": "Create Promotion Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Promotion Campaign",
            "description": "Body schema for creating a campaign of promotion type using **POST** `/campaigns`.",
            "properties": {
              "campaign_type": {
                "type": "string",
                "default": "PROMOTION",
                "enum": [
                  "PROMOTION"
                ],
                "description": "Type of campaign."
              },
              "promotion": {
                "type": "object",
                "properties": {
                  "tiers": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "$ref": "#/components/schemas/PromotionTierCreateParams"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CampaignsCreateGiveawayCampaign": {
        "title": "Create Giveaway Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsCreateBase"
          },
          {
            "type": "object",
            "title": "Schema that contains unique properties for Giveaway Campaign",
            "description": "Body schema for creating a campaign of giveaway type using **POST** `/campaigns`.",
            "properties": {
              "campaign_type": {
                "type": "string",
                "default": "LUCKY_DRAW",
                "enum": [
                  "LUCKY_DRAW"
                ],
                "description": "Type of campaign."
              },
              "voucher": {
                "$ref": "#/components/schemas/GiveawayCampaignVoucher"
              },
              "lucky_draw": {
                "$ref": "#/components/schemas/LuckyDraw"
              }
            }
          }
        ]
      },
      "2_req_add_vouchers_with_specific_code_to_campaign": {
        "type": "object",
        "title": "Add Vouchers with Specific Code to Campaign Request Body",
        "description": "Request body schema for **POST** `/campaigns/{campaignId}/vouchers/{code}`.",
        "properties": {
          "category_id": {
            "type": "string",
            "description": "Unique category ID that you would like to assign to the voucher.",
            "example": "cat_0b688929a2476386a7"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          }
        }
      },
      "CampaignsImportVoucherItem": {
        "type": "object",
        "title": "Import Vouchers to Campaign",
        "description": "Import Vouchers to Campaign",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique custom voucher code."
          },
          "type": {
            "type": "string",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER",
              "GIFT_VOUCHER",
              "LOYALTY_CARD",
              "LUCKY_DRAW_CODE"
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the `category_id`."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "discount": {
            "description": "Defines the voucher discount type and details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Discount"
              }
            ]
          },
          "gift": {
            "description": "Defines the voucher gift details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the voucher loyalty card details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignsImportVoucherLoyaltyCard"
              }
            ]
          }
        },
        "required": [
          "code"
        ]
      },
      "2_req_examine_qualification": {
        "type": "object",
        "title": "Examine Qualification Request Body",
        "description": "Request body schema for **POST** `/campaigns/qualification`.",
        "properties": {
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "order": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_source_id"
              },
              {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              }
            ],
            "description": "Order information. This object enables you to pass purchase transaction data. Read what properties you can use in the <!-- [Order object reference](OpenAPI.json/components/schemas/OrdersUpdateResponseBody) -->[Order object](ref:get-order)."
          }
        }
      },
      "2_res_examine_qualification": {
        "type": "object",
        "title": "Examine Qualification Response Body",
        "description": "Response body schema for **POST** `/campaigns/qualification`.",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about campaigns in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of campaign objects.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "Contains array of campaign objects.",
            "items": {
              "$ref": "#/components/schemas/2_obj_campaign_object_campaigns_qualification"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total valid and active campaigns matching the qualification criteria in given context."
          },
          "id": {
            "type": "string",
            "description": "Unique qualification ID.",
            "example": "qfl_dNZ3gWfKVNa8Zw15hn30uqdU"
          },
          "created_at": {
            "type": "string",
            "format": "datetime",
            "description": "Timestamp representing the date and time when the qualification was created in ISO 8601 format.",
            "example": "2023-04-04T13:13:03.119Z"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          }
        }
      },
      "2_obj_campaign_object_campaigns_qualification": {
        "type": "object",
        "title": "Campaign Object",
        "description": "This is an object representing a campaign.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_f7fBbQxUuTN7dI7tGOo5XMDA"
          },
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "campaign_type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHERS",
              "DISCOUNT_COUPONS",
              "REFERRAL_PROGRAM"
            ],
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: the campaign is dynamic, i.e. vouchers will generate based on set criteria    \n-  `STATIC`: vouchers need to be manually published",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "voucher": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/2_obj_campaign_object_voucher_object_DISCOUNT"
              },
              {
                "$ref": "#/components/schemas/2_obj_campaign_object_voucher_object_GIFT_CARD"
              },
              {
                "$ref": "#/components/schemas/2_obj_campaign_object_voucher_object_LOYALTY_CARD"
              }
            ]
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the campaign on or off. You can disable a campaign even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-01T08:00:50.038Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-20T09:18:19.623Z",
            "description": "Timestamp representing the date and time when the voucher was updated in ISO 8601 format."
          },
          "category": {
            "type": "string",
            "description": "Unique category name."
          },
          "creation_status": {
            "type": "string",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ],
            "description": "Indicates the status of the campaign creation."
          },
          "vouchers_generation_status": {
            "type": "string",
            "description": "Indicates the status of the campaign's vouchers.",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT"
            ]
          },
          "protected": {
            "type": "boolean",
            "description": "Indicates whether the resource can be deleted."
          },
          "validation_rules_assignments": {
            "type": "object",
            "description": "Stores information about validation rules assigned to the campaign.",
            "properties": {
              "object": {
                "type": "string",
                "description": "The type of object represented is by default `list`.",
                "default": "list"
              },
              "data_ref": {
                "type": "string",
                "description": "Identifies the name of the attribute that contains the array of validation rule assignments.",
                "default": "data"
              },
              "data": {
                "type": "array",
                "description": "Array of validation rule assignment objects. Each validation rule assignment object contains details about the rule.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "asgm_N7t39epaQR2SkQcW",
                      "description": "Assigned by the Voucherify API, identifies the validation rule assignment."
                    },
                    "rule_id": {
                      "type": "string",
                      "example": "val_ssbxf1L9aKri",
                      "description": "Assigned by the Voucherify API, identifies the validation rule."
                    },
                    "related_object_id": {
                      "type": "string",
                      "example": "camp_AaP9MC1Y0GpBII84UTIuasvb",
                      "description": "ID of the object from which the rule originates."
                    },
                    "related_object_type": {
                      "type": "string",
                      "example": "campaign",
                      "description": "Which object does the rule originate from: the  `voucher` itself or inherited from its parent `campaign`."
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2022-02-14T15:12:06.817Z",
                      "description": "Timestamp representing the date and time when the validation rule was created in ISO 8601 format.",
                      "format": "date-time"
                    },
                    "object": {
                      "type": "string",
                      "default": "validation_rules_assignment",
                      "description": "The type of resource represented by the object. Default is `validation_rules_assignment`."
                    },
                    "rule": {
                      "type": "object",
                      "description": "Describes the details of the rule."
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of validation rules assigned to the campaign."
              }
            }
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to.",
            "example": "cat_0b688929a2476386a7"
          },
          "categories": {
            "$ref": "#/components/schemas/Category"
          },
          "object": {
            "type": "string",
            "default": "campaign",
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          },
          "referral_program": {
            "type": "object",
            "description": "Defines the referee reward and the way a referral is triggered. Context: `REFERRAL_PROGRAM`.",
            "properties": {
              "conversion_event_type": {
                "type": "string",
                "enum": [
                  "redemption",
                  "custom_event"
                ],
                "description": "How a referral is triggered."
              },
              "custom_event": {
                "type": "object",
                "description": "Contains details about the custom event.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "ms_fi47Dcu5T0m3v3nT5ch3ma",
                    "description": "Unique custom event ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "Custom event name."
                  }
                }
              },
              "referee_reward": {
                "type": "object",
                "description": "Defines the referee reward.",
                "properties": {
                  "related_object_parent": {
                    "type": "object",
                    "description": "Details of the resource from which the reward originates.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique ID of the reward source."
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the reward source."
                      },
                      "object": {
                        "type": "string",
                        "description": "Type of resource represented by the source of the reward."
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of reward.",
                    "enum": [
                      "LOYALTY_CARD",
                      "GIFT_VOUCHER"
                    ]
                  },
                  "amount": {
                    "type": "string",
                    "description": "The number of `points` to add to a loyalty card or `credits` to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
                  }
                }
              }
            }
          }
        }
      },
      "CampaignsListResponseBody": {
        "type": "object",
        "description": "Schema model for **GET** `/campaigns`.",
        "title": "Campaigns List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about campaigns in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of campaign objects.",
            "default": "campaigns"
          },
          "campaigns": {
            "type": "array",
            "description": "Contains array of campaign objects.",
            "items": {
              "$ref": "#/components/schemas/CampaignBase"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of campaigns."
          }
        }
      },
      "DiscountCouponsCampaignVoucher": {
        "title": "Object representing voucher property for Discount Coupons Campaign",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          }
        },
        "required": [
          "type",
          "discount"
        ]
      },
      "ReferralCampaignVoucher": {
        "title": "Object representing voucher property for Referral Program",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          }
        },
        "required": [
          "type",
          "discount",
          "is_referral_code"
        ]
      },
      "GiveawayCampaignVoucher": {
        "title": "Object representing voucher property for Giveaway Campaign",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "DISCOUNT_VOUCHER"
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          }
        },
        "required": [
          "type",
          "discount"
        ]
      },
      "GiftCampaignVoucher": {
        "type": "object",
        "description": "Schema model for a discount voucher.",
        "title": "Discount Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "GIFT_VOUCHER",
            "description": "Type of voucher.",
            "enum": [
              "GIFT_VOUCHER"
            ]
          },
          "gift": {
            "$ref": "#/components/schemas/Gift"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          }
        },
        "required": [
          "type",
          "gift"
        ]
      },
      "CampaignLoyaltyVoucher": {
        "type": "object",
        "description": "Schema model for a discount voucher.",
        "title": "Campaign Loyalty Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "description": "Type of voucher.",
            "enum": [
              "LOYALTY_CARD"
            ]
          },
          "loyalty_card": {
            "$ref": "#/components/schemas/CampaignLoyaltyCard"
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "$ref": "#/components/schemas/CodeConfig"
          }
        },
        "required": [
          "type",
          "loyalty_card"
        ]
      },
      "2_obj_campaign_object_voucher_object_DISCOUNT": {
        "type": "object",
        "description": "Schema model for a discount voucher.",
        "title": "Discount Voucher",
        "properties": {
          "type": {
            "type": "string",
            "default": "DISCOUNT_VOUCHER",
            "description": "Type of voucher."
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping"
              }
            ],
            "description": "Defines the voucher discount type and details."
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "type": "object",
            "description": "Defines code's pattern (prefix, suffix, length, charset, etc). ",
            "properties": {
              "length": {
                "type": "string",
                "description": "Number of characters in a generated code (excluding prefix and postfix)."
              },
              "charset": {
                "type": "string",
                "description": "Characters that can appear in the code.  \n\nExamples:\n\n- Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz` \n- Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Numbers: `0123456789`  \n- Custom: a custom character set"
              },
              "prefix": {
                "type": "string",
                "description": "A text appended before the code."
              },
              "postfix": {
                "type": "string",
                "description": "A text appended after the code."
              },
              "pattern": {
                "type": "string",
                "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          }
        }
      },
      "2_obj_campaign_object_voucher_object_GIFT_CARD": {
        "type": "object",
        "description": "Schema model for a gift card.",
        "title": "Gift Card",
        "properties": {
          "type": {
            "type": "string",
            "default": "GIFT_VOUCHER",
            "description": "Type of voucher."
          },
          "gift": {
            "description": "Defines the gift card details.",
            "type": "object",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "Initial gift card income to be applied to the gift card at voucher generation. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "description": "Defines how the credits are applied to the customer's order.",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ]
              }
            }
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "type": "object",
            "description": "Defines code's pattern (prefix, suffix, length, charset, etc). ",
            "properties": {
              "length": {
                "type": "string",
                "description": "Number of characters in a generated code (excluding prefix and postfix)."
              },
              "charset": {
                "type": "string",
                "description": "Characters that can appear in the code.  \n\nExamples:\n\n- Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz` \n- Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Numbers: `0123456789`  \n- Custom: a custom character set"
              },
              "prefix": {
                "type": "string",
                "description": "A text appended before the code."
              },
              "postfix": {
                "type": "string",
                "description": "A text appended after the code."
              },
              "pattern": {
                "type": "string",
                "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          }
        }
      },
      "2_obj_campaign_object_voucher_object_LOYALTY_CARD": {
        "type": "object",
        "description": "Schema model for a loyalty card.",
        "title": "Loyalty Card",
        "properties": {
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "description": "Type of voucher."
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Initial loyalty card income in points to be applied to the loyalty card at voucher generation."
              },
              "expiration_rules": {
                "type": "object",
                "description": "Defines point expiration rules.",
                "properties": {
                  "period_type": {
                    "type": "string",
                    "default": "MONTH",
                    "enum": [
                      "MONTH"
                    ],
                    "description": "The expiration period."
                  },
                  "period_value": {
                    "type": "integer",
                    "description": "How many periods should pass before the expiration occurs."
                  },
                  "rounding_type": {
                    "type": "string",
                    "enum": [
                      "END_OF_MONTH",
                      "END_OF_QUARTER",
                      "END_OF_HALF_YEAR",
                      "END_OF_YEAR",
                      "PARTICULAR_MONTH"
                    ],
                    "description": "Round up expiration till the end of the given period type."
                  }
                }
              }
            }
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "type": "object",
            "description": "Defines code's pattern (prefix, suffix, length, charset, etc). ",
            "properties": {
              "length": {
                "type": "string",
                "description": "Number of characters in a generated code (excluding prefix and postfix)."
              },
              "charset": {
                "type": "string",
                "description": "Characters that can appear in the code.  \n\nExamples:\n\n- Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz` \n- Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Numbers: `0123456789`  \n- Custom: a custom character set"
              },
              "prefix": {
                "type": "string",
                "description": "A text appended before the code."
              },
              "postfix": {
                "type": "string",
                "description": "A text appended after the code."
              },
              "pattern": {
                "type": "string",
                "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`."
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          }
        }
      },
      "2_req_campaign_object_voucher_object_LOYALTY_CARD": {
        "type": "object",
        "description": "Schema model for a loyalty card.",
        "title": "Loyalty Card",
        "properties": {
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "description": "Type of voucher."
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Initial loyalty card income in points to be applied to the loyalty card at voucher generation."
              },
              "expiration_rules": {
                "type": "object",
                "description": "Defines point expiration rules.",
                "properties": {
                  "period_type": {
                    "type": "string",
                    "default": "MONTH",
                    "enum": [
                      "MONTH"
                    ],
                    "description": "The expiration period."
                  },
                  "period_value": {
                    "type": "integer",
                    "description": "How many periods should pass before the expiration occurs."
                  },
                  "rounding_type": {
                    "type": "string",
                    "enum": [
                      "END_OF_MONTH",
                      "END_OF_QUARTER",
                      "END_OF_HALF_YEAR",
                      "END_OF_YEAR",
                      "PARTICULAR_MONTH"
                    ],
                    "description": "Round up expiration till the end of the given period type."
                  }
                }
              }
            }
          },
          "redemption": {
            "type": "object",
            "description": "Defines the redemption limits on vouchers.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "type": "object",
            "description": "Defines code's pattern (prefix, suffix, length, charset, etc). ",
            "properties": {
              "length": {
                "type": "string",
                "description": "Number of characters in a generated code (excluding prefix and postfix)."
              },
              "charset": {
                "type": "string",
                "description": "Characters that can appear in the code.  \n\nExamples:\n\n- Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz` \n- Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Numbers: `0123456789`  \n- Custom: a custom character set"
              },
              "prefix": {
                "type": "string",
                "description": "A text appended before the code."
              },
              "postfix": {
                "type": "string",
                "description": "A text appended after the code."
              },
              "pattern": {
                "type": "string",
                "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`."
              }
            }
          }
        }
      },
      "SimplePromotionTier": {
        "title": "Simple Promotion Tier",
        "type": "object",
        "description": "This is an object representing a simple promotion tier. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "properties": {
          "id": {
            "type": "string",
            "example": "promo_63fYCt81Aw0h7lzyRkrGZh9p",
            "description": "Unique promotion tier ID."
          },
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "campaign": {
            "type": "object",
            "description": "Contains details about promotion tier's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID."
              }
            }
          }
        }
      },
      "PromotionTier": {
        "type": "object",
        "description": "This is an object representing a promotion tier. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "title": "Promotion Tier",
        "properties": {
          "id": {
            "type": "string",
            "example": "promo_63fYCt81Aw0h7lzyRkrGZh9p",
            "description": "Unique promotion tier ID."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-15T11:34:01.333Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the promotion tier was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "example": "2022-02-09T09:20:05.603Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the promotion tier was updated in ISO 8601 format."
          },
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "$ref": "#/components/schemas/Discount"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "promotion_id": {
            "type": "string",
            "description": "Promotion unique ID."
          },
          "campaign": {
            "type": "object",
            "description": "Contains details about promotion tier's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID."
              },
              "start_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
                "format": "date-time",
                "example": "2022-09-22T00:00:00.000Z"
              },
              "expiration_date": {
                "type": "string",
                "format": "date-time",
                "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
                "example": "2022-09-30T00:00:00.000Z"
              },
              "validity_timeframe": {
                "type": "object",
                "description": "Recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.",
                "properties": {
                  "interval": {
                    "type": "string",
                    "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
                  },
                  "duration": {
                    "type": "string",
                    "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
                  }
                }
              },
              "validity_day_of_week": {
                "type": "array",
                "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
                "items": {
                  "type": "integer"
                }
              },
              "active": {
                "type": "boolean",
                "description": "A flag indicating whether the campaign is active or not active. A campaign can be disabled even though it's within the active period defined by the `start_date` and `expiration_date` using the <!-- [Disable Campaign](OpenAPI.json/paths/~1campaigns~1{campaignId}~1disable) -->[Disable Campaign](ref:disable-campaign) endpoint.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
              },
              "category_id": {
                "type": "string",
                "example": "cat_0b688929a2476386a6",
                "description": "Unique category ID that this campaign belongs to."
              },
              "object": {
                "type": "string",
                "description": "The type of object represented by the campaign object. This object stores information about the campaign.",
                "default": "campaign"
              }
            }
          },
          "campaign_id": {
            "type": "string",
            "description": "Promotion tier's parent campaign's unique ID."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* promotion tier\n- `false` indicates an *inactive* promotion tier"
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "summary": {
            "type": "object",
            "description": "Contains statistics about promotion tier redemptions and orders.",
            "properties": {
              "redemptions": {
                "type": "object",
                "description": "Contains statistics about promotion tier redemptions.",
                "properties": {
                  "total_redeemed": {
                    "type": "integer",
                    "description": "Number of times the promotion tier was redeemed."
                  }
                }
              },
              "orders": {
                "type": "object",
                "description": "Contains statistics about orders related to the promotion tier.",
                "properties": {
                  "total_amount": {
                    "type": "integer",
                    "description": "Sum of order totals."
                  },
                  "total_discount_amount": {
                    "type": "integer",
                    "description": "Sum of total discount applied using the promotion tier."
                  }
                }
              }
            }
          },
          "object": {
            "type": "string",
            "default": "promotion_tier",
            "description": "The type of object represented by JSON. This object stores information about the promotion tier."
          },
          "validation_rule_assignments": {
            "$ref": "#/components/schemas/ValidationRuleAssignmentsList"
          },
          "category_id": {
            "type": "string",
            "description": "Promotion tier category ID.",
            "example": "cat_0c9da30e7116ba6bba"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "PromotionTierCreateParams": {
        "type": "object",
        "description": "This is an object representing a promotion tier create params. Promotion tiers are always assigned to a campaign and cannot be used standalone.",
        "title": "Promotion Tier Create Params",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "$ref": "#/components/schemas/Discount"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the promotion tier.",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* promotion tier\n- `false` indicates an *inactive* promotion tier"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "category": {
            "type": "string",
            "description": "Assign category to the promotion tier."
          },
          "category_id": {
            "type": "string",
            "description": "Instead of using the category name, you can alternatively assign a new category to a promotion tier using a unique category ID, i.e. `cat_0c9da30e7116ba6bba`.",
            "example": "cat_0c9da30e7116ba6bba"
          }
        },
        "required": [
          "name"
        ]
      },
      "3_req_add_promotion_tier_to_campaign": {
        "type": "object",
        "description": "Request body schema for creating a promotion tier within a campaign in **POST** `/promotions/{campaignId}/tiers`.",
        "title": "Add Promotion Tier to Campaign Request Body",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website.\t"
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping"
                  }
                ],
                "description": "The type of discount that will be applied to a customer's order."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* promotion tier\n- `false` indicates an *inactive* promotion tier"
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the ID of the validation rule associated with the promotion tier.",
            "items": {
              "type": "string"
            }
          },
          "category": {
            "type": "string",
            "description": "Assign category to the promotion tier."
          },
          "category_id": {
            "type": "string",
            "description": "Instead of using the category name, you can alternatively assign a new category to a promotion tier using a unique category ID, i.e. `cat_0c9da30e7116ba6bba`.",
            "example": "cat_0c9da30e7116ba6bba"
          }
        }
      },
      "3_req_update_promotion_tier": {
        "type": "object",
        "description": "Request body schema for updating a promotion tier within a campaign in **POST** `/promotions/tiers/{promotionTierId}`.",
        "title": "Update Promotion Tier Request Body",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the promotion tier."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website.\t"
          },
          "action": {
            "type": "object",
            "description": "Contains details about the discount applied by the promotion tier.",
            "properties": {
              "discount": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping"
                  }
                ],
                "description": "The type of discount that will be applied to a customer's order."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ",
            "format": "date-time",
            "example": "2022-09-23T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ",
            "format": "date-time",
            "example": "2022-09-26T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the promotion tier is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a promotion tier with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the promotion tier will be active in ISO 8601 format. For example, a promotion tier with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the promotion tier is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy. If you update a hierarchy of a promotion tier, then the remaining promotion tier hierarchies will be recalculated."
          },
          "category": {
            "type": "string",
            "description": "Assign a new or update the promotion tier's category."
          },
          "category_id": {
            "type": "string",
            "description": "Instead of using the category name, you can alternatively assign a new category to a promotion tier using a unique category ID, i.e. `cat_0c9da30e7116ba6bba`.",
            "example": "cat_0c9da30e7116ba6bba"
          }
        }
      },
      "3_res_list_promotion_tiers": {
        "type": "object",
        "description": "Promotion Tiers",
        "title": "Promotion Tiers",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about promotion tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "tiers",
            "description": "Identifies the name of the attribute that contains the array of promotion tier objects."
          },
          "tiers": {
            "type": "array",
            "description": "Contains array of promotion tier objects.",
            "items": {
              "$ref": "#/components/schemas/PromotionTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of promotion tiers."
          }
        }
      },
      "PromotionTiersList": {
        "type": "object",
        "description": "Promotion Tiers",
        "title": "Promotion Tiers",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about promotion tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "tiers",
            "description": "Identifies the name of the attribute that contains the array of promotion tier objects."
          },
          "tiers": {
            "type": "array",
            "description": "Contains array of promotion tier objects.",
            "items": {
              "$ref": "#/components/schemas/PromotionTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of promotion tiers."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the `has_more` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        }
      },
      "4_obj_reward_object": {
        "title": "Reward Object",
        "type": "object",
        "description": "This is an object representing a reward.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rew_nIy4gHpQHle2c3pNMwuj7G6j",
            "description": "Unique reward ID, assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          },
          "parameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/4_obj_reward_object_parameters_CAMPAIGN"
              },
              {
                "$ref": "#/components/schemas/4_obj_reward_object_parameters_COIN"
              },
              {
                "$ref": "#/components/schemas/4_obj_reward_object_parameters_MATERIAL"
              }
            ],
            "description": "Defines how the reward is generated."
          },
          "stock": {
            "type": "integer",
            "description": "Configurable for **material rewards**. The number of units of the product that you want to share as reward."
          },
          "redeemed": {
            "type": "integer",
            "description": "Defines the number of already invoked (successful) reward redemptions.\t"
          },
          "attributes": {
            "type": "object",
            "description": "These properties are configurable for **material rewards**.",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "The HTTPS URL pointing to the .png or .jpg file."
              },
              "description": {
                "type": "string",
                "description": "An arbitrary string that you can attach to a material reward."
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          },
          "object": {
            "type": "string",
            "default": "reward",
            "description": "The type of object represented by the JSON. This object stores information about the reward."
          }
        }
      },
      "4_obj_reward_object_parameters_CAMPAIGN": {
        "title": "Digital",
        "type": "object",
        "description": "These are parameters representing a digital (CAMPAIGN) reward. These can be in the form of discount coupons, gift card credits, or loyalty point credits.",
        "properties": {
          "campaign": {
            "description": "Objects stores information about the campaign related to the reward.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/4_obj_reward_object_parameters_CAMPAIGN_DISCOUNT_COUPONS"
              },
              {
                "$ref": "#/components/schemas/4_obj_reward_object_parameters_CAMPAIGN_GIFT_VOUCHERS"
              },
              {
                "$ref": "#/components/schemas/4_obj_reward_object_parameters_CAMPAIGN_LOYALTY_PROGRAM"
              }
            ]
          }
        }
      },
      "4_obj_reward_object_parameters_CAMPAIGN_DISCOUNT_COUPONS": {
        "title": "Discount Coupons",
        "type": "object",
        "description": "These are parameters representing a discount coupon, which is a subset of a Digital (CAMPAIGN) reward.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_13BbZ0kQsNinhqsX3wUts2UP"
          },
          "type": {
            "type": "string",
            "description": "Campaign type.",
            "default": "DISCOUNT_COUPONS"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "4_obj_reward_object_parameters_CAMPAIGN_GIFT_VOUCHERS": {
        "title": "Gift Vouchers",
        "type": "object",
        "description": "These are parameters representing a gift voucher, which is a subset of a Digital (CAMPAIGN) reward.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_13BbZ0kQsNinhqsX3wUts2UP"
          },
          "balance": {
            "type": "integer",
            "description": "The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "type": {
            "type": "string",
            "description": "Campaign type.",
            "default": "GIFT_VOUCHERS"
          }
        },
        "required": [
          "id",
          "balance",
          "type"
        ]
      },
      "4_obj_reward_object_parameters_CAMPAIGN_LOYALTY_PROGRAM": {
        "title": "Points on loyalty card",
        "type": "object",
        "description": "These are parameters representing points on a loyalty card, which is a subset of a Digital (CAMPAIGN) reward.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_13BbZ0kQsNinhqsX3wUts2UP"
          },
          "balance": {
            "type": "integer",
            "description": "The incremental points to be added to the current balance on the loyalty card."
          },
          "type": {
            "type": "string",
            "description": "Campaign type.",
            "default": "LOYALTY_PROGRAM"
          }
        },
        "required": [
          "id",
          "balance",
          "type"
        ]
      },
      "4_obj_reward_object_parameters_COIN": {
        "title": "Pay with Points",
        "type": "object",
        "description": "These are parameters representing a Pay with Points (COIN) reward. ",
        "properties": {
          "coin": {
            "type": "object",
            "description": "Defines the ratio by mapping the number of loyalty points in `points_ratio` to a predefined cash amount in `exchange_ratio`.",
            "properties": {
              "exchange_ratio": {
                "type": "integer",
                "description": "The cash equivalent of the points defined in the `points_ratio` property."
              },
              "points_ratio": {
                "type": "integer",
                "description": "The number of loyalty points that will map to the predefined cash amount defined by the `exchange_ratio` property."
              }
            }
          }
        }
      },
      "4_obj_reward_object_parameters_MATERIAL": {
        "title": "Material",
        "type": "object",
        "description": "These are parameters representing products as a (MATERIAL) reward.",
        "properties": {
          "product": {
            "type": "object",
            "description": "Contains information about the product given as a reward.",
            "properties": {
              "id": {
                "type": "string",
                "example": "prod_0b7d7dfb05cbe5c616",
                "description": "Unique product ID, assigned by Voucherify. "
              },
              "sku_id": {
                "type": "string",
                "nullable": true,
                "description": "Unique SKU ID, assigned by Voucherify, of the SKU given as a reward.",
                "example": "sku_0b7d7dfb090be5c619"
              }
            }
          }
        }
      },
      "4_req_create_reward": {
        "title": "Create Reward Request Body",
        "description": "Request body schema for **POST** `/rewards`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/4_req_create_reward_CAMPAIGN"
          },
          {
            "$ref": "#/components/schemas/4_req_create_reward_MATERIAL"
          },
          {
            "$ref": "#/components/schemas/4_req_create_reward_COIN"
          }
        ]
      },
      "4_req_create_reward_CAMPAIGN": {
        "title": "Digital Reward",
        "type": "object",
        "description": "Request body schema for creating a digital reward using **POST** `/rewards`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "type": {
            "type": "string",
            "default": "CAMPAIGN",
            "enum": [
              "CAMPAIGN"
            ],
            "description": "Reward type."
          },
          "parameters": {
            "$ref": "#/components/schemas/4_req_reward_parameters_CAMPAIGN"
          },
          "metadata": {
            "type": "string",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          }
        }
      },
      "4_req_create_reward_COIN": {
        "title": "Pay with Points Reward",
        "type": "object",
        "description": "Request body schema for creating a pay with points reward using **POST** `/rewards`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "type": {
            "type": "string",
            "default": "COIN",
            "enum": [
              "COIN"
            ],
            "description": "Reward type."
          },
          "parameters": {
            "$ref": "#/components/schemas/4_req_reward_parameters_COIN"
          },
          "metadata": {
            "type": "string",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          }
        }
      },
      "4_req_create_reward_MATERIAL": {
        "title": "Material Reward",
        "type": "object",
        "description": "Request body schema to create a material reward using\n **POST** `/rewards`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "type": {
            "type": "string",
            "default": "MATERIAL",
            "enum": [
              "MATERIAL"
            ],
            "description": "Reward type."
          },
          "parameters": {
            "$ref": "#/components/schemas/4_req_reward_parameters_MATERIAL"
          },
          "stock": {
            "type": "integer",
            "description": "The number of units of the product that you want to share as a reward."
          },
          "attributes": {
            "type": "object",
            "description": "These properties are configurable for material rewards.",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "The HTTPS URL pointing to the .png or .jpg file."
              },
              "description": {
                "type": "string",
                "description": "An arbitrary string that you can attach to a material reward."
              }
            }
          },
          "metadata": {
            "type": "string",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          }
        }
      },
      "4_req_update_reward": {
        "title": "Update Reward Request Body",
        "description": "Request body schema for **PUT** `/rewards/{rewardId}`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/4_req_update_reward_CAMPAIGN"
          },
          {
            "$ref": "#/components/schemas/4_req_update_reward_COIN"
          },
          {
            "$ref": "#/components/schemas/4_req_update_reward_MATERIAL"
          }
        ]
      },
      "4_req_update_reward_CAMPAIGN": {
        "title": "Digital Reward",
        "type": "object",
        "description": "Request body schema for updating a digital reward using **PUT** `/rewards/{rewardId}`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "parameters": {
            "$ref": "#/components/schemas/4_req_reward_parameters_CAMPAIGN"
          },
          "metadata": {
            "type": "string",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          }
        }
      },
      "4_req_update_reward_COIN": {
        "title": "Pay with Points Reward",
        "type": "object",
        "description": "Request body schema for updating a pay with points reward using **PUT** `/rewards/{rewardId}`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "parameters": {
            "$ref": "#/components/schemas/4_req_reward_parameters_COIN"
          },
          "metadata": {
            "type": "string",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          }
        }
      },
      "4_req_update_reward_MATERIAL": {
        "title": "Material Reward",
        "type": "object",
        "description": "Request body schema for updating a material reward using **PUT** `/rewards/{rewardId}`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "parameters": {
            "$ref": "#/components/schemas/4_req_reward_parameters_MATERIAL"
          },
          "stock": {
            "type": "integer",
            "description": "The number of units of the product that you want to share as a reward."
          },
          "attributes": {
            "type": "object",
            "description": "These properties are configurable for material rewards.",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "The HTTPS URL pointing to the .png or .jpg file."
              },
              "description": {
                "type": "string",
                "description": "An arbitrary string that you can attach to a material reward."
              }
            }
          },
          "metadata": {
            "type": "string",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          }
        }
      },
      "4_req_reward_parameters_CAMPAIGN_LOYALTY_PROGRAM": {
        "title": "Points on loyalty card",
        "type": "object",
        "description": "Configure a reward that adds points to a loyalty card. This type of reward is a subset of a Digital (CAMPAIGN) reward.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assign the reward to the campaign that contains the loyalty cards that will be replenished by the reward. Provide the unique campaign ID, assigned by Voucherify.",
            "example": "camp_13BbZ0kQsNinhqsX3wUts2UP"
          },
          "balance": {
            "type": "integer",
            "description": "The incremental points to be added to the current balance on the loyalty card."
          }
        }
      },
      "4_req_reward_parameters_CAMPAIGN_GIFT_VOUCHERS": {
        "title": "Gift Vouchers",
        "type": "object",
        "description": "Configure a reward that adds cash to a gift card. This type of reward is a subset of a Digital (CAMPAIGN) reward.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assign the reward to the campaign that contains the gift cards that will be replenished by the reward. Provide the unique campaign ID, assigned by Voucherify.",
            "example": "camp_13BbZ0kQsNinhqsX3wUts2UP"
          },
          "balance": {
            "type": "integer",
            "description": "The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          }
        }
      },
      "4_req_reward_parameters_CAMPAIGN_DISCOUNT_COUPONS": {
        "title": "Discount Coupons",
        "type": "object",
        "description": "Configure a reward that provides a discount coupon. This type of reward is a subset of a Digital (CAMPAIGN) reward.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assign the reward to the campaign that contains the vouchers that will be the source of the reward. Provide the unique campaign ID, assigned by Voucherify.",
            "example": "camp_13BbZ0kQsNinhqsX3wUts2UP"
          }
        }
      },
      "4_req_reward_parameters_CAMPAIGN": {
        "title": "Digital Reward",
        "type": "object",
        "description": "Configure a digital (CAMPAIGN) reward. These can be in the form of discount coupons, gift card credits, or loyalty point credits.",
        "properties": {
          "campaign": {
            "description": "Objects stores information about the campaign related to the reward.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/4_req_reward_parameters_CAMPAIGN_LOYALTY_PROGRAM"
              },
              {
                "$ref": "#/components/schemas/4_req_reward_parameters_CAMPAIGN_GIFT_VOUCHERS"
              },
              {
                "$ref": "#/components/schemas/4_req_reward_parameters_CAMPAIGN_DISCOUNT_COUPONS"
              }
            ]
          }
        }
      },
      "4_req_reward_parameters_MATERIAL": {
        "title": "Material Reward",
        "type": "object",
        "description": "Configure parameters representing products as a (MATERIAL) reward.",
        "properties": {
          "product": {
            "type": "object",
            "description": "Define the product given as a reward.",
            "properties": {
              "id": {
                "type": "string",
                "example": "prod_0b7d7dfb05cbe5c616",
                "description": "Unique product ID, assigned by Voucherify, given as a reward."
              },
              "sku_id": {
                "type": "string",
                "nullable": true,
                "description": "Unique SKU ID, assigned by Voucherify, of the SKU given as a reward.",
                "example": "sku_0b7d7dfb090be5c619"
              }
            }
          }
        }
      },
      "4_req_reward_parameters_COIN": {
        "title": "Pay with Points Reward",
        "type": "object",
        "description": "Configure parameters representing a Pay with Points (COIN) reward. ",
        "properties": {
          "coin": {
            "type": "object",
            "description": "Define the ratio by mapping the number of loyalty points in `points_ratio` to a predefined cash amount in `exchange_ratio`.",
            "properties": {
              "exchange_ratio": {
                "type": "string",
                "description": "The cash equivalent of the points defined in the `points_ratio` property."
              },
              "points_ratio": {
                "type": "string",
                "description": "The number of loyalty points that will map to the predefined cash amount defined by the `exchange_ratio` property."
              }
            }
          }
        }
      },
      "4_res_list_rewards": {
        "type": "object",
        "description": "Response body schema for **GET** `/rewards`.",
        "title": "List Rewards Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about rewards in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of rewards.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "Contains array of reward objects.",
            "items": {
              "$ref": "#/components/schemas/4_obj_reward_object"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of rewards."
          }
        }
      },
      "4_obj_reward_assignment_object": {
        "title": "Reward Assignment Object",
        "type": "object",
        "description": "This is an object representing a reward assignment.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rewa_PbIRoMXpwe5QhobW4JKu0VjH",
            "description": "Unique reward assignment ID, assigned by Voucherify."
          },
          "reward_id": {
            "type": "string",
            "description": "Associated reward ID.",
            "example": "rew_C7wS9eHFDN4CIbXI5PpLSkGY"
          },
          "related_object_id": {
            "type": "string",
            "description": "Related object ID to which the reward was assigned.",
            "example": "camp_wciTvaOfYmAa3EmIIW3QpXXZ"
          },
          "related_object_type": {
            "type": "string",
            "description": "Related object type to which the reward was assigned.",
            "example": "campaign"
          },
          "parameters": {
            "description": "Defines the cost of the reward.",
            "type": "object",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Defines the equivalent points value of the reward.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "The number of points required to redeem the reward."
                  }
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward assignment was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward assignment was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "reward_assignment",
            "description": "The type of object represented by the JSON. This object stores information about the reward assignment."
          }
        }
      },
      "RewardAssignmentBase": {
        "title": "Reward Assignment Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "rewa_PbIRoMXpwe5QhobW4JKu0VjH",
            "description": "Unique reward assignment ID, assigned by Voucherify."
          },
          "reward_id": {
            "type": "string",
            "description": "Associated reward ID.",
            "example": "rew_C7wS9eHFDN4CIbXI5PpLSkGY"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward assignment was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward assignment was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the reward assignment.",
            "default": "reward_assignment",
            "enum": [
              "reward_assignment"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Related object ID to which the reward was assigned.",
            "example": "camp_wciTvaOfYmAa3EmIIW3QpXXZ"
          },
          "related_object_type": {
            "type": "string",
            "description": "Related object type to which the reward was assigned.",
            "default": "campaign",
            "enum": [
              "campaign"
            ]
          }
        },
        "required": [
          "related_object_id",
          "related_object_type",
          "id",
          "reward_id",
          "created_at",
          "updated_at",
          "object"
        ]
      },
      "RewardAssignment": {
        "title": "Reward Assignment",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignmentBase"
          },
          {
            "$ref": "#/components/schemas/RewardAssignmentParameters"
          }
        ],
        "type": "object"
      },
      "RewardAssignmentParameters": {
        "title": "Digital or Material Reward - Parameters",
        "type": "object",
        "properties": {
          "parameters": {
            "description": "Defines the cost of the reward.",
            "type": "object",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Defines the equivalent points value of the reward.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "The number of points required to redeem the reward."
                  }
                }
              }
            },
            "required": [
              "loyalty"
            ]
          }
        }
      },
      "RewardAssignmentsCreateDigitalOrMaterialRewardRequestBody": {
        "description": "Request body schema for **POST** `/rewards/{rewardID}/assignments`.",
        "title": "Digital Or Material Reward",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "The campaign ID of the campaign to which the reward is to be assigned."
          },
          "parameters": {
            "type": "object",
            "description": "Defines the cost of the reward.",
            "required": [
              "loyalty"
            ],
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Defines the equivalent points value of the reward.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "Number of points that will be subtracted from the loyalty card points balance if the reward is redeemed."
                  }
                }
              }
            }
          }
        },
        "required": [
          "campaign",
          "parameters"
        ]
      },
      "RewardAssignmentsCreateCoinRewardRequestBody": {
        "description": "Request body schema for **POST** `/rewards/{rewardID}/assignments`.",
        "title": "Pay with Points Reward",
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "The campaign ID of the campaign to which the reward is to be assigned."
          },
          "validation_rules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "campaign"
        ]
      },
      "CreatePublicationBase": {
        "title": "Create Publication Base",
        "type": "object",
        "description": "Create publication",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service.\nIf `source_id` is provided only 1 voucher can be published per request."
          },
          "customer": {
            "description": "Contains information about the customer to whom the publication was directed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          }
        },
        "required": [
          "customer"
        ]
      },
      "CreatePublicationWithSpecificVoucher": {
        "title": "Create Publication With Specific Voucher",
        "type": "object",
        "description": "Create publication with specific voucher.",
        "allOf": [
          {
            "title": "Voucher code",
            "type": "object",
            "properties": {
              "voucher": {
                "description": "Code of voucher being published.",
                "type": "string"
              }
            },
            "required": [
              "voucher"
            ]
          },
          {
            "$ref": "#/components/schemas/CreatePublicationBase"
          }
        ]
      },
      "CreatePublicationCampaign": {
        "title": "Create Publication Campaign",
        "type": "object",
        "description": "Create publication with campaign.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of voucher's parent campaign or unique campaign ID that was assigned by Voucherify.",
            "example": "camp_dphuwqH7BOVkgh4JmpDtS32l"
          },
          "count": {
            "type": "integer",
            "description": "Number of vouchers to be published to customer.",
            "minimum": 1,
            "maximum": 20
          }
        },
        "required": [
          "name"
        ]
      },
      "CreatePublicationWithCampaign": {
        "title": "Create Publication With Campaign",
        "type": "object",
        "description": "Create publication with campaign.",
        "allOf": [
          {
            "title": "Campaign",
            "type": "object",
            "properties": {
              "campaign": {
                "$ref": "#/components/schemas/CreatePublicationCampaign"
              }
            },
            "required": [
              "campaign"
            ]
          },
          {
            "$ref": "#/components/schemas/CreatePublicationBase"
          }
        ]
      },
      "PublicationsCreateRequestBody": {
        "title": "Publications Create Request Body",
        "description": "Request body schema for **POST** `/publications`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreatePublicationWithSpecificVoucher"
          },
          {
            "$ref": "#/components/schemas/CreatePublicationWithCampaign"
          }
        ]
      },
      "PublicationsCreateVoucherResponseBody": {
        "title": "Publications Create Voucher Response Body",
        "type": "object",
        "description": "Response body schema for **POST** `/publication` and **GET** `/publications/create`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateBaseResponseBody"
          },
          {
            "type": "object",
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/Voucher"
              }
            },
            "required": [
              "voucher"
            ]
          }
        ]
      },
      "ListPublicationsItemBase": {
        "title": "List Publications Item Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pub_BbjAXnmm8e0SIm3zG8qvvFCP0KuLywtp",
            "description": "Unique publication ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "default": "publication",
            "enum": [
              "publication"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the `publication`."
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-23T09:57:00.434Z",
            "description": "Timestamp representing the date and time when the publication was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of the customer receiving the publication."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's `source_id`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          },
          "channel": {
            "type": "string",
            "description": "How the publication was originated. It can be your own custom channel or an example value provided here."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. "
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "vouchers_id": {
            "type": "array",
            "description": "Contains the unique internal voucher ID that was assigned by Voucherify.",
            "items": {
              "type": "string",
              "example": "v_Bw3qWZWv47yb1Onra8F2LlFI1enLakfA"
            }
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "customer_id",
          "metadata",
          "channel",
          "source_id",
          "customer",
          "vouchers_id"
        ]
      },
      "ListPublicationsItemValidSingleVoucher": {
        "title": "Valid Single Voucher",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "default": "SUCCESS",
                "enum": [
                  "SUCCESS"
                ],
                "description": "Status of the publication attempt."
              },
              "voucher": {
                "$ref": "#/components/schemas/ListPublicationsItemVoucher"
              }
            },
            "required": [
              "result",
              "voucher"
            ]
          }
        ]
      },
      "ListPublicationsItemVoucher": {
        "type": "object",
        "title": "List Publications Item Voucher",
        "properties": {
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "campaign": {
            "description": "Campaign name",
            "type": "string"
          },
          "gift": {
            "description": "Gift object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object"
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          }
        },
        "required": [
          "code",
          "object",
          "campaign"
        ]
      },
      "ListPublicationsItemValidMultipleVouchers": {
        "title": "Valid Multiple Vouchers",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "default": "SUCCESS",
                "enum": [
                  "SUCCESS"
                ],
                "description": "Status of the publication attempt."
              },
              "vouchers": {
                "type": "array",
                "description": "Contains the unique voucher codes that was assigned by Voucherify.",
                "items": {
                  "type": "string",
                  "example": "Q1K4XT5S"
                }
              }
            },
            "required": [
              "result",
              "vouchers"
            ]
          }
        ]
      },
      "ListPublicationsItemInvalid": {
        "title": "Invalid",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ListPublicationsItemBase"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "default": "FAILURE",
                "enum": [
                  "FAILURE"
                ],
                "description": "Status of the publication attempt."
              },
              "failure_code": {
                "type": "string",
                "description": "Generic reason as to why the create publication operation failed."
              },
              "failure_message": {
                "type": "string",
                "description": "This parameter will provide more expanded reason as to why the create publication operation failed."
              }
            },
            "required": [
              "result",
              "vouchers"
            ]
          }
        ]
      },
      "PublicationsCreateBaseResponseBody": {
        "title": "Publications Create Base Response Body",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pub_BbjAXnmm8e0SIm3zG8qvvFCP0KuLywtp",
            "description": "Unique publication ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "default": "publication",
            "enum": [
              "publication"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the `publication`."
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-23T09:57:00.434Z",
            "description": "Timestamp representing the date and time when the publication was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of the customer receiving the publication."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's `source_id`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          },
          "channel": {
            "type": "string",
            "description": "How the publication was originated. It can be your own custom channel or an example value provided here.",
            "default": "API",
            "enum": [
              "API"
            ]
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. "
          },
          "result": {
            "type": "string",
            "default": "SUCCESS",
            "enum": [
              "SUCCESS"
            ],
            "description": "Status of the publication attempt."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "vouchers_id": {
            "type": "array",
            "description": "Contains the unique internal voucher ID that was assigned by Voucherify.",
            "items": {
              "type": "string",
              "example": "v_Bw3qWZWv47yb1Onra8F2LlFI1enLakfA"
            }
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "customer_id",
          "metadata",
          "channel",
          "source_id",
          "result",
          "customer",
          "vouchers_id"
        ]
      },
      "PublicationsCreateVouchersResponseBody": {
        "title": "Publications Create Vouchers Response Body",
        "description": "Response body schema for **POST** `/publication` and **GET** `/publications/create`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateBaseResponseBody"
          },
          {
            "type": "object",
            "properties": {
              "vouchers": {
                "type": "array",
                "description": "Contains the unique voucher codes that was assigned by Voucherify.",
                "items": {
                  "type": "string",
                  "example": "Q1K4XT5S"
                }
              }
            },
            "required": [
              "vouchers"
            ]
          }
        ]
      },
      "PublicationsCreateResponseBody": {
        "title": "Publications Create Response Body",
        "type": "object",
        "description": "Response body schema for **POST** `/publication` and **GET** `/publications/create`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PublicationsCreateVoucherResponseBody"
          },
          {
            "$ref": "#/components/schemas/PublicationsCreateVouchersResponseBody"
          }
        ]
      },
      "PublicationsListResponseBody": {
        "type": "object",
        "description": "Response body schema for listing publications using **GET** `/publications`.",
        "title": "Publications List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about publications in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "publications",
            "description": "Identifies the name of the attribute that contains the array of publications."
          },
          "publications": {
            "type": "array",
            "description": "Contains array of publication objects, voucher object will be simplified.",
            "items": {
              "title": "Publications List Response Body Publications Item",
              "description": "Response schema model for publishing vouchers to a specific customer.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ListPublicationsItemValidSingleVoucher"
                },
                {
                  "$ref": "#/components/schemas/ListPublicationsItemValidMultipleVouchers"
                },
                {
                  "$ref": "#/components/schemas/ListPublicationsItemInvalid"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of publications."
          }
        },
        "required": [
          "object",
          "data_ref",
          "publications",
          "total"
        ]
      },
      "6_req_validate_voucher_customer_id": {
        "title": "Customer ID",
        "description": "You can pass the unique customer ID that was assigned by Voucherify.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of an existing customer that will be linked to redemption in this request.",
            "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
          }
        }
      },
      "6_req_rollback_redemption_customer_id": {
        "title": "Customer ID",
        "description": "You can pass the unique customer ID that was assigned by Voucherify.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of an existing customer that will be linked to redemption rollback in this request.",
            "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
          }
        }
      },
      "6_req_validate_voucher_customer_source_id": {
        "title": "Customer Source ID",
        "description": "You can send the source ID that you used to create the customer in Voucherify.",
        "type": "object",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
          }
        }
      },
      "6_req_rollback_redemption_customer_source_id": {
        "title": "Customer Source ID",
        "description": "You can send the source ID that you used to create the customer in Voucherify.",
        "type": "object",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "A unique identifier of a customer that redeemed a resource. It can be a customer ID or email from a CRM system, database or 3rd-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
          }
        }
      },
      "6_req_validate_voucher_order_id": {
        "title": "Order ID",
        "description": "You can pass the unique order ID that was assigned by Voucherify.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request."
          }
        }
      },
      "6_req_validate_voucher_order_source_id": {
        "title": "Order Source ID",
        "description": "You can send the source ID that you used to create the order in Voucherify.",
        "type": "object",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
          }
        }
      },
      "6_req_rollback_redemption_order_id": {
        "title": "Order ID",
        "description": "You can pass the unique order ID that was assigned by Voucherify.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID assigned by Voucherify of an existing order that will be linked to the redemption rollback of this request."
          },
          "status": {
            "type": "string",
            "description": "After a redemption rollback, Voucherify will default the order status to `CANCELED`. You can set the order status to one of the other options: `CREATED`, `PAID`, `FULFILLED`.",
            "enum": [
              "CREATED",
              "PAID",
              "FULFILLED"
            ]
          }
        }
      },
      "6_req_rollback_redemption_order_source_id": {
        "title": "Order Source ID",
        "description": "You can send the source ID that you used to create the order in Voucherify.",
        "type": "object",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "Unique source ID of an existing order that will be linked to the redemption rollback of this request."
          },
          "status": {
            "type": "string",
            "description": "After a redemption rollback, Voucherify will default the order status to `CANCELED`. You can set the order status to one of the other options: `CREATED`, `PAID`, `FULFILLED`.",
            "enum": [
              "CREATED",
              "PAID",
              "FULFILLED"
            ]
          }
        }
      },
      "6_req_session_lock_discount_code": {
        "title": "Discount Code Session Lock",
        "type": "object",
        "description": "Schema model for `session` lock object. The session object is **required** to establish a session between multiple parallel validation and redemption requests. If you only send the `type` parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a <!-- [validation session](..docs/guides/campaign_recipes/Locking-Validation-Session.md) -->[validation session](doc:locking-validation-session).",
        "properties": {
          "type": {
            "type": "string",
            "description": "This parameter is **required** to establish a new session. The session locks the redemption **quantity** by 1.",
            "default": "LOCK",
            "enum": [
              "LOCK"
            ]
          },
          "key": {
            "type": "string",
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.",
            "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
          },
          "ttl_unit": {
            "type": "string",
            "description": "Defines the type of unit in which the session time is counted.",
            "enum": [
              "HOURS",
              "DAYS",
              "MINUTES",
              "SECONDS",
              "MILLISECONDS",
              "MICROSECONDS",
              "NANOSECONDS"
            ]
          },
          "ttl": {
            "type": "integer",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the `session.ttl_unit` parameter."
          }
        }
      },
      "6_req_session_lock_gift_card": {
        "title": "Gift Card Session Lock",
        "type": "object",
        "description": "Schema model for `session` lock object. The session object is **required** to establish a session between multiple parallel validation and redemption requests. If you only send the `type` parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a <!-- [validation session](..docs/guides/campaign_recipes/Locking-Validation-Session.md) -->[validation session](doc:locking-validation-session).",
        "properties": {
          "type": {
            "type": "string",
            "description": "This parameter is **required** to establish a new session. The session locks the redemption **quantity** by 1 and the redemption **gift credits** specified within the request.",
            "default": "LOCK",
            "enum": [
              "LOCK"
            ]
          },
          "key": {
            "type": "string",
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.",
            "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
          },
          "ttl_unit": {
            "type": "string",
            "description": "Defines the type of unit in which the session time is counted.",
            "enum": [
              "HOURS",
              "DAYS",
              "MINUTES",
              "SECONDS",
              "MILLISECONDS",
              "MICROSECONDS",
              "NANOSECONDS"
            ]
          },
          "ttl": {
            "type": "integer",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the `session.ttl_unit` parameter."
          }
        }
      },
      "6_req_session_lock_loyalty_card": {
        "title": "Loyalty Card Session Lock",
        "type": "object",
        "description": "Schema model for `session` lock object. The session object is **required** to establish a session between multiple parallel validation and redemption requests. If you only send the `type` parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a <!-- [validation session](..docs/guides/campaign_recipes/Locking-Validation-Session.md) -->[validation session](doc:locking-validation-session).",
        "properties": {
          "type": {
            "type": "string",
            "description": "This parameter is **required** to establish a new session. The session locks the redemption **quantity** by 1 and the redemption **loyalty points** specified within the request.",
            "default": "LOCK",
            "enum": [
              "LOCK"
            ]
          },
          "key": {
            "type": "string",
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.",
            "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
          },
          "ttl_unit": {
            "type": "string",
            "description": "Defines the type of unit in which the session time is counted.",
            "enum": [
              "HOURS",
              "DAYS",
              "MINUTES",
              "SECONDS",
              "MILLISECONDS",
              "MICROSECONDS",
              "NANOSECONDS"
            ]
          },
          "ttl": {
            "type": "integer",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the `session.ttl_unit` parameter."
          }
        }
      },
      "6_res_session_lock_discount_voucher": {
        "title": "Session Lock",
        "type": "object",
        "description": "Schema model for `session` lock object. The session object contains information about the session key that was used to establish a session between multiple parallel validation and redemption requests.",
        "properties": {
          "type": {
            "type": "string",
            "description": "This session locks the redemption **quantity** by 1.",
            "default": "LOCK"
          },
          "key": {
            "type": "string",
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. ",
            "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
          },
          "ttl_unit": {
            "type": "string",
            "description": "Defines the type of unit in which the session time is counted.",
            "enum": [
              "HOURS",
              "DAYS",
              "MINUTES",
              "SECONDS",
              "MILLISECONDS",
              "MICROSECONDS",
              "NANOSECONDS"
            ]
          },
          "ttl": {
            "type": "integer",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the `session.ttl_unit` parameter."
          }
        }
      },
      "6_res_session_lock_gift_card": {
        "title": "Session Lock",
        "type": "object",
        "description": "Schema model for `session` lock object. The session object contains information about the session key that was used to establish a session between multiple parallel validation and redemption requests.",
        "properties": {
          "type": {
            "type": "string",
            "description": "This session locks the redemption **quantity** by 1 and the redemption **gift credits** specified within the request.",
            "default": "LOCK"
          },
          "key": {
            "type": "string",
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.",
            "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
          },
          "ttl_unit": {
            "type": "string",
            "description": "Defines the type of unit in which the session time is counted.",
            "enum": [
              "HOURS",
              "DAYS",
              "MINUTES",
              "SECONDS",
              "MILLISECONDS",
              "MICROSECONDS",
              "NANOSECONDS"
            ]
          },
          "ttl": {
            "type": "integer",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the `session.ttl_unit` parameter."
          }
        }
      },
      "6_res_session_lock_loyalty_card": {
        "title": "Session Lock",
        "type": "object",
        "description": "Schema model for `session` lock object. The session object contains information about the session key that was used to establish a session between multiple parallel validation and redemption requests.",
        "properties": {
          "type": {
            "type": "string",
            "description": "This session locks the redemption **quantity** by 1 and the redemption **loyalty points** specified within the request.",
            "default": "LOCK"
          },
          "key": {
            "type": "string",
            "description": "The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.",
            "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
          },
          "ttl_unit": {
            "type": "string",
            "description": "Defines the type of unit in which the session time is counted.",
            "enum": [
              "HOURS",
              "DAYS",
              "MINUTES",
              "SECONDS",
              "MILLISECONDS",
              "MICROSECONDS",
              "NANOSECONDS"
            ]
          },
          "ttl": {
            "type": "integer",
            "description": "Value for the period of time that the session is active. Units for this parameter are defined by the `session.ttl_unit` parameter."
          }
        }
      },
      "6_res_validate_voucher_false": {
        "type": "object",
        "title": "Not Valid",
        "description": "Response schema for a voucher that is not valid.",
        "properties": {
          "valid": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the voucher is valid within the context of the parameters provided in the request body."
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the voucher being invalid in the context of the provided parameters."
          },
          "error": {
            "type": "object",
            "description": "Detailed failure cause for the invalid voucher if the reason has a translation defined in the Dashboard &rarr; Project Settings &rarr; Error Messages.",
            "properties": {
              "message": {
                "type": "string",
                "description": "Customized error message."
              }
            }
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          }
        }
      },
      "6_res_validate_voucher_discount_amount": {
        "title": "Amount Discount",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Defines the type of the voucher."
          },
          "effect": {
            "type": "string",
            "description": "Defines how the discount is applied to the customer's order.",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY",
              "APPLY_TO_ITEMS_BY_QUANTITY"
            ]
          },
          "amount_off": {
            "type": "integer",
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. "
          }
        }
      },
      "6_res_validate_voucher_discount_percent": {
        "title": "Percent Discount",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "type": {
            "type": "string",
            "default": "PERCENT",
            "description": "Defines the type of the voucher."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          },
          "percent_off": {
            "type": "integer",
            "description": "The percent discount that the customer will receive."
          },
          "amount_limit": {
            "type": "integer",
            "description": "Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "is_dynamic": {
            "type": "boolean",
            "description": "Flag indicating whether the discount was calculated using a formula."
          }
        }
      },
      "6_res_validate_voucher_discount_fixed": {
        "title": "Fixed Discount",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value. A fixed discounts sets a fixed total on cart or item(s) and then calculates the discount to apply.",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Type of discount."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order.    \n    \n| **Effect** | **Definition** |\n|---|---|\n| **APPLY_TO_ORDER** | Sets the order total amount to the value of the fixed amount. The discount value is calculated during the redemption as it's a difference between the total amount of the customer's order and the fixed amount. |\n| **APPLY_TO_ITEMS** | Sets a new price on items. The total discount amount is calculated during the redemption and it's a difference between the initial item price and the fixed amount. |"
          },
          "fixed_amount": {
            "type": "integer",
            "description": "Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value."
          }
        }
      },
      "6_res_validate_voucher_discount_unit": {
        "title": "Unit Discount, single item",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_product"
          },
          {
            "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_sku"
          }
        ]
      },
      "6_res_validate_voucher_discount_unit_product": {
        "title": "Unit Discount, Product",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Discount type."
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order."
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_type": {
            "type": "string",
            "example": "prod_0a9f9ab4ab019a42d5",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "type": "object",
            "description": "Contains information about the product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique product ID, assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "Product's source ID."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              }
            }
          }
        }
      },
      "6_res_validate_voucher_discount_unit_sku": {
        "title": "Unit Discount, SKU",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Discount type."
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order."
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_type": {
            "type": "string",
            "example": "sku_0bae3b28f610fd0da1",
            "description": "The product variant deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "sku": {
            "type": "object",
            "description": "Contains information about the SKU.",
            "properties": {
              "id": {
                "type": "string",
                "example": "sku_0bae3b28f610fd0da1",
                "description": "Unique SKU ID, assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "Product variant's source ID."
              },
              "sku": {
                "type": "string",
                "description": "Product varient's name."
              }
            }
          },
          "product": {
            "type": "object",
            "description": "Contains information about the parent product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique parent product ID, assigned by Voucherify.",
                "example": "prod_0bae2dc5a090fd0184"
              },
              "source_id": {
                "type": "string",
                "description": "Source ID of parent product."
              },
              "name": {
                "type": "string",
                "description": "Name of parent product."
              }
            }
          }
        }
      },
      "6_res_validate_voucher_discount_unit_multiple": {
        "title": "Unit Discount, multiple items",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Discount type."
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines how the discount is applied to the customer's order."
          },
          "units": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_product_multiple"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_sku_multiple"
              }
            ]
          }
        }
      },
      "6_res_validate_voucher_discount_unit_product_multiple": {
        "title": "Product Item",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order."
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_type": {
            "type": "string",
            "example": "prod_0a9f9ab4ab019a42d5",
            "description": "The product deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "product": {
            "type": "object",
            "description": "Contains information about the product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique product ID, assigned by Voucherify.",
                "example": "prod_0a9f9ab4ab019a42d5"
              },
              "source_id": {
                "type": "string",
                "description": "Product's source ID."
              },
              "name": {
                "type": "string",
                "description": "Product name."
              }
            }
          }
        }
      },
      "6_res_validate_voucher_discount_unit_sku_multiple": {
        "title": "SKU Item",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order."
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount."
          },
          "unit_type": {
            "type": "string",
            "example": "sku_0bae3b28f610fd0da1",
            "description": "The product variant deemed as free, chosen from product inventory (e.g. time, items)."
          },
          "sku": {
            "type": "object",
            "description": "Contains information about the SKU.",
            "properties": {
              "id": {
                "type": "string",
                "example": "sku_0bae3b28f610fd0da1",
                "description": "Unique SKU ID, assigned by Voucherify."
              },
              "source_id": {
                "type": "string",
                "description": "Product variant's source ID."
              },
              "sku": {
                "type": "string",
                "description": "Product varient's name."
              }
            }
          },
          "product": {
            "type": "object",
            "description": "Contains information about the parent product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique parent product ID, assigned by Voucherify.",
                "example": "prod_0b7d7dfb05cbe5c616"
              },
              "source_id": {
                "type": "string",
                "description": "Source ID of parent product."
              },
              "name": {
                "type": "string",
                "description": "Name of parent product."
              }
            }
          }
        }
      },
      "6_res_validate_voucher_discount_shipping": {
        "title": "Shipping Discount",
        "type": "object",
        "description": "This is an object representing the discount that the customer would receive in the context of the provided request body parameters. If the discount is calculated based on a formula, this object will return either the discount calculated based on the formula or the fallback value.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Discount type."
          },
          "effect": {
            "type": "string",
            "description": "Defines how the unit is added to the customer's order.",
            "default": "ADD_MISSING_ITEMS"
          },
          "unit_off": {
            "type": "integer",
            "description": "Number of units to be granted a full value discount.",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping \"product\" deemed as free.",
            "default": "prod_5h1pp1ng"
          },
          "product": {
            "type": "object",
            "description": "Contains information about the shipping \"product\".",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique shipping \"product\" ID, assigned by Voucherify.",
                "default": "prod_5h1pp1ng"
              },
              "source_id": {
                "type": "string",
                "description": "\"Product's\" source ID.",
                "default": "5h1pp1ng"
              },
              "name": {
                "type": "string",
                "description": "\"Product\" name.",
                "default": "Shipping"
              }
            }
          }
        }
      },
      "6_res_validate_voucher": {
        "title": "Valid",
        "description": "Response schema model for validating a voucher using **POST** `/vouchers/{code}/validate`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/6_res_validate_voucher_discount_code"
          },
          {
            "$ref": "#/components/schemas/6_res_validate_voucher_gift_card"
          },
          {
            "$ref": "#/components/schemas/6_res_validate_voucher_loyalty_card"
          }
        ]
      },
      "6_res_validate_voucher_discount_code": {
        "type": "object",
        "title": "Valid - Discount Code",
        "description": "Response schema model for validating a discount code using **POST** `/vouchers/{code}/validate`.",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates whether the voucher is valid within the context of the parameters provided in the request body."
          },
          "applicable_to": {
            "$ref": "#/components/schemas/6_res_applicable_to_object"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/6_res_inapplicable_to_object"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/6_obj_order_object"
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_amount"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_percent"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_shipping"
              }
            ],
            "description": "Contains information about the discount to be applied to the order."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-04T00:00:00.000Z",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is _inactive_ before this date."
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-31T00:00:00.000Z",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format. Voucher is _inactive_ after this date."
          },
          "campaign": {
            "type": "string",
            "description": "Voucher's parent campaign name."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_W8DJVd8J0btqXT6FBwn7BSkC",
            "description": "Voucher's parent campaign's unique ID."
          },
          "session": {
            "$ref": "#/components/schemas/6_res_session_lock_discount_voucher"
          }
        }
      },
      "6_res_validate_voucher_gift_card": {
        "type": "object",
        "title": "Valid - Gift Card",
        "description": "Response schema model for validating a gift card using **POST** `/vouchers/{code}/validate`.",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates whether the voucher is valid within the context of the parameters provided in the request body."
          },
          "applicable_to": {
            "$ref": "#/components/schemas/6_res_applicable_to_object"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/6_res_inapplicable_to_object"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/6_obj_order_object"
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "gift": {
            "type": "object",
            "description": "Contains current gift card balance information.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "balance": {
                "type": "integer",
                "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-04T00:00:00.000Z",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is _inactive_ before this date."
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-31T00:00:00.000Z",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format. Voucher is _inactive_ after this date."
          },
          "campaign": {
            "type": "string",
            "description": "Voucher's parent campaign name."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_W8DJVd8J0btqXT6FBwn7BSkC",
            "description": "Voucher's parent campaign's unique ID."
          },
          "session": {
            "$ref": "#/components/schemas/6_res_session_lock_gift_card"
          }
        }
      },
      "6_res_validate_voucher_loyalty_card": {
        "type": "object",
        "title": "Valid - Loyalty Card",
        "description": "Response schema model for validating a loyalty card using **POST** `/vouchers/{code}/validate`.",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates whether the voucher is valid within the context of the parameters provided in the request body."
          },
          "applicable_to": {
            "$ref": "#/components/schemas/6_res_applicable_to_object"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/6_res_inapplicable_to_object"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/6_obj_order_object_apply_to_order"
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "loyalty": {
            "type": "object",
            "description": "Contains the cost of reward in points.",
            "properties": {
              "points_cost": {
                "type": "integer",
                "description": "Number of points that wlil be deducted from loyaty card for the associated reward."
              }
            }
          },
          "reward": {
            "type": "object",
            "description": "Contains information about the reward that is being validated.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique reward ID assigned by Voucherify.",
                "example": "rew_Crmu3hu2FKZWZIML59AeAs1n"
              },
              "assignment_id": {
                "type": "string",
                "example": "rewa_xZr6Ks0j5AHeMRVdELmpI9sc",
                "description": "Unique reward assignment ID assigned by Voucherify."
              },
              "points": {
                "type": "integer",
                "description": "Number of points applied to the reward."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-04T00:00:00.000Z",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is _inactive_ before this date."
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-31T00:00:00.000Z",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format. Voucher is _inactive_ after this date."
          },
          "campaign": {
            "type": "string",
            "description": "Voucher's parent campaign name."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_W8DJVd8J0btqXT6FBwn7BSkC",
            "description": "Voucher's parent campaign's unique ID."
          },
          "session": {
            "$ref": "#/components/schemas/6_res_session_lock_loyalty_card"
          }
        }
      },
      "6_res_applicable_to_object": {
        "title": "Included  Items",
        "type": "object",
        "description": "Contains list of items that qualify in the scope of the discount. These are definitions of included products, SKUs, and product collections. These can be discounted.",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains array of items to which the discount can apply.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/6_res_product_collection"
                },
                {
                  "$ref": "#/components/schemas/6_res_product_collection_unit"
                },
                {
                  "$ref": "#/components/schemas/6_res_product_collection_fixed_amount"
                },
                {
                  "$ref": "#/components/schemas/6_res_product"
                },
                {
                  "$ref": "#/components/schemas/6_res_product_unit"
                },
                {
                  "$ref": "#/components/schemas/6_res_product_fixed_amount"
                },
                {
                  "$ref": "#/components/schemas/6_res_sku"
                },
                {
                  "$ref": "#/components/schemas/6_res_sku_unit"
                },
                {
                  "$ref": "#/components/schemas/6_res_sku_unit_fixed_amount"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of objects defining included products, SKUs, or product collections."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of included objects."
          },
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about included products, SKUs, or product collections in a dictionary."
          }
        }
      },
      "6_res_inapplicable_to_object": {
        "title": "Excluded Items",
        "type": "object",
        "description": "Contains list of items that **do not** qualify in the scope of the discount. These are definitions of excluded products, SKUs, and product collections. These **CANNOT** be discounted.",
        "properties": {
          "data": {
            "description": "Contains array of items to which the discount cannot apply.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/6_res_product_collection_excluded"
                },
                {
                  "$ref": "#/components/schemas/6_res_product_excluded"
                },
                {
                  "$ref": "#/components/schemas/6_res_sku_excluded"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of objects defining excluded products, SKUs, or product collections."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of excluded objects."
          },
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about excluded products, SKUs, or product collections in a dictionary."
          }
        }
      },
      "6_res_product_collection": {
        "title": "Product Collection",
        "type": "object",
        "description": "Contains definition for a product collection.",
        "properties": {
          "object": {
            "type": "string",
            "default": "products_collection",
            "description": "This object stores information about the product collection."
          },
          "id": {
            "type": "string",
            "example": "pc_4ndRXAsTOzwSdHcQcxf489uU",
            "description": "Unique product collection ID assigned by Voucherify."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_product_collection_unit": {
        "title": "Product Collection for Unit Discount",
        "type": "object",
        "description": "Contains definition for a product collection.",
        "properties": {
          "object": {
            "type": "string",
            "default": "products_collection",
            "description": "This object stores information about the product collection."
          },
          "id": {
            "type": "string",
            "example": "pc_4ndRXAsTOzwSdHcQcxf489uU",
            "description": "Unique product collection ID assigned by Voucherify."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          },
          "quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted per order line item."
          },
          "aggregated_quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted combined across all matched order line items."
          }
        }
      },
      "6_res_product_collection_fixed_amount": {
        "title": "Product Collection for Fixed Amount Discount",
        "type": "object",
        "description": "Contains definition for a product collection.",
        "properties": {
          "object": {
            "type": "string",
            "default": "products_collection",
            "description": "This object stores information about the product collection."
          },
          "id": {
            "type": "string",
            "example": "pc_4ndRXAsTOzwSdHcQcxf489uU",
            "description": "Unique product collection ID assigned by Voucherify."
          },
          "strict": {
            "type": "boolean"
          },
          "price": {
            "type": "integer",
            "description": "New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the `price_formula` parameter is present in the fixed price definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price."
          },
          "price_formula": {
            "type": "string",
            "description": "Formula used to calculate the discounted price of an item.",
            "example": "\"IF(ORDER_AMOUNT > 300;ORDER_ITEM_PRICE * 0.8;ORDER_ITEM_PRICE)"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_product_collection_excluded": {
        "title": "Product Collection",
        "type": "object",
        "description": "Contains definition for a product collection.",
        "properties": {
          "object": {
            "type": "string",
            "default": "products_collection",
            "description": "This object stores information about the product collection."
          },
          "id": {
            "type": "string",
            "example": "pc_4ndRXAsTOzwSdHcQcxf489uU",
            "description": "Unique product collection ID assigned by Voucherify."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "default": "APPLY_TO_EVERY",
            "enum": [
              "APPLY_TO_EVERY"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_sku": {
        "title": "SKU",
        "type": "object",
        "description": "Contains definition for a product variant.",
        "properties": {
          "object": {
            "type": "string",
            "default": "sku",
            "description": "This object stores information about the product variant."
          },
          "id": {
            "type": "string",
            "description": "Unique SKU ID assigned by Voucherify.",
            "example": "sku_0b7d7dfb090be5c619"
          },
          "source_id": {
            "type": "string",
            "description": "The source ID from your inventory system."
          },
          "product_id": {
            "type": "string",
            "description": "Parent product's unique ID assigned by Voucherify."
          },
          "product_source_id": {
            "type": "string",
            "description": "Parent product's source ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_sku_unit": {
        "title": "SKU for Unit Discount",
        "type": "object",
        "description": "Contains definition for a product variant.",
        "properties": {
          "object": {
            "type": "string",
            "default": "sku",
            "description": "This object stores information about the product variant."
          },
          "id": {
            "type": "string",
            "description": "Unique SKU ID assigned by Voucherify.",
            "example": "sku_0b7d7dfb090be5c619"
          },
          "source_id": {
            "type": "string",
            "description": "The source ID from your inventory system."
          },
          "product_id": {
            "type": "string",
            "description": "Parent product's unique ID assigned by Voucherify."
          },
          "product_source_id": {
            "type": "string",
            "description": "Parent product's source ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          },
          "quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted per order line item."
          },
          "aggregated_quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted combined across all matched order line items."
          }
        }
      },
      "6_res_sku_unit_fixed_amount": {
        "title": "SKU for Amount Discount",
        "type": "object",
        "description": "Contains definition for a product variant.",
        "properties": {
          "object": {
            "type": "string",
            "default": "sku",
            "description": "This object stores information about the product variant."
          },
          "id": {
            "type": "string",
            "description": "Unique SKU ID assigned by Voucherify.",
            "example": "sku_0b7d7dfb090be5c619"
          },
          "source_id": {
            "type": "string",
            "description": "The source ID from your inventory system."
          },
          "product_id": {
            "type": "string",
            "description": "Parent product's unique ID assigned by Voucherify."
          },
          "product_source_id": {
            "type": "string",
            "description": "Parent product's source ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "price": {
            "type": "integer",
            "description": "New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the `price_formula` parameter is present in the fixed price definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price."
          },
          "price_formula": {
            "type": "string",
            "description": "Formula used to calculate the discounted price of an item.",
            "example": "IF(ORDER_AMOUNT > 200;ORDER_ITEM_PRICE * 0.2;6)"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_sku_excluded": {
        "title": "SKU",
        "type": "object",
        "description": "Contains definition for a product variant.",
        "properties": {
          "object": {
            "type": "string",
            "default": "sku",
            "description": "This object stores information about the product variant."
          },
          "id": {
            "type": "string",
            "description": "Unique SKU ID assigned by Voucherify.",
            "example": "sku_0b7d7dfb090be5c619"
          },
          "source_id": {
            "type": "string",
            "description": "The source ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "default": "APPLY_TO_EVERY",
            "enum": [
              "APPLY_TO_EVERY"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_product": {
        "title": "Product",
        "type": "object",
        "description": "Contains definition for a product.",
        "properties": {
          "object": {
            "type": "string",
            "default": "product",
            "description": "This object stores information about the product."
          },
          "id": {
            "type": "string",
            "description": "Unique product ID assigned by Voucherify.",
            "example": "prod_0bae2dc5a090fd0184"
          },
          "source_id": {
            "type": "string",
            "description": "The product ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_product_unit": {
        "title": "Product for Unit Discount",
        "type": "object",
        "description": "Contains definition for a product.",
        "properties": {
          "object": {
            "type": "string",
            "default": "product",
            "description": "This object stores information about the product."
          },
          "id": {
            "type": "string",
            "description": "Unique product ID assigned by Voucherify.",
            "example": "prod_0bae2dc5a090fd0184"
          },
          "source_id": {
            "type": "string",
            "description": "The product ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          },
          "quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted per order line item."
          },
          "aggregated_quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted combined across all matched order line items."
          }
        }
      },
      "6_res_product_fixed_amount": {
        "title": "Product for Fixed Amount Discount",
        "type": "object",
        "description": "Contains definition for a product.",
        "properties": {
          "object": {
            "type": "string",
            "default": "product",
            "description": "This object stores information about the product."
          },
          "id": {
            "type": "string",
            "description": "Unique product ID assigned by Voucherify.",
            "example": "prod_0bae2dc5a090fd0184"
          },
          "source_id": {
            "type": "string",
            "description": "The product ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "price": {
            "type": "integer",
            "description": "New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the `price_formula` parameter is present in the fixed price definition, this value becomes the **fallback value**. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price."
          },
          "price_formula": {
            "type": "string",
            "description": "Formula used to calculate the discounted price of an item.",
            "example": "IF(ORDER_AMOUNT > 300;ORDER_ITEM_PRICE * 0.8;ORDER_ITEM_PRICE)"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_EVERY",
              "APPLY_TO_CHEAPEST",
              "APPLY_TO_MOST_EXPENSIVE"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_res_product_excluded": {
        "title": "Product",
        "type": "object",
        "description": "Contains definition for a product.",
        "properties": {
          "object": {
            "type": "string",
            "default": "product",
            "description": "This product stores information about the product."
          },
          "id": {
            "type": "string",
            "description": "Unique product ID assigned by Voucherify.",
            "example": "prod_0bae2dc5a090fd0184"
          },
          "source_id": {
            "type": "string",
            "description": "The product ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "effect": {
            "type": "string",
            "default": "APPLY_TO_EVERY",
            "enum": [
              "APPLY_TO_EVERY"
            ],
            "description": "Defines how the discount is applied to the customer's order."
          }
        }
      },
      "6_obj_order_object": {
        "title": "Order object",
        "description": "This is an object representing an order with calculated discounts applied using the voucher code.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/6_obj_order_object_apply_to_order"
          },
          {
            "$ref": "#/components/schemas/6_obj_order_object_apply_to_items"
          }
        ]
      },
      "6_obj_order_object_apply_to_order": {
        "type": "object",
        "title": "Order object - Effect: Apply to order",
        "description": "This is an object representing an order with calculated discounts applied using the voucher code.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ord_OLWs41pBk7VFn6ZTyX9U6keh",
            "description": "Unique order ID, assigned by Voucherify. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:40:48.705Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:47:20.760Z",
            "description": "Timestamp representing the date and time when the order was updated in ISO 8601 format. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "status": {
            "type": "string",
            "description": "Order status. This parameter is returned if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body or if you send the request body parameter when defining an order in the request body. This parameter can be passed but it's not required for validation at all. It's used in the redemption process. Normally after the redemption is done, the order is automatically to a `PAID` status. To avoid such default behaviour, the user can pass any of the other status options and it will be set the order status after the redemption instead of the default `PAID`.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after applying all the discounts.  \n`total_amount` = `amount` - `total_discount_amount`"
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "This field sums up all order-level discounts applied to the order."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order. Each order item can show the effects of particular discounts on the item-level.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the `amount`.   \n`subtotal_amount`=`amount`-`discount_amount`"
                },
                "product": {
                  "type": "object",
                  "description": "This object stores more information about the related product.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "prod_5h0wc453_1",
                      "description": "A unique identifier that represents the product and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "description": "A unique product identifier from your inventory system.",
                      "example": "illy-arabica"
                    },
                    "name": {
                      "type": "string",
                      "example": "Brewing System",
                      "description": "Product name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a product. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                },
                "sku": {
                  "type": "object",
                  "description": "This object stores more information about the related SKU.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "sku_prod_5h0wc453_1_1",
                      "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "example": "illy-arabica-250g",
                      "description": "A unique SKU identifier from your inventory system."
                    },
                    "sku": {
                      "type": "string",
                      "description": "SKU name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "customer": {
            "type": "object",
            "description": "Object containing information about the customer that is making the purchase.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique customer ID of the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `customer` object."
              }
            }
          },
          "referrer": {
            "type": "object",
            "description": "Object containing information about the referrer.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique referrer ID, who referred the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `referrer` object."
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix",
            "description": "Unique referrer ID."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          }
        }
      },
      "6_obj_order_object_apply_to_items": {
        "type": "object",
        "title": "Order object - Effect: Apply to items",
        "description": "This is an object representing an order with calculated discounts applied using the voucher code.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ord_OLWs41pBk7VFn6ZTyX9U6keh",
            "description": "Unique order ID, assigned by Voucherify. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:40:48.705Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:47:20.760Z",
            "description": "Timestamp representing the date and time when the order was updated in ISO 8601 format. This parameter is returned only if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body."
          },
          "status": {
            "type": "string",
            "description": "Order status. This parameter is returned if you use the order ID parameter of an already created and synced order in the Voucherify application, i.e by sending the `order.id` parameter in the request body or if you send the request body parameter when defining an order in the request body. This parameter can be passed but it's not required for validation at all. It's used in the redemption process. Normally after the redemption is done, the order is automatically to a `PAID` status. To avoid such default behaviour, the user can pass any of the other status options and it will be set the order status after the redemption instead of the default `PAID`.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied.  \n`sum(items, i => i.discount_amount)`"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after applying all the discounts.  \n`total_amount` = `amount` - `total_discount_amount`"
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Product-specifc discounts applied to all the items."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Product-specific discounts applied in the order."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order. Each order item can show the effects of particular discounts on the item-level.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "discount_amount": {
                  "type": "integer",
                  "description": "The item-level discount applied to the item."
                },
                "applied_discount_amount": {
                  "type": "integer",
                  "description": "The item-level discount applied to the item."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the `amount`.   \n`subtotal_amount`=`amount`-`discount_amount`"
                },
                "product": {
                  "type": "object",
                  "description": "This object stores more information about the related product.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "prod_5h0wc453_1",
                      "description": "A unique identifier that represents the product and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "description": "A unique product identifier from your inventory system.",
                      "example": "illy-arabica"
                    },
                    "name": {
                      "type": "string",
                      "example": "Brewing System",
                      "description": "Product name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a product. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                },
                "sku": {
                  "type": "object",
                  "description": "This object stores more information about the related SKU.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "sku_prod_5h0wc453_1_1",
                      "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "example": "illy-arabica-250g",
                      "description": "A unique SKU identifier from your inventory system."
                    },
                    "sku": {
                      "type": "string",
                      "description": "SKU name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "customer": {
            "type": "object",
            "description": "Object containing information about the customer that is making the purchase.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique customer ID of the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `customer` object."
              }
            }
          },
          "referrer": {
            "type": "object",
            "description": "Object containing information about the referrer.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique referrer ID, who referred the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `referrer` object."
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix",
            "description": "Unique referrer ID."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          }
        }
      },
      "6_query_validate_voucher_client_side_orders_order_item": {
        "type": "array",
        "items": {
          "type": "object",
          "title": "Order Item",
          "description": "This object represents an order line item.",
          "properties": {
            "source_id": {
              "type": "string",
              "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
            },
            "related_object": {
              "type": "string",
              "description": "Used along with the `source_id` property, can be set to either `sku` or `product`."
            },
            "product_id": {
              "type": "string",
              "description": "A unique product ID assigned by Voucherify.",
              "example": "prod_0a7e62db1fca8322a2"
            },
            "sku_id": {
              "type": "string",
              "description": "A unique SKU ID assigned by Voucherify.",
              "example": "sku_0a41e31c7b41c28358"
            },
            "quantity": {
              "type": "string",
              "description": "The quantity of the particular item in the cart."
            },
            "price": {
              "type": "string",
              "description": "The unit price of the item."
            },
            "amount": {
              "type": "string",
              "description": "The total amount of the order item (`price` * `quantity`)."
            }
          }
        }
      },
      "6_req_validate_promotion": {
        "title": "Validate Promotion Request Body",
        "type": "object",
        "description": "Request schema model for validating a promotion using **POST** `/promotions/validation`.",
        "properties": {
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "order": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_source_id"
              },
              {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              }
            ],
            "description": "Order information."
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. Add `category` as a string in the array to include a `categories` object in the response.",
                "items": {
                  "type": "string",
                  "default": "category",
                  "enum": [
                    "category"
                  ],
                  "example": "category"
                }
              }
            }
          }
        }
      },
      "6_res_validate_promotion": {
        "title": "Validate Promotion Response Body",
        "type": "object",
        "description": "Response schema model for validating a promotion using **POST** `/promotions/validation`.",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates whether the promotion is valid within the context of the parameters provided in the request body and filters in the query parameters."
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "promotions": {
            "type": "array",
            "description": "Contains an array of promotion tier objects.",
            "items": {
              "$ref": "#/components/schemas/6_res_validate_promotion_object"
            }
          }
        }
      },
      "6_res_validate_promotion_object": {
        "title": "Validate Promotion",
        "type": "object",
        "description": "Validate Promotion",
        "properties": {
          "valid": {
            "type": "string",
            "description": "Indicates whether the promotion is valid within the context of the parameters provided in the request body and filters in the query parameters."
          },
          "applicable_to": {
            "$ref": "#/components/schemas/6_res_applicable_to_object"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/6_res_inapplicable_to_object"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/6_obj_order_object"
          },
          "id": {
            "type": "string",
            "example": "promo_4TqHr24boFISDrcOHSlfAxwm",
            "description": "Unique promotion tier ID."
          },
          "name": {
            "type": "string",
            "description": "Custom promotion tier name."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website.",
            "example": "Get 45% off items"
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_amount"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_percent"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_shipping"
              }
            ],
            "description": "Contains information about the discount to be applied to the order."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-02T00:00:00.000Z",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Campaign is *inactive* before this date."
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-04T00:00:00.000Z",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive* after this date."
          },
          "campaign": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "camp_h8RyP6FV94F3Ev2odP24j5p1",
                "description": "Unique promotion tier ID."
              },
              "start_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive* before this date.",
                "example": "2022-11-01T00:00:00.000Z",
                "format": "date-time"
              },
              "expiration_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign expires in ISO 8601 format. Promotion tier is *inactive* after this date.",
                "example": "2022-11-30T00:00:00.000Z",
                "format": "date-time"
              },
              "active": {
                "type": "boolean",
                "description": "A flag indicating whether the campaign is active or not active. A campaign can be disabled even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
              },
              "categories": {
                "$ref": "#/components/schemas/Category"
              },
              "object": {
                "type": "string",
                "default": "campaign",
                "description": "The type of object represented by the campaign object. This object stores information about the campaign."
              }
            }
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "discount_amount": {
            "type": "integer",
            "description": "The calculated discount amount based on the discount type and effect."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "The effective discount amount that would be applied to the order."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "object": {
            "type": "string",
            "default": "promotion_tier",
            "description": "The type of object represented by JSON. This object stores information about the promotion tier."
          },
          "category_id": {
            "type": "string",
            "description": "Promotion tier category ID.",
            "example": "cat_0c9da30e7116ba6bba"
          },
          "categories": {
            "description": "Details about the category assigned to the promotion tier.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              }
            ]
          }
        }
      },
      "6_req_validate_promotion_tier": {
        "title": "Validate Promotion Tier Request Body",
        "type": "object",
        "description": "Request schema model for validating a promotion using **POST** `/promotions/tiers/{tierId}/validation`.",
        "properties": {
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "order": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_source_id"
              },
              {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              }
            ],
            "description": "Order information."
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "6_res_validate_promotion_tier": {
        "title": "Validate Promotion Tier Response Body",
        "description": "Response schema model for validating a promotion using **POST** `/promotions/tiers/{tierId}/validation`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/6_res_validate_promotion_tier_true"
          },
          {
            "$ref": "#/components/schemas/6_res_validate_promotion_tier_false"
          }
        ]
      },
      "6_res_validate_promotion_tier_true": {
        "title": "Promotion Tier Valid",
        "type": "object",
        "description": "Response schema model for valid promotion tier when validating a promotion using **POST** `/promotions/tiers/{tierId}/validation`.",
        "properties": {
          "valid": {
            "type": "string",
            "description": "Indicates whether the promotion is valid within the context of the parameters provided in the request body and filters in the query parameters."
          },
          "applicable_to": {
            "$ref": "#/components/schemas/6_res_applicable_to_object"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/6_res_inapplicable_to_object"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/6_obj_order_object"
          },
          "id": {
            "type": "string",
            "example": "promo_4TqHr24boFISDrcOHSlfAxwm",
            "description": "Unique promotion tier ID."
          },
          "name": {
            "type": "string",
            "description": "Custom promotion tier name."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website.",
            "example": "Get 45% off items"
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_amount"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_percent"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_shipping"
              }
            ],
            "description": "Contains information about the discount to be applied to the order."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-02T00:00:00.000Z",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Campaign is *inactive* before this date."
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-04T00:00:00.000Z",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive* after this date."
          },
          "campaign": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "camp_h8RyP6FV94F3Ev2odP24j5p1",
                "description": "Unique promotion tier ID."
              },
              "start_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive* before this date.",
                "example": "2022-11-01T00:00:00.000Z",
                "format": "date-time"
              },
              "expiration_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign expires in ISO 8601 format. Promotion tier is *inactive* after this date.",
                "example": "2022-11-30T00:00:00.000Z",
                "format": "date-time"
              },
              "active": {
                "type": "boolean",
                "description": "A flag indicating whether the campaign is active or not active. A campaign can be disabled even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
              },
              "categories": {
                "$ref": "#/components/schemas/Category"
              },
              "object": {
                "type": "string",
                "default": "campaign",
                "description": "The type of object represented by the campaign object. This object stores information about the campaign."
              }
            }
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "discount_amount": {
            "type": "integer",
            "description": "The calculated discount amount based on the discount type and effect."
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "The effective discount amount that would be applied to the order."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "object": {
            "type": "string",
            "default": "promotion_tier",
            "description": "The type of object represented by JSON. This object stores information about the promotion tier."
          }
        }
      },
      "6_res_validate_promotion_tier_false": {
        "type": "object",
        "description": "Response schema model for a non-valid promotion tier when validating a promotion using **POST** `/promotions/tiers/{tierId}/validation`.",
        "title": "Promotion Tier Not Valid",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Response schema for a voucher that is not valid."
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the voucher being invalid in the context of the provided parameters."
          },
          "error": {
            "description": "Detailed failure cause for the invalid voucher if the reason has a translation defined in the Dashboard &rarr; Project Settings &rarr; Error Messages.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_res_validate_promotion_tier_false_custom_message"
              },
              {
                "$ref": "#/components/schemas/Error"
              }
            ]
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "id": {
            "type": "string",
            "example": "promo_ByIIAHC1Mz9ouJsitzAWsush",
            "description": "Promotion tier ID."
          },
          "name": {
            "type": "string",
            "description": "Custom promotion tier name."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website.",
            "example": "Get 25% off"
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_amount"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_percent"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/6_res_validate_voucher_discount_shipping"
              }
            ],
            "description": "Contains information about the discount to be applied to the order."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Campaign is *inactive* before this date.",
            "format": "date-time",
            "example": "2022-11-02T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "description": "Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive* after this date.",
            "format": "date-time",
            "example": "2022-11-04T00:00:00.000Z"
          },
          "campaign": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion tier ID."
              },
              "start_date": {
                "type": "string",
                "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive* before this date.",
                "format": "date-time",
                "example": "2022-11-01T00:00:00.000Z"
              },
              "expiration_date": {
                "type": "string",
                "format": "date-time",
                "description": "Activation timestamp defines when the campaign expires in ISO 8601 format. Promotion tier is *inactive* after this date.",
                "example": "2022-11-30T00:00:00.000Z"
              },
              "active": {
                "type": "boolean",
                "description": "A flag indicating whether the campaign is active or not active. A campaign can be disabled even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
              },
              "object": {
                "type": "string",
                "description": "The type of object represented by the campaign object. This object stores information about the campaign.",
                "default": "campaign"
              }
            }
          },
          "hierarchy": {
            "type": "integer",
            "description": "The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about the promotion tier.",
            "default": "promotion_tier"
          }
        }
      },
      "6_res_validate_promotion_tier_false_custom_message": {
        "type": "object",
        "description": "Custom Error Message",
        "title": "Custom Message",
        "properties": {
          "message": {
            "type": "string",
            "description": "Customized error message."
          }
        }
      },
      "19_obj_order_object_rollback_stacked": {
        "title": "Order object",
        "description": "This is an object representing an order that was rolled back for a stacked redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ord_OLWs41pBk7VFn6ZTyX9U6keh",
            "description": "Unique order ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:40:48.705Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:47:20.760Z",
            "description": "Timestamp representing the date and time when the order was updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Order status.",
            "default": "CANCELED",
            "enum": [
              "CANCELED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the removing an item-level discount."
                },
                "product": {
                  "type": "object",
                  "description": "This object stores more information about the related product.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "prod_5h0wc453_1",
                      "description": "A unique identifier that represents the product and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "description": "A unique product identifier from your inventory system.",
                      "example": "illy-arabica"
                    },
                    "name": {
                      "type": "string",
                      "example": "Brewing System",
                      "description": "Product name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a product. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                },
                "sku": {
                  "type": "object",
                  "description": "This object stores more information about the related SKU.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "sku_prod_5h0wc453_1_1",
                      "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "example": "illy-arabica-250g",
                      "description": "A unique SKU identifier from your inventory system."
                    },
                    "sku": {
                      "type": "string",
                      "description": "SKU name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "customer": {
            "type": "object",
            "description": "Object containing information about the customer that is making the purchase.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique customer ID of the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `customer` object."
              }
            }
          },
          "referrer": {
            "type": "object",
            "description": "Object containing information about the referrer.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique referrer ID, who referred the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `referrer` object."
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix",
            "description": "Unique referrer ID."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          },
          "redemptions": {
            "description": "Lists details related to the redemption and redemption rollback.",
            "properties": {
              "redemption_ID": {
                "type": "object",
                "description": "The property name is the unique redemption ID; i.e. `r_0ba186c4824e4881e1`. This object contains information about the redemption rollback of incentives.",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
                    "example": "2022-09-02T17:06:56.649Z",
                    "format": "date-time"
                  },
                  "rollback_id": {
                    "type": "string",
                    "description": "Unique ID of the redemption rollback.",
                    "example": "rr_0c63c84eb78ee0a6c0"
                  },
                  "rollback_date": {
                    "type": "string",
                    "description": "Timestamp representing the date and tiem when the redemption rollback was created in ISO 8601 format.",
                    "example": "2023-01-31T14:18:37.150Z",
                    "format": "date-time"
                  },
                  "related_object_type": {
                    "type": "string",
                    "description": "The source of the redemption is a `redemption` because this rollback is in the context of a stacked redemption.",
                    "default": "redemption",
                    "enum": [
                      "redemption"
                    ]
                  },
                  "related_object_id": {
                    "type": "string",
                    "description": "Unique ID of the parent redemption.",
                    "example": "r_0ba186c4824e4881e1"
                  },
                  "stacked": {
                    "type": "array",
                    "description": "Lists the stacked redemption IDs in the initial redemption request.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "rollback_stacked": {
                    "type": "array",
                    "description": "Lists the rollback redemption IDs of the particular child redemptions.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "19_obj_order_object_rollback_stacked_per_redemption_apply_to_order": {
        "title": "Order object",
        "description": "This is an object representing an order that was rolled back for a stacked redemption.",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          }
        }
      },
      "19_obj_order_object_rollback_stacked_per_redemption_apply_to_items": {
        "title": "Order object",
        "description": "This is an object representing an order that was rolled back for a stacked redemption.",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order.`"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the removing an item-level discount."
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          }
        }
      },
      "RedeemPromotionStack": {
        "title": "Redeem Promotion Stack",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "default": "promotion_stack",
            "enum": [
              "promotion_stack"
            ]
          },
          "id": {
            "type": "string",
            "description": "Promotion stack unique id, such as: stack_KxSD0GahLUg9ULB6TseGfUHJ"
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedeemPromotionTier": {
        "title": "Redeem Promotion Tier",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "default": "promotion_tier",
            "enum": [
              "promotion_tier"
            ]
          },
          "id": {
            "type": "string",
            "description": "Promotion tier unique id, such as: promo_Mwy9XpA0TLctSGriM5kum0qp"
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "RedeemGiftCard": {
        "title": "Redeem Gift Card",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedeemVoucher"
          },
          {
            "type": "object",
            "properties": {
              "gift": {
                "type": "object",
                "description": "Contains information on the number of gift card credits that the customer wants to apply to the order.",
                "properties": {
                  "credits": {
                    "type": "integer",
                    "description": "The number of credits that the user wants to use from the gift card to fulfill the order. The value of credits cannot be higher than the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                  }
                }
              }
            }
          }
        ]
      },
      "RedeemLoyaltyCard": {
        "title": "Redeem Loyalty Card",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedeemVoucher"
          },
          {
            "type": "object",
            "properties": {
              "reward": {
                "type": "object",
                "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward.",
                    "example": "rew_EPx1hCTpqzF0HW1z9NKckZH4"
                  },
                  "points": {
                    "type": "integer",
                    "description": "The number of loyalty points that the user wants to spend in order to fulfill the order using a **pay with points** reward. The number of points cannot be higher than the current balance on the loyalty card."
                  }
                }
              }
            }
          }
        ]
      },
      "RedeemVoucher": {
        "title": "Redeem Voucher",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "object": {
            "type": "string",
            "description": "Redeemable object type.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "id": {
            "type": "string",
            "description": "Redeemable code."
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "StackableValidateRedeemBase": {
        "title": "Stackable Validate Redeem Base",
        "type": "object",
        "properties": {
          "redeemables": {
            "type": "array",
            "minItems": 1,
            "maxItems": 5,
            "description": "An array of redeemables. You can combine `voucher`(s) and `promotion_tier`(s). Alternatively, send one unique`promotion_stack` in the array.",
            "items": {
              "title": "Stackable Validate Redeem Base Redeemables Item",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RedeemVoucher"
                },
                {
                  "$ref": "#/components/schemas/RedeemPromotionTier"
                },
                {
                  "$ref": "#/components/schemas/RedeemPromotionStack"
                },
                {
                  "$ref": "#/components/schemas/RedeemGiftCard"
                },
                {
                  "$ref": "#/components/schemas/RedeemLoyaltyCard"
                }
              ]
            }
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "session": {
            "description": "Schema model for session lock object. The session object is required to establish a session between multiple parallel validation and redemption requests. If you only send the type parameter in the request, then by default the session lock will be established for 7 days. Read more on establishing a validation session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can attach to a redemption object. It can be useful for storing additional information about the redemption in a structured format."
          }
        },
        "required": [
          "redeemables"
        ]
      },
      "ValidationsValidateRequestBody": {
        "title": "Validations Validate Request Body",
        "description": "Response body schema for **POST** `/validations`.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \n\n| **Expand Option** | **Response Body** |\n|:---|:---|\n| [\"order\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\n| [\"redeemable\"] | Expands redeemable objects by including `metadata` for each discount type. |\n| [\"order\", \"redeemable\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes `metadata` for each discount type. |\n| [\"category\"] | - Returns an expanded `categories` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "RedemptionsRedeemRequestBody": {
        "type": "object",
        "title": "Redemptions Redeem Request Body",
        "description": "Response body schema for **POST** `/redemptions`.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "Expand array lets you configure params included in the response. Depending on the strings included in the array, the response will contain different details. \n\n| **Expand Option** | **Response Body** |\n|:---|:---|\n| [\"order\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\n| [\"redeemable\"] | Expands redeemable objects by including `metadata` for each discount type. |\n| [\"order\", \"redeemable\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes `metadata` for each discount type. |\n| [\"redeemable\", \"redemption\", \"category\"] | - Returns each discount type's `metadata` in each child redemption object.<br>- Returns redemption object `metadata`.<br>- Returns an expanded `categories` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ValidationsValidateResponseBody": {
        "title": "Validations Validate Response Body",
        "description": "Response body schema for POST `/validations`.",
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "The result of the validation. It takes all of the redeemables into account and returns a `false` if at least one redeemable is inapplicable. Returns `true` if all redeemables are applicable."
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If redeemables_application_mode=\"PARTIAL\" all redeemables here will be \"APPLICABLE\"",
            "items": {
              "title": "Validations Validate All Response Body Redeemables Item",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
                },
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
                },
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
                }
              ]
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each skipped redeemable.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
                }
              ]
            }
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
                }
              ]
            }
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "tracking_id": {
            "type": "string",
            "example": "track_VAVo1/z+G2GI2LPw==",
            "description": "Hashed customer source ID."
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "stacking_rules": {
            "$ref": "#/components/schemas/StackingRules"
          }
        },
        "required": [
          "valid",
          "redeemables",
          "application_mode"
        ]
      },
      "ValidationsRedeemableApplicable": {
        "type": "object",
        "title": "Applicable Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "default": "APPLICABLE",
            "enum": [
              "APPLICABLE"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "applicable_to": {
            "$ref": "#/components/schemas/ApplicableToResultList"
          },
          "inapplicable_to": {
            "$ref": "#/components/schemas/InapplicableToResultList"
          },
          "result": {
            "description": "Specifies the redeemable's end effect on the order. This object is unique to each type of redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RedeemableResultVoucherCode"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultGiftCard"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultLoyaltyCard"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultPromotionTier"
              },
              {
                "$ref": "#/components/schemas/RedeemableResultPromotionStack"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redeemable."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "ValidationsRedeemableInapplicable": {
        "type": "object",
        "title": "Inapplicable Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "default": "INAPPLICABLE",
            "enum": [
              "INAPPLICABLE"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "result": {
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      },
      "ValidationsRedeemableSkipped": {
        "type": "object",
        "title": "Skipped Redeemable",
        "properties": {
          "status": {
            "type": "string",
            "default": "SKIPPED",
            "enum": [
              "SKIPPED"
            ],
            "description": "Indicates whether the redeemable can be applied or not applied based on the validation rules."
          },
          "id": {
            "type": "string",
            "description": "Redeemable ID, i.e. the voucher code."
          },
          "object": {
            "type": "string",
            "description": "Redeemable's object type.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "result": {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          }
        }
      },
      "RedeemableResultVoucherCode": {
        "type": "object",
        "title": "Coupon Code",
        "description": "This is a `result` object representing the results for a coupon code.",
        "properties": {
          "discount": {
            "description": "Discount details about the type of discount to be applied for the redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DiscountAmount"
              },
              {
                "$ref": "#/components/schemas/DiscountUnit"
              },
              {
                "$ref": "#/components/schemas/DiscountUnitMultiple"
              },
              {
                "$ref": "#/components/schemas/DiscountPercent"
              },
              {
                "$ref": "#/components/schemas/DiscountFixed"
              }
            ]
          }
        }
      },
      "RedeemableResultGiftCard": {
        "type": "object",
        "title": "Gift Card",
        "description": "This is a `result` object representing the results for a gift card.",
        "properties": {
          "gift": {
            "description": "Stores the amount of gift card credits to be applied in the redemption.",
            "type": "object",
            "properties": {
              "credits": {
                "type": "integer",
                "description": "Total number of gift card credits to be applied in the redemption expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          }
        }
      },
      "RedeemableResultLoyaltyCard": {
        "type": "object",
        "title": "Loyalty Card",
        "description": "This is a `result` object representing the results for a loyalty card.",
        "properties": {
          "loyalty_card": {
            "description": "Stores the amount of loyalty card points to be applied in the redemption.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total number of loyalty points to be applied in the redemption."
              }
            }
          }
        }
      },
      "RedeemableResultPromotionTier": {
        "type": "object",
        "title": "Redeemable Result Promotion Tier",
        "description": "This is a `result` object representing the results for a promotion tier.",
        "properties": {
          "discount": {
            "description": "Discount details about the type of discount to be applied for the redeemable.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DiscountAmount"
              },
              {
                "$ref": "#/components/schemas/DiscountUnit"
              },
              {
                "$ref": "#/components/schemas/DiscountUnitMultiple"
              },
              {
                "$ref": "#/components/schemas/DiscountPercent"
              },
              {
                "$ref": "#/components/schemas/DiscountFixed"
              }
            ]
          }
        }
      },
      "RedeemableResultPromotionStack": {
        "type": "object",
        "title": "Promotion Stack",
        "description": "This is a `result` object representing the results for a promotion stack.",
        "properties": {
          "loyalty_card": {
            "description": "Stores the amount of loyalty card points to be applied in the redemption.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total number of loyalty points to be applied in the redemption."
              }
            }
          }
        }
      },
      "19_obj_redemption_rollback_object_discount_voucher_stacked": {
        "type": "object",
        "title": "Rollback Discount Voucher",
        "description": "This is an object representing a redemption rollback for a discount voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0c5eba630bc4979e70",
            "description": "Unique redemption rollback ID."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_order"
              },
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_items"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "discount": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple"
                  },
                  {
                    "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping"
                  }
                ]
              },
              "type": {
                "type": "string",
                "description": "Indicates the voucher type.",
                "default": "DISCOUNT_VOUCHER",
                "enum": [
                  "DISCOUNT_VOUCHER"
                ]
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              },
              "is_referral_code": {
                "type": "boolean",
                "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
              }
            }
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the original redemption."
          }
        }
      },
      "19_obj_redemption_rollback_object_loyalty_card_stacked": {
        "type": "object",
        "title": "Rollback Loyalty Card Voucher",
        "description": "This is an object representing a redemption rollback for a loyalty card.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0c5eaf4060133bf784",
            "description": "Unique redemption rollback ID."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "amount": {
            "type": "integer",
            "description": "Number of points being returned to the loyalty card."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_order"
              },
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_items"
              }
            ]
          },
          "reward": {
            "description": "Defines the reward that was initially redeemed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_pay_with_points"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_product"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_sku"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "loyalty_card": {
                "type": "object",
                "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "example": 7000,
                    "description": "Total points incurred over lifespan of loyalty card."
                  },
                  "balance": {
                    "type": "integer",
                    "example": 6970,
                    "description": "Points available for reward redemption after the redemption rollback."
                  }
                }
              },
              "type": {
                "type": "string",
                "description": "Indicates the voucher type.",
                "default": "LOYALTY_CARD",
                "enum": [
                  "LOYALTY_CARD"
                ]
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              },
              "is_referral_code": {
                "type": "boolean",
                "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
              },
              "holder_id": {
                "type": "string",
                "description": "Unique customer ID of the loyalty card owner.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              }
            }
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the original redemption."
          }
        }
      },
      "19_obj_redemption_rollback_object_gift_card_stacked": {
        "type": "object",
        "title": "Rollback Gift Card",
        "description": "This is an object representing a gift card redemption rollback.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0bc92f81a6801f9bca",
            "description": "Unique redemption rollback ID."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "amount": {
            "type": "integer",
            "description": "The amount added back to the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_order"
              },
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_items"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the gift card.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "gift": {
                "type": "object",
                "description": "Contains the balance of the gift card after credits are added back to the gift card for the redemption rollback.",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "example": 10000,
                    "description": "Total gift card income over the lifetime of the card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
                  },
                  "balance": {
                    "type": "integer",
                    "example": 500,
                    "description": "Available funds after the redemption rollback credits back the amount used up during the initial redemption. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "APPLY_TO_ORDER",
                      "APPLY_TO_ITEMS"
                    ],
                    "description": "Defines how the credits are applied to the customer's order."
                  }
                }
              },
              "type": {
                "type": "string",
                "description": "Indicates the voucher type.",
                "default": "GIFT_VOUCHER",
                "enum": [
                  "GIFT_VOUCHER"
                ]
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              },
              "is_referral_code": {
                "type": "boolean",
                "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
              }
            }
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the initial redemption.",
            "example": "r_0c5bf3323008a35032"
          }
        }
      },
      "19_obj_redemption_rollback_object_promotion_tier_stacked": {
        "type": "object",
        "title": "Rollback Promotion Tier",
        "description": "This is an object representing a promotion tier redemption rollback",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0bc92f81a6801f9bca",
            "description": "Unique redemption rollback ID."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_order"
              },
              {
                "$ref": "#/components/schemas/19_obj_order_object_rollback_stacked_per_redemption_apply_to_items"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "promotion_tier": {
            "type": "object",
            "description": "Contains details of the promotion tier and the parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion tier ID assigned by Voucherify.",
                "example": "promo_NzjTc3ZXTe7md5SziK3uYtei"
              },
              "name": {
                "type": "string",
                "description": "Promotion tier name."
              },
              "banner": {
                "type": "string",
                "description": "Text to be displayed to your customers on your website."
              },
              "campaign": {
                "type": "object",
                "description": "Promotion tier's parent campaign.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                    "description": "Unique ID assigned by Voucherify of the promotion tier's parent campaign."
                  }
                }
              }
            }
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of initial redemption."
          }
        }
      },
      "RedemptionsRedeemResponseBody": {
        "type": "object",
        "title": "Redemptions Redeem Response Body",
        "description": "Response body schema for **POST** `/redemptions`.",
        "properties": {
          "redemptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Redemption"
            }
          },
          "parent_redemption": {
            "$ref": "#/components/schemas/Redemption"
          },
          "order": {
            "description": "Contains the order details associated with the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculated"
              }
            ]
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns `\"status\": \"APPLICABLE\"`.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "7_obj_order_object_rollback": {
        "title": "Order object",
        "description": "This is an object representing an order that was rolled back.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ord_OLWs41pBk7VFn6ZTyX9U6keh",
            "description": "Unique order ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:40:48.705Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:47:20.760Z",
            "description": "Timestamp representing the date and time when the order was updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Order status.",
            "default": "CANCELED",
            "enum": [
              "CANCELED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after undoing all the discounts through the rollback redemption."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the removing an item-level discount."
                },
                "product": {
                  "type": "object",
                  "description": "This object stores more information about the related product.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "prod_5h0wc453_1",
                      "description": "A unique identifier that represents the product and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "description": "A unique product identifier from your inventory system.",
                      "example": "illy-arabica"
                    },
                    "name": {
                      "type": "string",
                      "example": "Brewing System",
                      "description": "Product name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a product. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                },
                "sku": {
                  "type": "object",
                  "description": "This object stores more information about the related SKU.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "sku_prod_5h0wc453_1_1",
                      "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "example": "illy-arabica-250g",
                      "description": "A unique SKU identifier from your inventory system."
                    },
                    "sku": {
                      "type": "string",
                      "description": "SKU name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "customer": {
            "type": "object",
            "description": "Object containing information about the customer that is making the purchase.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique customer ID of the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `customer` object."
              }
            }
          },
          "referrer": {
            "type": "object",
            "description": "Object containing information about the referrer.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique referrer ID, who referred the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `referrer` object."
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix",
            "description": "Unique referrer ID."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          },
          "redemptions": {
            "description": "Lists details related to the redemption and redemption rollback.",
            "properties": {
              "redemption_ID": {
                "type": "object",
                "description": "The property name is the unique redemption ID; i.e. `r_0ba186c4824e4881e1`. This object contains information about the redemption of an incentive.",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
                    "example": "2022-09-02T17:06:56.649Z",
                    "format": "date-time"
                  },
                  "rollback_id": {
                    "type": "string",
                    "description": "Unique ID of the redemption rollback.",
                    "example": "rr_0c63c84eb78ee0a6c0"
                  },
                  "rollback_date": {
                    "type": "string",
                    "description": "Timestamp representing the date and tiem when the redemption rollback was created in ISO 8601 format.",
                    "example": "2023-01-31T14:18:37.150Z",
                    "format": "date-time"
                  },
                  "related_object_type": {
                    "type": "string",
                    "description": "The source of the incentive.",
                    "enum": [
                      "voucher",
                      "promotion_tier"
                    ]
                  },
                  "related_object_id": {
                    "type": "string",
                    "description": "Unique ID of the related object that defines the incentive."
                  },
                  "related_object_parent_id": {
                    "type": "string",
                    "description": "Represent's the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign."
                  }
                }
              }
            }
          }
        }
      },
      "7_obj_order_object": {
        "title": "Order object",
        "description": "This is an object representing an order with calculated discounts applied using the voucher code.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/7_obj_order_object_apply_to_order"
          },
          {
            "$ref": "#/components/schemas/7_obj_order_object_apply_to_items"
          }
        ]
      },
      "7_obj_order_object_apply_to_order": {
        "type": "object",
        "title": "Order object - Effect: Apply to order",
        "description": "This is an object representing an order with calculated discounts applied using the voucher code.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ord_OLWs41pBk7VFn6ZTyX9U6keh",
            "description": "Unique order ID, assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:40:48.705Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:47:20.760Z",
            "description": "Timestamp representing the date and time when the order was updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order.  \n`total_discount_amount` = `discount_amount` + `items_discount_amount`"
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after applying all the discounts.  \n`total_amount` = `amount` - `total_discount_amount`"
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the order-level discount applied."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "This field sums up all order-level and all product-specific discounts applied in a particular request."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order. Each order item can show the effects of particular discounts on the item-level.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the `amount`.   \n`subtotal_amount`=`amount`-`discount_amount`"
                },
                "product": {
                  "type": "object",
                  "description": "This object stores more information about the related product.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "prod_5h0wc453_1",
                      "description": "A unique identifier that represents the product and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "description": "A unique product identifier from your inventory system.",
                      "example": "illy-arabica"
                    },
                    "name": {
                      "type": "string",
                      "example": "Brewing System",
                      "description": "Product name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a product. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                },
                "sku": {
                  "type": "object",
                  "description": "This object stores more information about the related SKU.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "sku_prod_5h0wc453_1_1",
                      "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "example": "illy-arabica-250g",
                      "description": "A unique SKU identifier from your inventory system."
                    },
                    "sku": {
                      "type": "string",
                      "description": "SKU name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "customer": {
            "type": "object",
            "description": "Object containing information about the customer that is making the purchase.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique customer ID of the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `customer` object."
              }
            }
          },
          "referrer": {
            "type": "object",
            "description": "Object containing information about the referrer.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique referrer ID, who referred the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `referrer` object."
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix",
            "description": "Unique referrer ID."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          },
          "redemptions": {
            "description": "Lists details related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/10_obj_order_object_unstacked_redemptions"
              }
            ]
          }
        }
      },
      "7_obj_order_object_apply_to_items": {
        "type": "object",
        "title": "Order object - Effect: Apply to items",
        "description": "This is an object representing an order with calculated discounts applied using the voucher code.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ord_OLWs41pBk7VFn6ZTyX9U6keh",
            "description": "Unique order ID, assigned by Voucherify. "
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:40:48.705Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:47:20.760Z",
            "description": "Timestamp representing the date and time when the order was updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order.  \n`sum(items, i => i.discount_amount)`"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after applying all the discounts.  \n`total_amount` = `amount` - `total_discount_amount`"
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied."
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order."
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order. Each order item can show the effects of particular discounts on the item-level.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "discount_amount": {
                  "type": "integer",
                  "description": "The item-level discount applied to the item."
                },
                "applied_discount_amount": {
                  "type": "integer",
                  "description": "The item-level discount applied to the item."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the `amount`.   \n`subtotal_amount`=`amount`-`discount_amount`"
                },
                "product": {
                  "type": "object",
                  "description": "This object stores more information about the related product.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "prod_5h0wc453_1",
                      "description": "A unique identifier that represents the product and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "description": "A unique product identifier from your inventory system.",
                      "example": "illy-arabica"
                    },
                    "name": {
                      "type": "string",
                      "example": "Brewing System",
                      "description": "Product name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a product. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                },
                "sku": {
                  "type": "object",
                  "description": "This object stores more information about the related SKU.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "sku_prod_5h0wc453_1_1",
                      "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "example": "illy-arabica-250g",
                      "description": "A unique SKU identifier from your inventory system."
                    },
                    "sku": {
                      "type": "string",
                      "description": "SKU name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "customer": {
            "type": "object",
            "description": "Object containing information about the customer that is making the purchase.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique customer ID of the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `customer` object."
              }
            }
          },
          "referrer": {
            "type": "object",
            "description": "Object containing information about the referrer.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique referrer ID, who referred the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `referrer` object."
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix",
            "description": "Unique referrer ID."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          },
          "redemptions": {
            "description": "Lists details related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/10_obj_order_object_unstacked_redemptions"
              }
            ]
          }
        }
      },
      "7_obj_order_object_stacked_redemptions": {
        "type": "object",
        "title": "Order",
        "description": "This is an object representing an order with calculated discounts applied using the voucher code.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ord_OLWs41pBk7VFn6ZTyX9U6keh",
            "description": "Unique order ID, assigned by Voucherify. "
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:40:48.705Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-06T11:47:20.760Z",
            "description": "Timestamp representing the date and time when the order was updated in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "Order amount before applying any discount."
          },
          "discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level discounts applied to the order."
          },
          "items_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied to the order.  \n`sum(items, i => i.discount_amount)`"
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order. \n`total_discount_amount` = `discount_amount` + `items_discount_amount`"
          },
          "total_amount": {
            "type": "integer",
            "description": "Order amount after applying all the discounts.  \n`total_amount` = `amount` - `total_discount_amount`"
          },
          "applied_discount_amount": {
            "type": "integer",
            "description": "This field shows the sum of all order-level discounts applied."
          },
          "items_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all product-specific discounts applied.\n`sum(items, i => i.applied_discount_amount)`"
          },
          "total_applied_discount_amount": {
            "type": "integer",
            "description": "Sum of all order-level AND all product-specific discounts applied to the order.\n`total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount`"
          },
          "items": {
            "type": "array",
            "description": "Array of order items that have been applied to the order. Each order item can show the effects of particular discounts on the item-level.",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "description": "The type of object represented by JSON. This object stores information about the `order_item`."
                },
                "product_id": {
                  "type": "string",
                  "example": "prod_5h0wc453_1",
                  "description": "A unique identifier that represents the product and is assigned by Voucherify."
                },
                "sku_id": {
                  "type": "string",
                  "example": "sku_prod_5h0wc453_1_1",
                  "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the item in the cart."
                },
                "amount": {
                  "type": "integer",
                  "description": "Represents a total pre-discount amount of order item (`price` * `quantity`)."
                },
                "discount_amount": {
                  "type": "integer",
                  "description": "The item-level discount applied to the item."
                },
                "applied_discount_amount": {
                  "type": "integer",
                  "description": "The item-level discount applied to the item."
                },
                "price": {
                  "type": "integer",
                  "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                },
                "subtotal_amount": {
                  "type": "integer",
                  "description": "Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the `amount`.   \n`subtotal_amount`=`amount`-`discount_amount`"
                },
                "product": {
                  "type": "object",
                  "description": "This object stores more information about the related product.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "prod_5h0wc453_1",
                      "description": "A unique identifier that represents the product and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "description": "A unique product identifier from your inventory system.",
                      "example": "illy-arabica"
                    },
                    "name": {
                      "type": "string",
                      "example": "Brewing System",
                      "description": "Product name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a product. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                },
                "sku": {
                  "type": "object",
                  "description": "This object stores more information about the related SKU.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "sku_prod_5h0wc453_1_1",
                      "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
                    },
                    "source_id": {
                      "type": "string",
                      "example": "illy-arabica-250g",
                      "description": "A unique SKU identifier from your inventory system."
                    },
                    "sku": {
                      "type": "string",
                      "description": "SKU name."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the order. A set of key/value pairs that are att to an order object. Stores additional information about the order in a structured format."
          },
          "customer": {
            "type": "object",
            "description": "Object containing information about the customer that is making the purchase.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique customer ID of the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `customer` object."
              }
            }
          },
          "referrer": {
            "type": "object",
            "description": "Object containing information about the referrer.",
            "properties": {
              "id": {
                "type": "string",
                "example": "cust_7iUa6ICKyU6gH40dBU25kQU1",
                "description": "Unique referrer ID, who referred the customer making the purchase."
              },
              "object": {
                "type": "string",
                "default": "customer",
                "description": "Type of object represented by the `referrer` object."
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "referrer_id": {
            "type": "string",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix",
            "description": "Unique referrer ID."
          },
          "object": {
            "type": "string",
            "default": "order",
            "description": "The type of object represented by JSON. This object stores information about the `order`."
          },
          "redemptions": {
            "description": "Lists details related to the redemption",
            "allOf": [
              {
                "$ref": "#/components/schemas/10_obj_order_object_stacked_redemptions"
              }
            ]
          }
        }
      },
      "7_obj_redemption_object_voucher_extended": {
        "title": "Redemption Object",
        "description": "This is an object representing an attempted or successful voucher redemption.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/7_obj_redemption_object_discount_voucher_extended"
          },
          {
            "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_extended"
          },
          {
            "$ref": "#/components/schemas/7_obj_redemption_object_gift_card_extended"
          }
        ]
      },
      "7_obj_redemption_object_discount_voucher_extended": {
        "type": "object",
        "title": "Discount Voucher",
        "description": "This is an object representing a redemption.  \n\nRedemption is the key operation in the voucher and promotion tier lifecycle. A customer can redeem a voucher or promotion tier once or multiple times depending on selected limit (`quantity`). Each redemption is recorded in voucher/promotion's history (`redemption_entries`). There is also an option to cancel a redemption. We call such operation a <!-- [redemption rollback](OpenAPI.json/paths/~1redemptions~1{redemptionId}~1rollback/post) -->[redemption rollback](rollback-redemption).",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          }
        }
      },
      "RedemptionRollback": {
        "title": "Redemption Rollback",
        "type": "object",
        "description": "This is an object representing a redemption rollback.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON",
            "default": "redemption_rollback",
            "enum": [
              "redemption_rollback"
            ]
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "nullable": true,
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "redemption": {
            "nullable": true,
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the redemption being invalid in the context of the provided parameters."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "title": "Redemption Rollback Related Redemptions Rollbacks Item",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "title": "Redemption Rollback Related Redemptions Item",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier",
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being added back to the loyalty card for the reward redemption rollback."
              }
            }
          }
        },
        "required": [
          "id",
          "object",
          "date",
          "customer_id",
          "tracking_id",
          "metadata",
          "redemption",
          "result",
          "status",
          "order",
          "channel",
          "customer",
          "related_object_type",
          "related_object_id"
        ]
      },
      "Redemption": {
        "title": "Redemption",
        "type": "object",
        "description": "This is an object representing a redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON",
            "default": "redemption",
            "enum": [
              "redemption"
            ]
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "nullable": true,
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "redemption": {
            "nullable": true,
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED",
              "ROLLED_BACK"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "title": "Redemption Related Redemptions Rollbacks Item",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "title": "Redemption Related Redemptions Item",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier",
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being added back to the loyalty card for the reward redemption rollback."
              }
            }
          }
        },
        "required": [
          "id",
          "object",
          "date",
          "customer_id",
          "tracking_id",
          "metadata",
          "redemption",
          "result",
          "status",
          "order",
          "channel",
          "customer",
          "related_object_type",
          "related_object_id"
        ]
      },
      "RedemptionInternal": {
        "title": "Redemption Internal",
        "description": "Model Used for internal communication",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "format": "date-time"
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the redemption."
          },
          "channel_type": {
            "type": "string",
            "description": "The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
            "enum": [
              "USER",
              "API"
            ]
          },
          "channel_id": {
            "type": "string",
            "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
            "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "previous_order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "reward": {
            "$ref": "#/components/schemas/RedemptionRewardResult"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "reason": {
            "type": "string",
            "description": "System generated cause for the redemption being invalid in the context of the provided parameters."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Redemption status."
          },
          "related_redemptions": {
            "type": "object",
            "properties": {
              "rollbacks": {
                "type": "array",
                "items": {
                  "title": "Redemption Internal Related Redemptions Rollbacks Item",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "rr_0bc92f81a6801f9bca",
                      "description": "Unique rollback redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              },
              "redemptions": {
                "type": "array",
                "items": {
                  "title": "Redemption Internal Related Redemptions Item",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "r_0bc92f81a6801f9bca",
                      "description": "Unique redemption ID."
                    },
                    "date": {
                      "type": "string",
                      "example": "2021-12-22T10:13:06.487Z",
                      "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "parent_redemption_id": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "enum": [
              "voucher",
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "related_object_parent_id": {
            "type": "string",
            "description": "Unique related parent object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "campaign_name": {
            "type": "string",
            "description": "Campaign name"
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          }
        }
      },
      "SimpleRedemption": {
        "type": "object",
        "title": "Simple Redemption",
        "description": "This is an object representing a simple redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "description": "Hashed customer source ID."
          },
          "date": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "format": "date-time"
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.",
            "example": 10000
          },
          "order": {
            "$ref": "#/components/schemas/SimpleOrder"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleVoucher"
              }
            ]
          },
          "promotion_tier": {
            "$ref": "#/components/schemas/SimplePromotionTier"
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption.",
            "example": "r_0c656311b5878a2031"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          }
        }
      },
      "7_obj_redemption_object_loyalty_card_extended": {
        "type": "object",
        "title": "Loyalty Card Voucher",
        "description": "This is an object representing a redemption.  \n\nRedemption is the key operation in the voucher and promotion tier lifecycle. A customer can redeem a voucher or promotion tier once or multiple times depending on selected limit (`quantity`). Each redemption is recorded in voucher/promotion's history (`redemption_entries`). There is also an option to cancel a redemption. We call such operation a <!-- [redemption rollback](OpenAPI.json/paths/~1redemptions~1{redemptionId}~1rollback/post) -->[redemption rollback](rollback-redemption).",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the redemption.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "Number of points being redeemed for a reward."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object. i.e. `voucher`.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "reward": {
            "description": "Defines the reward being redeemed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_pay_with_points"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_product"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_sku"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital"
              }
            ]
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being subtracted from the loyalty card for the reward redemption.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being subtracted from the loyalty card for the reward redemption."
              }
            }
          }
        }
      },
      "7_obj_redemption_object_gift_card_extended": {
        "type": "object",
        "title": "Gift Card",
        "description": "This is an object representing a gift card redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the gift card.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          }
        }
      },
      "7_obj_redemption_object_discount_voucher": {
        "type": "object",
        "title": "Discount Voucher",
        "description": "This is an object representing a redemption.  \n\nRedemption is the key operation in the voucher and promotion tier lifecycle. A customer can redeem a voucher or promotion tier once or multiple times depending on selected limit (`quantity`). Each redemption is recorded in voucher/promotion's history (`redemption_entries`). There is also an option to cancel a redemption. We call such operation a <!-- [redemption rollback](OpenAPI.json/paths/~1redemptions~1{redemptionId}~1rollback/post) -->[redemption rollback](rollback-redemption).",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption if this particular redemption was issued through a stacked redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher being redeemed.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          }
        }
      },
      "7_obj_redemption_rollback_object_discount_voucher": {
        "type": "object",
        "title": "Rollback Discount Voucher",
        "description": "This is an object representing a redemption rollback for a discount voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0c5eba630bc4979e70",
            "description": "Unique redemption rollback ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption_rollback`.",
            "default": "redemption_rollback"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the original redemption."
          },
          "reason": {
            "type": "string",
            "description": "The reason for the redemption rollback."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object_rollback"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption rollback was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption rollback. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher being redeemed.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          }
        }
      },
      "7_obj_redemption_rollback_object_loyalty_card": {
        "type": "object",
        "title": "Rollback Loyalty Card Voucher",
        "description": "This is an object representing a redemption rollback for a loyalty card.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0c5eaf4060133bf784",
            "description": "Unique redemption rollback ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption_rollback`.",
            "default": "redemption_rollback"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "Number of points being returned to the loyalty card."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the original redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object_rollback"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption rollback was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption rollback. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object. i.e. `voucher`.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher being redeemed.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          },
          "reward": {
            "description": "Defines the reward that was initially redeemed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_pay_with_points"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_product"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_sku"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital"
              }
            ]
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being added back to the loyalty card for the reward redemption rollback.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being added back to the loyalty card for the reward redemption rollback."
              }
            }
          }
        }
      },
      "7_obj_redemption_object_loyalty_card": {
        "type": "object",
        "title": "Loyalty Card Voucher",
        "description": "This is an object representing a redemption.  \n\nRedemption is the key operation in the voucher and promotion tier lifecycle. A customer can redeem a voucher or promotion tier once or multiple times depending on selected limit (`quantity`). Each redemption is recorded in voucher/promotion's history (`redemption_entries`). There is also an option to cancel a redemption. We call such operation a <!-- [redemption rollback](OpenAPI.json/paths/~1redemptions~1{redemptionId}~1rollback/post) -->[redemption rollback](rollback-redemption).",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the redemption.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "Number of points being redeemed for a reward."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption if this particular redemption was issued through a stacked redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object. i.e. `voucher`.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher being redeemed.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          },
          "reward": {
            "description": "Defines the reward being redeemed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_pay_with_points"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_product"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_sku"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital"
              }
            ]
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being subtracted from the loyalty card for the reward redemption.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being subtracted from the loyalty card for the reward redemption."
              }
            }
          }
        }
      },
      "7_obj_redemption_object_loyalty_card_pay_with_points": {
        "type": "object",
        "description": "Defines the pay with points reward redeemed for the particular loyalty card.",
        "properties": {
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "assignment_id": {
            "type": "string",
            "example": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
            "description": "Unique reward assginment ID assigned by Voucherify."
          },
          "id": {
            "type": "string",
            "example": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
            "description": "Unique reward ID assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "default": "reward",
            "description": "Type of object represented is `reward`."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was updated."
          },
          "parameters": {
            "type": "object",
            "description": "These are parameters representing a Pay with Points (COIN) reward.",
            "properties": {
              "coin": {
                "type": "object",
                "description": "Defines the ratio by mapping the number of loyalty points in `points_ratio` to a predefined cash amount in `exchange_ratio`.",
                "properties": {
                  "exchange_ratio": {
                    "type": "integer",
                    "description": "The cash equivalent of the points defined in the `points_ratio` property."
                  },
                  "points_ratio": {
                    "type": "integer",
                    "description": "The number of loyalty points that will map to the predefined cash amount defined by the `exchange_ratio` property."
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Reward type",
            "default": "COIN",
            "enum": [
              "COIN"
            ]
          }
        },
        "title": "Pay with Points Reward"
      },
      "7_obj_redemption_object_loyalty_card_material_product": {
        "type": "object",
        "description": "Defines the product material reward redeemed for the particular loyalty card.",
        "properties": {
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "assignment_id": {
            "type": "string",
            "example": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
            "description": "Unique reward assginment ID assigned by Voucherify."
          },
          "product": {
            "description": "Details of the product redeemed as a reward.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "id": {
            "type": "string",
            "example": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
            "description": "Unique reward ID assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "default": "reward",
            "description": "Type of object represented is `reward`."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was updated."
          },
          "parameters": {
            "type": "object",
            "description": "These are parameters representing a material reward.",
            "properties": {
              "product": {
                "type": "object",
                "description": "Defines the product redeemed as a reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique product ID assignedy by Voucherify of the product.",
                    "example": "prod_0b2c2ddf35150b83bb"
                  },
                  "sku_id": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Reward type",
            "default": "MATERIAL",
            "enum": [
              "MATERIAL"
            ]
          }
        },
        "title": "Product Material Reward"
      },
      "7_obj_redemption_object_loyalty_card_material_sku": {
        "type": "object",
        "description": "Defines the SKU material reward redeemed for the particular loyalty card.",
        "properties": {
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "assignment_id": {
            "type": "string",
            "example": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
            "description": "Unique reward assginment ID assigned by Voucherify."
          },
          "product": {
            "description": "Details of the SKU's parent product redeemed as a reward.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "sku": {
            "description": "Details of the SKU redeemed as a reward.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Sku"
              }
            ]
          },
          "id": {
            "type": "string",
            "example": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
            "description": "Unique reward ID assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "default": "reward",
            "description": "Type of object represented is `reward`."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was updated."
          },
          "parameters": {
            "type": "object",
            "description": "These are parameters representing a material reward.",
            "properties": {
              "product": {
                "type": "object",
                "description": "Defines the SKU redeemed as a reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique product ID assignedy by Voucherify of the SKU's parent."
                  },
                  "sku_id": {
                    "type": "string",
                    "description": "Unique SKU ID assigned by Voucherify of the SKU redeemed as a reward."
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Reward type",
            "default": "MATERIAL",
            "enum": [
              "MATERIAL"
            ]
          }
        },
        "title": "SKU Material Reward"
      },
      "7_obj_redemption_object_loyalty_card_digital": {
        "type": "object",
        "description": "Defines the digital reward redeemed for the particular loyalty card.",
        "properties": {
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "assignment_id": {
            "type": "string",
            "example": "rewa_YAIuU7AY6LNJVlUbRxSbNgiD",
            "description": "Unique reward assginment ID assigned by Voucherify."
          },
          "voucher": {
            "description": "Voucher object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "id": {
            "type": "string",
            "example": "rew_INt3fGH3n7xIr3ZQcq4kkUZ1",
            "description": "Unique reward ID assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "default": "reward",
            "description": "Type of object represented is `reward`."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was updated."
          },
          "parameters": {
            "type": "object",
            "description": "These are parameters representing a digital reward. These can be in the form of discount coupons, gift card credits, or loyalty point credits.",
            "properties": {
              "campaign": {
                "description": "Defines the source of the digital reward.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital_discount_voucher"
                  },
                  {
                    "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital_gift_card_credits"
                  },
                  {
                    "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital_loyalty_card_points"
                  }
                ]
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Reward type",
            "default": "CAMPAIGN",
            "enum": [
              "CAMPAIGN"
            ]
          }
        },
        "title": "Digital Reward"
      },
      "7_obj_redemption_object_loyalty_card_digital_discount_voucher": {
        "type": "object",
        "title": "Discount Voucher",
        "description": "Contains information about the source of the digital reward.",
        "properties": {
          "id": {
            "type": "string",
            "example": "camp_0dJG7cCAjquzcxWmZ634bA0C",
            "description": "Unique parent campaign ID of reward."
          },
          "type": {
            "type": "string",
            "description": "Campaign type.",
            "default": "DISCOUNT_COUPONS",
            "enum": [
              "DISCOUNT_COUPONS"
            ]
          }
        }
      },
      "7_obj_redemption_object_loyalty_card_digital_gift_card_credits": {
        "type": "object",
        "title": "Gift Card",
        "description": "Contains information about the source of the digital reward.",
        "properties": {
          "id": {
            "type": "string",
            "example": "camp_0dJG7cCAjquzcxWmZ634bA0C",
            "description": "Unique parent campaign ID of reward."
          },
          "balance": {
            "type": "integer",
            "description": "The amount credited to the gift card as a reward expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
          },
          "type": {
            "type": "string",
            "description": "Campaign type.",
            "default": "GIFT_VOUCHERS",
            "enum": [
              "GIFT_VOUCHERS"
            ]
          }
        }
      },
      "7_obj_redemption_object_loyalty_card_digital_loyalty_card_points": {
        "type": "object",
        "title": "Loyalty Card",
        "description": "Contains information about the source of the digital reward.",
        "properties": {
          "id": {
            "type": "string",
            "example": "camp_0dJG7cCAjquzcxWmZ634bA0C",
            "description": "Unique parent campaign ID of reward."
          },
          "balance": {
            "type": "integer",
            "description": "The number of loyalty points that is added to the loyalty card as a reward."
          },
          "type": {
            "type": "string",
            "description": "Campaign type.",
            "default": "LOYALTY_PROGRAM",
            "enum": [
              "LOYALTY_PROGRAM"
            ]
          }
        }
      },
      "7_obj_redemption_rollback_object_gift_card": {
        "type": "object",
        "title": "Rollback Gift Card",
        "description": "This is an object representing a gift card redemption rollback.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0bc92f81a6801f9bca",
            "description": "Unique redemption rollback ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption_rollback`.",
            "default": "redemption_rollback"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "The amount added back to the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the initial redemption.",
            "example": "r_0c5bf3323008a35032"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the redemption rollback."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object_rollback"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption rollback was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption rollback. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the gift card.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher being redeemed.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being adde back to the gift card for the redemption rollback",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount added back to the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          }
        }
      },
      "7_obj_redemption_object_gift_card": {
        "type": "object",
        "title": "Gift Card",
        "description": "This is an object representing a gift card redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption if this particular redemption was issued through a stacked redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the gift card.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "type": "object",
            "description": "Defines the details of the voucher being redeemed.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          },
          "gift": {
            "type": "object",
            "description": "Contains the amount being subtracted from the gift card for the redemption.",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "The amount subtracted from the gift card expressed as the smallest currency unit (e.g. 100 cents for $1.00)."
              }
            }
          }
        }
      },
      "7_obj_redemption_object_voucher_fail": {
        "type": "object",
        "title": "Failed Voucher Redemption",
        "description": "This is an object representing a failed redemption for a voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rf_0bbaccc96e0830ff9e",
            "description": "Unique failed redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "type": "object",
            "nullable": true
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |\n",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify.",
            "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
          },
          "voucher": {
            "type": "object",
            "description": "Defines the voucher details.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          }
        }
      },
      "7_obj_redemption_object_promotion_tier_fail": {
        "type": "object",
        "title": "Failed Promotion Tier Redemption",
        "description": "This is an object representing a failed redemption for a promotion tier.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rf_0bbaccc96e0830ff9e",
            "description": "Unique failed redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the redemption.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "type": "object",
            "nullable": true
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the promotion.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n",
            "default": "promotion_tier",
            "enum": [
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify.",
            "example": "promo_NzjTc3ZXTe7md5SziK3uYtei"
          },
          "voucher": {
            "type": "object",
            "nullable": true
          },
          "promotion_tier": {
            "type": "object",
            "description": "Contains details about the promotion tier and it's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion tier ID assigned by Voucherify.",
                "example": "promo_NzjTc3ZXTe7md5SziK3uYtei"
              },
              "campaign": {
                "type": "object",
                "description": "Promotion tier's parent campaign.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                    "description": "Unique ID assigned by Voucherify of the promotion tier's parent campaign."
                  }
                }
              }
            }
          }
        }
      },
      "7_obj_redemption_object_fail": {
        "type": "object",
        "title": "Failed Redemption",
        "description": "This is an object representing a failed redemption when a resource to be redeemed cannot be found.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rf_0c4c7baf58c243af6b",
            "description": "Unique failed redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the redemption.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "nullable": true,
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "failure_code": {
            "type": "string",
            "example": "not_found",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "type": "object",
            "nullable": true
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "nullable": true
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| redemption | Related redemption. |\n",
            "default": "redemption",
            "enum": [
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify.",
            "example": "rf_0c5bde8dfc0156f0e3"
          },
          "voucher": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "7_obj_redemption_rollback_object_voucher_fail": {
        "type": "object",
        "title": "Failed Voucher Redemption Rollback",
        "description": "This is an object representing a failed redemption rollback for a voucher.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rrf_0c63990fed133bfb88",
            "description": "Unique failed redemption rollback ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption_rollback`.",
            "default": "redemption_rollback"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "redemption": {
            "type": "string",
            "description": "The unique redemption ID of the initial redemption.",
            "example": "r_0c5d6689b35320059a"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the redemption rollback."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "failure_code": {
            "type": "string",
            "example": "already_rolled_back",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "type": "object",
            "nullable": true
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption rollback was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption rollback. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n\n| **Related Object** | **Definition** |\n| :--- | :--- |\n| voucher | Either a discount voucher, gift card, or loyalty card. |\n",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify.",
            "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
          },
          "voucher": {
            "type": "object",
            "description": "Defines the voucher details.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique voucher ID assigned by Voucherify.",
                "example": "v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno"
              },
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "campaign": {
                "type": "string",
                "description": "Voucher's parent campaign name."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique campaign ID assigned by Voucherify.",
                "example": "camp_pqZjuhG6Mgtp4GD0zD7b8hA3"
              }
            }
          }
        }
      },
      "7_obj_redemption_rollback_object_promotion_tier_fail": {
        "type": "object",
        "title": "Failed Promotion Tier Redemption Rollback",
        "description": "This is an object representing a failed redemption rollback for a promotion tier.",
        "properties": {
          "id": {
            "type": "string",
            "example": "rrf_0c5eb3bd884497ed05",
            "description": "Unique failed redemption rollback ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption_rollback`.",
            "default": "redemption_rollback"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "redemption": {
            "type": "string",
            "description": "The unique redemption ID of the initial redemption.",
            "example": "r_0c5d6689b35320059a"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the redemption rollback."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "failure_code": {
            "type": "string",
            "example": "customer_rules_violated",
            "description": "If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed."
          },
          "failure_message": {
            "type": "string",
            "description": "If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed."
          },
          "order": {
            "type": "object",
            "nullable": true
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption rollback was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption rollback. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the promotion.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.\n",
            "default": "promotion_tier",
            "enum": [
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify.",
            "example": "promo_NzjTc3ZXTe7md5SziK3uYtei"
          },
          "voucher": {
            "type": "object",
            "nullable": true
          },
          "promotion_tier": {
            "type": "object",
            "description": "Contains details about the promotion tier and it's parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion tier ID assigned by Voucherify.",
                "example": "promo_NzjTc3ZXTe7md5SziK3uYtei"
              },
              "campaign": {
                "type": "object",
                "description": "Promotion tier's parent campaign.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                    "description": "Unique ID assigned by Voucherify of the promotion tier's parent campaign."
                  }
                }
              }
            }
          }
        }
      },
      "7_obj_redemption_rollback_object_promotion_tier": {
        "type": "object",
        "title": "Promotion Tier",
        "description": "This is an object representing a promotion tier redemption rollback",
        "properties": {
          "id": {
            "type": "string",
            "example": "rr_0bc92f81a6801f9bca",
            "description": "Unique redemption rollback ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption_rollback`.",
            "default": "redemption_rollback"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption rollback occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of initial redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption rollback result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption rollback.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object_rollback"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption rollback was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption rollback. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "default": "promotion_tier",
            "enum": [
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. promo_NzjTc3ZXTe7md5SziK3uYtei for a promotion tier."
          },
          "voucher": {
            "type": "object",
            "nullable": true
          },
          "promotion_tier": {
            "type": "object",
            "description": "Contains details of the promotion tier and the parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion tier ID assigned by Voucherify.",
                "example": "promo_NzjTc3ZXTe7md5SziK3uYtei"
              },
              "campaign": {
                "type": "object",
                "description": "Promotion tier's parent campaign.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                    "description": "Unique ID assigned by Voucherify of the promotion tier's parent campaign."
                  }
                }
              }
            }
          }
        }
      },
      "7_obj_redemption_object_promotion_tier": {
        "type": "object",
        "title": "Promotion Tier",
        "description": "This is an object representing a promotion tier redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "redemption": {
            "type": "string",
            "description": "Unique redemption ID of the parent redemption if this particular redemption was issued through a stacked redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "default": "promotion_tier",
            "enum": [
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. promo_NzjTc3ZXTe7md5SziK3uYtei for a promotion tier."
          },
          "voucher": {
            "type": "object",
            "nullable": true
          },
          "promotion_tier": {
            "type": "object",
            "description": "Contains details of the promotion tier and the parent campaign.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion tier ID assigned by Voucherify.",
                "example": "promo_NzjTc3ZXTe7md5SziK3uYtei"
              },
              "campaign": {
                "type": "object",
                "description": "Promotion tier's parent campaign.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_VEL7UX0jZjrvLx3hfNZBVzpq",
                    "description": "Unique ID assigned by Voucherify of the promotion tier's parent campaign."
                  }
                }
              }
            }
          }
        }
      },
      "7_obj_redemption_object_promotion_tier_extended": {
        "type": "object",
        "title": "Promotion Tier",
        "description": "This is an object representing a promotion tier redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer that is related to the redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "default": "promotion_tier",
            "enum": [
              "promotion_tier"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. promo_NzjTc3ZXTe7md5SziK3uYtei for a promotion tier."
          },
          "voucher": {
            "type": "object",
            "nullable": true
          },
          "promotion_tier": {
            "description": "Contains details of the promotion tier and the parent campaign.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionTier"
              }
            ]
          }
        }
      },
      "7_obj_redemption_object_stackable_discounts": {
        "type": "object",
        "title": "Stacked Redemption",
        "description": "This is an object representing a stacked redemption.",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the `redemption`.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object_stacked_redemptions"
              }
            ]
          },
          "channel": {
            "type": "object",
            "description": "Defines the details of the channel through which the redemption was issued.",
            "properties": {
              "channel_id": {
                "type": "string",
                "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0FrH",
                "description": "Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API."
              },
              "channel_type": {
                "type": "string",
                "description": "The source of the channel for the redemption. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.",
                "enum": [
                  "USER",
                  "API"
                ]
              }
            }
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer making the stacked redemption.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object.",
            "default": "redemption",
            "enum": [
              "redemption"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. r_0c5d07222e08a34ace for a redemption."
          },
          "voucher": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "RedemptionsGetResponseBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Redemption"
          },
          {
            "$ref": "#/components/schemas/RedemptionRollback"
          }
        ],
        "title": "Get Redemption Response Body",
        "description": "Response body schema for **GET** `/redemptions/{redemptionId}"
      },
      "RedemptionsListResponseBody": {
        "title": "Redemptions List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** `/redemptions`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about redemptions in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "redemptions",
            "description": "Identifies the name of the attribute that contains the array of redemption objects."
          },
          "redemptions": {
            "type": "array",
            "items": {
              "title": "Redemptions List Response Body Redemptions Item",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Redemption"
                },
                {
                  "$ref": "#/components/schemas/RedemptionRollback"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of redemptions."
          }
        },
        "required": [
          "object",
          "data_ref",
          "redemptions",
          "total"
        ]
      },
      "FilterConditionsString": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "$in": {
            "type": "array",
            "description": "Array of resource values that should be included in the results. (multiple values)",
            "items": {
              "type": "string"
            }
          },
          "$not_in": {
            "type": "array",
            "description": "Array of resource values that should be included in the results. (multiple values)",
            "items": {
              "type": "string"
            }
          },
          "$is": {
            "type": "string",
            "description": "Value is exactly this value. (single value)"
          },
          "$is_not": {
            "type": "string",
            "description": "Results omit this value. (single value)"
          },
          "$has_value": {
            "type": "string",
            "description": "Value is NOT null. The value for this parameter is an empty string."
          },
          "$is_unknown": {
            "type": "string",
            "description": "Value is null. The value for this parameter is an empty string."
          },
          "$starts_with": {
            "type": "string",
            "description": "Value starts with the specified string."
          },
          "$ends_with": {
            "type": "string",
            "description": "Value ends with the specified string."
          }
        }
      },
      "7_req_redeem_voucher": {
        "title": "Redeem Voucher Request Body",
        "description": "Request body schema for redeeming a voucher using **POST** `/vouchers/{code}/redemption`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/7_req_redeem_voucher_discount_code"
          },
          {
            "$ref": "#/components/schemas/7_req_redeem_voucher_gift_card"
          },
          {
            "$ref": "#/components/schemas/7_req_redeem_voucher_loyalty_card"
          }
        ]
      },
      "7_res_redeem_voucher": {
        "title": "Redeem Voucher Response Body",
        "description": "Response body schema for **POST** `/vouchers/{code}/redemption`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/7_obj_redemption_object_voucher_extended"
          }
        ]
      },
      "7_req_redeem_promotion_tier": {
        "title": "Redeem Promotion Tier",
        "type": "object",
        "description": "Redeem a promotion tier.",
        "properties": {
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "order": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_source_id"
              },
              {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              }
            ],
            "description": "Order information."
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against promotion tiers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "7_req_redeem_voucher_discount_code": {
        "title": "Discount Code",
        "type": "object",
        "description": "Redeem a discount code.",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/6_req_session_lock_discount_code"
          },
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "order": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_source_id"
              },
              {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              }
            ],
            "description": "Order information."
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. Add `category` as a string in the array to include a `categories` object in the response.",
                "items": {
                  "type": "string",
                  "default": "category",
                  "enum": [
                    "category"
                  ],
                  "example": "category"
                }
              }
            }
          }
        }
      },
      "7_req_redeem_voucher_gift_card": {
        "title": "Gift Card",
        "type": "object",
        "description": "Redeem a gift card.",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/6_req_session_lock_gift_card"
          },
          "gift": {
            "type": "object",
            "description": "Contains information on the number of gift card credits that the customer wants to apply to the order.",
            "properties": {
              "credits": {
                "type": "integer",
                "description": "The number of credits that the user wants to use from the gift card to fulfil the order. The value of credits cannot be higher than the current balance on the gift card. If the user gives more points than he has on the gift card, the application will return an error code in response. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
              }
            }
          },
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "order": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_source_id"
              },
              {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              }
            ],
            "description": "Order information."
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. Add `category` as a string in the array to include a `categories` object in the response.",
                "items": {
                  "type": "string",
                  "default": "category",
                  "enum": [
                    "category"
                  ],
                  "example": "category"
                }
              }
            }
          }
        }
      },
      "7_req_redeem_voucher_loyalty_card": {
        "title": "Loyalty Card",
        "type": "object",
        "description": "Redeem a loyalty card.",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/6_req_session_lock_loyalty_card"
          },
          "reward": {
            "type": "object",
            "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward."
              },
              "points": {
                "type": "integer",
                "description": "The number of loyalty points that the user wants to spend in order to fulfill the order. The number of points cannot be higher than the current balance on the loyalty card. If the user gives more points than he/she has on the loyalty card, the application will return an error code in response."
              }
            }
          },
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "order": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_id"
              },
              {
                "$ref": "#/components/schemas/6_req_validate_voucher_order_source_id"
              },
              {
                "$ref": "#/components/schemas/OrdersCreateRequestBody"
              }
            ],
            "description": "Order information."
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "options": {
            "type": "object",
            "description": "Configure parameters returned in the response.",
            "properties": {
              "expand": {
                "type": "array",
                "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. Add `category` as a string in the array to include a `categories` object in the response.",
                "items": {
                  "type": "string",
                  "default": "category",
                  "enum": [
                    "category"
                  ],
                  "example": "category"
                }
              }
            }
          }
        }
      },
      "8_obj_loyalty_campaign_object": {
        "title": "Loyalty Campaign Object",
        "description": "This is an object representing a loyalty campaign.  \n\nThe loyalty campaign object contains details about the loyalty campaign. You can use dedicated endpoints to list loyalty campaigns, list loyalty card holders, member activities, active rewards, earning rules, loyalty tiers for given loyalty campaign.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_f7fBbQxUuTN7dI7tGOo5XMDA"
          },
          "name": {
            "type": "string",
            "description": "Loyalty campaign name."
          },
          "campaign_type": {
            "type": "string",
            "default": "LOYALTY_PROGRAM",
            "enum": [
              "LOYALTY_PROGRAM"
            ],
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: the campaign is dynamic, i.e. vouchers will generate based on set criteria    \n-  `STATIC`: vouchers need to be manually published",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "voucher": {
            "$ref": "#/components/schemas/2_obj_campaign_object_voucher_object_LOYALTY_CARD"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the campaign on or off. You can disable a campaign even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-01T08:00:50.038Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-20T09:18:19.623Z",
            "description": "Timestamp representing the date and time when the voucher was updated in ISO 8601 format."
          },
          "creation_status": {
            "type": "string",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ],
            "description": "Indicates the status of the campaign creation."
          },
          "vouchers_generation_status": {
            "type": "string",
            "description": "Indicates the status of the campaign's vouchers.",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT"
            ]
          },
          "protected": {
            "type": "boolean",
            "description": "Indicates whether the resource can be deleted."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to.",
            "example": "cat_0b688929a2476386a7"
          },
          "categories": {
            "$ref": "#/components/schemas/Category"
          },
          "loyalty_tiers_expiration": {
            "type": "object",
            "description": "Defines the expiration mechanism for loyalty tiers.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_balance"
              },
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_points_in_period"
              }
            ]
          },
          "object": {
            "type": "string",
            "default": "campaign",
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          }
        }
      },
      "8_obj_loyalty_campaign_object_no_extended_categories": {
        "title": "Loyalty Campaign Object",
        "description": "This is an object representing a loyalty campaign.  \n\nThe loyalty campaign object contains details about the loyalty campaign. You can use dedicated endpoints to list loyalty campaigns, list loyalty card holders, member activities, active rewards, earning rules, loyalty tiers for given loyalty campaign.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_f7fBbQxUuTN7dI7tGOo5XMDA"
          },
          "name": {
            "type": "string",
            "description": "Loyalty campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "campaign_type": {
            "type": "string",
            "default": "LOYALTY_PROGRAM",
            "enum": [
              "LOYALTY_PROGRAM"
            ],
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: the campaign is dynamic, i.e. vouchers will generate based on set criteria    \n-  `STATIC`: vouchers need to be manually published",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "voucher": {
            "$ref": "#/components/schemas/2_obj_campaign_object_voucher_object_LOYALTY_CARD"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the campaign on or off. You can disable a campaign even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* campaign\n- `false` indicates an *inactive* campaign"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-12-01T08:00:50.038Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-20T09:18:19.623Z",
            "description": "Timestamp representing the date and time when the voucher was updated in ISO 8601 format."
          },
          "creation_status": {
            "type": "string",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT",
              "MODIFYING"
            ],
            "description": "Indicates the status of the campaign creation."
          },
          "vouchers_generation_status": {
            "type": "string",
            "description": "Indicates the status of the campaign's vouchers.",
            "enum": [
              "DONE",
              "IN_PROGRESS",
              "FAILED",
              "DRAFT"
            ]
          },
          "protected": {
            "type": "boolean",
            "description": "Indicates whether the resource can be deleted."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to.",
            "example": "cat_0b688929a2476386a7"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "loyalty_tiers_expiration": {
            "type": "object",
            "description": "Defines the expiration mechanism for loyalty tiers.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_balance"
              },
              {
                "$ref": "#/components/schemas/2_loyalty_tiers_expiration_points_in_period"
              }
            ]
          },
          "object": {
            "type": "string",
            "default": "campaign",
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          }
        }
      },
      "8_obj_loyalty_card_object": {
        "title": "Loyalty Card Object",
        "type": "object",
        "description": "This is an object representing a loyalty card.",
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Loyalty Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify.",
            "example": "cat_0bb343dee3cdb5ec0c"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "enum": [
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "default": null,
            "description": "Object representing discount parameters. Child attributes are present only if `type` is `DISCOUNT_VOUCHER`. Defaults to `null`.",
            "type": "object",
            "nullable": true
          },
          "gift": {
            "type": "object",
            "nullable": true,
            "description": "Object representing gift parameters. Child attributes are present only if `type` is `GIFT_VOUCHER`. Defaults to `null`."
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if `type` is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "format": "date",
                "example": "2023-05-30",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date. "
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of voucher owner."
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1,
                "description": "How many times a voucher has already been redeemed."
              },
              "redeemed_points": {
                "type": "integer",
                "example": 100000,
                "description": "Total loyalty points redeemed."
              },
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. `/v1/vouchers/{voucher_code}/redemptions`"
              }
            }
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or publish voucher API method. \n\n<!-- title: My Table Title -->\n\n| Required | Optional |\n| -------- | :------: |\n| `type`:`LOYALTY_CARD` |  `type`:`DISCOUNT_VOUCHER`   | \n| `is_referral_code`:`true`      |    `type`:`GIFT_VOUCHER`   |\n",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the `url` attribute."
              },
              "count": {
                "type": "integer",
                "example": 0,
                "description": "Publication events counter."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10",
                "description": "The endpoint where this list of publications can be accessed using a GET method. `/v1/vouchers/{voucher_code}/publications`"
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `voucher`.",
            "default": "voucher"
          }
        }
      },
      "LoyaltiesLoyaltyTierReward": {
        "title": "Loyalty Tier Reward Object",
        "type": "object",
        "description": "This is an object representing a loyalty tier reward.",
        "properties": {
          "reward": {
            "$ref": "#/components/schemas/Reward"
          },
          "assignment": {
            "$ref": "#/components/schemas/RewardAssignment"
          },
          "object": {
            "description": "The type of object represented by JSON. This object stores information about the loyalty tier reward.",
            "default": "loyalty_tier_reward",
            "enum": [
              "loyalty_tier_reward"
            ]
          }
        },
        "required": [
          "reward",
          "assignment",
          "object"
        ]
      },
      "8_obj_loyalty_card_object_non_expanded_categories": {
        "title": "Loyalty Card Object",
        "type": "object",
        "description": "This is an object representing a loyalty card.",
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Loyalty Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify.",
            "example": "cat_0bb343dee3cdb5ec0c"
          },
          "categories": {
            "type": "array",
            "description": "Contains details about the category.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "enum": [
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher. "
          },
          "discount": {
            "default": null,
            "description": "Object representing discount parameters. Child attributes are present only if `type` is `DISCOUNT_VOUCHER`. Defaults to `null`.",
            "type": "object",
            "nullable": true
          },
          "gift": {
            "type": "object",
            "nullable": true,
            "description": "Object representing gift parameters. Child attributes are present only if `type` is `GIFT_VOUCHER`. Defaults to `null`."
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if `type` is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "format": "date",
                "example": "2023-05-30",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date. "
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of voucher owner."
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1,
                "description": "How many times a voucher has already been redeemed."
              },
              "redeemed_points": {
                "type": "integer",
                "example": 100000,
                "description": "Total loyalty points redeemed."
              },
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. `/v1/vouchers/{voucher_code}/redemptions`"
              }
            }
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or publish voucher API method. \n\n<!-- title: My Table Title -->\n\n| Required | Optional |\n| -------- | :------: |\n| `type`:`LOYALTY_CARD` |  `type`:`DISCOUNT_VOUCHER`   | \n| `is_referral_code`:`true`      |    `type`:`GIFT_VOUCHER`   |\n",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the `url` attribute."
              },
              "count": {
                "type": "integer",
                "example": 0,
                "description": "Publication events counter."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10",
                "description": "The endpoint where this list of publications can be accessed using a GET method. `/v1/vouchers/{voucher_code}/publications`"
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `voucher`.",
            "default": "voucher"
          }
        }
      },
      "8_obj_earning_rule_object": {
        "description": "This is an object representing an earning rule.",
        "title": "Earning Rule Object",
        "example": {
          "id": "ern_taClaOIiaGNdmdby8xS0lCcy",
          "created_at": "2022-02-04T13:27:50.665Z",
          "updated_at": "2022-02-07T08:19:44.198Z",
          "validation_rule_id": null,
          "loyalty": {
            "points": 1000,
            "type": "FIXED"
          },
          "event": "order.paid",
          "source": {
            "banner": "Order paid 1000 points",
            "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
            "object_type": "campaign"
          },
          "active": true,
          "start_date": "2022-02-02T13:00:00.000Z",
          "expiration_date": "2022-03-03T14:30:00.000Z",
          "validity_timeframe": {
            "duration": "PT1H",
            "interval": "P1D"
          },
          "validity_day_of_week": [
            4
          ],
          "object": "earning_rule",
          "automation_id": "auto_RjBuwpeFQZ7TyQ5LP2LFVZYG"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/8_obj_earning_rule_object_order_paid"
          },
          {
            "$ref": "#/components/schemas/8_obj_earning_rule_object_custom_event"
          },
          {
            "$ref": "#/components/schemas/8_obj_earning_rule_object_entered_segment"
          },
          {
            "$ref": "#/components/schemas/8_obj_earning_rule_object_tier"
          }
        ]
      },
      "8_obj_earning_rule_object_order_paid": {
        "description": "This is an object representing an earning rule for a paid order.",
        "type": "object",
        "title": "Earning Rule Object for Order Paid",
        "properties": {
          "id": {
            "type": "string",
            "example": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format.",
            "example": "2022-02-02T13:18:32.557Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.",
            "example": "2022-02-03T13:09:27.206Z",
            "format": "date-time"
          },
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_order_paid"
              }
            ]
          },
          "event": {
            "type": "string",
            "default": "order.paid",
            "enum": [
              "order.paid"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `order.paid` an event defined by the Voucherify API corresponding to an order status `PAID`. "
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "default": "campaign",
                "description": "Defines the object associated with the earning rule. Defaults to `campaign`."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "object": {
            "type": "string",
            "default": "earning_rule",
            "description": "The type of object represented by JSON. Default is `earning_rule`."
          },
          "automation_id": {
            "type": "string",
            "description": "For internal use by Voucherify.",
            "example": "auto_4jH1yq9WJS0oJ8suagCrltyb"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_earning_rule_object_order_paid": {
        "description": "This is an object representing an earning rule for a paid order.",
        "type": "object",
        "title": "Earning Rule Object for Order Paid",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_order_paid"
              }
            ]
          },
          "event": {
            "type": "string",
            "default": "order.paid",
            "enum": [
              "order.paid"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `order.paid` an event defined by the Voucherify API corresponding to an order status `PAID`. "
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_update_earning_rule_object_order_paid": {
        "description": "This is an object representing an earning rule for a paid order.",
        "type": "object",
        "title": "Earning Rule Object for Order Paid",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_order_paid"
              }
            ]
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_earning_rule_object_entered_segment": {
        "description": "This is an object representing an earning rule for entering a customer segment.",
        "type": "object",
        "title": "Earning Rule Object for Entered Segment",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. **Required** for the `customer.segment.entered` option in `event`.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            }
          },
          "event": {
            "type": "string",
            "default": "customer.segment.entered",
            "enum": [
              "customer.segment.entered"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `customer.segment.entered` an event defined by the Voucherify API corresponding to a customer entering a pre-defined customer segment."
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_update_earning_rule_object_entered_segment": {
        "description": "This is an object representing an earning rule for entering a customer segment.",
        "type": "object",
        "title": "Earning Rule Object for Entered Segment",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_obj_earning_rule_object_custom_event": {
        "description": "This is an object representing an earning rule triggered by a custom event.",
        "type": "object",
        "title": "Earning Rule Object for Custom Event",
        "properties": {
          "id": {
            "type": "string",
            "example": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format.",
            "example": "2022-02-02T13:18:32.557Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.",
            "example": "2022-02-03T13:09:27.206Z",
            "format": "date-time"
          },
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_custom_event_metadata"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "custom_event": {
            "type": "object",
            "description": "Contains the schema id of a custom event. **Required** for the custom event option in `event`.",
            "properties": {
              "schema_id": {
                "type": "string",
                "description": "Contains a unique identifier of a custom event schema. Assigned by the Voucherify API.",
                "example": "ms_gn4Qe4xsFPf7orCArCiNVY13"
              }
            }
          },
          "event": {
            "type": "string",
            "default": "custom_event_defined_in_EVENT_SCHEMA",
            "enum": [
              "custom_event_defined_in_EVENT_SCHEMA"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `custom_event_name` the name of a custom event defined in the Dashboard &rarr; **Project Settings** &rarr; **EVENT SCHEMA** &rarr; **Add event definition**. Read more on defining [custom events](https://support.voucherify.io/article/111-custom-events). "
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "default": "campaign",
                "description": "Defines the object associated with the earning rule. Defaults to `campaign`."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "object": {
            "type": "string",
            "default": "earning_rule",
            "description": "The type of object represented by JSON. Default is `earning_rule`."
          },
          "automation_id": {
            "type": "string",
            "description": "For internal use by Voucherify.",
            "example": "auto_4jH1yq9WJS0oJ8suagCrltyb"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_earning_rule_object_custom_event": {
        "description": "This is an object representing an earning rule triggered by a custom event.",
        "type": "object",
        "title": "Earning Rule Object for Custom Event",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_custom_event_metadata"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "custom_event": {
            "type": "object",
            "description": "Contains the schema id of a custom event. **Required** for the custom event option in `event`.",
            "properties": {
              "schema_id": {
                "type": "string",
                "description": "Contains a unique identifier of a custom event schema. Assigned by the Voucherify API.",
                "example": "ms_gn4Qe4xsFPf7orCArCiNVY13"
              }
            }
          },
          "event": {
            "type": "string",
            "default": "custom_event_defined_in_EVENT_SCHEMA",
            "enum": [
              "custom_event_defined_in_EVENT_SCHEMA"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `custom_event_name` the name of a custom event defined in the Dashboard &rarr; **Project Settings** &rarr; **EVENT SCHEMA** &rarr; **Add event definition**. Read more on defining [custom events](https://support.voucherify.io/article/111-custom-events). "
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_update_earning_rule_object_custom_event": {
        "description": "This is an object representing an earning rule triggered by a custom event.",
        "type": "object",
        "title": "Earning Rule Object for Custom Event",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_custom_event_metadata"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_obj_earning_rule_object_tier": {
        "description": "This is an object representing an earning rule for tiers.",
        "type": "object",
        "title": "Earning Rule Object for Tiers",
        "properties": {
          "id": {
            "type": "string",
            "example": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format.",
            "example": "2022-02-02T13:18:32.557Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.",
            "example": "2022-02-03T13:09:27.206Z",
            "format": "date-time"
          },
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "event": {
            "type": "string",
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `customer.loyalty.tier.joined` an event defined by the Voucherify API corresponding to a customer joining a tier    \n- `customer.loyalty.tier.left` an event defined by the Voucherify API corresponding to a customer leaving a tier    \n- `customer.loyalty.tier.upgraded` an event defined by the Voucherify API corresponding to a customer's tier being upgraded    \n- `customer.loyalty.tier.downgraded` an event defined by the Voucherify API corresponding to a customer's tier being upgraded    \n- `customer.loyalty.tier.prolonged` an event defined by the Voucherify API corresponding to a customer's tier being prolonged",
            "enum": [
              "customer.loyalty.tier.joined",
              "customer.loyalty.tier.left",
              "customer.loyalty.tier.upgraded",
              "customer.loyalty.tier.downgraded",
              "customer.loyalty.tier.prolonged"
            ]
          },
          "loyalty_tier": {
            "type": "object",
            "description": "Defines the tier associated with the earning rule definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique loyalty tier ID associated with the earning rule.    \n\n- `__ANY__`: any loyalty tier within the campaign",
                "example": "ltr_pudTGWasuIqxdiDM0go31OV1"
              }
            }
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "default": "campaign",
                "description": "Defines the object associated with the earning rule. Defaults to `campaign`."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "object": {
            "type": "string",
            "default": "earning_rule",
            "description": "The type of object represented by JSON. Default is `earning_rule`."
          },
          "automation_id": {
            "type": "string",
            "description": "For internal use by Voucherify.",
            "example": "auto_4jH1yq9WJS0oJ8suagCrltyb"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_earning_rule_object_tier": {
        "description": "This is an object representing an earning rule for tiers.",
        "type": "object",
        "title": "Earning Rule Object for Tiers",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "event": {
            "type": "string",
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `customer.loyalty.tier.joined` an event defined by the Voucherify API corresponding to a customer joining a tier    \n- `customer.loyalty.tier.left` an event defined by the Voucherify API corresponding to a customer leaving a tier    \n- `customer.loyalty.tier.upgraded` an event defined by the Voucherify API corresponding to a customer's tier being upgraded    \n- `customer.loyalty.tier.downgraded` an event defined by the Voucherify API corresponding to a customer's tier being upgraded    \n- `customer.loyalty.tier.prolonged` an event defined by the Voucherify API corresponding to a customer's tier being prolonged",
            "enum": [
              "customer.loyalty.tier.joined",
              "customer.loyalty.tier.left",
              "customer.loyalty.tier.upgraded",
              "customer.loyalty.tier.downgraded",
              "customer.loyalty.tier.prolonged"
            ]
          },
          "loyalty_tier": {
            "type": "object",
            "description": "Defines the tier associated with the earning rule definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique loyalty tier ID associated with the earning rule.    \n\n- `__ANY__`: any loyalty tier within the campaign",
                "example": "ltr_pudTGWasuIqxdiDM0go31OV1"
              }
            }
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_req_update_earning_rule_object_tier": {
        "description": "This is an object representing an earning rule for tiers.",
        "type": "object",
        "title": "Earning Rule Object for Tiers",
        "properties": {
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "event": {
            "type": "string",
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `customer.loyalty.tier.joined` an event defined by the Voucherify API corresponding to a customer joining a tier    \n- `customer.loyalty.tier.left` an event defined by the Voucherify API corresponding to a customer leaving a tier    \n- `customer.loyalty.tier.upgraded` an event defined by the Voucherify API corresponding to a customer's tier being upgraded    \n- `customer.loyalty.tier.downgraded` an event defined by the Voucherify API corresponding to a customer's tier being upgraded    \n- `customer.loyalty.tier.prolonged` an event defined by the Voucherify API corresponding to a customer's tier being prolonged",
            "enum": [
              "customer.loyalty.tier.joined",
              "customer.loyalty.tier.left",
              "customer.loyalty.tier.upgraded",
              "customer.loyalty.tier.downgraded",
              "customer.loyalty.tier.prolonged"
            ]
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "8_obj_fixed_points": {
        "title": "Define Fixed Amount of Points",
        "type": "object",
        "description": "This is an object representing points calculated based on a fixed value.",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The number of points to be added to the loyalty card.",
            "example": 100
          },
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card. `FIXED` adds a fixed number of `points`.",
            "default": "FIXED",
            "enum": [
              "FIXED"
            ]
          }
        }
      },
      "8_obj_calculate_points_proportionally_order_paid": {
        "title": "Calculate Points Proportionally",
        "description": "This is an object representing points calculated proportionally to another property.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_order_amounts"
          },
          {
            "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_order_total_amount"
          },
          {
            "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_order_metadata"
          },
          {
            "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_item_amount"
          },
          {
            "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_items_subtotal_amount"
          },
          {
            "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_items_quantity"
          },
          {
            "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
          }
        ]
      },
      "8_obj_calculate_points_proportionally_order_amounts": {
        "title": "Calculate Points Proportionally to Order Amount",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to another property.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_AMOUNT",
            "enum": [
              "ORDER_AMOUNT"
            ],
            "description": "`ORDER_AMOUNT`: Pre-discount order amount (X points for every Y spent excluding discounts)"
          },
          "order": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every set of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` `calculation_type`, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        }
      },
      "8_obj_calculate_points_proportionally_order_total_amount": {
        "title": "Calculate Points Proportionally to Total Order Amount",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to another property.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_TOTAL_AMOUNT",
            "enum": [
              "ORDER_TOTAL_AMOUNT"
            ],
            "description": "`ORDER_TOTAL_AMOUNT`: Total order amount (X points for every Y spent including discount)"
          },
          "order": {
            "type": "object",
            "properties": {
              "total_amount": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every set of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` `calculation_type`, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        }
      },
      "8_obj_calculate_points_proportionally_order_metadata": {
        "title": "Calculate Points Proportionally To an Order Metadata Property",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to an order metadata property.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_METADATA",
            "enum": [
              "ORDER_METADATA"
            ],
            "description": "`ORDER_METADATA`: Order Metadata (X points for every Y in metadata attribute, defined in the `property` key under the `order.metadata` object)"
          },
          "order": {
            "type": "object",
            "description": "Defines the formula for calculating points proportionally.",
            "properties": {
              "metadata": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every given increment of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` order metadata property value, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the order metadata property to grant points for.",
                    "example": 100
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card.",
                    "example": 10
                  },
                  "property": {
                    "type": "string",
                    "example": "number_of_store_visits",
                    "description": "Order metadata property."
                  }
                }
              }
            }
          }
        }
      },
      "8_obj_calculate_points_proportionally_item_amount": {
        "title": "Calculate Points Proportionally to Order Items Amount",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to another property.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_ITEMS_AMOUNT",
            "enum": [
              "ORDER_ITEMS_AMOUNT"
            ],
            "description": "- `ORDER_ITEMS_AMOUNT`; Pre-discount amount spent on items defined in the `order_items.amount.object` & `.id` (X points for every Y spent on items excluding discounts)"
          },
          "order_items": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every set of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` `calculation_type`, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. `pc_75U0dHlr7u75BJodrW1AE3t6`, `prod_0bae32322150fd0546`, or `sku_0b7d7dfb090be5c619`."
                  }
                }
              }
            }
          }
        }
      },
      "8_obj_calculate_points_proportionally_items_subtotal_amount": {
        "title": "Calculate Points Proportionally to Order Items Subtotal Amount",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to another property.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_ITEMS_SUBTOTAL_AMOUNT",
            "enum": [
              "ORDER_ITEMS_SUBTOTAL_AMOUNT"
            ],
            "description": "- `ORDER_ITEMS_SUBTOTAL_AMOUNT`; Amount spent on items defined in the `order_items.subtotal_amount.object` & `.id` (X points for every Y spent on items including discounts)"
          },
          "order_items": {
            "type": "object",
            "properties": {
              "subtotal_amount": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every set of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` `calculation_type`, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. `pc_75U0dHlr7u75BJodrW1AE3t6`, `prod_0bae32322150fd0546`, or `sku_0b7d7dfb090be5c619`."
                  }
                }
              }
            }
          }
        }
      },
      "8_obj_calculate_points_proportionally_items_quantity": {
        "title": "Calculate Points Proportionally to Quantity of Items in the Cart",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to quantity of items in the cart.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_ITEMS_QUANTITY",
            "enum": [
              "ORDER_ITEMS_QUANTITY"
            ],
            "description": "`ORDER_ITEMS_QUANTITY`: Quantity of items defined in `order_items.quantity.object` & `.id` (X points for every Y items excluding free items)"
          },
          "order_items": {
            "type": "object",
            "properties": {
              "quantity": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every set of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` `calculation_type`, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. `pc_75U0dHlr7u75BJodrW1AE3t6`, `prod_0bae32322150fd0546`, or `sku_0b7d7dfb090be5c619`."
                  }
                }
              }
            }
          }
        }
      },
      "8_obj_calculate_points_proportionally_customer_metadata": {
        "title": "Calculate Points Proportionally To a Customer Metadata Property",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to a customer metadata property.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "CUSTOMER_METADATA",
            "enum": [
              "CUSTOMER_METADATA"
            ],
            "description": "`CUSTOMER_METADATA`: Customer Metadata (X points for every Y in metadata attribute, defined in the `property` key under the `customer.metadata` object)"
          },
          "customer": {
            "type": "object",
            "description": "Defines the formula for calculating points proportionally.",
            "properties": {
              "metadata": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every given increment of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` order metadata property value, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the customer metadata property to grant points for.",
                    "example": 100
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card.",
                    "example": 10
                  },
                  "property": {
                    "type": "string",
                    "example": "customer_life_time_value",
                    "description": "Customer metadata property."
                  }
                }
              }
            }
          }
        }
      },
      "8_obj_calculate_points_proportionally_custom_event_metadata": {
        "title": "Calculate Points Proportionally To a Custom Event Metadata Property",
        "type": "object",
        "description": "This is an object representing points calculated proportionally to a custom event metadata property.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio.",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ]
          },
          "calculation_type": {
            "type": "string",
            "default": "CUSTOMER_METADATA",
            "enum": [
              "CUSTOMER_METADATA"
            ],
            "description": "`CUSTOM_EVENT_METADATA`: Custom Event Metadata (X points for every Y in metadata attribute, defined in the `property` key under the `custom_event.metadata` object)"
          },
          "custom_event": {
            "type": "object",
            "description": "Defines the formula for calculating points proportionally.",
            "properties": {
              "metadata": {
                "type": "object",
                "description": "Defines the ratio based on the property defined in the `calculation_type` parameter. For every given increment of value (1, 10, etc) defined in the `every` parameter for the property defined in `calculation_type`, give the customer the number of points defined in the `points` parameter. In other words, for `every` order metadata property value, give `points`.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the custom event metadata property to grant points for.",
                    "example": 100
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card.",
                    "example": 10
                  },
                  "property": {
                    "type": "string",
                    "example": "volume_number",
                    "description": "Custom event metadata property."
                  }
                }
              }
            }
          }
        }
      },
      "8_res_list_loyalty_campaigns": {
        "title": "List Loyalty Campaigns Response Body",
        "type": "object",
        "description": "Response body schema for listing loyalty campaigns using **GET** `/loyalties`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about loyalty campaigns in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "campaigns",
            "description": "Identifies the name of the attribute that contains the array of loyalty campaign objects."
          },
          "campaigns": {
            "type": "array",
            "description": "Contains an array of loyalty campaign objects.",
            "items": {
              "$ref": "#/components/schemas/8_obj_loyalty_campaign_object_no_extended_categories"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty campaign objects."
          }
        }
      },
      "8_req_create_loyalty_cards": {
        "type": "object",
        "title": "Create Loyalty Campaign Request Body",
        "description": "Request body schema for creating a loyalty campaign.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \n-  `STATIC`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled. CONTEXT: `LOYALTY_PROGRAM`."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "use_voucher_metadata_schema": {
            "type": "boolean",
            "description": "Flag indicating whether the campaign is to use the voucher's metadata schema instead of the campaign metadata schema."
          },
          "vouchers_count": {
            "type": "integer",
            "description": "Total number of unique vouchers in campaign (size of campaign)."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
          },
          "loyalty_tiers_expiration": {
            "type": "object",
            "description": "Defines the expiration mechanism for loyalty tiers.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_balance"
              },
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_points_in_period"
              }
            ]
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the `category`.",
            "example": "cat_0b688929a2476386a7"
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the `category_id`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          },
          "voucher": {
            "$ref": "#/components/schemas/2_req_campaign_object_voucher_object_LOYALTY_CARD"
          }
        }
      },
      "8_loyalty_tiers_expiration_balance": {
        "title": "Balance",
        "type": "object",
        "description": "Defines the Balance expiration mechanism for loyalty tiers.",
        "properties": {
          "qualification_type": {
            "type": "string",
            "default": "BALANCE",
            "enum": [
              "BALANCE"
            ],
            "description": "Tier qualification.   \n\n`BALANCE`: Points balance is based on the customer's current points balance. Customers qualify for the tier if their points balance is in the points range of the tier."
          },
          "start_date": {
            "type": "object",
            "description": "Defines the conditions for the start date of the tier.",
            "properties": {
              "type": {
                "type": "string",
                "default": "IMMEDIATE",
                "enum": [
                  "IMMEDIATE"
                ],
                "description": "What triggers the tier to be valid for a customer.    \n`IMMEDIATE`: After reaching the minimum required points."
              }
            }
          },
          "expiration_date": {
            "description": "Defines the conditions for the expiration date of a tier.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_balance_expiration_date_balance_drop"
              },
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_balance_expiration_date_custom"
              }
            ]
          }
        }
      },
      "LoyaltyTiersExpirationAll": {
        "title": "Loyalty Tiers Expiration",
        "type": "object",
        "description": "Defines the Loyalty Tiers Expiration.",
        "properties": {
          "qualification_type": {
            "type": "string",
            "enum": [
              "BALANCE",
              "POINTS_IN_PERIOD"
            ],
            "description": "Tier qualification.   \n\n`BALANCE`: Points balance is based on the customer's current points balance. Customers qualify for the tier if their points balance is in the points range of the tier. \n `POINTS_IN_PERIOD`: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold."
          },
          "qualification_period": {
            "type": "string",
            "description": "Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.    \n\n| **Period** | **Definition** |\n|:---|:---|\n| **Calendar Month** | Points collected in one calendar month<br>January, February, March, etc. |\n| **Calendar Quarter** | Points collected in the quarter<br>- January - March<br>- April - June<br>- July - September<br>- October - December |\n| **Calendar Half-year** | Points collected in the half-year<br>- January - June<br>- July - December |\n| **Calendar Year** | Points collected in one calendar year<br>January - December |",
            "enum": [
              "MONTH",
              "QUARTER",
              "HALF_YEAR",
              "YEAR"
            ]
          },
          "start_date": {
            "type": "object",
            "description": "Defines the conditions for the start date of the tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IMMEDIATE",
                  "NEXT_PERIOD"
                ],
                "description": "What triggers the tier to be valid for a customer.    \n`IMMEDIATE`: After reaching the minimum required points. \n`NEXT_PERIOD`: When the next qualification period starts."
              }
            },
            "required": [
              "type"
            ]
          },
          "expiration_date": {
            "type": "object",
            "description": "Defines the conditions for the expiration date of a tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "END_OF_PERIOD",
                  "END_OF_NEXT_PERIOD",
                  "BALANCE_DROP",
                  "CUSTOM"
                ],
                "description": "What triggers the tier to expire for a customer.    \n`END_OF_PERIOD`: Expire tier at the end of the period.    \n`END_OF_NEXT_PERIOD`:  Expire tier at the end of the next period. \n `BALANCE_DROP`: Tier expires when the points balance drops below the required range of the tier. \n `CUSTOM`: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier."
              },
              "extend": {
                "type": "string",
                "description": "Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of `P3M` will be valid for an additional duration of 3 months and a tier with a duration of `P1D` will be valid for an additional duration of 1 day."
              },
              "rounding": {
                "description": "Defines the rounding mechanism for tier expiration.",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "MONTH",
                      "QUARTER",
                      "HALF_YEAR",
                      "YEAR",
                      "CUSTOM"
                    ],
                    "description": "This mechanism describes a custom rounding for the expiration date."
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "START",
                      "END"
                    ],
                    "description": "This mechanism describes a rounding strategy for the expiration date."
                  },
                  "unit": {
                    "type": "string",
                    "description": "Defines the type of unit of time in which the rounding period is counted.",
                    "default": "MONTH",
                    "enum": [
                      "MONTH"
                    ]
                  },
                  "value": {
                    "type": "integer",
                    "description": "Value for the unit of time that the rounding applies to. Units for this parameter are defined by the `rounding.unit` parameter.    \n- `0`: January\n- `1`: February\n- `2`: March\n- `3`: April\n- `4`: May\n- `5`: June\n- `6`: July\n- `7`: August\n- `8`: September\n- `9`: October\n- `10`: November\n- `11`: December"
                  }
                }
              }
            },
            "required": [
              "type",
              "extend"
            ]
          }
        },
        "required": [
          "qualification_type",
          "start_date",
          "expiration_date"
        ]
      },
      "8_loyalty_tiers_expiration_balance_expiration_date_balance_drop": {
        "title": "Balance Drop",
        "type": "object",
        "description": "Defines the conditions for the expiration date of a tier based on a pure balance drop.",
        "properties": {
          "type": {
            "type": "string",
            "default": "BALANCE_DROP",
            "enum": [
              "BALANCE_DROP"
            ],
            "description": "What triggers the tier to expire for a customer.    \n`BALANCE_DROP`: Tier expires when the points balance drops below the required range of the tier."
          }
        }
      },
      "8_loyalty_tiers_expiration_balance_expiration_date_custom": {
        "title": "Custom",
        "type": "object",
        "description": "Defines the custom conditions for the expiration date of a tier.",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM",
            "enum": [
              "CUSTOM"
            ],
            "description": "What triggers the tier to expire for a customer.    \n`CUSTOM`: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier."
          },
          "extend": {
            "type": "string",
            "description": "Defines the amount of time the tier will remain active in ISO 8601 format. The expiration date counter starts at the moment when the customer reaches the minimum required points that are required to be in the tier. For example, a tier with a duration of P3M will be valid for a duration of 3 months."
          },
          "rounding": {
            "description": "Defines the rounding mechanism for tier expiration.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_expiration_date_rounding_default_options"
              },
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_expiration_date_rounding_custom"
              }
            ]
          }
        }
      },
      "8_loyalty_tiers_expiration_expiration_date_rounding_default_options": {
        "title": "Calendar Periods",
        "type": "object",
        "description": "Defines the rounding mechanism for tier expiration based on a list of available time periods.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MONTH",
              "QUARTER",
              "HALF_YEAR",
              "YEAR"
            ],
            "description": "Period to which the expiration will be rounded to.    \n- `MONTH`: The expiration date will be rounded to the end of the month. \n- `QUARTER`: The expiration date will be rounded to the end of the quarter. \n- `HALF_YEAR`: The expiration date will be rounded to the half year. \n- `YEAR`: The expiration date will be rounded to the end of the year."
          }
        }
      },
      "8_loyalty_tiers_expiration_expiration_date_rounding_custom": {
        "title": "Specific Month",
        "type": "object",
        "description": "Defines the custom rounding mechanism for tier expiration.",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM",
            "enum": [
              "CUSTOM"
            ],
            "description": "This mechanism describes a custom rounding for the expiration date."
          },
          "unit": {
            "type": "string",
            "description": "Defines the type of unit of time in which the rounding period is counted.",
            "default": "MONTH",
            "enum": [
              "MONTH"
            ]
          },
          "value": {
            "type": "integer",
            "description": "Value for the unit of time that the rounding applies to. Units for this parameter are defined by the `rounding.unit` parameter.    \n- `0`: January\n- `1`: February\n- `2`: March\n- `3`: April\n- `4`: May\n- `5`: June\n- `6`: July\n- `7`: August\n- `8`: September\n- `9`: October\n- `10`: November\n- `11`: December"
          }
        }
      },
      "8_loyalty_tiers_expiration_points_in_period": {
        "title": "Points in Period",
        "type": "object",
        "description": "Defines the Points in Period expiration mechanism for loyalty tiers.",
        "properties": {
          "qualification_type": {
            "type": "string",
            "default": "POINTS_IN_PERIOD",
            "enum": [
              "POINTS_IN_PERIOD"
            ],
            "description": "Tier qualification.   \n\n`POINTS_IN_PERIOD`: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold."
          },
          "qualification_period": {
            "type": "string",
            "description": "Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.    \n\n| **Period** | **Definition** |\n|:---|:---|\n| **Calendar Month** | Points collected in one calendar month<br>January, February, March, etc. |\n| **Calendar Quarter** | Points collected in the quarter<br>- January - March<br>- April - June<br>- July - September<br>- October - December |\n| **Calendar Half-year** | Points collected in the half-year<br>- January - June<br>- July - December |\n| **Calendar Year** | Points collected in one calendar year<br>January - December |",
            "enum": [
              "MONTH",
              "QUARTER",
              "HALF_YEAR",
              "YEAR"
            ]
          },
          "start_date": {
            "type": "object",
            "description": "Defines the conditions for the start date of the tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IMMEDIATE",
                  "NEXT_PERIOD"
                ],
                "description": "What triggers the tier to be valid for a customer.    \n`IMMEDIATE`: After reaching the minimum required points.    \n`NEXT_PERIOD`: When the next qualification period starts."
              }
            }
          },
          "expiration_date": {
            "type": "object",
            "description": "Defines the conditions for the expiration date of a tier.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "END_OF_PERIOD",
                  "END_OF_NEXT_PERIOD"
                ],
                "description": "What triggers the tier to expire for a customer.    \n`END_OF_PERIOD`: Expire tier at the end of the period.    \n`END_OF_NEXT_PERIOD`:  Expire tier at the end of the next period."
              },
              "extend": {
                "type": "string",
                "description": "Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of `P3M` will be valid for an additional duration of 3 months and a tier with a duration of `P1D` will be valid for an additional duration of 1 day."
              }
            }
          }
        }
      },
      "8_req_update_loyalty_campaign": {
        "type": "object",
        "title": "Update Loyalty Campaign Request Body",
        "description": "Request body schema for updating a loyalty campaign using **PUT** `/loyalties/{campaignId}`.",
        "properties": {
          "description": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the campaign such as a campaign description and details."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.    \n\n- `AUTO_UPDATE`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).    \n-  `STATIC`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled. CONTEXT: `LOYALTY_PROGRAM`."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the campaign is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a campaign with an `interval` of `P2D` will be active every other day."
              },
              "duration": {
                "type": "string",
                "description": "Defines the amount of time the campaign will be active in ISO 8601 format. For example, a campaign with a `duration` of `P1D` will be valid for a duration of one day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the campaign is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "activity_duration_after_publishing": {
            "type": "string",
            "description": "Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a `duration` of `P24D` will be valid for a duration of 24 days."
          },
          "loyalty_tiers_expiration": {
            "type": "object",
            "description": "Defines the expiration mechanism for loyalty tiers.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_balance"
              },
              {
                "$ref": "#/components/schemas/8_loyalty_tiers_expiration_points_in_period"
              }
            ]
          },
          "category_id": {
            "type": "string",
            "description": "Unique category ID that this campaign belongs to. Either pass this parameter OR the `category`.",
            "example": "cat_0b688929a2476386a7"
          },
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the `category_id`."
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Initial loyalty card income in points to be applied to the loyalty card at voucher generation."
              },
              "expiration_rules": {
                "type": "object",
                "description": "Defines point expiration rules.",
                "properties": {
                  "period_type": {
                    "type": "string",
                    "default": "MONTH",
                    "enum": [
                      "MONTH"
                    ],
                    "description": "The expiration period."
                  },
                  "period_value": {
                    "type": "integer",
                    "description": "How many periods should pass before the expiration occurs."
                  },
                  "rounding_type": {
                    "type": "string",
                    "enum": [
                      "END_OF_MONTH",
                      "END_OF_QUARTER",
                      "END_OF_HALF_YEAR",
                      "END_OF_YEAR",
                      "PARTICULAR_MONTH"
                    ],
                    "description": "Round up expiration till the end of the given period type."
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format."
          }
        }
      },
      "8_req_create_earning_rules": {
        "description": "This data model represents the Request body schema for the `/loyalties/{campaignId}/earning-rules` endpoint.",
        "title": "Create Earning Rule Request Body",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/8_req_earning_rule_object_order_paid"
            },
            {
              "$ref": "#/components/schemas/8_req_earning_rule_object_entered_segment"
            },
            {
              "$ref": "#/components/schemas/8_req_earning_rule_object_custom_event"
            },
            {
              "$ref": "#/components/schemas/8_req_earning_rule_object_tier"
            }
          ]
        }
      },
      "8_req_update_earning_rule": {
        "description": "Request body schema for updating earning rules using **PUT** `/loyalties/{campaignId}/earning-rules/{earningRuleId}` endpoint.",
        "title": "Update Earning Rule Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/8_req_update_earning_rule_object_order_paid"
          },
          {
            "$ref": "#/components/schemas/8_req_update_earning_rule_object_entered_segment"
          },
          {
            "$ref": "#/components/schemas/8_req_update_earning_rule_object_custom_event"
          },
          {
            "$ref": "#/components/schemas/8_req_update_earning_rule_object_tier"
          }
        ]
      },
      "8_res_list_earning_rules": {
        "description": "Response body schema for listing earning rules using **GET** `/loyalties/{campaignId}/earning-rules` endpoint.",
        "type": "object",
        "title": "List Earning Rules Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about earning rules in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of earning rule objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of earning rule objects.",
            "items": {
              "$ref": "#/components/schemas/8_obj_earning_rule_object"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of earning rule objects."
          }
        }
      },
      "8_req_order_object_redeem_reward": {
        "type": "object",
        "title": "Order object",
        "description": "Request body schema for creating an order, **required** when redeeming a pay with points reward.",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of an integration between multiple systems. It can be an order ID from a CRM system, database or 3rd-party service."
          },
          "status": {
            "type": "string",
            "description": "The order status.",
            "enum": [
              "CREATED",
              "PAID",
              "CANCELED",
              "FULLFILLED"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format."
          },
          "referrer": {
            "$ref": "#/components/schemas/10_req_orders_referrer_object"
          },
          "items": {
            "$ref": "#/components/schemas/10_req_orders_items_array"
          }
        }
      },
      "8_obj_redemption_object_loyalty_card_extended": {
        "type": "object",
        "title": "Loyalty Card Voucher",
        "description": "This is an object representing a redemption.  \n\nRedemption is the key operation in the voucher lifecycle. A customer can redeem a voucher once or multiple times depending on selected limit (`quantity`). Each redemption is recorded in voucher/promotion's history (`redemption_entries`). There is also an option to cancel a redemption. We call such operation a <!-- [redemption rollback](OpenAPI.json/paths/~1redemptions~1{redemptionId}~1rollback/post) -->[redemption rollback](rollback-redemption).",
        "properties": {
          "id": {
            "type": "string",
            "example": "r_0bc92f81a6801f9bca",
            "description": "Unique redemption ID."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the redemption.",
            "default": "redemption"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the redemption occured."
          },
          "customer_id": {
            "type": "string",
            "example": "cust_i8t5Tt6eiKG5K79KQlJ0Vs64",
            "description": "Unique customer ID of the redeeming customer."
          },
          "tracking_id": {
            "type": "string",
            "example": "track_fxEMFiLowFHg==",
            "description": "Hashed customer source ID."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes in the form of key/value pairs assigned to the redemption."
          },
          "amount": {
            "type": "integer",
            "description": "Number of points being redeemed for a reward."
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "Redemption result."
          },
          "order": {
            "description": "Defines the details of the order that is related to the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/7_obj_order_object"
              }
            ]
          },
          "customer": {
            "type": "object",
            "description": "Defines the customer redeeming the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique ID of a customer that is assigned by Voucherify.",
                "example": "cust_eWgXlBBiY6THFRJwX45Iakv4"
              },
              "name": {
                "type": "string",
                "description": "Customer's first and last name."
              },
              "email": {
                "type": "string",
                "description": "Customer's email address."
              },
              "source_id": {
                "type": "string",
                "description": "The merchant's customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
              },
              "metadata": {
                "type": "object",
                "description": "The metadata object stores all custom attributes assigned to the customer. A set of key/value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format."
              },
              "object": {
                "type": "string",
                "description": "Type of object represented is `customer`.",
                "default": "customer"
              }
            }
          },
          "related_object_type": {
            "type": "string",
            "description": "Defines the related object. i.e. `voucher`.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "related_object_id": {
            "type": "string",
            "description": "Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher."
          },
          "voucher": {
            "description": "Defines the details of the voucher being redeemed.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "reward": {
            "description": "Defines the reward being redeemed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_pay_with_points"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_product"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_material_sku"
              },
              {
                "$ref": "#/components/schemas/7_obj_redemption_object_loyalty_card_digital"
              }
            ]
          },
          "loyalty_card": {
            "type": "object",
            "description": "Stores the number of points being subtracted from the loyalty card for the reward redemption.",
            "properties": {
              "points": {
                "type": "integer",
                "description": "Number of points being subtracted from the loyalty card for the reward redemption."
              }
            }
          }
        }
      },
      "8_obj_export_object_points_expiration": {
        "title": "Points Expirations Export Object",
        "type": "object",
        "description": "This is an object representing an export of points expirations. ",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID.",
            "example": "exp_FFfp9o7daWuJqJCKp5xqqli4"
          },
          "object": {
            "type": "string",
            "default": "export",
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "example": "2022-04-28T11:23:20.922Z",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed.",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "DONE",
              "ERROR"
            ]
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered.",
            "enum": [
              "API",
              "WEBSITE"
            ]
          },
          "exported_object": {
            "type": "string",
            "description": "The type of exported object.",
            "default": "points_expiration",
            "enum": [
              "points_expiration"
            ]
          },
          "parameters": {
            "type": "object",
            "description": "List of fields and filters that were passed in the request body to create the export.",
            "properties": {
              "order": {
                "type": "string",
                "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
                "enum": [
                  "expires_at",
                  "-expires_at"
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data that was exported. These fields define the headers in the CSV file. \n\n The array can be a combination of any of the following available fields:  \n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Loyalty points bucket ID. | lopb_Wl1o3EjJIHSNjvO5BDLy4z1n |\n| campaign_id | Campaign ID of the parent loyalty campaign. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\n| voucher_id | Voucher ID of the parent loyalty card. | v_YLn0WVWXSXbUfDvxgrgUbtfJ3SQIY655 |\n| status | Status of the loyalty points bucket. | `ACTIVE` or `INACTIVE` |\n| expires_at | Timestamp in ISO 8601 format representing the date when the points expire. | 2022-06-30 |\n| points | Number of points. | 1000 |",
                "items": {
                  "type": "string"
                }
              },
              "filters": {
                "description": "Data filters used to narrow the data records to be returned in the export.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/8_req_filter_campaign_id"
                  },
                  {
                    "$ref": "#/components/schemas/8_req_filter_voucher_id"
                  }
                ]
              }
            }
          },
          "result": {
            "type": "object",
            "description": "Contains the URL of the CSV file.",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the CSV file location."
              }
            }
          },
          "user_id": {
            "type": "string",
            "example": "user_g24UoRO3Caxu7FCT4n5tpYEa3zUG0Fr",
            "description": " The user_id identifies the specific user who initiated the export through the Voucherify Dashboard; this `user_id` is returned when the channel value is `WEBSITE`."
          }
        }
      },
      "8_req_export_points_expirations": {
        "title": "Points Expirations Export Request Body",
        "type": "object",
        "description": "Request body schema for creating points expirations. ",
        "properties": {
          "parameters": {
            "type": "object",
            "description": "List of fields and filters that were passed in the request body to create the export.",
            "properties": {
              "order": {
                "type": "string",
                "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
                "enum": [
                  "expires_at",
                  "-expires_at"
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data that was exported. These fields define the headers in the CSV file. \n\n The array can be a combintation of any of the following available fields:  \n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Loyalty points bucket ID. | lopb_Wl1o3EjJIHSNjvO5BDLy4z1n |\n| campaign_id | Campaign ID of the parent loyalty campaign. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\n| voucher_id | Voucher ID of the parent loyalty card. | v_YLn0WVWXSXbUfDvxgrgUbtfJ3SQIY655 |\n| status | Status of the loyalty points bucket. | `ACTIVE` or `INACTIVE` |\n| expires_at | Timestamp in ISO 8601 format representing the date when the points expire. | 2022-06-30 |\n| points | Number of points. | 1000 |",
                "items": {
                  "type": "string"
                }
              },
              "filters": {
                "description": "Data filters used to narrow the data records to be returned in the export.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/8_req_filter_campaign_id"
                  },
                  {
                    "$ref": "#/components/schemas/8_req_filter_voucher_id"
                  }
                ]
              }
            }
          }
        }
      },
      "8_req_filter_campaign_id": {
        "title": "Filter by campaign ID",
        "type": "object",
        "description": "Filter conditions set on the campaign ID.",
        "properties": {
          "campaign_id": {
            "$ref": "#/components/schemas/8_req_filter_conditions"
          },
          "junction": {
            "type": "string",
            "description": "Filter by conditions set on the `junction` parameter indicating how the `conditions` should be accounted for in the query. An `and` is an all-inclusive logical operator, meaning the `and` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an `or` operator displays a record if **ANY** of the conditions separated by OR is TRUE.",
            "enum": [
              "AND",
              "OR"
            ]
          }
        }
      },
      "8_req_filter_voucher_id": {
        "title": "Filter by voucher ID",
        "type": "object",
        "description": "Filter conditions set on the voucher ID.",
        "properties": {
          "voucher_id": {
            "$ref": "#/components/schemas/8_req_filter_conditions"
          },
          "junction": {
            "type": "string",
            "description": "Filter by conditions set on the `junction` parameter indicating how the `conditions` should be accounted for in the query. An `and` is an all-inclusive logical operator, meaning the `and` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an `or` operator displays a record if **ANY** of the conditions separated by OR is TRUE.",
            "enum": [
              "AND",
              "OR"
            ]
          }
        }
      },
      "8_req_filter_conditions": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "conditions": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "$in": {
                "type": "array",
                "description": "Array of resource values that should be included in the results.",
                "items": {
                  "type": "string"
                }
              },
              "$not_in": {
                "type": "array",
                "description": "Array of resource values that should be included in the results.",
                "items": {
                  "type": "string"
                }
              },
              "$is": {
                "type": "string",
                "description": "Specify the exact resource value."
              },
              "$is_not": {
                "type": "string",
                "description": "Results should omit this value."
              }
            }
          }
        }
      },
      "8_res_list_reward_assignments": {
        "title": "List Reward Assignments",
        "type": "object",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/rewards`.",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about loyalty reward assignments in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of reward assignment objects.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "Contains array of reward assignment objects.",
            "items": {
              "$ref": "#/components/schemas/4_obj_reward_assignment_object"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of reward assignment objects."
          }
        }
      },
      "8_req_create_reward_assignment": {
        "title": "Create Reward Assignment Request Body",
        "type": "array",
        "description": "Request body schema for **POST** `/loyalties/{campaignId}/rewards`.",
        "items": {
          "type": "object",
          "properties": {
            "reward": {
              "type": "string",
              "example": "rew_2yGflHThU2yJwFECEFKrXBI2",
              "description": "Unique reward ID."
            },
            "parameters": {
              "type": "object",
              "description": "An object that defines the price of the reward in loyalty points.",
              "properties": {
                "loyalty": {
                  "type": "object",
                  "description": "Stores the points parameter.",
                  "properties": {
                    "points": {
                      "type": "integer",
                      "description": "Defines how many points are required to obtain the reward."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "8_res_create_reward_assignment": {
        "title": "Create Reward Assignment Response Body",
        "type": "array",
        "description": "Response body schema for **POST** `/loyalties/{campaignId}/rewards`.",
        "items": {
          "$ref": "#/components/schemas/4_obj_reward_assignment_object"
        }
      },
      "LoyaltiesTiersRewardsListResponseBody": {
        "title": "Loyalties Tiers Rewards List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about loyalty tier rewards in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of loyalty tier reward objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty tier reward objects.",
            "items": {
              "$ref": "#/components/schemas/LoyaltiesLoyaltyTierReward"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier reward objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "8_res_list_members": {
        "title": "List Members",
        "type": "object",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/members`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about members in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "vouchers",
            "description": "Identifies the name of the attribute that contains the array of voucher objects."
          },
          "vouchers": {
            "type": "array",
            "description": "Contains array of voucher objects representing loyalty cards, in other words, loyalty program members.",
            "items": {
              "$ref": "#/components/schemas/8_obj_loyalty_card_object_non_expanded_categories"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of voucher objects."
          }
        }
      },
      "8_req_add_member": {
        "title": "Add Member Request Body",
        "type": "object",
        "description": "Request body schema for assigning a loyalty card to a customer using **POST** `/loyalties/{campaignId}/members`.",
        "properties": {
          "voucher": {
            "type": "string",
            "description": "Specify the loyalty card code that you would like to publish to a customer."
          },
          "channel": {
            "type": "string",
            "description": "Specify the distribution channel."
          },
          "customer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_req_customer_id_string"
              },
              {
                "$ref": "#/components/schemas/8_req_customer_id"
              },
              {
                "$ref": "#/components/schemas/8_req_customer_source_id"
              },
              {
                "$ref": "#/components/schemas/9_req_create_customer"
              }
            ],
            "description": "Customer's information."
          },
          "metadata": {
            "type": "string",
            "description": "The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format."
          }
        }
      },
      "8_req_customer_id": {
        "title": "Customer ID",
        "description": "You can pass the unique customer ID that was assigned by Voucherify.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of an existing customer."
          }
        }
      },
      "8_req_customer_id_string": {
        "title": "Customer ID",
        "description": "You can pass the unique customer ID that was assigned by Voucherify or the source ID.",
        "type": "string"
      },
      "8_req_customer_source_id": {
        "title": "Customer Source ID",
        "description": "You can send the source ID that you used to create the customer in Voucherify.",
        "type": "object",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "A unique identifier of a customer. It can be a customer ID or email from a CRM system, database or 3rd-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored."
          }
        }
      },
      "8_res_get_member_activities": {
        "title": "Get Member Activities",
        "type": "object",
        "description": "Response body schema for retrieving member activities.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about member activities in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "activities",
            "description": "Identifies the name of the attribute that contains the array of event objects."
          },
          "activities": {
            "type": "array",
            "description": "Contains array of event objects.",
            "items": {}
          },
          "total": {
            "type": "integer",
            "description": "Total number of event objects."
          }
        }
      },
      "9_req_create_customer": {
        "type": "object",
        "title": "Customer",
        "description": "This is an object containing information about the customer.",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service. \n\nPlease note that if you would like your data to sync based on the `source_id` of the customer, you need to define the `source_id` upfront. You will not be able to change or update the `source_id` later on."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone number.  This parameter is mandatory when you try to send out codes to customers via an SMS channel."
          },
          "address": {
            "type": "object",
            "description": "Customer's address.",
            "properties": {
              "city": {
                "type": "string",
                "description": "City"
              },
              "state": {
                "type": "string",
                "description": "State"
              },
              "line_1": {
                "type": "string",
                "description": "First line of address."
              },
              "line_2": {
                "type": "string",
                "description": "Second line of address."
              },
              "country": {
                "type": "string",
                "description": "Country."
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code."
              }
            }
          },
          "birthdate": {
            "type": "string",
            "description": "Customer's birthdate; format `YYYY-MM-DD`.",
            "format": "date"
          },
          "birthday": {
            "type": "string",
            "description": "Customer's birthdate; format `YYYY-MM-DD`.",
            "format": "date"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments. "
          }
        }
      },
      "CustomersListResponseBody": {
        "title": "Customers List Response Body",
        "description": "Response body schema for **GET** `/customers`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about customers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "customers",
            "description": "Identifies the name of the attribute that contains the array of customer objects."
          },
          "customers": {
            "type": "array",
            "description": "Contains array of customer objects.",
            "items": {
              "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of customers."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the `has_more` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different end date filter) to get more records returned in the results."
          }
        },
        "required": [
          "object",
          "data_ref",
          "customers",
          "total"
        ]
      },
      "CustomersGetResponseBody": {
        "title": "Customers Get Response Body",
        "description": "Response body schema for **GET** `/customers/{customerId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        ]
      },
      "ReferralProgram": {
        "title": "Referral Program",
        "description": "Defines the referee reward and the way a referral is triggered. Context: `REFERRAL_PROGRAM`.",
        "type": "object",
        "properties": {
          "conversion_event_type": {
            "type": "string",
            "enum": [
              "redemption",
              "custom_event"
            ],
            "description": "Define how a referral is triggered."
          },
          "custom_event": {
            "type": "object",
            "description": "Contains details about the custom event.",
            "properties": {
              "id": {
                "type": "string",
                "example": "ms_Ll9enAm2BCN0M1s4VxWobLFM",
                "description": "Unique custom event ID."
              },
              "name": {
                "type": "string",
                "description": "Custom event name."
              }
            }
          },
          "referee_reward": {
            "type": "object",
            "description": "Defines the referee reward.",
            "properties": {
              "related_object_parent": {
                "type": "object",
                "description": "Details of the resource from which the reward originates.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "camp_kdxp3vf1clQ9CFs1jpqv3tZe",
                    "description": "Unique ID of the reward source."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the reward source."
                  },
                  "object": {
                    "type": "string",
                    "default": "CAMPAIGN",
                    "enum": [
                      "CAMPAIGN"
                    ],
                    "description": "Type of resource represented by the source of the reward."
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "DISCOUNT_VOUCHER",
                  "LOYALTY_CARD",
                  "GIFT_VOUCHER",
                  "LUCKY_DRAW_CODE"
                ],
                "description": "Type of reward."
              },
              "amount": {
                "type": "string",
                "description": "Define the number of `points` to add to a loyalty card or `credits` to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              }
            }
          }
        }
      },
      "SimpleVoucher": {
        "type": "object",
        "title": "Simple Voucher",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier that represents the voucher assigned by Voucherify."
          },
          "code": {
            "type": "string",
            "description": "Voucher code."
          },
          "gift": {
            "description": "Gift object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/Gift"
              }
            ]
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "loyalty_card": {
            "description": "Defines the loyalty card details.",
            "type": "object"
          },
          "type": {
            "type": "string",
            "description": "Type of the object.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          },
          "campaign": {
            "description": "Campaign object",
            "type": "object"
          },
          "campaign_id": {
            "type": "string",
            "description": "Campaign unique ID."
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "holder_id": {
            "type": "string",
            "example": "cust_eWgXlBBiY6THFRJwX45Iakv4",
            "description": "Unique customer ID of campaign owner."
          },
          "referrer_id": {
            "type": "string",
            "description": "Unique referrer ID.",
            "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the order was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "voucher",
            "enum": [
              "voucher"
            ]
          }
        },
        "required": [
          "valid",
          "code",
          "applicable_to",
          "inapplicable_to",
          "metadata",
          "tracking_id"
        ]
      },
      "SimpleCampaign": {
        "title": "Simple Campaign",
        "type": "object",
        "description": "Request body schema for creating a discount voucher campaign using **POST** `/campaigns`.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Campaign name."
          },
          "name": {
            "type": "string",
            "description": "Campaign name."
          },
          "campaign_type": {
            "type": "string",
            "description": "Type of campaign."
          },
          "type": {
            "type": "string",
            "description": "Defines whether the campaign can be updated with new vouchers after campaign creation.\n- `AUTO_UPDATE`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method).\n-  `STATIC`: vouchers need to be manually published.",
            "enum": [
              "AUTO_UPDATE",
              "STATIC"
            ]
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "voucher": {
            "type": "object"
          },
          "lucky_draw": {
            "type": "object"
          },
          "referral_program": {
            "$ref": "#/components/schemas/ReferralProgram"
          },
          "auto_join": {
            "type": "boolean",
            "description": "Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled."
          },
          "join_once": {
            "type": "boolean",
            "description": "If this value is set to `true`, customers will be able to join the campaign only once."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether campaign is active"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the campaign was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "campaign",
            "enum": [
              "campaign"
            ],
            "description": "The type of object represented by JSON. This object stores information about the campaign."
          }
        }
      },
      "SimpleConsent": {
        "title": "Simple Consent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "default": "consent",
            "enum": [
              "consent"
            ]
          }
        },
        "required": [
          "object"
        ]
      },
      "CustomersActivitiesListResponseBody": {
        "type": "object",
        "title": "Customers Activities List Response Body",
        "description": "Request body schema for **GET** `/customers/{customerId}/activities`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about customer activities in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of customer activity objects."
          },
          "data": {
            "type": "array",
            "description": "Array of customer activity objects.",
            "items": {
              "$ref": "#/components/schemas/CustomerActivity"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of customer activities."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CustomerActivity": {
        "title": "Customer Activity",
        "type": "object",
        "description": "This is an object representing customer activity.  \n\nThis is a general object which presents moments from customers' activity. There are all types of different events that customers perform during their journey once they participate in Promotions. Events describe moments when customers redeem coupons and earn points or rewards. The list of all types of activities is listed below.\n\nThe details describing the activity are collected in a property named `data`. In this object, software integrators will find all further information explaining the event context.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique event ID, assigned by Voucherify.",
            "example": "evcus_0c150c51730c6b60b1"
          },
          "type": {
            "type": "string",
            "description": "Event type.",
            "enum": [
              "customer.confirmed",
              "customer.created",
              "customer.updated",
              "customer.deleted",
              "customer.referred",
              "customer.custom_event",
              "customer.segment.entered",
              "customer.segment.left",
              "customer.sms.sent",
              "customer.sms.recovered",
              "customer.sms.failed",
              "customer.email.sent",
              "customer.email.recovered",
              "customer.email.failed",
              "customer.activecampaign.sent",
              "customer.activecampaign.recovered",
              "customer.activecampaign.failed",
              "customer.braze.sent",
              "customer.braze.recovered",
              "customer.braze.failed",
              "customer.mailchimp.sent",
              "customer.mailchimp.recovered",
              "customer.mailchimp.failed",
              "customer.intercom.sent",
              "customer.intercom.recovered",
              "customer.intercom.failed",
              "customer.shopify.sent",
              "customer.shopify.recovered",
              "customer.shopify.failed",
              "customer.klaviyo.sent",
              "customer.klaviyo.recovered",
              "customer.klaviyo.failed",
              "customer.batch.sent",
              "customer.batch.recovered",
              "customer.batch.failed",
              "customer.rewarded",
              "customer.rewarded.loyalty_points",
              "customer.voucher.gift.balance_added",
              "customer.voucher.loyalty_card.points_added",
              "customer.voucher.loyalty_card.points_transferred",
              "customer.voucher.loyalty_card.points_expired",
              "customer.voucher.deleted",
              "customer.publication.succeeded",
              "customer.publication.failed",
              "customer.validation.succeeded",
              "customer.validation.failed",
              "customer.redemption.failed",
              "customer.redemption.succeeded",
              "customer.redemption.rollback.failed",
              "customer.redemption.rollback.succeeded",
              "customer.consents.given",
              "customer.consents.revoked",
              "customer.order.canceled",
              "customer.order.created",
              "customer.order.fulfilled",
              "customer.order.paid",
              "customer.order.processing",
              "customer.order.updated",
              "customer.reward_redemptions.created",
              "customer.reward_redemptions.pending",
              "customer.reward_redemptions.completed",
              "customer.reward_redemptions.rolledback",
              "customer.loyalty.updated",
              "customer.loyalty.tier.upgraded",
              "customer.loyalty.tier.downgraded",
              "customer.loyalty.tier.prolonged",
              "customer.loyalty.tier.expiration.changed",
              "customer.loyalty.tier.joined",
              "customer.loyalty.tier.left"
            ]
          },
          "data": {
            "type": "array",
            "description": "Contains details about the event. The objects that are returned in the data attribute differ based on the context of the event type.",
            "items": {
              "$ref": "#/components/schemas/CustomerActivityData"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the customer activity occurred in ISO 8601 format.",
            "example": "2022-08-30T09:14:07.660Z",
            "format": "date-time"
          }
        }
      },
      "CustomerActivityData": {
        "title": "Customer Activity Data",
        "description": "Event data object schema.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConfirmed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerDeleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerReferred"
          },
          {
            "$ref": "#/components/schemas/EventCustomerCustomEvent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSegmentEntered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSegmentLeft"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerSmsFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerEmailFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerActiveCampaignFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBrazeFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerMailchimpFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerIntercomFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifySent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifyRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerShopifyFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerKlaviyoFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchSent"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchRecovered"
          },
          {
            "$ref": "#/components/schemas/EventCustomerBatchFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewarded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardedLoyaltyPoints"
          },
          {
            "$ref": "#/components/schemas/EventCustomerGiftVoucherBalanceAdded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyCardPointsAdded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyCardPointsTransferred"
          },
          {
            "$ref": "#/components/schemas/EventCustomerVouchersLoyaltyPointsExpired"
          },
          {
            "$ref": "#/components/schemas/EventCustomerVoucherDeleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerPublicationSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerPublicationFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerValidationSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerValidationFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionRollbackSucceeded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRedemptionRollbackFailed"
          },
          {
            "$ref": "#/components/schemas/EventCustomerConsentsGiven"
          },
          {
            "$ref": "#/components/schemas/EventCustomerConsentsRevoked"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderCanceled"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderFulfilled"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderPaid"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderProcessing"
          },
          {
            "$ref": "#/components/schemas/EventCustomerOrderUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsCreated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsPending"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsCompleted"
          },
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptionsRolledBack"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyUpdated"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierUpgraded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierDowngraded"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierProlonged"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierExpirationChanged"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierJoined"
          },
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierLeft"
          }
        ]
      },
      "EventCustomerSent": {
        "title": "Event Customer Sent",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "sent_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution was sent in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "sent_at"
        ]
      },
      "EventCustomerRecovered": {
        "title": "Event Customer Recovered",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "recovered_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution was recovered in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "recovered_at"
        ]
      },
      "EventCustomerFailed": {
        "title": "Event Customer Failed",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "distribution": {
            "type": "object"
          },
          "failed_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the distribution failed in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "failed_at"
        ]
      },
      "EventCustomerConfirmed": {
        "title": "Event Customer Confirmed",
        "description": "Event data object schema for `customer.confirmed`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "unconfirmed_customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "ucust_1qa70mVfYkl11Ab0ZxDPdWNa"
              }
            }
          }
        }
      },
      "EventCustomerCreated": {
        "title": "Event Customer Created",
        "description": "Event data object schema for `customer.created`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerUpdated": {
        "title": "Event Customer Updated",
        "description": "Event data object schema for `customer.updated`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerDeleted": {
        "title": "Event Customer Deleted",
        "description": "Event data object schema for `customer.deleted`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        }
      },
      "EventCustomerReferred": {
        "title": "Event Customer Referred",
        "description": "Event data object schema for `customer.referred`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "referrer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "custom_event": {
            "$ref": "#/components/schemas/CustomEvent"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          }
        },
        "required": [
          "referrer",
          "campaign",
          "voucher",
          "custom_event"
        ]
      },
      "EventCustomerCustomEvent": {
        "title": "Event Customer Custom Event",
        "description": "Event data object schema for `customer.custom_event`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          }
        },
        "additionalProperties": true,
        "required": [
          "customer"
        ]
      },
      "EventCustomerSegmentEntered": {
        "title": "Event Customer Segment Entered",
        "description": "Event data object schema for `customer.segment.entered`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "segment": {
            "$ref": "#/components/schemas/SimpleSegment"
          }
        },
        "required": [
          "customer",
          "segment"
        ]
      },
      "EventCustomerSegmentLeft": {
        "title": "Event Customer Segment Left",
        "description": "Event data object schema for `customer.segment.left`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerWithSummaryLoyaltyReferrals"
          },
          "segment": {
            "$ref": "#/components/schemas/SimpleSegment"
          }
        },
        "required": [
          "customer",
          "segment"
        ]
      },
      "EventCustomerSmsSent": {
        "title": "Event Customer SMS Sent",
        "description": "Event data object schema for `customer.sms.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerSmsRecovered": {
        "title": "Event Customer SMS Recovered",
        "description": "Event data object schema for `customer.sms.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerSmsFailed": {
        "title": "Event Customer SMS Failed",
        "description": "Event data object schema for `customer.sms.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerEmailSent": {
        "title": "Event Customer Email Sent",
        "description": "Event data object schema for `customer.email.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerEmailRecovered": {
        "title": "Event Customer Email Recovered",
        "description": "Event data object schema for `customer.email.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerEmailFailed": {
        "title": "Event Customer Email Failed",
        "description": "Event data object schema for `customer.email.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerActiveCampaignSent": {
        "title": "Event Customer ActiveCampaign Sent",
        "description": "Event data object schema for `customer.activecampaign.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerActiveCampaignRecovered": {
        "title": "Event Customer ActiveCampaign Recovered",
        "description": "Event data object schema for `customer.activecampaign.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerActiveCampaignFailed": {
        "title": "Event Customer ActiveCampaign Failed",
        "description": "Event data object schema for `customer.activecampaign.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerBrazeSent": {
        "title": "Event Customer Braze Sent",
        "description": "Event data object schema for `customer.braze.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerBrazeRecovered": {
        "title": "Event Customer Braze Recovered",
        "description": "Event data object schema for `customer.braze.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerBrazeFailed": {
        "title": "Event Customer Braze Failed",
        "description": "Event data object schema for `customer.braze.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerMailchimpSent": {
        "title": "Event Customer Mailchimp Sent",
        "description": "Event data object schema for `customer.mailchimp.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerMailchimpRecovered": {
        "title": "Event Customer Mailchimp Recovered",
        "description": "Event data object schema for `customer.mailchimp.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerMailchimpFailed": {
        "title": "Event Customer Mailchimp Failed",
        "description": "Event data object schema for `customer.mailchimp.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerIntercomSent": {
        "title": "Event Customer Intercom Sent",
        "description": "Event data object schema for `customer.intercom.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerIntercomRecovered": {
        "title": "Event Customer Intercom Recovered",
        "description": "Event data object schema for `customer.intercom.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerIntercomFailed": {
        "title": "Event Customer Intercom Failed",
        "description": "Event data object schema for `customer.intercom.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerShopifySent": {
        "title": "Event Customer Shopify Sent",
        "description": "Event data object schema for `customer.shopify.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerShopifyRecovered": {
        "title": "Event Customer Shopify Recovered",
        "description": "Event data object schema for `customer.shopify.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerShopifyFailed": {
        "title": "Event Customer Shopify Failed",
        "description": "Event data object schema for `customer.shopify.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerKlaviyoSent": {
        "title": "Event Customer Klaviyo Sent",
        "description": "Event data object schema for `customer.klaviyo.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerKlaviyoRecovered": {
        "title": "Event Customer Klaviyo Recovered",
        "description": "Event data object schema for `customer.klaviyo.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerKlaviyoFailed": {
        "title": "Event Customer Klaviyo Failed",
        "description": "Event data object schema for `customer.klaviyo.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerBatchSent": {
        "title": "Event Customer Batch Sent",
        "description": "Event data object schema for `customer.batch.sent`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerSent"
          }
        ]
      },
      "EventCustomerBatchRecovered": {
        "title": "Event Customer Batch Recovered",
        "description": "Event data object schema for `customer.batch.recovered`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRecovered"
          }
        ]
      },
      "EventCustomerBatchFailed": {
        "title": "Event Customer Batch Failed",
        "description": "Event data object schema for `customer.batch.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerFailed"
          }
        ]
      },
      "EventCustomerRewarded": {
        "title": "Event Customer Rewarded",
        "description": "Event data object schema for `customer.rewarded`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "referral_tier": {
            "$ref": "#/components/schemas/SimpleReferralTier"
          },
          "balance": {
            "type": "integer"
          },
          "custom_event": {
            "$ref": "#/components/schemas/CustomEvent"
          },
          "customer_event": {
            "type": "object"
          }
        }
      },
      "EventCustomerRewardedLoyaltyPoints": {
        "title": "Event Customer Rewarded Loyalty Points",
        "description": "Event data object schema for `customer.rewarded.loyalty_points`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "loyalty_tier": {
            "$ref": "#/components/schemas/LoyaltyTier"
          },
          "earning_rule": {
            "$ref": "#/components/schemas/EarningRule"
          },
          "balance": {
            "type": "integer"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "event": {
            "type": "object"
          }
        }
      },
      "EventCustomerGiftVoucherBalanceAdded": {
        "title": "Event Customer Gift Voucher Balance Added",
        "description": "Event data object schema for `customer.voucher.gift.balance_added`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerLoyaltyCardPointsAdded": {
        "title": "Event Customer Loyalty Card Points Added",
        "description": "Event data object schema for `customer.voucher.loyalty_card.points_added`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerLoyaltyCardPointsTransferred": {
        "title": "Event Customer Loyalty Card Points Transferred",
        "description": "Event data object schema for `customer.voucher.loyalty_card.points_transferred`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "source_voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "destination_voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "balance": {
            "type": "integer"
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerVouchersLoyaltyPointsExpired": {
        "title": "Event Customer Loyalty Card Points Expired",
        "description": "Event data object schema for `customer.voucher.loyalty_card.points_expired`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "points": {
            "type": "integer"
          },
          "buckets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoucherTransaction"
            }
          },
          "transaction": {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        }
      },
      "EventCustomerVoucherDeleted": {
        "title": "Event Customer Voucher Deleted",
        "description": "Event data object schema for `customer.voucher.deleted`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          }
        }
      },
      "EventCustomerPublicationSucceeded": {
        "title": "Event Customer Publication Succeeded",
        "description": "Event data object schema for `customer.publication.succeeded`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "publication": {
            "type": "object"
          }
        }
      },
      "EventCustomerPublicationFailed": {
        "title": "Event Customer Publication Failed",
        "description": "Event data object schema for `customer.publication.failed`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "publication": {
            "type": "object"
          }
        }
      },
      "EventCustomerValidationSucceeded": {
        "title": "Event Customer Validation Succeeded",
        "description": "Event data object schema for `customer.validation.succeeded`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "validation": {
            "$ref": "#/components/schemas/ValidationEntity"
          }
        }
      },
      "EventCustomerValidationFailed": {
        "title": "Event Customer Validation Failed",
        "description": "Event data object schema for `customer.validation.failed`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "validation": {
            "$ref": "#/components/schemas/ValidationEntity"
          }
        }
      },
      "EventCustomerRedemption": {
        "title": "Event Customer Redemption",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "order": {
            "$ref": "#/components/schemas/SimpleOrder"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "promotion_tier": {
            "$ref": "#/components/schemas/SimplePromotionTier"
          },
          "redemption": {
            "$ref": "#/components/schemas/SimpleRedemption"
          }
        }
      },
      "EventCustomerRedemptionSucceeded": {
        "title": "Event Customer Redemption Succeeded",
        "description": "Event data object schema for `customer.redemption.succeeded`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          }
        ]
      },
      "EventCustomerRedemptionFailed": {
        "title": "Event Customer Redemption Failed",
        "description": "Event data object schema for `customer.redemption.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          }
        ]
      },
      "EventCustomerRedemptionRollbackSucceeded": {
        "title": "Event Customer Redemption Rollback Succeeded",
        "description": "Event data object schema for `customer.redemption.rollback.succeeded`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          },
          {
            "type": "object",
            "properties": {
              "redemption_rollback": {
                "$ref": "#/components/schemas/SimpleRedemption"
              }
            }
          }
        ]
      },
      "EventCustomerRedemptionRollbackFailed": {
        "title": "Event Customer Redemption Rollback Failed",
        "description": "Event data object schema for `customer.redemption.rollback.failed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRedemption"
          },
          {
            "type": "object",
            "properties": {
              "redemption_rollback": {
                "$ref": "#/components/schemas/SimpleRedemption"
              }
            }
          }
        ]
      },
      "EventCustomerConsents": {
        "title": "Event Customer Consents",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "consents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleConsent"
            }
          }
        }
      },
      "EventCustomerConsentsGiven": {
        "title": "Event Customer Consents Given",
        "description": "Event data object schema for `customer.consents.given`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConsents"
          }
        ]
      },
      "EventCustomerConsentsRevoked": {
        "title": "Event Customer Consents Revoked",
        "description": "Event data object schema for `customer.consents.revoked`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerConsents"
          }
        ]
      },
      "EventCustomerOrder": {
        "title": "Event Customer Order",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "referrer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "redemption": {
            "$ref": "#/components/schemas/RedemptionInternal"
          }
        }
      },
      "EventCustomerOrderCanceled": {
        "title": "Event Customer Order Canceled",
        "description": "Event data object schema for `customer.order.canceled`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderCreated": {
        "title": "Event Customer Order Created",
        "description": "Event data object schema for `customer.order.created`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderFulfilled": {
        "title": "Event Customer Order Fulfilled",
        "description": "Event data object schema for `customer.order.fulfilled`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderPaid": {
        "title": "Event Customer Order Paid",
        "description": "Event data object schema for `customer.order.paid`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderProcessing": {
        "title": "Event Customer Order Processing",
        "description": "Event data object schema for `customer.order.processing`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerOrderUpdated": {
        "title": "Event Customer Order Updated",
        "description": "Event data object schema for `customer.order.updated`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerOrder"
          }
        ]
      },
      "EventCustomerRewardRedemptions": {
        "title": "Event Customer Reward Redemptions",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "holder": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "voucher": {
            "$ref": "#/components/schemas/SimpleVoucher"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "reward_redemption": {
            "type": "object"
          },
          "reward": {
            "$ref": "#/components/schemas/SimpleRedemptionRewardResult"
          },
          "reward_assignment": {
            "$ref": "#/components/schemas/RewardAssignment"
          },
          "source": {
            "type": "string"
          },
          "balance": {
            "type": "integer"
          }
        }
      },
      "EventCustomerRewardRedemptionsCreated": {
        "title": "Event Customer Reward Redemptions Created",
        "description": "Event data object schema for `customer.reward_redemptions.created`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsPending": {
        "title": "Event Customer Reward Redemptions Pending",
        "description": "Event data object schema for `customer.reward_redemptions.pending`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsCompleted": {
        "title": "Event Customer Reward Redemptions Completed",
        "description": "Event data object schema for `customer.reward_redemptions.completed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerRewardRedemptionsRolledBack": {
        "title": "Event Customer Reward Redemptions Rolled Back",
        "description": "Event data object schema for `customer.reward_redemptions.rolledback`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerRewardRedemptions"
          }
        ]
      },
      "EventCustomerLoyaltyUpdated": {
        "title": "Event Customer Loyalty Updated",
        "description": "Event data object schema for `customer.loyalty.updated`.",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          },
          "loyalty": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-25T13:32:08.734Z",
            "format": "date-time"
          }
        },
        "required": [
          "created_at"
        ]
      },
      "EventCustomerLoyaltyTierBase": {
        "title": "Event Customer Loyalty Tier Base",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "campaign": {
            "$ref": "#/components/schemas/SimpleCampaign"
          }
        },
        "required": [
          "created_at",
          "loyalty_tier_to"
        ]
      },
      "EventCustomerLoyaltyTierUpgraded": {
        "title": "Event Customer Loyalty Tier Upgraded",
        "description": "Event data object schema for `customer.loyalty.tier.upgraded`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Upgraded",
            "type": "object",
            "properties": {
              "loyalty_tier_from": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "loyalty_tier_to": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier_to"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierDowngraded": {
        "title": "Event Customer Loyalty Tier Downgraded",
        "description": "Event data object schema for `customer.loyalty.tier.downgraded`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Downgraded",
            "type": "object",
            "properties": {
              "loyalty_tier_from": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "loyalty_tier_to": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier_from"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierProlonged": {
        "title": "Event Customer Loyalty Tier Prolonged",
        "description": "Event data object schema for `customer.loyalty.tier.prolonged`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Prolonged",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierExpirationChanged": {
        "title": "Event Customer Loyalty Tier Expiration Changed",
        "description": "Event data object schema for `customer.loyalty.tier.expiration.changed`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Expiration Changed",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              },
              "expiration_date": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier",
              "expiration_date"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierJoined": {
        "title": "Event Customer Loyalty Tier Joined",
        "description": "Event data object schema for `customer.loyalty.tier.joined`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Joined",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "EventCustomerLoyaltyTierLeft": {
        "title": "Event Customer Loyalty Tier Left",
        "description": "Event data object schema for `customer.loyalty.tier.left`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EventCustomerLoyaltyTierBase"
          },
          {
            "title": "Loyalty Tier Left",
            "type": "object",
            "properties": {
              "loyalty_tier": {
                "$ref": "#/components/schemas/LoyaltyTier"
              },
              "created_at": {
                "type": "string",
                "example": "2022-02-25T13:32:08.734Z",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "loyalty_tier"
            ]
          }
        ]
      },
      "CustomersMetadataUpdateInBulkRequestBody": {
        "type": "object",
        "title": "Customers Metadata Update In Bulk Request Body",
        "description": "Request body schema for **POST** `/customers/metadata/async`.",
        "properties": {
          "source_ids": {
            "type": "array",
            "description": "An array of customer `source_id`'s.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata key value pairs to be updated. A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments."
          }
        },
        "required": [
          "source_ids",
          "metadata"
        ]
      },
      "CustomersUpdateInBulkRequestBody": {
        "title": "Customers Update In Bulk Request Body",
        "description": "Request body schema for **POST** `/customers/bulk/async`.",
        "allOf": [
          {
            "title": "CustomerSourceId",
            "type": "object",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "Unique customer source ID."
              }
            },
            "required": [
              "source_id"
            ]
          },
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ]
      },
      "OrdersUpdateResponseBody": {
        "type": "object",
        "title": "Orders Update Response Body",
        "description": "Response body schema for **PUT** `/orders/{orderId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculated"
          }
        ]
      },
      "OrdersCreateResponseBody": {
        "type": "object",
        "title": "Orders Create Response Body",
        "description": "Response body schema for **POST** `/orders`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderCalculated"
          }
        ]
      },
      "10_obj_order_object_unstacked_redemptions": {
        "type": "object",
        "title": "Unstacked Redemption",
        "description": "Redemption object representing a single redemption.",
        "properties": {
          "redemption_ID": {
            "type": "object",
            "description": "The property name is the unique redemption ID; i.e. `r_0ba186c4824e4881e1`. This object contains information about the redemption of an incentive.",
            "properties": {
              "date": {
                "type": "string",
                "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
                "example": "2022-09-02T17:06:56.649Z",
                "format": "date-time"
              },
              "related_object_type": {
                "type": "string",
                "description": "The source of the incentive.",
                "enum": [
                  "voucher",
                  "promotion_tier"
                ]
              },
              "related_object_id": {
                "type": "string",
                "description": "Unique ID of the related object that defines the incentive."
              },
              "related_object_parent_id": {
                "type": "string",
                "description": "Represent's the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign. In case of a promotion tier, this represents the campaign ID of the promotion tier's parent campaign."
              }
            }
          }
        }
      },
      "10_obj_order_object_stacked_redemptions": {
        "type": "object",
        "title": "Stacked Redemption",
        "description": "Redemption object representing a stacked redemption.",
        "properties": {
          "redemption_ID": {
            "type": "object",
            "description": "The property name is the unique parent redemption ID; i.e. `r_0ba186c4824e4881e1`. This object contains information about the redemption of multiple incentives.",
            "properties": {
              "date": {
                "type": "string",
                "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
                "example": "2022-09-02T17:06:56.649Z",
                "format": "date-time"
              },
              "related_object_type": {
                "type": "string",
                "description": "The source of the incentive.",
                "default": "redemption"
              },
              "related_object_id": {
                "type": "string",
                "description": "Unique ID of the parent redemption.",
                "example": "r_0ba186c4824e4881e1"
              },
              "stacked": {
                "type": "array",
                "description": "Contains a list of unique IDs of child redemptions, which belong to the stacked incentives.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "OrdersListResponseBody": {
        "type": "object",
        "title": "Orders List Response Body",
        "description": "Response body schema representing **GET** `/orders`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about orders in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "orders",
            "enum": [
              "orders"
            ],
            "description": "Identifies the name of the attribute that contains the array of order objects."
          },
          "orders": {
            "type": "array",
            "description": "Contains array of order objects.",
            "items": {
              "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of orders."
          }
        },
        "required": [
          "object",
          "data_ref",
          "orders",
          "total"
        ]
      },
      "OrdersCreateRequestBody": {
        "title": "Orders Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** `/orders`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          }
        ]
      },
      "OrdersUpdateRequestBody": {
        "type": "object",
        "title": "Orders Update Request Body",
        "description": "Request body schema for **PUT** `/orders/{orderId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderBase"
          }
        ]
      },
      "10_req_orders_customer_object": {
        "type": "object",
        "title": "Customer",
        "description": "This is an object containing information about the customer.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of an existing customer that will be linked to the order; this is an ID that has been assigned to the customer by Voucherify, i.e. `cust_LMY4ZylSdUYB1J4tzqNcl5VV`."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone number."
          },
          "address": {
            "type": "object",
            "description": "Customer's address.",
            "properties": {
              "city": {
                "type": "string",
                "description": "City"
              },
              "state": {
                "type": "string",
                "description": "State"
              },
              "line_1": {
                "type": "string",
                "description": "First line of address"
              },
              "line_2": {
                "type": "string",
                "description": "Second line of address"
              },
              "country": {
                "type": "string",
                "description": "Country"
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code"
              }
            }
          },
          "birthdate": {
            "type": "string",
            "description": "Customer's birthdate; format `YYYY-MM-DD`.",
            "format": "date"
          },
          "birthday": {
            "type": "string",
            "description": "Customer's birthdate; format `YYYY-MM-DD`.",
            "format": "date"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer."
          }
        }
      },
      "10_req_orders_referrer_object": {
        "type": "object",
        "title": "Referrer",
        "description": "This is an ojbect containing information about the referrer.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of an existing customer that will be linked to the order as the referrer; this is an ID that has been assigned to the customer by Voucherify, i.e. `cust_LMY4ZylSdUYB1J4tzqNcl5VV`."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
          },
          "name": {
            "type": "string",
            "description": "Referrer's first and last name."
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a referrer object."
          },
          "email": {
            "type": "string",
            "description": "Referrer's email address."
          },
          "phone": {
            "type": "string",
            "description": "Referrer's phone number."
          },
          "address": {
            "type": "object",
            "description": "Referrer's address.",
            "properties": {
              "city": {
                "type": "string",
                "description": "City"
              },
              "state": {
                "type": "string",
                "description": "State"
              },
              "line_1": {
                "type": "string",
                "description": "First line of address"
              },
              "line_2": {
                "type": "string",
                "description": "Second line of address"
              },
              "country": {
                "type": "string",
                "description": "Country"
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code"
              }
            }
          },
          "birthdate": {
            "type": "string",
            "description": "Referrer's birthdate; format `YYYY-MM-DD`.",
            "format": "date"
          },
          "birthday": {
            "type": "string",
            "description": "Referrer's birthdate; format `YYYY-MM-DD`.",
            "format": "date"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a referrer."
          }
        }
      },
      "10_req_orders_items_array": {
        "type": "array",
        "title": "Items Array",
        "description": "Array of items applied to the order.",
        "items": {
          "$ref": "#/components/schemas/10_req_orders_order_item"
        }
      },
      "10_req_orders_order_item": {
        "type": "object",
        "title": "Order Item",
        "description": "This object represents an order line item.",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service."
          },
          "related_object": {
            "type": "string",
            "description": "Used along with the `source_id` property, can be set to either `sku` or `product`."
          },
          "product_id": {
            "type": "string",
            "description": "A unique product ID assigned by Voucherify.",
            "example": "prod_0a7e62db1fca8322a2"
          },
          "sku_id": {
            "type": "string",
            "description": "A unique SKU ID assigned by Voucherify.",
            "example": "sku_0a41e31c7b41c28358"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the particular item in the cart."
          },
          "price": {
            "type": "integer",
            "description": "The unit price of the item."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount of the order item (`price` * `quantity`)."
          },
          "product": {
            "$ref": "#/components/schemas/10_req_orders_order_item_product"
          },
          "sku": {
            "$ref": "#/components/schemas/10_req_orders_order_item_sku"
          }
        }
      },
      "10_req_orders_order_item_product": {
        "type": "object",
        "title": "Product",
        "description": "An object containing details of the related product.",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s product ID (if it is different than Voucherify's product ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
          },
          "name": {
            "type": "string",
            "description": "Product name."
          },
          "price": {
            "type": "integer",
            "description": "Product price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a product. It can be useful for storing additional information about the product in a structured format."
          },
          "override": {
            "type": "boolean",
            "description": "The override set to `true` is used to store the product information in the system. If product does not exist, it will be created with the use of `source_id`; if it does exist, the provided values for the `name`, `price`, and `metadata` will replace those already stored in the system."
          }
        }
      },
      "10_req_orders_order_item_sku": {
        "type": "object",
        "title": "SKU",
        "description": "An object containing details of the related SKU.",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "The merchant’s SKU ID (if it is different than Voucherify's SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce site, a database or a 3rd party service."
          },
          "sku": {
            "type": "string",
            "description": "The SKU name."
          },
          "price": {
            "type": "integer",
            "description": "SKU price. A positive integer in the smallest currency unit (e.g. 100 cents for $1.00)."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format."
          },
          "override": {
            "type": "boolean",
            "description": "The override is used to store the SKU in the system. If the SKU does not exist, it will be created with the use of `source_id`. Additionally, if the SKU does not exist, you are required to set the parent `product_id` that it belongs to. Set the parent `product_id` one level above, i.e. at the item level. If the parent product does not exist in Voucherify, i.e. does not have a unique `product_id`, then define the product object one level above, i.e. at the item level and make sure to also include the override as `true` for the product."
          }
        }
      },
      "ProductsCreateRequestBody": {
        "type": "object",
        "description": "Request schema for **POST** `/products`.",
        "title": "Products Create Request Body",
        "properties": {
          "id": {
            "type": "string",
            "example": "prod_5h0wc453_1",
            "description": "A unique identifier that represents the product and is assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "example": "productSourceID16",
            "description": "Unique product source ID."
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as `$100.00` being expressed as `10000`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: `[\"color\",\"size\",\"ranking\"]`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          }
        }
      },
      "ProductsUpdateRequestBody": {
        "type": "object",
        "description": "Request schema for **PUT** `/products`.",
        "title": "Products Update Request Body",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as `$100.00` being expressed as `10000`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: `[\"color\",\"size\",\"ranking\"]`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          }
        }
      },
      "ProductsUpdateInBulkRequestBody": {
        "type": "object",
        "description": "Request schema for **POST** `/products/bulk/async`.",
        "title": "Products Update In Bulk Request Body",
        "properties": {
          "source_id": {
            "type": "string",
            "description": "Unique product source ID from your inventory system.",
            "example": "test_prod_id_1"
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "description": "Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as `$100.00` being expressed as `10000`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: `[\"color\",\"size\",\"ranking\"]`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          }
        },
        "required": [
          "source_id"
        ]
      },
      "ProductWithoutSkus": {
        "title": "Product without Skus Object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID assigned by Voucherify.",
            "example": "prod_0b1da8105693710357"
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "example": "productSourceID16",
            "description": "Unique product source ID."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Unique user-defined product name.",
            "example": "T-shirt"
          },
          "price": {
            "type": "integer",
            "nullable": true,
            "description": "Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as `$100.00` being expressed as `10000`."
          },
          "attributes": {
            "type": "array",
            "description": "A list of product attributes whose values you can customize for given SKUs: `[\"color\",\"size\",\"ranking\"]`. Each child SKU can have a unique value for a given attribute.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.",
            "example": "https://images.com/original.jpg"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the product was created in ISO 8601 format.",
            "example": "2022-05-23T06:52:55.008Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the product was updated in ISO 8601 format.",
            "example": "2022-05-23T09:24:07.405Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about the product.",
            "default": "product",
            "enum": [
              "product"
            ]
          }
        },
        "required": [
          "id",
          "source_id",
          "name",
          "attributes",
          "metadata",
          "object",
          "price"
        ]
      },
      "Product": {
        "type": "object",
        "description": "This is an object representing a product.  \n\nThis entity should be used to map product items from your inventory management system. The aim of products is to build which reflect product-specific campaigns.",
        "title": "Product",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductWithoutSkus"
          },
          {
            "type": "object",
            "properties": {
              "skus": {
                "$ref": "#/components/schemas/SkusListForProduct"
              }
            }
          }
        ]
      },
      "SkusListForProduct": {
        "type": "object",
        "description": "Contains information about child SKUs.",
        "title": "Skus List For Product",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of SKUs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of SKUs.",
            "items": {
              "$ref": "#/components/schemas/Sku"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of SKUs in the product."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "SkusList": {
        "type": "object",
        "description": "Contains information about SKUs.",
        "title": "SKUs List",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of SKUs.",
            "default": "data"
          },
          "skus": {
            "type": "array",
            "description": "A dictionary that contains an array of SKUs.",
            "items": {
              "$ref": "#/components/schemas/Sku"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of SKUs in the product."
          }
        },
        "required": [
          "object",
          "data_ref",
          "skus",
          "total"
        ]
      },
      "SkuWithProduct": {
        "title": "SKU with parent product.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          },
          {
            "type": "object",
            "properties": {
              "product": {
                "$ref": "#/components/schemas/ProductWithoutSkus"
              }
            }
          }
        ]
      },
      "Sku": {
        "title": "SKU Object",
        "type": "object",
        "description": "This is an object representing a product SKU.",
        "properties": {
          "id": {
            "type": "string",
            "example": "sku_0b1621b319d248b79f",
            "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "example": "sku_source_id_4",
            "description": "A unique SKU identifier from your inventory system."
          },
          "product_id": {
            "type": "string",
            "example": "prod_0b15f6b9f650c16990",
            "description": "The parent product's unique ID."
          },
          "sku": {
            "type": "string",
            "nullable": true,
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "nullable": true,
            "description": "Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as `$100.00` being expressed as `10000`."
          },
          "currency": {
            "type": "string",
            "nullable": true,
            "description": "SKU price currency.",
            "example": "USD"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          },
          "created_at": {
            "type": "string",
            "example": "2022-05-17T10:36:30.187Z",
            "description": "Timestamp representing the date and time when the SKU was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "example": "2022-05-17T10:55:09.137Z",
            "description": "Timestamp representing the date and time when the SKU was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "sku",
            "description": "The type of object represented by JSON. This object stores information about the `SKU`.",
            "enum": [
              "sku"
            ]
          }
        },
        "required": [
          "id",
          "source_id",
          "product_id",
          "sku",
          "price",
          "attributes",
          "metadata",
          "image_url",
          "created_at",
          "updated_at",
          "object"
        ]
      },
      "ProductsSkusUpdateRequestBody": {
        "title": "Products Skus Update Request Body",
        "type": "object",
        "description": "Request body schema for **PUT** `/products/{productId}/skus/{skuId}`.",
        "properties": {
          "sku": {
            "type": "string",
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          },
          "currency": {
            "type": "string",
            "description": "SKU price currency."
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "ProductCollectionsProductsList": {
        "type": "object",
        "description": "Response body schema for **GET** /product-collections/{productCollectionID}/products.",
        "title": "List Products in Collection Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about products and SKUs.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of products and SKUs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of products and SKUs.",
            "items": {
              "title": "Product Collections Products List Products Item",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ProductWithoutSkus"
                },
                {
                  "$ref": "#/components/schemas/SkuWithProduct"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of products & SKUs in the product collection."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ProductCollectionsItem": {
        "title": "Product Collection Base",
        "description": "This is an object representing a product collection base. ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product collection ID."
          },
          "name": {
            "type": "string",
            "example": "All Products",
            "description": "Unique user-defined product collection name."
          },
          "type": {
            "type": "string",
            "description": "Describes whether the product collection is dynamic (products come in and leave based on set criteria) or static (manually selected products).",
            "enum": [
              "STATIC",
              "AUTO_UPDATE"
            ]
          },
          "filter": {
            "type": "object",
            "description": "Defines a set of criteria and boundary conditions for an `AUTO_UPDATE` product collection type.",
            "additionalProperties": false,
            "required": [
              "junction"
            ],
            "properties": {
              "junction": {
                "$ref": "#/components/schemas/Junction"
              },
              "id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "product_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "source_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "name": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "price": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "object": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "attributes": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "metadata": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "image_url": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "skus": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "created_at": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "updated_at": {
                "$ref": "#/components/schemas/FieldConditions"
              }
            }
          },
          "products": {
            "description": "Defines a set of products for a `STATIC` product collection type.",
            "type": "array",
            "items": {
              "title": "Product Collections Item Products Item",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "prod_0a41bcf807c5fcaaf6",
                  "description": "The product ID."
                },
                "product_id": {
                  "type": "string",
                  "description": "Product ID for SKUs."
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "sku",
                    "product"
                  ],
                  "description": "Denotes the type of object represented by the ID."
                }
              },
              "required": [
                "id",
                "object"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-09T12:51:29.898Z",
            "description": "Timestamp representing the date and time when the product collection was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about the static product collection.",
            "default": "products_collection",
            "enum": [
              "products_collection"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "created_at",
          "object"
        ]
      },
      "ProductCollectionsList": {
        "type": "object",
        "title": "List Product Collections",
        "description": "Schema representing list of product collections",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about product collections.",
            "default": "list",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the JSON property that contains the array of product collections.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "description": "A dictionary that contains an array of product collections and their details.",
            "type": "array",
            "items": {
              "title": "Product Collections List Data Item",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProductCollectionsItem"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of product collections."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRuleRules": {
        "title": "Validation Rule Rules",
        "type": "object",
        "description": "Contains all the rule definitions for the validation rule. It is a set of key value pairs representing the rules and logic between the rules. The keys are numbered consecutively beginning from `1`. The values are objects containing the rule conditions.",
        "properties": {
          "logic": {
            "type": "string",
            "example": "(1 and 2) and (3)",
            "description": "Defines the logic between the rules."
          }
        },
        "additionalProperties": {
          "type": "object",
          "description": "Contains details about the point balances left on loyalty cards and the number of referred customers in each campaign.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Voucherify specific rule name.  The list of available names is provided below.  \n\n**Name** |\n---- | -----------\n**Customer** | customer.segment<br>customer.metadata* \n**Order** |order.amount<br>order.items.count<br>order.items.price_any<br>order.items.price_each<br>order.items.metadata_any<br>order.items.metadata_each<br>order.metadata* |\n| **Campaign** | campaign.orders.amount_discounted<br>campaign.orders.amount<br>campaign.redemptions.count<br>campaign.redemptions.count.daily<br>campaign.redemptions.count.monthly<br>campaign.redemptions.customers_count<br>campaign.redemptions.customers_count.daily<br>campaign.redemptions.customers_count.monthly |\n| **Redemption** |redemption.gift.amount<br>redemption.count.daily<br>redemption.count.monthly<br>redemption.count.per_customer<br>redemption.count.per_customer.daily<br>redemption.count.per_customer.monthly<br>redemption.api_key<br>redemption.count.per_api_key<br>redemption.user.login<br>redemption.count.per_user<br>redemption.metadata*<br>redemption.reward.pay_with_points.points_used |\n| **Product** | product.id<br>product.price<br>product.quantity<br>product.discount_applicable<br>product.metadata*<br>product.metadata.aggregated_quantity<br>product.metadata.aggregated_amount<br>product.metadata.discount_applicable<br>product.metadata.match_all |\n| **SKU** | sku.id<br>sku.price<br>sku.quantity<br>sku.discount_applicable |\n| **Publication** | publication.redeemable_by_linked_customer |\n| **Custom Event** | custom_event.metadata* |\n| **Order items** | order.items.every<br>order.items.any<br>order.items.none<br>order.items.cheapest<br>order.items.most_expensive | order.items.quantity<br>order.items.aggregated_quantity<br>order.items.price<br>order.items.aggregated_amount<br>order.items.metadata* |  \n\n\n\n*Requires the `property` field to be defined."
            },
            "property": {
              "type": "string",
              "nullable": true,
              "description": "Custom name for a metadata property associated with the condition to be satisfied. **Required** if the property `name` is any of the following: \n customer_metadata<br>custom_event_metadata<br>order_items_metadata<br>order_metadata<br>product_metadata<br>redemption_metadata"
            },
            "conditions": {
              "$ref": "#/components/schemas/ValidationRuleConditions"
            },
            "rules": {
              "$ref": "#/components/schemas/ValidationRuleRules"
            },
            "error": {
              "type": "object",
              "description": "Contains the error message returned from API when validation / redemption fails to meet requirements of defined rule.",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The error message returned from API when validation / redemption fails to meet requirements of defined rule."
                }
              }
            }
          }
        }
      },
      "ValidationRuleConditions": {
        "title": "Validation Rule Conditions",
        "type": "object",
        "description": "A set of key value pairs representing the condition name and value. The list of available conditions is provided below: \n\n| **Condition (key)** | **Definition**                                                | \n|---------------------|---------------------------------------------------------------|\n| $is                 | A property is a predefined value.                             |                           \n| $is_not             | A property is not a predefined value.                         |                           \n| $in                 | A property either one value in a predefined list of values.   |                          \n| $less_than          | A property is less than a predefined value.                   |                     \n| $less_than_or_equal | A property is less than or equal to a predefined value.       | \n| $more_than          | A property is more than a predefined value.                   | \n| $more_than_or_equal | A property is more than or equal to a predefined value.       | \n| $starts_with        | A property starts with the predefined sequence of characters. | \n| $ends_with          | A property ends with the predefined sequence of characters.   | \n| $contains           | A property contains the predefined sequence of characters.    | \n| $timeframe          | &nbsp;                                                        | \n| $timeframe_absolute | &nbsp;                                                        | \n| $dow                | &nbsp;                                                        | \n| $count              | &nbsp;                                                        | \n| $count_more         | &nbsp;                                                        | \n| $count_less         | &nbsp;                                                        | \n| $from               | &nbsp;                                                        | \n",
        "properties": {
          "$is": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_not": {
            "$ref": "#/components/schemas/Any"
          },
          "$in": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_in": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_or_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_or_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$starts_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$ends_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$contains": {
            "$ref": "#/components/schemas/Any"
          },
          "$timeframe": {
            "$ref": "#/components/schemas/Any"
          },
          "$timeframe_absolute": {
            "$ref": "#/components/schemas/Any"
          },
          "$dow": {
            "$ref": "#/components/schemas/Any"
          },
          "$count": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_more": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_less": {
            "$ref": "#/components/schemas/Any"
          },
          "$from": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "ValidationRule": {
        "title": "Validation Rule",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          },
          {
            "title": "Validation Rule",
            "type": "object",
            "description": "This is an object representing a response validation rule.",
            "properties": {
              "id": {
                "type": "string",
                "example": "val_eR1c41hu0vUU",
                "description": "Unique validation rule ID."
              },
              "created_at": {
                "type": "string",
                "example": "2022-03-23T07:44:00.444Z",
                "description": "Timestamp representing the date and time when the validation rule was created in ISO 8601 format.",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "example": "2022-04-26T08:35:54.960Z",
                "description": "Timestamp representing the date and time when the validation rule was updated in ISO 8601 format.",
                "format": "date-time"
              },
              "assignments_count": {
                "description": "The number of instances the validation rule has been assigned to different types of redeemables.",
                "type": "integer"
              },
              "object": {
                "type": "string",
                "default": "validation_rules",
                "description": "The type of object represented by JSON. This object stores information about the validation rule."
              }
            },
            "required": [
              "id",
              "name",
              "rules",
              "applicable_to",
              "created_at",
              "type",
              "context_type",
              "object"
            ]
          }
        ]
      },
      "ValidationRuleBase": {
        "title": "Validation Rule Base",
        "type": "object",
        "description": "This is an object representing a request validation rule.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Custom, unique name for set of validation rules.",
            "example": "Business Validation Rule"
          },
          "rules": {
            "$ref": "#/components/schemas/ValidationRuleRules"
          },
          "error": {
            "type": "object",
            "description": "Contains the error message returned from API when validation / redemption fails to meet requirements of defined rules.",
            "properties": {
              "message": {
                "type": "string",
                "description": "The error message returned from API when validation / redemption fails to meet requirements of defined rules."
              }
            }
          },
          "applicable_to": {
            "type": "object",
            "properties": {
              "excluded": {
                "type": "array",
                "description": "Defines which items are excluded from a discount.",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTo"
                }
              },
              "included": {
                "type": "array",
                "description": "Defines which items are included in a discount.",
                "items": {
                  "$ref": "#/components/schemas/ApplicableTo"
                }
              },
              "included_all": {
                "type": "boolean",
                "description": "Indicates whether all items are included in the discount."
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "expression",
              "basic",
              "advanced",
              "complex"
            ],
            "default": "expression",
            "description": "Type of validation rule."
          },
          "context_type": {
            "type": "string",
            "default": "global",
            "enum": [
              "earning_rule.order.paid",
              "earning_rule.custom_event",
              "earning_rule.customer.segment.entered",
              "earning_rule.customer.tier.joined",
              "earning_rule.customer.tier.left",
              "earning_rule.customer.tier.upgraded",
              "earning_rule.customer.tier.downgraded",
              "earning_rule.customer.tier.prolonged",
              "campaign.discount_coupons",
              "campaign.discount_coupons.discount.apply_to_order",
              "campaign.discount_coupons.discount.apply_to_items",
              "campaign.discount_coupons.discount.apply_to_items_proportionally",
              "campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity",
              "campaign.discount_coupons.discount.apply_to_items_by_quantity",
              "campaign.discount_coupons.discount.fixed.apply_to_items",
              "campaign.discount_coupons.discount.percent.apply_to_items",
              "campaign.gift_vouchers",
              "campaign.gift_vouchers.gift.apply_to_order",
              "campaign.gift_vouchers.gift.apply_to_items",
              "campaign.referral_program",
              "campaign.referral_program.discount.apply_to_order",
              "campaign.referral_program.discount.apply_to_items",
              "campaign.referral_program.discount.apply_to_items_proportionally",
              "campaign.referral_program.discount.apply_to_items_proportionally_by_quantity",
              "campaign.referral_program.discount.apply_to_items_by_quantity",
              "campaign.referral_program.discount.fixed.apply_to_items",
              "campaign.referral_program.discount.percent.apply_to_items",
              "campaign.promotion",
              "campaign.promotion.discount.apply_to_order",
              "campaign.promotion.discount.apply_to_items",
              "campaign.promotion.discount.apply_to_items_proportionally",
              "campaign.promotion.discount.apply_to_items_proportionally_by_quantity",
              "campaign.promotion.discount.apply_to_items_by_quantity",
              "campaign.promotion.discount.fixed.apply_to_items",
              "campaign.promotion.discount.percent.apply_to_items",
              "campaign.loyalty_program",
              "campaign.lucky_draw",
              "voucher.discount_voucher",
              "voucher.discount_voucher.discount.apply_to_order",
              "voucher.discount_voucher.discount.apply_to_items",
              "voucher.discount_voucher.discount.apply_to_items_proportionally",
              "voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity",
              "voucher.discount_voucher.discount.apply_to_items_by_quantity",
              "voucher.discount_voucher.discount.fixed.apply_to_items",
              "voucher.discount_voucher.discount.percent.apply_to_items",
              "voucher.gift_voucher",
              "voucher.gift_voucher.gift.apply_to_order",
              "voucher.gift_voucher.gift.apply_to_items",
              "voucher.loyalty_card",
              "voucher.lucky_draw_code",
              "distribution.custom_event",
              "distribution.order.paid",
              "distribution.order.created",
              "distribution.order.canceled",
              "distribution.order.updated",
              "reward_assignment.pay_with_points",
              "global"
            ],
            "description": "Validation rule context type.  \n\n| **Context Type** | **Definition** |\n|:---|:---|\n| earning_rule.order.paid |  |\n| earning_rule.custom_event |  |\n| earning_rule.customer.segment.entered |  |\n| campaign.discount_coupons |  |\n| campaign.discount_coupons.discount.apply_to_order |  |\n| campaign.discount_coupons.discount.apply_to_items |  |\n| campaign.discount_coupons.discount.apply_to_items_proportionally |  |\n| campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity |  |\n| campaign.discount_coupons.discount.fixed.apply_to_items |  |\n| campaign.gift_vouchers |  |\n| campaign.gift_vouchers.gift.apply_to_order |  |\n| campaign.gift_vouchers.gift.apply_to_items |  |\n| campaign.referral_program |  |\n| campaign.referral_program.discount.apply_to_order |  |\n| campaign.referral_program.discount.apply_to_items |  |\n| campaign.referral_program.discount.apply_to_items_proportionally |  |\n| campaign.referral_program.discount.apply_to_items_proportionally_by_quantity |  |\n| campaign.referral_program.discount.fixed.apply_to_items |  |\n| campaign.promotion |  |\n| campaign.promotion.discount.apply_to_order |  |\n| campaign.promotion.discount.apply_to_items |  |\n| campaign.promotion.discount.apply_to_items_proportionally |  |\n| campaign.promotion.discount.apply_to_items_proportionally_by_quantity |  |\n| campaign.promotion.discount.fixed.apply_to_items |  |\n| campaign.loyalty_program |  |\n| campaign.lucky_draw |  |\n| voucher.discount_voucher |  |\n| voucher.discount_voucher.discount.apply_to_order |  |\n| voucher.discount_voucher.discount.apply_to_items |  |\n| voucher.discount_voucher.discount.apply_to_items_proportionally |  |\n| voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity |  |\n| voucher.discount_voucher.discount.fixed.apply_to_items |  |\n| voucher.gift_voucher |  |\n| voucher.gift_voucher.gift.apply_to_order |  |\n| voucher.gift_voucher.gift.apply_to_items |  |\n| voucher.loyalty_card |  |\n| voucher.lucky_draw_code |  |\n| distribution.custom_event |  |\n| reward_assignment.pay_with_points |  |\n| global |  |"
          }
        }
      },
      "ValidationRulesCreateResponseBody": {
        "type": "object",
        "title": "Validation Rules Create Response Body",
        "description": "Response body schema for **POST** `/validation-rules`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationRulesGetResponseBody": {
        "type": "object",
        "title": "Validation Rules Get Response Body",
        "description": "Response body schema for **GET** `/validation-rules/{validationRuleId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationRulesUpdateResponseBody": {
        "type": "object",
        "title": "Validation Rules Update Response Body",
        "description": "Response body schema for **PUT** `/validation-rules/{validationRuleId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRule"
          }
        ]
      },
      "ValidationRulesCreateRequestBody": {
        "title": "Validation Rules Create Request Body",
        "description": "Request body schema for **POST** `/validation-rules`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          },
          {
            "type": "object",
            "required": [
              "name"
            ]
          }
        ]
      },
      "ValidationRulesUpdateRequestBody": {
        "title": "Validation Rules Update Request Body",
        "description": "Response body schema for **PUT** `/validation-rules/{validationRuleId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleBase"
          }
        ]
      },
      "ValidationRulesListResponseBody": {
        "description": "Response body schema for **GET** `/validation-rules`.",
        "type": "object",
        "title": "Validation Rules List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about validation rules.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of validation rules.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "An array of validation rules.",
            "items": {
              "$ref": "#/components/schemas/ValidationRule"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of validation rules in the project."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRulesAssignmentsCreateResponseBody": {
        "type": "object",
        "title": "Validation Rules Assignments Create Response Body",
        "description": "Response body for **POST** `/validation-rules/{validationRuleId}/assignments`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleAssignmentsList"
          }
        ]
      },
      "ValidationRuleAssignment": {
        "title": "Validation Rule Assignment",
        "type": "object",
        "description": "This is an object representing a validation rule assignment.",
        "properties": {
          "id": {
            "type": "string",
            "example": "asgm_74F7QZoYbUoljwQO",
            "description": "Validation rule assignment ID."
          },
          "rule_id": {
            "type": "string",
            "example": "val_4j7DCRm2IS59",
            "description": "Validation rule ID."
          },
          "related_object_id": {
            "type": "string",
            "example": "v_JtWunK6jUo7X2qOFj0SyRHq4p9tgENlT",
            "description": "The resource ID to which the validation rule was assigned."
          },
          "related_object_type": {
            "type": "string",
            "description": "The type of resource to which the validation rule was assigned.",
            "enum": [
              "voucher",
              "campaign",
              "earning_rule",
              "reward_assignment",
              "promotion_tier",
              "distribution"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-17T08:18:15.085Z",
            "description": "Timestamp representing the date and time when the validation rule assignment was created in ISO 8601 format.",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "validation_rules_assignment",
            "description": "The type of object represented by the ID.",
            "enum": [
              "validation_rules_assignment"
            ]
          }
        },
        "required": [
          "id",
          "rule_id",
          "related_object_id",
          "related_object_type",
          "created_at",
          "object"
        ]
      },
      "ValidationRuleAssignmentsList": {
        "type": "object",
        "description": "Validation Rule Assignments List",
        "title": "Validation Rule Assignments List",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about validation rule assignments.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of validation rule assignments.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of validation rule assignments.",
            "items": {
              "$ref": "#/components/schemas/ValidationRuleAssignment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of validation rule assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "ValidationRulesAssignmentsListResponseBody": {
        "type": "object",
        "title": "Validation Rules Assignments List Response Body",
        "description": "Response body for **GET** `/validation-rules-assignments` and **GET** `/validation-rules/{validationRuleId}/assignments`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationRuleAssignmentsList"
          }
        ]
      },
      "13_req_create_validation_rule_assignments": {
        "description": "Response body schema for **POST** `/validation-rules/{validationRuleId}/assignments`.",
        "title": "Create Validation Rule Assignments Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/13_req_create_validation_rule_assignments_voucher"
          },
          {
            "$ref": "#/components/schemas/13_req_create_validation_rule_assignments_campaign"
          },
          {
            "$ref": "#/components/schemas/13_req_create_validation_rule_assignments_promotion_tier"
          },
          {
            "$ref": "#/components/schemas/13_req_create_validation_rule_assignments_earning_rule"
          },
          {
            "$ref": "#/components/schemas/13_req_create_validation_rule_assignments_reward"
          },
          {
            "$ref": "#/components/schemas/13_req_create_validation_rule_assignments_distribution"
          }
        ]
      },
      "13_req_create_validation_rule_assignments_voucher": {
        "type": "object",
        "description": "Assign a validation rule to a voucher.",
        "title": "Voucher",
        "properties": {
          "voucher": {
            "type": "string",
            "description": "Unique voucher ID or code to which you would like to assign the validation rule to.",
            "example": "v_ssR6vhswwh5odSloN2Vc3O60w7aea018"
          }
        }
      },
      "13_req_create_validation_rule_assignments_campaign": {
        "type": "object",
        "description": "Assign a validation rule to a campaign.",
        "title": "Req Create Validation Rule Assignments Campaign",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "Unique campaign ID or name to which you would like to assign the validation rule to.",
            "example": "camp_HXsR22VUMC4hN4DR7eAhCalp"
          }
        }
      },
      "13_req_create_validation_rule_assignments_promotion_tier": {
        "type": "object",
        "description": "Assign a validation rule to a promotion tier.",
        "title": "Promotion Tier",
        "properties": {
          "promotion_tier": {
            "type": "string",
            "description": "Unique promotion tier ID to which you would like to assign the validation rule to.",
            "example": "promo_Vet0vCNyyo5pOddHfu2X3FCB"
          }
        }
      },
      "13_req_create_validation_rule_assignments_earning_rule": {
        "type": "object",
        "description": "Assign a validation rule to an earning rule.",
        "title": "Earning Rule",
        "properties": {
          "earning_rule": {
            "type": "string",
            "description": "Unique earning rule ID to which you would like to assign the validation rule to.",
            "example": "ern_CfvQ4vWEKD4kHTxghdY8YJGs"
          }
        }
      },
      "13_req_create_validation_rule_assignments_reward": {
        "type": "object",
        "description": "Assign a validation rule to a reward.",
        "title": "Reward",
        "properties": {
          "related_object_id": {
            "type": "string",
            "description": "Unique reward assignment ID, i.e. rewa_6VSWcXjfm5PuZlfeuZxl5JZT. This is the first parameter to be sent for a validation rule assignment to be assigned to a reward assignment. The prerequisites for assigning a validation rule to a reward assignment are: \n1. Define a loyalty campaign.    \n2. Connect a reward with the campaign.    \n3. Retrieve a reward assignment ID for the reward assigned to the loyalty campaign.    \n4. And finally you can use this endpoint to assign a validation rule to the particular reward assignment.",
            "example": "rewa_6VSWcXjfm5PuZlfeuZxl5JZT"
          },
          "related_object_type": {
            "type": "string",
            "description": "This is the second parameter that needs to be sent in order to properly assign a validation rule to a reward assignment.",
            "example": "reward_assignment",
            "default": "reward_assignment",
            "enum": [
              "reward_assignment"
            ]
          }
        }
      },
      "13_req_create_validation_rule_assignments_distribution": {
        "type": "object",
        "description": "Assign a validation rule to a distribution.",
        "title": "Distribution",
        "properties": {
          "distribution": {
            "type": "string",
            "description": "Unique distribution ID to which you would like to assign the validation rule to.",
            "example": "distr_2nUIekYnS9L1Vm1I55vmC7kSvd"
          }
        }
      },
      "14_obj_segment_object": {
        "title": "Customer Segment Object",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "seg_1wc52c5z6r1kQ81brO8j9Hk2",
            "description": "Unique segment ID."
          },
          "name": {
            "type": "string",
            "description": "Segment name."
          },
          "created_at": {
            "type": "string",
            "example": "2022-05-12T13:01:56.896Z",
            "description": "Timestamp representing the date and time when the segment was created in ISO 8601 format.",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "auto-update",
              "static"
            ],
            "description": "Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers)."
          },
          "filter": {
            "type": "object",
            "nullable": true,
            "description": "Defines a set of criteria for an `auto-update` segment type.  "
          },
          "initial_sync_status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "DONE"
            ]
          },
          "object": {
            "type": "string",
            "default": "segment",
            "description": "The type of object represented by JSON. This object stores information about the customer segment."
          }
        },
        "description": "This is an object representing a customer segment."
      },
      "14_req_create_segment": {
        "title": "Create Customer Segment Request Body",
        "description": "Request body schema for **POST** `/segments`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/14_req_create_segment_static"
          },
          {
            "$ref": "#/components/schemas/14_req_create_segment_dynamic"
          }
        ]
      },
      "14_req_create_segment_static": {
        "title": "Static Customer Segment",
        "type": "object",
        "description": "Request body schema for creating a static customer segment in **POST** `/segments`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Segment name."
          },
          "type": {
            "type": "string",
            "description": "Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers).",
            "default": "static"
          },
          "customers": {
            "type": "array",
            "description": "Array of customer IDs.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "14_req_create_segment_dynamic": {
        "title": "Dynamic Customer Segment",
        "type": "object",
        "description": "Request body schema for creating a dynamic customer segment in **POST** `/segments`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Segment name."
          },
          "type": {
            "type": "string",
            "description": "Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers).",
            "default": "auto-update"
          },
          "filter": {
            "type": "object",
            "description": "Defines a set of criteria for an `auto-update` segment type."
          }
        }
      },
      "CustomerSegmentsList": {
        "type": "object",
        "title": "Customer Segments List",
        "description": "List of customer's segments",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about customer segments.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the JSON property that contains the array of segment IDs.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of segment IDs and names.",
            "items": {
              "$ref": "#/components/schemas/SimpleSegment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of segments the customer belongs to."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "SimpleReferralTier": {
        "title": "Simple Referral Tier",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique referral tier ID.",
            "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
          },
          "campaign_id": {
            "type": "string",
            "description": "Campaign Id."
          },
          "banner": {
            "type": "string",
            "description": "Text to be displayed to your customers on your website."
          },
          "parameters": {
            "type": "object",
            "description": "Referral tier parameters"
          }
        }
      },
      "CustomEvent": {
        "title": "Custom Event",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique custom event ID."
          },
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an `event`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "Referral object.",
            "properties": {
              "referrer_id": {
                "type": "string",
                "description": "Unique referrer ID.",
                "example": "cust_nM4jqPiaXUvQdVSA6vTRUnix"
              },
              "code": {
                "type": "string",
                "description": "Voucher code."
              },
              "id": {
                "type": "string",
                "description": "Unique voucher ID."
              }
            }
          },
          "loyalty": {
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the custom event."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the custom event was created in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "RedemptionRewardResult": {
        "title": "Redemption Reward Result",
        "type": "object",
        "properties": {
          "customer": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomer"
              }
            ]
          },
          "assignment_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique reward assignment ID assigned by Voucherify."
          },
          "voucher": {
            "nullable": true,
            "description": "Defines of the voucher.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Voucher"
              }
            ]
          },
          "product": {
            "nullable": true,
            "description": "Defines of the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ]
          },
          "sku": {
            "nullable": true,
            "description": "Defines of the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Sku"
              }
            ]
          },
          "loyalty_tier_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique loyalty tier ID assigned by Voucherify."
          },
          "id": {
            "type": "string",
            "example": "rew_0bc92f81a6801f9bca",
            "description": "Unique reward ID."
          },
          "name": {
            "type": "string",
            "example": "Reward Name",
            "description": "Name of the reward."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON",
            "default": "reward",
            "enum": [
              "reward"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the redemption was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-10-03T12:24:58.008Z",
            "description": "Timestamp in ISO 8601 format indicating when the reward was updated."
          },
          "parameters": {
            "type": "object",
            "description": "These are parameters representing a material reward.",
            "properties": {
              "campaign": {
                "type": "object",
                "description": "Defines the product redeemed as a reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Campaign unique ID.",
                    "example": "camp_13BbZ0kQsNinhqsX3wUts2UP"
                  },
                  "balance": {
                    "type": "integer",
                    "description": "Points available for reward redemption."
                  },
                  "type": {
                    "type": "string",
                    "description": "Defines the type of the campaign."
                  }
                }
              },
              "product": {
                "type": "object",
                "description": "Defines the product redeemed as a reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "prod_0b7d7dfb05cbe5c616",
                    "description": "Unique product ID, assigned by Voucherify. "
                  },
                  "sku_id": {
                    "type": "string",
                    "description": "A unique SKU ID assigned by Voucherify.",
                    "example": "sku_0a41e31c7b41c28358"
                  }
                }
              },
              "coin": {
                "type": "object",
                "description": "Defines the ratio by mapping the number of loyalty points in `points_ratio` to a predefined cash amount in `exchange_ratio`.",
                "properties": {
                  "exchange_ratio": {
                    "type": "integer",
                    "description": "The cash equivalent of the points defined in the `points_ratio` property."
                  },
                  "points_ratio": {
                    "type": "integer",
                    "description": "The number of loyalty points that will map to the predefined cash amount defined by the `exchange_ratio` property."
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          }
        },
        "required": [
          "reward",
          "customer",
          "assignment_id",
          "voucher",
          "product",
          "sku",
          "loyalty_tier_id"
        ]
      },
      "SimpleRedemptionRewardResult": {
        "title": "Simple Redemption Reward Result",
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SimpleCustomer"
          },
          "assignment_id": {
            "type": "string",
            "description": "Unique reward assignment ID assigned by Voucherify."
          },
          "voucher": {
            "description": "Defines of the voucher.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleVoucher"
              }
            ]
          },
          "product": {
            "description": "Defines of the product.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleProduct"
              }
            ]
          },
          "sku": {
            "description": "Defines of the sku.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleSku"
              }
            ]
          },
          "loyalty_tier_id": {
            "type": "string",
            "description": "Unique loyalty tier ID assigned by Voucherify."
          },
          "id": {
            "type": "string",
            "example": "rew_nIy4gHpQHle2c3pNMwuj7G6j",
            "description": "Unique reward ID, assigned by Voucherify."
          },
          "object": {
            "type": "string",
            "default": "reward",
            "enum": [
              "reward"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the reward."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "parameters": {
            "description": "Defines how the reward is generated.",
            "type": "object"
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          }
        }
      },
      "ValidationEntity": {
        "title": "Validation Entity",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique validation id."
          },
          "session_id": {
            "type": "string",
            "description": "Unique session id."
          },
          "status": {
            "type": "string",
            "description": "The validation status",
            "enum": [
              "VALID",
              "INVALID"
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the validation was created in ISO 8601 format.",
            "format": "date-time"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableApplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "SimpleSku": {
        "title": "Simple Sku",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique sku ID."
          },
          "source_id": {
            "type": "string",
            "description": "Sku source id."
          },
          "sku": {
            "type": "string",
            "description": "Sku name."
          }
        }
      },
      "SimpleProduct": {
        "title": "Simple Product",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product ID."
          },
          "source_id": {
            "type": "string",
            "description": "Product source id."
          },
          "name": {
            "type": "string",
            "description": "Product name."
          }
        }
      },
      "SimpleSegment": {
        "title": "Simple Segment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique segment ID.",
            "example": "seg_DNAOhUtJffvX0f57ajLMFBYR"
          },
          "name": {
            "type": "string",
            "description": "Segment name."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the ID.",
            "default": "segment",
            "enum": [
              "segment"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "object"
        ]
      },
      "LoyaltyTierExpiration": {
        "title": "Loyalty Tier Expiration",
        "description": "Defines loyalty tier expiration date.",
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique customer ID of the customer making the purchase.",
            "example": "cust_7iUa6ICKyU6gH40dBU25kQU1"
          },
          "campaign_id": {
            "type": "string",
            "description": "Unique campaign ID, assigned by Voucherify.",
            "example": "camp_rRsfatlwN7unSeUIJDCYedal"
          },
          "tier_id": {
            "type": "string",
            "description": "Unique tier ID, assigned by Voucherify."
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp defines when the loyalty tier starts to be active in ISO 8601 format. Loyalty tier is inactive before this date."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration timestamp defines when the loyalty tier expires in ISO 8601 format. Loyalty tier is inactive after this date."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the loyalty tier was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the loyalty tier was updated in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "customer_id",
          "campaign_id",
          "tier_id",
          "created_at"
        ]
      },
      "16_obj_export_order": {
        "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data.",
        "title": "order",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at",
              "updated_at",
              "-updated_at",
              "status",
              "-status"
            ]
          },
          "fields": {
            "type": "array",
            "enum": [
              "id",
              "source_id",
              "created_at",
              "updated_at",
              "status",
              "amount",
              "discount_amount",
              "items_discount_amount",
              "total_discount_amount",
              "total_amount",
              "customer_id",
              "referrer_id",
              "metadata"
            ],
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Unique order ID. | ord_A69RIxEdRsPuC6i8gFGVHUft |\n| source_id | Unique order source ID. | 8638 |\n| created_at | Timestamp in ISO 8601 format representing the date and time when the order was created. | 2022-03-09T09:16:32.521Z |\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the order was last updated. | 2022-03-09T09:16:33.331Z |\n| status | Order status. | `PAID`, `CREATED`, `FULFILLED`, `CANCELED` |\n| amount | Total amount of order items. | 7700 |\n| discount_amount | Represents total amount of the discount applied to whole cart. | 500 |\n| items_discount_amount | Represents total amount of the discount applied to order line items. | 100 |\n| total_discount_amount | All discounts applied to the order including discounts applied to particular order line items and discounts applied to the whole cart. | 600 |\n| total_amount | Total order amount after applying all discounts. | 7100 |\n| customer_id | Customer unique ID. | cust_2G4fUQdCXUqp35nXNleav7bO |\n| referrer_id | Referrer unique ID. | cust_IkrTR674vvQvr9a4rDMiqglY |\n| metadata | Returns all order metadata. | Response will include all order metadata. |\n| metadata.X | Where X is the name of a particular order metadata property. | The returned value will depend on the type of data defined in the Dashboard > Project Settings > Metdata Schemas > Order. [Read more here](https://support.voucherify.io/article/99-schema-validation-metadata). |",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/16_obj_filter_order_status"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_order_source_id"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_order_amount"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_order_total_amount"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_order_discount_amount"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_order_total_discount_amount"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_order_items_discount_amount"
              }
            ]
          }
        }
      },
      "16_obj_export_voucher": {
        "description": "List of available fields and filters that can be exported with a voucher along with the sorting order of the returned data.",
        "title": "voucher",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "created_at",
              "-created_at",
              "updated_at",
              "-updated_at",
              "code",
              "-code"
            ]
          },
          "fields": {
            "type": "array",
            "enum": [
              "code",
              "voucher_type",
              "value",
              "discount_type",
              "campaign",
              "category",
              "start_date",
              "expiration_date",
              "gift_balance",
              "loyalty_balance",
              "redemption_quantity",
              "redemption_count",
              "active",
              "qr_code",
              "bar_code",
              "id",
              "is_referral_code",
              "created_at",
              "updated_at",
              "validity_timeframe_interval",
              "validity_timeframe_duration",
              "validity_day_of_week",
              "discount_amount_limit",
              "campaign_id",
              "additional_info",
              "customer_id",
              "discount_unit_type",
              "discount_unit_effect",
              "customer_source_id",
              "metadata"
            ],
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combintation of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Unique voucher ID. | v_HSnGD2vNIHYighTQxwcB4dtVAv8VOmZD |\n| code | Unique voucher code. | WELCOME100 |\n| voucher_type | Type of voucher. | `DISCOUNT_VOUCHER`, `GIFT_VOUCHER`, `LOYALTY_CARD` |\n| value | Value of voucher. | `DISCOUNT_VOUCHER` : amount, percent, unit<br>`GIFT_VOUCHER`: amount left to spend<br>`LOYALTY_CARD`: available usable points |\n| discount_type | The type of discount for a `DISCOUNT_VOUCHER`. | `AMOUNT`, `PERCENT`, `UNIT`, `FIXED` |\n| campaign | Unique campaign name. | Summer Discounts 20% off |\n| category | Tag defining the category that this voucher belongs to. |  |\n| start_date | Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is _inactive_ before this date. | 2020-12-10T23:00:00.000Z |\n| expiration_date | Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format. Voucher is _inactive_ after this date. | 2023-12-31T23:00:00.000Z |\n| gift_balance | Amount left to spend. | 1000 |\n| loyalty_balance | Available usable points. | 2000 |\n| redemption_quantity | Maximum number of times a voucher can be redeemed. | 2 |\n| redemption_count | Total redemptions. | 59 |\n| active | Boolean indicating whether the voucher is available for use. | `true`, `false` |\n| qr_code | URL to QR representation of encrypted code. |  |\n| bar_code | URL to barcode representation of encrypted code. |  |\n| is_referral_code | Boolean indicating whether the voucher is a referral code. | `true`, `false` |\n| created_at | Timestamp in ISO 8601 format representing the date and time when the voucher was created. | 2022-04-14T09:55:46.814Z |\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the voucher was last updated. | 2022-04-14T10:02:18.036Z |\n| validity_timeframe_interval | Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an interval of `P2D` will be active every other day. | P2D |\n| validity_timeframe_duration | Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a duration of `PT1H` will be valid for a duration of one hour. | PT1H |\n| validity_day_of_week | Array corresponding to the particular days of the week in which the voucher is valid. | \"1,2,3,4,5\" |\n| discount_amount_limit | For `PERCENT` discount type, this is the maximum threshold allowed to be deducted. | 50 |\n| campaign_id | Parent campaign ID. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\n| additional_info | An optional field to keep any extra textual information about the code such as a code description and details. |  |\n| customer_id | Unique customer ID of the assigned owner to whom the voucher was published. | cust_7iUa6ICKyU6gH40dBU25kQU1 |\n| discount_unit_type | For `UNIT` discount type, either a shipping or product ID for a `UNIT` discount with one product. | prod_5h1pp1ng, prod_0a9f9aeddb019a42db |\n| discount_unit_effect | `UNIT` discount effect. | `ADD_MANY_ITEMS`, `ADD_MISSING_ITEMS`,`ADD_NEW_ITEMS` |\n| customer_source_id | Unique customer source id of the assigned owner to whom the voucher was published. | name.lastname@email.com |\n| metadata | Returns all voucher metadata. | Response will include all voucher metadata. |\n| metadata.X | Where X is the name of a particular voucher metadata property. | The returned value will depend on the type of data defined in the Dashboard > Project Settings > Metdata Schemas > Voucher. [Read more here](https://support.voucherify.io/article/99-schema-validation-metadata). |\n",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the export. You can filter the following parameters: \n\n - `categories`\n\n - `vouchers`\n\n - `type`\n\n - `holder_id`\n\n - `is_referral_code`\n\n - `published_for_customer_id`\n\n - `validity_timeframe`\n\n - `category_ids`"
          }
        }
      },
      "16_obj_export_publication": {
        "description": "List of available fields and filters that can be exported with a publication along with the sorting order of the returned data.",
        "title": "publication",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "id",
              "-id",
              "voucher_code",
              "-voucher_code",
              "tracking_id",
              "-tracking_id",
              "customer_id",
              "-customer_id",
              "created_at",
              "-created_at",
              "channel",
              "-channel"
            ]
          },
          "fields": {
            "type": "array",
            "enum": [
              "voucher_code",
              "customer_id",
              "customer_source_id",
              "date",
              "channel",
              "campaign",
              "is_winner",
              "metadata"
            ],
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combintation of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| voucher_code | Unique voucher code. | WELCOME100 |\n| customer_id | Customer unique ID. | cust_7iUa6ICKyU6gH40dBU25kQU1 |\n| customer_source_id | Unique customer source id of the assigned owner to whom the voucher was published. | name.lastname@email.com |\n| date | Timestamp in ISO 8601 format representing the date and time when the voucher was published. | 2022-04-28T10:19:30.792Z |\n| channel | Publication channel. | voucherify-website |\n| campaign | Unique campaign name. | Summer Discounts 20% off |\n| is_winner |  |  |\n| metadata | Returns all publication metadata. | Response will include all publication metadata. |\n| metadata.X | Where X is the name of a particular publication metadata property. | The returned value will depend on the type of data defined in the Dashboard > Project Settings > Metdata Schemas > Publication. [Read more here](https://support.voucherify.io/article/99-schema-validation-metadata) |",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "description": "Data filters used to narrow the data records to be returned in the export. You can filter the following parameters: \n\n - `failure_code`\n\n - `result`\n\n - `customer_id`\n\n - `campaign_name`\n\n - `voucher_type`\n\n - `is_referral_code`\n\n - `parent_object_id`\n\n - `related_object_id`\n\n - `source_id`",
            "oneOf": [
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_failure_code"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_result"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_customer_id"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_campaign_name"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_voucher_type"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_is_referral_code"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_parent_object_id"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_related_object_id"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_publication_source_id"
              }
            ]
          }
        }
      },
      "16_obj_export_redemption": {
        "description": "List of available fields and filters that can be exported with a redemption along with the sorting order of the returned data.",
        "title": "redemption",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "id",
              "-id",
              "voucher_code",
              "-voucher_code",
              "tracking_id",
              "-tracking_id",
              "customer_id",
              "-customer_id",
              "created_at",
              "-created_at"
            ]
          },
          "fields": {
            "type": "array",
            "enum": [
              "id",
              "object",
              "date",
              "voucher_code",
              "campaign",
              "promotion_tier_id",
              "customer_id",
              "customer_source_id",
              "customer_name",
              "tracking_id",
              "order_amount",
              "gift_amount",
              "loyalty_points",
              "result",
              "failure_code",
              "failure_message",
              "metadata"
            ],
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combintation of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Unique redemption ID. | r_0acf3a6dae00e679c8, rf_0acf3a495740e679b8 |\n| object | Object being exported; by default `redemption`. | redemption |\n| date | Timestamp in ISO 8601 format representing the date and time when the voucher was redeemed. | 2022-03-23T08:52:24.867Z |\n| voucher_code | Unique voucher code redeemed. | WELCOME100 |\n| campaign | Parent campaign name of voucher if applicable. | Summer Discounts 20% off |\n| promotion_tier_id |  | promo_Mwy9XpA0TLctSGriM5kum0qp |\n| customer_id | Unique customer ID of redeeming customer. | cust_nk0N1uNQ1YnupAoJGOgvsODC |\n| customer_source_id | Unique source ID of redeeming customer. | name.lastname@email.com |\n| customer_name | Customer name. | John Smith |\n| tracking_id |  | track_Pw6r3ejnml43kIwNS4Zj09KZ67xOfLUy |\n| order_amount | Total order amount before applying all discounts. | 1000 |\n| gift_amount | Gift credits used for redemption. | 10 |\n| loyalty_points |  | 12 |\n| result | Tells you whether the redemption succeeded. | `SUCCESS`, `FAILURE` |\n| failure_code | Internal Voucherify code for reason why redemption failed. | invalid_customer |\n| failure_message | A human-readable message providing a short description explaining why the redemption failed. | Customer must be a holder of a loyalty card. |\n| metadata | Returns all redemption metadata. | Response will include all redemption metadata. |\n| metadata.X | Where X is the name of a particular redemption metadata property. | The returned value will depend on the type of data defined in the Dashboard > Project Settings > Metdata Schemas > Redemption. [Read more here](https://support.voucherify.io/article/99-schema-validation-metadata) |",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the export. You can filter the following parameters: \n\n - `voucher_code`\n\n - `related_object_id`\n\n - `related_object_parent_id`\n\n - `parent_redemption_id`\n\n - `failure_code`\n\n - `result`\n\n - `object`\n\n - `customer_id`\n\n - `campaign_name`\n\n - `user_login`"
          }
        }
      },
      "16_obj_export_customer": {
        "description": "List of available fields and filters that can be exported with a customer along with the sorting order of the returned data.",
        "title": "customer",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "name",
              "-name",
              "id",
              "-id",
              "email",
              "-email",
              "source_id",
              "-source_id",
              "created_at",
              "-created_at",
              "updated_at",
              "-updated_at"
            ]
          },
          "fields": {
            "type": "array",
            "enum": [
              "name",
              "id",
              "description",
              "email",
              "source_id",
              "created_at",
              "address_city",
              "address_state",
              "address_line_1",
              "address_line_2",
              "address_country",
              "address_postal_code",
              "redemptions_total_redeemed",
              "redemptions_total_failed",
              "redemptions_total_succeeded",
              "redemptions_total_rolled_back",
              "redemptions_total_rollback_failed",
              "redemptions_total_rollback_succeeded",
              "orders_total_amount",
              "orders_total_count",
              "orders_average_amount",
              "orders_last_order_amount",
              "orders_last_order_date",
              "loyalty_points",
              "loyalty_referred_customers",
              "updated_at",
              "phone",
              "birthday",
              "metadata",
              "birthdate"
            ],
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combintation of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| name | Customer name. | John Smith |\n| id | Unique customer ID. | cust_J1CDUdbqn5Exva8ASWk1Fq0j |\n| description | An arbitrary string that you can attach to a customer object. | Customer requesting to be added to VIP tier. |\n| email | Customer's email. | name.lastname@email.com |\n| source_id | Unique custom customer identifier. | name.lastname@email.com |\n| created_at | Timestamp in ISO 8601 format representing the date and time when the customer was created. | 2022-02-03T13:10:11.928Z |\n| address_city | City | Houston |\n| address_state | State | TX |\n| address_line_1 | First line of customer's address. | 72738 Main St |\n| address_line_2 | Second line of customer's address. | Bld 2, Apt 4 |\n| address_country | Country | United States of America |\n| address_postal_code | Postal code (ZIP code) | 77042-4143 |\n| redemptions_total_redeemed | Total customer redemptions. | 5 |\n| redemptions_total_failed | Total customer failed redemptions. | 2 |\n| redemptions_total_succeeded | Total customer succeeded redemptions. | 3 |\n| redemptions_total_rolled_back | Total customer redemptions that were rolled back. | 3 |\n| redemptions_total_rollback_failed | Total customer redemptions that were unsuccessfully rolled back. | 2 |\n| redemptions_total_rollback_succeeded | Total customer redemptions that were successfully rolled back. | 1 |\n| orders_total_amount | Total sum of order amounts over customer lifetime. Value is multiplied by 100 to precisely represent 2 decimal places. | 10000 (represents $100) |\n| orders_total_count | Total number of customer orders. Value is multiplied by 100 to precisely represent 2 decimal places. | 2 |\n| orders_average_amount | Average amount spent on orders. Value is multiplied by 100 to precisely represent 2 decimal places. | 50 |\n| orders_last_order_amount | How much did the customer spend on their last order. Value is multiplied by 100 to precisely represent 2 decimal places. | 50 |\n| orders_last_order_date | When was the last customer order; timestamp in ISO 8601 format representing the date and time. | 2022-02-03T13:17:30.630Z |\n| loyalty_points | Sum of customer's loyalty points to go across all loyalty cards. |  |\n| loyalty_referred_customers | How many customers were referred by this customer. |  |\n| updated_at | Timestamp in ISO 8601 format representing the date and time when the customer was updated. | 2022-02-14T14:10:14.305Z |\n| phone | Customer's phone number. | +1 (294) 752-1846 |\n| birthday | Customer's birthday. | 2022-01-01 |\n| birthdate | Customer's birthdate. | 2022-04-29 |\n| metadata | Returns all customer metadata. | Response will include all customer metadata. |\n| metadata.X | Where X is the name of a particular customer metadata property. | The returned value will depend on the type of data defined in the Dashboard > Project Settings > Metdata Schemas > Customer. [Read more here](https://support.voucherify.io/article/99-schema-validation-metadata) |",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the export. You can filter the following parameters: \n\n - `name` (string)\n\n - `email` (string)\n\n - `phone` (string)\n\n - `metadata` (json)\n\n - `metadata.X` (?)\n\n - `address` (json)\n\n - `address.state` (string)\n\n - `address.country` (string)\n\n - `address.postal_code` (string)\n\n - `birthday` (string - date-time)\n\n - `birthdate` (string date-time)\n\n - `created_at` (date)\n\n - `source_id` (string)\n\n - `system.metadata` (json)\n\n - `system.metadata.source` (string)\n\n - `system.metadata.consents.unsubscribed` (boolean)\n\n - `loyalty_points` (json)\n\n - `loyalty` (json)\n\n - `summary.orders.total_amount` (json)\n\n - `summary.orders.last_order_date` (date)\n\n - `summary.orders.last_order_amount` (json)\n\n - `summary.redemptions.gift.redeemed_amount` (integer)\n\n - `summary.redemptions.total_succeeded` (integer)\n\n - `events.cart_abandoned.last_occurred` (integer)\n\n - `events.newsletter_subscribed.count` (integer)\n\n - `events.sign_up.last_occurred` (integer)"
          }
        }
      },
      "16_obj_export_points_expiration": {
        "description": "List of available fields and filters that can be exported with points expirations along with the sorting order of the returned data.",
        "title": "points expiration",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "expires_at",
              "-expires_at"
            ]
          },
          "fields": {
            "type": "array",
            "enum": [
              "id",
              "campaign_id",
              "voucher_id",
              "status",
              "expires_at",
              "points"
            ],
            "description": "Array of strings containing the data that was exported. These fields define the headers in the CSV file. \n\n The array can be a combintation of any of the following available fields:  \n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Loyalty points bucket ID. | lopb_Wl1o3EjJIHSNjvO5BDLy4z1n |\n| campaign_id | Campaign ID of the parent loyalty campaign. | camp_7s3uXI44aKfIk5IhmeOPr6ic |\n| voucher_id | Voucher ID of the parent loyalty card. | v_YLn0WVWXSXbUfDvxgrgUbtfJ3SQIY655 |\n| status | Status of the loyalty points bucket. | `ACTIVE` or `INACTIVE` |\n| expires_at | Timestamp in ISO 8601 format representing the date when the points expire. | 2022-06-30 |\n| points | Number of points. | 1000 |",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "description": "Data filters used to narrow the data records to be returned in the export. You can filter the following parameters: \n\n - `campaign_id`\n\n - `voucher_id`",
            "oneOf": [
              {
                "$ref": "#/components/schemas/16_obj_filter_points_expiration_campaign_id"
              },
              {
                "$ref": "#/components/schemas/16_obj_filter_points_expiration_voucher_id"
              }
            ]
          }
        }
      },
      "VoucherTransactionsFilters": {
        "description": "List of available fields and filters that can be exported with gift card or loyalty card transactions along with the sorting order of the returned data.",
        "title": "Voucher Transactions",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Unique transaction ID. | vtx_0cb7811f1c07765800 |\n| type | Transaction type. | - `CREDITS_REMOVAL` <br> - `CREDITS_ADDITION` <br> - `CREDITS_REFUND` <br> - `CREDITS_REDEMPTION` <br> - `POINTS_ACCRUAL` <br> - `POINTS_CANCELLATION` <br> - `POINTS_REDEMPTION`<br> - `POINTS_REFUND`<br> - `POINTS_ADDITION`<br> - `POINTS_REMOVAL`<br> - `POINTS_EXPIRATION`<br> - `POINTS_TRANSFER_IN`<br> - `POINTS_TRANSFER_OUT` |\n| source_id | Unique transaction source ID. | 8638 |\n| reason | Contains the reason for the transaction if one was included originally. |  |\n| balance | The gift card or loyalty card balance after the transaction. |  |\n| amount | The amount of gift card or loyalty card credits being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\n| source|  Channel through which the transaction was initiated. | API |\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "type",
                "source_id",
                "reason",
                "balance",
                "amount",
                "created_at",
                "voucher_id",
                "campaign_id",
                "source",
                "details",
                "related_transaction_id"
              ]
            }
          },
          "filters": {
            "$ref": "#/components/schemas/VoucherTransactionsExportFilterConditions"
          }
        },
        "required": [
          "filters"
        ]
      },
      "16_obj_export_loyalty_card_transactions": {
        "description": "List of available fields and filters that can be exported with loyalty card transactions along with the sorting order of the returned data.",
        "title": "loyalty card transactions",
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "How the export is filtered, where the dash `-` preceding a sorting option means sorting in a descending order.",
            "enum": [
              "-created_at",
              "created_at"
            ]
          },
          "fields": {
            "type": "array",
            "enum": [
              "id",
              "type",
              "source_id",
              "reason",
              "balance",
              "amount",
              "created_at",
              "voucher_id",
              "campaign_id",
              "details",
              "related_transaction_id"
            ],
            "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file. The array can be a combination of any of the following available fields:\n\n| **Field** | **Definition** | **Example Export** |\n|:---|:---|:---|\n| id | Unique transaction ID assigned by Voucherify. | vtx_0cb7811f1c07765800 |\n| type | Transaction type. | - `POINTS_EXPIRATION` <br> - `POINTS_ADDITION` <br> - `POINTS_REMOVAL` <br> - `POINTS_TRANSFER_OUT` <br> - `POINTS_ACCRUAL` <br> - `POINTS_REFUND` <br> - `POINTS_REDEMPTION` |\n| source_id | Custom source ID of the transaction if one was included originally. | source_id_custom |\n| reason | Contains the reason for the transaction if one was included originally. |  |\n| balance | The loyalty card balance after the transaction. |  |\n| amount | The amount of loyalty points being allocated during the transaction. This value can either be negative or positive depending on the nature of the transaction. |  |\n| created_at | Timestamp in ISO 8601 format representing the date and time when the transaction was created. | 2022-03-09T09:16:32.521Z  |\n| voucher_id | Unique Voucher ID. | v_dky7ksKfPX50Wb2Bxvcoeb1xT20b6tcp |\n| campaign_id | Parent campaign ID. | camp_FNYR4jhqZBM9xTptxDGgeNBV |\n| source|  Channel through which the transaction was initiated. | - `API` <br> - `voucherify-web-ui` <br> - `Automation` |\n| details | More detailed information stored in the form of a JSON. | Provides more details related to the transaction in the form of an object. |\n| related_transaction_id | Unique transaction ID related to a receiver/donor card in the case of a points transfer from/to another card. | vtx_0c9afe802593b34b80 |",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/16_obj_filter_loyalty_card_transactions_voucher_id"
          }
        }
      },
      "16_obj_filter_publication_failure_code": {
        "description": "Filter conditions set on the publication `failure_code`. Available options are:\n\n - `not_found`,\n\n - `no_voucher_suitable_for_publication`\n\n - `voucher_already_published`\n\n - `duplicate_source_id`\n\n - `too_many_vouchers_requested`",
        "title": "Filter by failure code",
        "type": "object",
        "properties": {
          "failure_code": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_result": {
        "description": "Filter conditions set on the publication `result`. Available options are:\n\n - `SUCCESS`\n\n - `FAILURE`",
        "title": "Filter by result",
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_customer_id": {
        "description": "Filter conditions set on the publication `customer_id`.",
        "title": "Filter by customer ID",
        "type": "object",
        "properties": {
          "customer_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_campaign_name": {
        "description": "Filter conditions set on the publication `campaign_name`.",
        "title": "Filter by campaign name",
        "type": "object",
        "properties": {
          "campaign_name": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_voucher_type": {
        "description": "Filter conditions set on the publication `voucher_type`.",
        "title": "Filter by voucher type",
        "type": "object",
        "properties": {
          "voucher_type": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_is_referral_code": {
        "description": "Filter conditions set on the publication `is_referral_code`.",
        "title": "Filter if the code is a referral code",
        "type": "object",
        "properties": {
          "is_referral_code": {
            "$ref": "#/components/schemas/16_filter_conditions_boolean"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_parent_object_id": {
        "description": "Filter conditions set on the publication `parent_object_id`, which is the parent campaigns unique ID assigned by Voucherify.",
        "title": "Filter by parent object ID",
        "type": "object",
        "properties": {
          "parent_object_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_related_object_id": {
        "description": "Filter conditions set on the publication `related_object_id`.",
        "title": "Filter by related object ID",
        "type": "object",
        "properties": {
          "related_object_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_publication_source_id": {
        "description": "Filter conditions set on the publication `source_id`.",
        "title": "Filter by publication source ID",
        "type": "object",
        "properties": {
          "source_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_order_status": {
        "description": "Filter conditions set on the order `status`.",
        "title": "Filter by status",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_order_source_id": {
        "description": "Filter conditions set on the order `source_id`.",
        "title": "Filter by order source ID",
        "type": "object",
        "properties": {
          "source_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_order_amount": {
        "description": "Filter conditions set on the order `amount`.",
        "title": "Filter by order amount",
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/16_filter_conditions_number"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_order_total_amount": {
        "description": "Filter conditions set on the order `total_amount`.",
        "title": "Filter by order total amount",
        "type": "object",
        "properties": {
          "total_amount": {
            "$ref": "#/components/schemas/16_filter_conditions_number"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_order_discount_amount": {
        "description": "Filter conditions set on the order `discount_amount`.",
        "title": "Filter by order discount amount",
        "type": "object",
        "properties": {
          "discount_amount": {
            "$ref": "#/components/schemas/16_filter_conditions_number"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_order_total_discount_amount": {
        "description": "Filter conditions set on the order `total_discount_amount`.",
        "title": "Filter by order total discount amount",
        "type": "object",
        "properties": {
          "total_discount_amount": {
            "$ref": "#/components/schemas/16_filter_conditions_number"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_order_items_discount_amount": {
        "description": "Filter conditions set on the order `items_discount_amount`.",
        "title": "Filter by order items discount amount",
        "type": "object",
        "properties": {
          "items_discount_amount": {
            "$ref": "#/components/schemas/16_filter_conditions_number"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_points_expiration_campaign_id": {
        "description": "Filter conditions set on`the `campaign_id`.",
        "title": "Filter by campaign ID",
        "type": "object",
        "properties": {
          "campaign_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_obj_filter_points_expiration_voucher_id": {
        "description": "Filter conditions set on the `voucher_id`.",
        "title": "Filter by voucher ID",
        "type": "object",
        "properties": {
          "voucher_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "VoucherTransactionsExportFilterConditions": {
        "description": "Filter condition.",
        "title": "Filter by voucher ID",
        "type": "object",
        "required": [
          "voucher_id"
        ],
        "properties": {
          "voucher_id": {
            "type": "object",
            "required": [
              "conditions"
            ],
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "conditions": {
                "type": "object",
                "required": [
                  "$in"
                ],
                "description": "Data filters used to narrow the data records to be returned in the result.",
                "properties": {
                  "$in": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1,
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "16_obj_filter_loyalty_card_transactions_voucher_id": {
        "description": "Filter conditions set on the `voucher_id`.",
        "title": "Filter by voucher ID",
        "type": "object",
        "properties": {
          "voucher_id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          },
          "junction": {
            "$ref": "#/components/schemas/Junction"
          }
        }
      },
      "16_filter_conditions_string": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "conditions": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "$in": {
                "type": "array",
                "description": "Array of resource values that should be included in the results. (multiple values)",
                "items": {
                  "type": "string"
                }
              },
              "$not_in": {
                "type": "array",
                "description": "Array of resource values that should be included in the results. (multiple values)",
                "items": {
                  "type": "string"
                }
              },
              "$is": {
                "type": "string",
                "description": "Value is exactly this value. (single value)"
              },
              "$is_not": {
                "type": "string",
                "description": "Results omit this value. (single value)"
              },
              "$has_value": {
                "type": "string",
                "description": "Value is NOT null. The value for this parameter is an empty string."
              },
              "$is_unknown": {
                "type": "string",
                "description": "Value is null. The value for this parameter is an empty string."
              },
              "$starts_with": {
                "type": "string",
                "description": "Value starts with the specified string."
              },
              "$ends_with": {
                "type": "string",
                "description": "Value ends with the specified string."
              }
            }
          }
        }
      },
      "16_filter_conditions_number": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "conditions": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "$in": {
                "type": "array",
                "description": "Array of resource values that should be included in the results. (multiple values)",
                "items": {
                  "type": "integer"
                }
              },
              "$not_in": {
                "type": "array",
                "description": "Array of resource values that should be included in the results. (multiple values)",
                "items": {
                  "type": "integer"
                }
              },
              "$is": {
                "type": "integer",
                "description": "Value is exactly this value. (single value)"
              },
              "$is_not": {
                "type": "integer",
                "description": "Results omit this value. (single value)"
              },
              "$has_value": {
                "type": "string",
                "description": "Value is NOT null. The value for this parameter is an empty string."
              },
              "$is_unknown": {
                "type": "string",
                "description": "Value is null. The value for this parameter is an empty string."
              },
              "$more_than": {
                "type": "integer",
                "description": "Value is more than the specified number."
              },
              "$more_than_equal": {
                "type": "integer",
                "description": "Value is more than or equal to the specified number."
              },
              "$less_than": {
                "type": "integer",
                "description": "Value is less than the specified number."
              },
              "$less_than_equal": {
                "type": "integer",
                "description": "Value is less than or equal to the specified number."
              }
            }
          }
        }
      },
      "16_filter_conditions_boolean": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "conditions": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "$is": {
                "type": "string",
                "description": "Value is exactly this value. (single value)"
              },
              "$is_not": {
                "type": "string",
                "description": "Results omit this value. (single value)"
              },
              "$has_value": {
                "type": "string",
                "description": "Value is NOT null. The value for this parameter is an empty string."
              },
              "$is_unknown": {
                "type": "string",
                "description": "Value is null. The value for this parameter is an empty string."
              }
            }
          }
        }
      },
      "16_filter_conditions_date_time": {
        "title": "Filter by conditions",
        "type": "object",
        "description": "Data filters used to narrow the data records to be returned in the result.",
        "properties": {
          "conditions": {
            "type": "object",
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "properties": {
              "$after": {
                "type": "string",
                "description": "Value is after this date. Value for this parameter is in ISO 8601 format.",
                "format": "date-time"
              },
              "$before": {
                "type": "string",
                "description": "Value is before this date. Value for this parameter is in ISO 8601 format.",
                "format": "date-time"
              },
              "$has_value": {
                "type": "string",
                "description": "Value is NOT null. The value for this parameter is an empty string."
              },
              "$is_unknown": {
                "type": "string",
                "description": "Value is null. The value for this parameter is an empty string."
              }
            }
          }
        }
      },
      "17_obj_async_action_object": {
        "title": "Async Action Object",
        "type": "object",
        "description": "This is an object representing an asynchronous action.",
        "properties": {
          "id": {
            "type": "string",
            "example": "aa_0adad13d6f057f088e",
            "description": "Async action unique ID."
          },
          "type": {
            "type": "string",
            "description": "Type of async action.",
            "enum": [
              "CAMPAIGN.VOUCHERS_IMPORT",
              "CAMPAIGN.VOUCHERS_IMPORT_CSV",
              "CAMPAIGN.VOUCHERS_UPDATE",
              "CAMPAIGN.VOUCHERS_DELETE",
              "CAMPAIGN.VOUCHERS_GENERATE",
              "CAMPAIGNS.METADATA_KEY_PURGE",
              "CUSTOMERS.IMPORT_CSV",
              "CUSTOMERS.BULK_UPDATE",
              "CUSTOMERS.METADATA_UPDATE",
              "CUSTOMERS.METADATA_KEY_PURGE",
              "PRODUCTS.BULK_UPDATE",
              "PRODUCTS.METADATA_UPDATE",
              "PRODUCTS.METADATA_KEY_PURGE",
              "PRODUCTS.IMPORT_CSV",
              "SKUS.IMPORT_CSV",
              "VOUCHERS.IMPORT",
              "VOUCHERS.IMPORT_CSV",
              "VOUCHERS.BULK_UPDATE",
              "VOUCHERS.METADATA_UPDATE",
              "VOUCHERS.METADATA_KEY_PURGE",
              "ORDERS.IMPORT",
              "ORDERS.METADATA_KEY_PURGE"
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of async action. Informs you whether the async action has already been completed.",
            "enum": [
              "ENQUEUED",
              "IN_PROGRESS",
              "DONE",
              "FAILED"
            ]
          },
          "result": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_campaign_vouchers_import"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_campaign_vouchers_import_csv"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_campaign_vouchers_update"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_campaign_vouchers_delete"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_campaign_vouchers_generate"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_campaign_metadata_key_purge"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_customers_import_csv"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_customers_bulk_update"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_customers_metadata_update"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_customers_metadata_key_purge"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_products_bulk_update"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_products_metadata_update"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_products_import_csv"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_skus_import_csv"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_products_metadata_key_purge"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_vouchers_import"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_vouchers_import_csv"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_vouchers_bulk_update"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_vouchers_metadata_update"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_vouchers_metadata_key_purge"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_orders_import"
              },
              {
                "$ref": "#/components/schemas/17_res_obj_get_async_action_result_orders_metadata_key_purge"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the async action was scheduled in ISO 8601 format.",
            "example": "2022-06-23T11:21:45.578Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-06-23T11:21:46.795Z",
            "description": "Timestamp representing the date and time when the async action was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "request_id": {
            "type": "string",
            "example": "v-0b45cee140c3c9b5ca",
            "description": "Unique request ID."
          },
          "processing_time": {
            "type": "integer",
            "example": 1217,
            "description": "The length of time it took to process the request in milliseconds."
          },
          "progress": {
            "type": "integer",
            "description": "% progress to completion of the asynchronous action.",
            "minimum": 0,
            "maximum": 100
          },
          "object": {
            "type": "string",
            "default": "async_action",
            "description": "The type of object represented by JSON. This object stores information about the `async_action`."
          }
        }
      },
      "17_res_list_async_actions_GET": {
        "description": "Response body schema for listing asynchronous actions.  \n\nThe table below lists the possible types of async actions. The types are different for each endpoint generating the async action.\n\n| **Types by Context** |\n|:---|\n| **CAMPAIGN** |\n| CAMPAIGN.VOUCHERS_IMPORT<br>CAMPAIGN.VOUCHERS_IMPORT_CSV<br>CAMPAIGN.VOUCHERS_UPDATE<br>CAMPAIGN.VOUCHERS_DELETE<br>CAMPAIGN.VOUCHERS_GENERATE |\n| **CUSTOMERS** |\n| CUSTOMERS.IMPORT_CSV<br>CUSTOMERS.BULK_UPDATE<br>CUSTOMERS.METADATA_UPDATE<br>CUSTOMERS.METADATA_KEY_PURGE |\n| **PRODUCTS** |\n| PRODUCTS.BULK_UPDATE<br>PRODUCTS.METADATA_UPDATE<br>PRODUCTS.METADATA_KEY_PURGE<br>PRODUCTS.IMPORT_CSV<br>SKUS.IMPORT_CSV |\n| **VOUCHERS** |\n| VOUCHERS.IMPORT<br>VOUCHERS.IMPORT_CSV<br>VOUCHERS.BULK_UPDATE<br>VOUCHERS.METADATA_UPDATE<br>VOUCHERS.METADATA_KEY_PURGE |",
        "type": "object",
        "title": "List Async Actions Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about asynchronous actions.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "default": "async_actions",
            "description": "Identifies the name of the JSON property that contains the array of asynchronous actions."
          },
          "async_actions": {
            "type": "array",
            "description": "An array of async actions.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Contains an async action definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Async action unique ID.",
                  "example": "aa_0ae2af6a38161f8c79"
                },
                "type": {
                  "type": "string",
                  "description": "Type of async action.",
                  "enum": [
                    "CAMPAIGN.VOUCHERS_IMPORT",
                    "CAMPAIGN.VOUCHERS_IMPORT_CSV",
                    "CAMPAIGN.VOUCHERS_UPDATE",
                    "CAMPAIGN.VOUCHERS_DELETE",
                    "CAMPAIGN.VOUCHERS_GENERATE",
                    "CUSTOMERS.IMPORT_CSV",
                    "CUSTOMERS.BULK_UPDATE",
                    "CUSTOMERS.METADATA_UPDATE",
                    "CUSTOMERS.METADATA_KEY_PURGE",
                    "PRODUCTS.BULK_UPDATE",
                    "PRODUCTS.METADATA_UPDATE",
                    "PRODUCTS.METADATA_KEY_PURGE",
                    "PRODUCTS.IMPORT_CSV",
                    "SKUS.IMPORT_CSV",
                    "VOUCHERS.IMPORT",
                    "VOUCHERS.IMPORT_CSV",
                    "VOUCHERS.BULK_UPDATE",
                    "VOUCHERS.METADATA_UPDATE",
                    "VOUCHERS.METADATA_KEY_PURGE"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Status of async action. Informs you whether the async action has already been completed.",
                  "enum": [
                    "ENQUEUED",
                    "IN_PROGRESS",
                    "DONE",
                    "FAILED"
                  ]
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp representing the date and time when the async action was scheduled in ISO 8601 format.",
                  "example": "2022-04-07T07:42:44.442Z",
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "description": "Timestamp representing the date and time when the async action was updated in ISO 8601 format.",
                  "example": "2022-06-22T07:58:21.703Z",
                  "format": "date-time"
                },
                "request_id": {
                  "type": "string",
                  "example": "v-0ba50a7feb4998490",
                  "description": "Unique request ID."
                },
                "progress": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "% progress to completion of the asynchronous action."
                },
                "object": {
                  "type": "string",
                  "default": "async_action",
                  "description": "The type of object represented by each nested object in the JSON async_actions array. This object stores information about the `async_action`."
                }
              }
            }
          }
        }
      },
      "17_res_obj_get_async_action_result_campaign_vouchers_import": {
        "title": "CAMPAIGN.VOUCHERS_IMPORT",
        "type": "object",
        "description": "Result schema for a CAMPAIGN.VOUCHERS_IMPORT async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "failed": {
            "type": "array",
            "description": "If any records failed during the process, this array shows the failure details.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Unique voucher code."
                },
                "reason": {
                  "type": "string",
                  "description": "Detailed failure cause for the voucher code import."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "17_res_obj_get_async_action_result_campaign_vouchers_import_csv": {
        "title": "CAMPAIGN.VOUCHERS_IMPORT_CSV",
        "type": "object",
        "description": "Result schema for a CAMPAIGN.VOUCHERS_IMPORT_CSV async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "failed": {
            "type": "array",
            "description": "If any records failed during the process, this array shows the failure details.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Unique voucher code."
                },
                "row": {
                  "type": "integer",
                  "description": "The CSV file row number where the code definition is recorded. The row counter excludes the file headers row."
                },
                "reason": {
                  "type": "string",
                  "description": "Detailed failure cause for the voucher code import."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "8_obj_earning_rule_object_entered_segment": {
        "description": "This is an object representing an earning rule for entering a customer segment.",
        "type": "object",
        "title": "Earning Rule Object for Entered Segment",
        "properties": {
          "id": {
            "type": "string",
            "example": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format.",
            "example": "2022-02-02T13:18:32.557Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.",
            "example": "2022-02-03T13:09:27.206Z",
            "format": "date-time"
          },
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "$ref": "#/components/schemas/8_obj_fixed_points"
              },
              {
                "$ref": "#/components/schemas/8_obj_calculate_points_proportionally_customer_metadata"
              }
            ]
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. **Required** for the `customer.segment.entered` option in `event`.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            }
          },
          "event": {
            "type": "string",
            "default": "customer.segment.entered",
            "enum": [
              "customer.segment.entered"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `customer.segment.entered` an event defined by the Voucherify API corresponding to a customer entering a pre-defined customer segment."
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "default": "campaign",
                "description": "Defines the object associated with the earning rule. Defaults to `campaign`."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "object": {
            "type": "string",
            "default": "earning_rule",
            "description": "The type of object represented by JSON. Default is `earning_rule`."
          },
          "automation_id": {
            "type": "string",
            "description": "For internal use by Voucherify.",
            "example": "auto_4jH1yq9WJS0oJ8suagCrltyb"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        }
      },
      "17_res_obj_get_async_action_result_campaign_vouchers_update": {
        "title": "CAMPAIGN.VOUCHERS_UPDATE",
        "type": "object",
        "description": "Result schema for a CAMPAIGN.VOUCHERS_UPDATE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_campaign_vouchers_delete": {
        "title": "CAMPAIGN.VOUCHERS_DELETE",
        "type": "object",
        "description": "Result schema for a CAMPAIGN.VOUCHERS_DELETE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_campaign_vouchers_generate": {
        "title": "CAMPAIGN.VOUCHERS_GENERATE",
        "type": "object",
        "description": "Result schema for a CAMPAIGN.VOUCHERS_GENERATE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_campaign_metadata_key_purge": {
        "title": "CAMPAIGNS.METADATA_KEY_PURGE",
        "type": "object",
        "description": "Result schema for a CAMPAIGNS.METADATA_KEY_PURGE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_customers_import_csv": {
        "title": "CUSTOMERS.IMPORT_CSV",
        "type": "object",
        "description": "Result schema for a CUSTOMERS.IMPORT_CSV async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "failed": {
            "type": "array",
            "description": "If any records failed during the process, this array shows the failure details.",
            "items": {
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique customer ID from your inventory system as indicated in the CSV file."
                },
                "row": {
                  "type": "integer",
                  "description": "The CSV file row number where the customer is recorded. The row counter excludes the file headers row."
                },
                "reason": {
                  "type": "string",
                  "description": "Detailed failure cause for the customer import."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "17_res_obj_get_async_action_result_customers_bulk_update": {
        "title": "CUSTOMERS.BULK_UPDATE",
        "type": "object",
        "description": "Result schema for a CUSTOMERS.BULK_UPDATE async action type.",
        "properties": {
          "results": {
            "type": "array",
            "description": "An array of statuses for each record.",
            "items": {
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique customer `source_id`."
                },
                "updated": {
                  "type": "boolean",
                  "description": "Indicates whether the record was updated."
                },
                "found": {
                  "type": "boolean",
                  "description": "Indicates whether the record was found."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number or resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_customers_metadata_update": {
        "title": "CUSTOMERS.METADATA_UPDATE",
        "type": "object",
        "description": "Result schema for a CUSTOMERS.METADATA_UPDATE async action type.",
        "properties": {
          "results": {
            "type": "array",
            "description": "An array of statuses for each record.",
            "items": {
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique customer `source_id`."
                },
                "updated": {
                  "type": "boolean",
                  "description": "Indicates whether the record was updated."
                },
                "found": {
                  "type": "boolean",
                  "description": "Indicates whether the record was found."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_customers_metadata_key_purge": {
        "title": "CUSTOMERS.METADATA_KEY_PURGE",
        "type": "object",
        "description": "Result schema for a CUSTOMERS.METADATA_KEY_PURGE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_products_bulk_update": {
        "title": "PRODUCTS.BULK_UPDATE",
        "type": "object",
        "description": "Result schema for a PRODUCTS.BULK_UPDATE async action type.",
        "properties": {
          "results": {
            "type": "array",
            "description": "An array of statuses for each record.",
            "items": {
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique product `source_id`."
                },
                "updated": {
                  "type": "boolean",
                  "description": "Indicates whether the record was updated."
                },
                "found": {
                  "type": "boolean",
                  "description": "Indicates whether the record was found."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_products_metadata_update": {
        "title": "PRODUCTS.METADATA_UPDATE",
        "type": "object",
        "description": "Result schema for a PRODUCTS.METADATA_UPDATE async action type.",
        "properties": {
          "results": {
            "type": "array",
            "description": "An array of statuses for each record.",
            "items": {
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique product `source_id`."
                },
                "updated": {
                  "type": "boolean",
                  "description": "Indicates whether the record was updated."
                },
                "found": {
                  "type": "boolean",
                  "description": "Indicates whether the record was found."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_products_metadata_key_purge": {
        "title": "PRODUCTS.METADATA_KEY_PURGE",
        "type": "object",
        "description": "Result schema for a PRODUCTS.METADATA_KEY_PURGE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources updated successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_products_import_csv": {
        "title": "PRODUCTS.IMPORT_CSV",
        "type": "object",
        "description": "Result schema for a PRODUCTS.IMPORT_CSV async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "failed": {
            "type": "array",
            "description": "If any records failed during the process, this array shows the failure details.",
            "items": {
              "type": "object",
              "description": "Contains the details regarding a CSV file line item failed import.",
              "properties": {
                "row": {
                  "type": "integer",
                  "description": "The CSV file row number where the product definition is recorded. The row counter excludes the file headers row."
                },
                "reason": {
                  "type": "string",
                  "description": "Detailed failure cause for the product import."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "17_res_obj_get_async_action_result_skus_import_csv": {
        "title": "SKUS.IMPORT_CSV",
        "type": "object",
        "description": "Result schema for a SKUS.IMPORT_CSV async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result.",
            "example": "2 sku(s) imported successfully, 6 failed."
          },
          "failed": {
            "type": "array",
            "description": "If any records failed during the process, this array shows the failure details.",
            "items": {
              "type": "object",
              "description": "Contains the details regarding a CSV file line item failed import.",
              "properties": {
                "row": {
                  "type": "integer",
                  "description": "The CSV file row number where the SKU definition is recorded. The row counter excludes the file headers row.",
                  "example": 2
                },
                "reason": {
                  "type": "string",
                  "description": "Detailed failure cause for the SKU import.",
                  "example": "Resource sku with id size-small is in use by products with ids [prod_0b0e3441c2462eff2c]"
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "17_res_obj_get_async_action_result_vouchers_import": {
        "title": "VOUCHERS.IMPORT",
        "type": "object",
        "description": "Result schema for a VOUCHERS.IMPORT async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "failed": {
            "description": "If any records failed during the process, this array shows the failure details.",
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "reason": {
                "type": "string",
                "description": "Detailed failure cause for the voucher code import."
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "17_res_obj_get_async_action_result_vouchers_import_csv": {
        "title": "VOUCHERS.IMPORT_CSV",
        "type": "object",
        "description": "Result schema for a VOUCHERS.IMPORT_CSV async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "failed": {
            "type": "array",
            "description": "If any records failed during the process, this array shows the failure details.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Unique voucher code."
                },
                "row": {
                  "type": "integer",
                  "description": "The CSV file row number where the code definition is recorded. The row counter excludes the file headers row."
                },
                "reason": {
                  "type": "string",
                  "description": "Detailed failure cause for the voucher code import."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "17_res_obj_get_async_action_result_vouchers_bulk_update": {
        "title": "VOUCHERS.BULK_UPDATE",
        "type": "object",
        "description": "Result schema for a VOUCHERS.BULK_UPDATE async action type.",
        "properties": {
          "results": {
            "type": "array",
            "description": "An array of statuses for each record.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Unique voucher code."
                },
                "updated": {
                  "type": "boolean",
                  "description": "Indicates whether the record was updated."
                },
                "found": {
                  "type": "boolean",
                  "description": "Indicates whether the record was found."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_vouchers_metadata_update": {
        "title": "VOUCHERS.METADATA_UPDATE",
        "type": "object",
        "description": "Result schema for a VOUCHERS.METADATA_UPDATE async action type.",
        "properties": {
          "results": {
            "type": "array",
            "description": "An array of statuses for each record.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Unique voucher code."
                },
                "updated": {
                  "type": "boolean",
                  "description": "Indicates whether the record was updated."
                },
                "found": {
                  "type": "boolean",
                  "description": "Indicates whether the record was found."
                }
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_vouchers_metadata_key_purge": {
        "title": "VOUCHERS.METADATA_KEY_PURGE",
        "type": "object",
        "description": "Result schema for a VOUCHERS.METADATA_KEY_PURGE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "17_res_obj_get_async_action_result_orders_import": {
        "title": "ORDERS.IMPORT",
        "type": "object",
        "description": "Result schema for a ORDERS.IMPORT async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "failed": {
            "description": "If any records failed during the process, this array shows the failure details.",
            "type": "object",
            "properties": {
              "source_id": {
                "type": "string",
                "description": "Unique order source ID."
              },
              "reason": {
                "type": "string",
                "description": "Detailed failure cause for the voucher code import."
              }
            }
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          },
          "failed_count": {
            "type": "integer",
            "description": "Number of resources failed to process."
          }
        }
      },
      "17_res_obj_get_async_action_result_orders_metadata_key_purge": {
        "title": "ORDERS.METADATA_KEY_PURGE",
        "type": "object",
        "description": "Result schema for a ORDERS.METADATA_KEY_PURGE async action type.",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the result."
          },
          "done_count": {
            "type": "integer",
            "description": "Number of resources processed successfully."
          }
        }
      },
      "18_res_list_consents_GET": {
        "description": "Response body schema for listing consents.",
        "type": "object",
        "title": "List Consents Response Body",
        "properties": {
          "groups": {
            "type": "object",
            "description": "Contains marketing permission groups' definitions.",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "Stores information about marketing permission groups."
              },
              "data_ref": {
                "type": "string",
                "default": "data",
                "description": "Identifies the name of the attribute that contains the array of marketing permission groups."
              },
              "data": {
                "type": "array",
                "description": "An array of marketing permission groups.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Contains a marketing permission group's definition.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "cnstgr_3c7Z3rcOLv51bsXlRtTZPYj8",
                      "description": "Unique group ID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Marketing permission group name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Marketing permission group category."
                    },
                    "consents": {
                      "type": "array",
                      "description": "List of consents that are assigned to the group.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-04-13T09:12:47.743Z",
                      "description": "Timestamp representing the date and time when the group was created in ISO 8601 format."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-05-14T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the group was updated in ISO 8601 format."
                    },
                    "object": {
                      "type": "string",
                      "default": "consent_group",
                      "description": "Stores information about a marketing permission group."
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of groups."
              }
            }
          },
          "consents": {
            "type": "object",
            "description": "Contains opt-in consents' definitions.",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "Stores information about opt-in consents."
              },
              "data_ref": {
                "type": "string",
                "default": "data",
                "description": "Identifies the name of the attribute that contains the array of opt-in consents."
              },
              "data": {
                "type": "array",
                "description": "An array of consents.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Contains an opt-in consent definition.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "cnst_6jQ5XcUOLnj5L7ImQAdBsJ1I",
                      "description": "Unique consent ID."
                    },
                    "name": {
                      "type": "string",
                      "description": "Consent name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Consent description."
                    },
                    "category": {
                      "type": "string",
                      "description": "Consent category."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-04-13T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the consent was created in ISO 8601 format."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2022-05-14T09:11:27.037Z",
                      "description": "Timestamp representing the date and time when the consent was updated in ISO 8601 format."
                    },
                    "object": {
                      "type": "string",
                      "default": "consent",
                      "description": "Stores information about an opt-in consent."
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of consents."
              }
            }
          }
        }
      },
      "21_obj_metadata_schema_object": {
        "type": "object",
        "title": "Metadata Schema Object",
        "description": "This is an object representing a metadata schema.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique metadata schema ID.",
            "example": "ms_OF36L2rk4EqhdxvZs56IW9iE"
          },
          "related_object": {
            "type": "string",
            "description": "The resource type. There is an infinite number of possibilities for the resource type because you can define custom metadata schemas. Some examples are included here to show you the standard metadata schema resource types.",
            "enum": [
              "campaign",
              "customer",
              "earning_rule",
              "loyalty_tier",
              "order",
              "order_item",
              "product",
              "promotion_tier",
              "publication",
              "redemption",
              "reward",
              "voucher"
            ]
          },
          "properties": {
            "type": "object",
            "description": "Contains the metadata definitions. There can be many properties within this object.",
            "properties": {
              "custom_property_name": {
                "type": "object",
                "description": "Custom property name. This is defined in **Project Settings** > **Metadata Schema** in the Dashboard.",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "number",
                      "object",
                      "date",
                      "datetime",
                      "geopoint",
                      "boolean",
                      "image_url"
                    ]
                  },
                  "array": {
                    "type": "boolean",
                    "description": "Indicates whether the definition is an array."
                  },
                  "optional": {
                    "type": "boolean",
                    "description": "Indicates whether this definition is optional or not optional for the resource."
                  },
                  "objectType": {
                    "type": "string",
                    "nullable": true,
                    "description": "Returns the name of the custom resource if the resource was previously defined in the Dashboard as a custom (non-standard) Nested object."
                  },
                  "eq": {
                    "type": "array",
                    "description": "Array of possible values when the setting for `is equal to any of` in the Dashboard is defined explicitly.",
                    "items": {}
                  },
                  "ne": {
                    "type": "array",
                    "description": "Array of values that are not allowed when the setting for `is not equal to any of` in the Dashboard is defined explicitly.",
                    "items": {}
                  },
                  "lt": {
                    "type": "integer",
                    "description": "A property of `number` type must have `less than` this value."
                  },
                  "lte": {
                    "type": "integer",
                    "description": "A property of `number` type must be `less than or equal` to this value."
                  },
                  "gt": {
                    "type": "integer",
                    "description": "A property of `number` type must be `greater than` this value."
                  },
                  "gte": {
                    "type": "integer",
                    "description": "A property of `number` type must be `greater than or equal` to this value."
                  },
                  "deleted": {
                    "type": "boolean",
                    "description": "Indicates whether the definition was deleted from the schema."
                  },
                  "maxLength": {
                    "type": "integer",
                    "description": "Value for maximum length when the setting for `has maximum length of` in the Dashboard is defined explicitly."
                  },
                  "minLength": {
                    "type": "integer",
                    "description": "Value indicating minimum length when the setting for `has minimum length of` in the Dashboard is defined explicitly."
                  },
                  "exactLength": {
                    "type": "integer",
                    "description": "Value indicating exact length when the setting for `has exact length of` in the Dashboard is defined explicitly."
                  }
                }
              }
            }
          },
          "allow_defined_only": {
            "type": "boolean",
            "description": "Restricts the creation of metadata fields when set to `true`. In other words, it indicates whether or not you are allowed to create new metadata definitions; for example, in the campaign manager or publication manager. If it is set to true, then only the defined fields will be available for assigning values.\t"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-03T13:33:44.556Z",
            "description": "Timestamp representing the date and time when the metadata schema was created in ISO 8601 format.\t",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-08-11T08:05:30.695Z",
            "description": "Timestamp representing the date and time when the metadata schema was updated in ISO 8601 format.\t",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "default": "metadata_schema",
            "description": "The type of object represented by the JSON. This object stores information about the metadata schema."
          }
        }
      },
      "21_res_list_metadata_shemas": {
        "title": "List Metadata Schemas Response Body",
        "type": "object",
        "description": "Response schema for listing metadata schemas using **GET** `/metadata-schemas`.",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about metadata schemas in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of metadata schema objects.",
            "default": "schemas"
          },
          "schemas": {
            "type": "array",
            "description": "Array of metadata schema objects.",
            "items": {
              "$ref": "#/components/schemas/21_obj_metadata_schema_object"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of metadata schemas."
          }
        }
      },
      "22_res_list_locations": {
        "title": "List Locations Response Body",
        "type": "object",
        "description": "Response schema for listing locations using **GET** `/locations`.",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about locations in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of metadata schema objects.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "Array of location objects.",
            "items": {
              "$ref": "#/components/schemas/22_obj_location_object"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of locations."
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the `has_more` flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different end date filter) to get more records returned in the results."
          }
        }
      },
      "22_obj_location_object": {
        "title": "Location object",
        "type": "object",
        "description": "This is an object representing a location.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique location ID, assigned by the Voucherify API.",
            "example": "loc_NoMGXmHO9OUs7iz9mGWpamma"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about a `location`.",
            "default": "location"
          },
          "name": {
            "type": "string",
            "description": "Location name."
          },
          "shape": {
            "type": "object",
            "description": "Defines the shape and boundaries of the location.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/22_obj_location_object_shape_circle"
              },
              {
                "$ref": "#/components/schemas/22_obj_location_object_shape_polygon"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-14T15:12:06.817Z",
            "description": "Timestamp representing the date and time when the location was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-03-14T15:12:06.817Z",
            "description": "Timestamp representing the date and time when the location was updated in ISO 8601 format.",
            "format": "date-time"
          }
        }
      },
      "22_obj_location_object_shape_circle": {
        "title": "Circle",
        "type": "object",
        "description": "This is an object representing a circular shape.",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of shape being defined is a `circle`.",
            "default": "circle"
          },
          "format": {
            "type": "string",
            "description": "The location is defined in terms of a `distance` object.",
            "default": "distance"
          },
          "distance": {
            "type": "object",
            "title": "Distance",
            "description": "Defines the parameters for the circle.",
            "properties": {
              "center": {
                "type": "string",
                "description": "Center of the circle identified by GPS coordinates in decimal degrees.",
                "example": "geo:40.79372699823857,-74.15092132694554"
              },
              "radius": {
                "type": "string",
                "description": "Defines the radius of the circle."
              }
            }
          }
        }
      },
      "22_obj_location_object_shape_polygon": {
        "title": "Polygon",
        "type": "object",
        "description": "This is an object representing a polygon.",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of shape being defined is a `polygon`.",
            "default": "polygon"
          },
          "format": {
            "type": "string",
            "description": "The location is defined in terms of a `geojson` object.",
            "default": "geojson"
          },
          "distance": {
            "type": "object",
            "title": "Geojson",
            "description": "Defines the parameters for the polygon.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of geojson coordinates, i.e. `Polygon`.",
                "default": "Polygon"
              },
              "coordinates": {
                "type": "array",
                "description": "Contains array of GeoJSON coordinate arrays.",
                "items": {
                  "$ref": "#/components/schemas/22_geojson_array"
                }
              }
            }
          }
        }
      },
      "22_geojson_array": {
        "title": "GeoJSON coordinate array.",
        "type": "array",
        "description": "GeoJSON coordinate array.",
        "items": {
          "$ref": "#/components/schemas/22_geojson_coordinates"
        }
      },
      "22_geojson_coordinates": {
        "title": "GeoJSON coordinate.",
        "type": "array",
        "description": "GeoJSON coordinate.",
        "items": {
          "type": "integer"
        }
      },
      "22_filter_updated_at": {
        "type": "object",
        "title": "Updated at",
        "properties": {
          "updated_at": {
            "$ref": "#/components/schemas/16_filter_conditions_date_time"
          }
        },
        "description": "A filter on the list based on the object `updated_at` field. The value is a dictionary with the following options: `before`, `after`. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`). An example: `[updated_at][before]=2017-09-08T13:52:18.227Z`"
      },
      "22_filter_created_at": {
        "type": "object",
        "title": "Created at",
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/16_filter_conditions_date_time"
          }
        },
        "description": "A filter on the list based on the object `created_at` field. The value is a dictionary with the following options: `before`, `after`. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`). An example: `[created_at][before]=2017-09-08T13:52:18.227Z`"
      },
      "22_filter_name": {
        "type": "object",
        "title": "Name",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          }
        },
        "description": "A filter on the list based on the name field."
      },
      "22_filter_id": {
        "type": "object",
        "title": "ID",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/16_filter_conditions_string"
          }
        },
        "description": "A filter on the list based on the id of the location."
      },
      "QualificationsCheckEligibilityResponseBody": {
        "title": "Qualifications Check Eligibility Response Body",
        "type": "object",
        "description": "Response body schema for **POST** `/qualifications`.",
        "properties": {
          "redeemables": {
            "$ref": "#/components/schemas/QualificationsRedeemables"
          },
          "tracking_id": {
            "type": "string",
            "description": "This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "stacking_rules": {
            "$ref": "#/components/schemas/StackingRules"
          }
        }
      },
      "StackingRules": {
        "type": "object",
        "title": "Stacking Rules",
        "description": "Defines stacking rules for redeemables. Read more in the [Help Center](https://support.voucherify.io/article/604-stacking-rules)",
        "properties": {
          "redeemables_limit": {
            "type": "integer",
            "description": "Defines how many redeemables can be sent in one stacking request (note: more redeemables means more processing time!).",
            "default": 30,
            "maximum": 30,
            "minimum": 1
          },
          "applicable_redeemables_limit": {
            "type": "integer",
            "description": "Defines how many of the sent redeemables will be applied to the order. For example, a user can select 30 discounts but only 5 will be applied to the order and the remaining will be labelled as SKIPPED.",
            "default": 5,
            "maximum": 30,
            "minimum": 1
          },
          "applicable_exclusive_redeemables_limit": {
            "type": "integer",
            "description": "Defines how many redeemables with an exclusive category can be applied in one request.",
            "default": 1,
            "maximum": 30,
            "minimum": 1
          },
          "applicable_redeemables_per_category_limit": {
            "type": "integer",
            "description": "Defines how many redeemables per category can be applied in one request.",
            "default": 1,
            "maximum": 30,
            "minimum": 1
          },
          "exclusive_categories": {
            "type": "array",
            "description": "Lists all exclusive categories. A redeemable from a campaign with an exclusive category is the only redeemable to be redeemed when applied with redeemables from other campaigns unless these campaigns are exclusive or joint.",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "joint_categories": {
            "type": "array",
            "description": "Lists all joint categories. A campaign with a joint category is always applied regardless of the exclusivity of other campaigns.",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "redeemables_application_mode": {
            "type": "string",
            "description": "Defines redeemables application mode.",
            "enum": [
              "ALL",
              "PARTIAL"
            ]
          },
          "redeemables_sorting_rule": {
            "type": "string",
            "description": "Defines redeemables sorting rule.",
            "enum": [
              "CATEGORY_HIERARCHY",
              "REQUESTED_ORDER"
            ],
            "default": "REQUESTED_ORDER"
          }
        },
        "required": [
          "redeemables_limit",
          "applicable_redeemables_limit",
          "applicable_exclusive_redeemables_limit",
          "exclusive_categories",
          "joint_categories"
        ]
      },
      "QualificationsOption": {
        "type": "object",
        "description": "Configure parameters returned in the response.",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The maximum number of redeemables to be returned in the API request. The actual number of returned redeemables will be determined by the API. The default value is set to 5",
            "maximum": 100
          },
          "starting_after": {
            "type": "string",
            "nullable": true,
            "example": "2021-09-08T13:52:18.227Z",
            "format": "date-time",
            "description": "Cursor used for paging."
          },
          "filters": {
            "type": "object",
            "additionalProperties": false,
            "description": "A set of filters to return only a specific category or type of redeemable.",
            "properties": {
              "junction": {
                "$ref": "#/components/schemas/Junction"
              },
              "category_id": {
                "$ref": "#/components/schemas/QualificationsFieldConditions"
              },
              "campaign_id": {
                "$ref": "#/components/schemas/QualificationsFieldConditions"
              },
              "resource_id": {
                "$ref": "#/components/schemas/QualificationsFieldConditions"
              },
              "resource_type": {
                "$ref": "#/components/schemas/QualificationsFieldConditions"
              },
              "voucher_type": {
                "$ref": "#/components/schemas/QualificationsFieldConditions"
              },
              "code": {
                "$ref": "#/components/schemas/QualificationsFieldConditions"
              }
            }
          },
          "expand": {
            "type": "array",
            "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \n\n| **Expand Option** | **Response Body** |\n|:---|:---|\n| [\"redeemable\"] | - Returns the redeemables' metadata. |\n| [\"category\"] | - Returns an expanded `categories` object, showing details about the category. |\n| [\"validation_rules\"] | - Returns an expanded `validation_rules` object, showing details about the validation rules. |",
            "items": {
              "type": "string",
              "enum": [
                "redeemable",
                "category",
                "validation_rules"
              ]
            }
          },
          "sorting_rule": {
            "type": "string",
            "description": "Is used to determine the order in which data is displayed in the result array. \n\n - `DEFAULT` - Sorting descending by `created_at` \n - `BEST_DEAL` - Sorting descending by `total_applied_discount_amount` \n - `LEAST_DEAL` - Sorting ascending by `total_applied_discount_amount`",
            "enum": [
              "BEST_DEAL",
              "LEAST_DEAL",
              "DEFAULT"
            ]
          }
        }
      },
      "QualificationsCheckEligibilityRequestBody": {
        "type": "object",
        "title": "Qualifications Check Eligibility Request Body",
        "description": "Request body schema for **POST** `/qualifications`.",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "mode": {
            "type": "string",
            "description": "Defines which resources Voucherify will use.\nThe `ADVANCED` mode is available after purchase only.",
            "enum": [
              "BASIC",
              "ADVANCED"
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "scenario": {
            "type": "string",
            "description": "Defines the scenario Voucherify should consider during the qualification process.\n\n- `ALL` - Scenario that returns all redeemables available for the customer in one API request. This scenario is used by default when no value is selected.\n- `CUSTOMER_WALLET` - returns vouchers applicable to the customer’s cart based on the vouchers assigned to the customer’s profile.\n- `AUDIENCE_ONLY` - returns all vouchers, promotion tiers, and campaigns available to the customer. Voucherify validates the rules based on the customer profile only.\n- `PRODUCTS` - returns all promotions available for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\n- `PRODUCTS_DISCOUNT` - returns all promotions available for products when a discount is defined as applicable to specific item(s).\n- `PROMOTION_STACKS` - returns the applicable promotion stacks.\n- `PRODUCTS_BY_CUSTOMER` - returns all promotions available for a customer for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\n- `PRODUCTS_DISCOUNT_BY_CUSTOMER` - returns all promotions available for a customer for products when a discount is defined as applicable to specific item(s).",
            "enum": [
              "ALL",
              "CUSTOMER_WALLET",
              "AUDIENCE_ONLY",
              "PRODUCTS",
              "PRODUCTS_DISCOUNT",
              "PROMOTION_STACKS",
              "PRODUCTS_BY_CUSTOMER",
              "PRODUCTS_DISCOUNT_BY_CUSTOMER"
            ]
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QualificationsOption"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against redeemables requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "QualificationsFieldConditions": {
        "title": "Qualifications Field Conditions",
        "type": "object",
        "properties": {
          "conditions": {
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "allOf": [
              {
                "$ref": "#/components/schemas/QualificationsFiltersCondition"
              }
            ]
          }
        }
      },
      "QualificationsFiltersCondition": {
        "title": "Qualifications Filters Condition\n",
        "type": "object",
        "properties": {
          "$is": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_not": {
            "$ref": "#/components/schemas/Any"
          },
          "$has_value": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_unknown": {
            "$ref": "#/components/schemas/Any"
          },
          "$in": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_in": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "QualificationsRedeemables": {
        "title": "Redeemables",
        "type": "object",
        "description": "List of redeemables for examine qualification.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. Default is `list`.",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "description": "Identifies the name of the attribute that contains the array of qualified redeemables.",
            "enum": [
              "data"
            ]
          },
          "data": {
            "type": "array",
            "description": "Array of qualified redeemables.",
            "items": {
              "$ref": "#/components/schemas/QualificationsRedeemable"
            }
          },
          "total": {
            "type": "integer",
            "example": 5,
            "description": "The number of redeemables returned in the API request."
          },
          "has_more": {
            "type": "boolean",
            "description": "As results are always limited, the `has_more` flag indicates whether there are more records for given parameters. This let's you know if you are able to run another request (with different options) to get more records returned in the results."
          },
          "more_starting_after": {
            "type": "string",
            "description": "Timestamp representing the date and time to use in starting_after cursor to get more redeemables.",
            "format": "date-time",
            "example": "2023-10-31T12:13:16.374Z"
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total",
          "has_more"
        ]
      },
      "QualificationsRedeemableBase": {
        "title": "Single redeemable",
        "description": "Data of single redeemable which was properly qualified.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the redeemable."
          },
          "object": {
            "type": "string",
            "description": "Object type of the redeemable.",
            "enum": [
              "campaign",
              "promotion_tier",
              "promotion_stack",
              "voucher"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "result": {
            "$ref": "#/components/schemas/RedeemableResult"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "validation_rule_id": {
            "type": "string",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
          },
          "applicable_to": {
            "description": "Contains list of items that qualify in the scope of the discount. These are definitions of included products, SKUs, and product collections. These can be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicableToResultList"
              }
            ]
          },
          "inapplicable_to": {
            "description": "Contains list of items that do not qualify in the scope of the discount. These are definitions of excluded products, SKUs, and product collections. These CANNOT be discounted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/InapplicableToResultList"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          },
          "categories": {
            "type": "array",
            "description": "List of category information.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "banner": {
            "type": "string",
            "example": "Order Paid - You will get 100 points",
            "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
          },
          "name": {
            "type": "string",
            "example": "promotion_tier_get_points",
            "description": "Name of the redeemable."
          },
          "campaign_name": {
            "type": "string",
            "example": "PromotionCampaign",
            "description": "Name of the campaign associated to the redeemable. This field is available only if object is not `campaign`"
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_Mow7u4gSxagLlZ2oDQ01ZS5N",
            "description": "Id of the campaign associated to the redeemable. This field is available only if object is not `campaign`"
          },
          "validation_rules_assignments": {
            "$ref": "#/components/schemas/ValidationRulesAssignmentsList"
          }
        }
      },
      "QualificationsRedeemable": {
        "title": "Combined response of redeemable object and multiple redeemables within",
        "allOf": [
          {
            "$ref": "#/components/schemas/QualificationsRedeemableBase"
          },
          {
            "type": "object",
            "title": "",
            "properties": {
              "redeemables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QualificationsRedeemableBase"
                }
              }
            }
          }
        ]
      },
      "ValidationRulesAssignmentsList": {
        "title": "Validation Rules Assignments List",
        "description": "List of Validation Rules Assignments",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about validation rules assignments."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of validation rules assignments."
          },
          "data": {
            "type": "array",
            "description": "Contains array of validation rules assignments.",
            "items": {
              "$ref": "#/components/schemas/BusValRuleAssignment"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of validation rules assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "BusValRuleAssignment": {
        "title": "Business Validation Rule Assignment",
        "description": "Assignments of business validation rule",
        "example": {
          "id": "asgm_LnY1g7UNFA9KyDrD",
          "rule_id": "val_3gPNA6SnH4ae",
          "related_object_id": "camp_CZOnEGiZfwIKWmSjhIoIT7Ol",
          "related_object_type": "campaign",
          "object": "validation_rules_assignment",
          "validation_status": "PARTIALLY_VALID",
          "validation_omitted_rules": [
            "1"
          ]
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for a assignment"
          },
          "rule_id": {
            "type": "string",
            "description": "The unique identifier for a rule"
          },
          "related_object_id": {
            "type": "string",
            "description": "The unique identifier for a related object"
          },
          "related_object_type": {
            "type": "string",
            "description": "The type of related object"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was created in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the object was last updated in ISO 8601 format.",
            "example": "2022-03-09T11:19:04.819Z",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "validation_rules_assignment",
            "enum": [
              "validation_rules_assignment"
            ]
          },
          "validation_status": {
            "type": "string",
            "description": "The validation status of the assignment",
            "enum": [
              "VALID",
              "PARTIALLY_VALID",
              "INVALID"
            ]
          },
          "validation_omitted_rules": {
            "type": "array",
            "description": "The list of omitted rules",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "rule_id",
          "related_object_id",
          "related_object_type",
          "object"
        ]
      },
      "RedeemableResult": {
        "title": "Redeemable Result",
        "description": "Information about redeemable result.",
        "properties": {
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "gift": {
            "$ref": "#/components/schemas/RedeemableGift"
          },
          "loyalty_card": {
            "description": "Loyalty Card object response",
            "allOf": [
              {
                "$ref": "#/components/schemas/RedeemableLoyaltyCard"
              }
            ]
          },
          "error": {
            "description": "Error in result",
            "allOf": [
              {
                "$ref": "#/components/schemas/Error"
              }
            ]
          }
        }
      },
      "RedeemableLoyaltyCard": {
        "type": "object",
        "title": "Redeemable Loyalty Card",
        "description": "Redeemable loyalty card object response",
        "properties": {
          "points": {
            "type": "integer",
            "example": 7000,
            "description": "Total points incurred over lifespan of loyalty card."
          },
          "balance": {
            "type": "integer",
            "example": 6970,
            "description": "Points available for reward redemption."
          },
          "exchange_ratio": {
            "type": "number",
            "description": "The cash equivalent of the points defined in the points_ratio property."
          },
          "points_ratio": {
            "type": "integer",
            "description": "The number of loyalty points that will map to the predefined cash amount defined by the exchange_ratio property."
          },
          "transfers": {
            "title": "Loyalties Transfer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltiesTransferPoints"
            }
          }
        }
      },
      "PromotionStacksListRequestQuery": {
        "title": "Promotion Stacks List Request Query",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "multipleOf": 100,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
          },
          "page": {
            "type": "integer",
            "description": "Which page of results to return."
          },
          "order": {
            "type": "string",
            "enum": [
              "created_at",
              "-created_at",
              "updated_at",
              "-updated_at",
              "name",
              "-name"
            ],
            "description": "Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order."
          },
          "created_at": {
            "type": "object",
            "description": "A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before]=2017-09-08T13:52:18.227Z",
            "properties": {
              "before": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time before the voucher was created in ISO 8601 format."
              },
              "after": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time after the voucher was created in ISO 8601 format."
              }
            }
          },
          "updated_at": {
            "type": "object",
            "description": "A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before]=2017-09-08T13:52:18.227Z",
            "properties": {
              "before": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time before the voucher was updated in ISO 8601 format."
              },
              "after": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time after the voucher was updated in ISO 8601 format."
              }
            }
          }
        }
      },
      "PromotionStackBase": {
        "title": "Promotion Stack Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Promotion stack name."
          },
          "tiers": {
            "type": "object",
            "required": [
              "ids"
            ],
            "description": "Contains the tier configuration.",
            "properties": {
              "ids": {
                "type": "array",
                "minItems": 1,
                "description": "Contains the list of tiers in a pre-defined sequence.",
                "items": {
                  "type": "string"
                }
              },
              "hierarchy_mode": {
                "type": "string",
                "default": "MANUAL",
                "enum": [
                  "MANUAL"
                ]
              }
            }
          }
        },
        "required": [
          "name",
          "tiers"
        ]
      },
      "PromotionStack": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was updated in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "default": "promotion_stack",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON. "
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "LoyaltiesEarningRulesGetResponseBody": {
        "type": "object",
        "title": "Loyalties Earning Rules Get Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/earning-rules/{earningRuleId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRule"
          }
        ]
      },
      "LoyaltiesEarningRulesEnableResponseBody": {
        "title": "Loyalties Earning Rules Enable Response Body",
        "description": "Response body schema for **POST** `/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable`",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "default": true,
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date."
              }
            },
            "required": [
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "LoyaltiesEarningRulesDisableResponseBody": {
        "title": "Loyalties Earning Rules Disable Response Body",
        "description": "Response body schema for **POST** `/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable`",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "default": false,
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date."
              }
            },
            "required": [
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "EarningRuleBase": {
        "title": "EarningRuleBase",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format."
          },
          "loyalty": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EarningRuleFixed"
              },
              {
                "$ref": "#/components/schemas/EarningRuleProportional"
              }
            ]
          },
          "event": {
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EarningRuleEvent"
              }
            ]
          },
          "custom_event": {
            "type": "object",
            "properties": {
              "schema_id": {
                "type": "string"
              }
            },
            "required": [
              "schema_id"
            ]
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. Required for the customer.segment.entered option in event.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            },
            "required": [
              "id"
            ]
          },
          "source": {
            "type": "object",
            "required": [
              "object_id",
              "object_type"
            ],
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "description": "Defines the object associated with the earning rule. Defaults to `campaign`.",
                "default": "campaign",
                "enum": [
                  "campaign"
                ]
              }
            }
          },
          "object": {
            "type": "string",
            "default": "earning_rule",
            "enum": [
              "earning_rule"
            ],
            "description": "The type of object represented by JSON. Default is earning_rule."
          },
          "automation_id": {
            "type": "string",
            "description": "For internal use by Voucherify."
          },
          "start_date": {
            "type": "string",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is inactive before this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default."
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format. Earning rule is inactive after this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.start_date required when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a duration of PT1H will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an interval of P2D will be valid every other day."
              }
            },
            "required": [
              "duration",
              "interval"
            ]
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0` Sunday\n- `1` Monday\n- `2` Tuesday\n- `3` Wednesday\n- `4` Thursday\n- `5` Friday\n- `6` Saturday",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 6
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format."
          }
        },
        "required": [
          "id",
          "created_at",
          "loyalty",
          "source",
          "object",
          "automation_id",
          "metadata"
        ]
      },
      "EarningRuleEvent": {
        "title": "Earning Rule Event",
        "type": "string",
        "enum": [
          "order.paid",
          "customer.segment.entered",
          "custom_event",
          "customer.loyalty.tier.upgraded",
          "customer.loyalty.tier.downgraded",
          "customer.loyalty.tier.prolonged",
          "customer.loyalty.tier.joined",
          "customer.loyalty.tier.left"
        ]
      },
      "EarningRuleFixed": {
        "title": "Define fixed amount of points",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "enum": [
              "FIXED"
            ],
            "description": "The number of points to be added to the loyalty card."
          },
          "points": {
            "type": "integer",
            "description": "Defines how the points will be added to the loyalty card. FIXED adds a fixed number of points."
          }
        }
      },
      "EarningRuleProportionalOrder": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderTotalAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderMetadata"
          }
        ],
        "title": "Order"
      },
      "EarningRuleProportionalOrderAmount": {
        "title": "Order Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_AMOUNT",
            "enum": [
              "ORDER_AMOUNT"
            ],
            "description": "`ORDER_AMOUNT`: Pre-discount order amount (X points for every Y spent excluding discounts)"
          },
          "order": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "object",
                "required": [
                  "every",
                  "points"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EarningRuleProportionalOrderTotalAmount": {
        "title": "Order Total Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_TOTAL_AMOUNT",
            "enum": [
              "ORDER_TOTAL_AMOUNT"
            ],
            "description": "`ORDER_TOTAL_AMOUNT`: Total order amount (X points for every Y spent including discount)"
          },
          "order": {
            "type": "object",
            "required": [
              "total_amount"
            ],
            "properties": {
              "total_amount": {
                "type": "object",
                "required": [
                  "every",
                  "points"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EarningRuleProportionalOrderMetadata": {
        "title": "Order Metadata",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_METADATA",
            "enum": [
              "ORDER_METADATA"
            ],
            "description": "`ORDER_METADATA`: Order Metadata (X points for every Y in metadata attribute, defined in the property key under the order.metadata object)"
          },
          "order": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "description": "Defines the formula for calculating points proportionally.",
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the order metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "Order metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order"
        ]
      },
      "EarningRuleProportionalOrderItemsQuantity": {
        "title": "Order Items Quantity",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_ITEMS_QUANTITY",
            "enum": [
              "ORDER_ITEMS_QUANTITY"
            ],
            "description": "`ORDER_ITEMS_QUANTITY`: Quantity of items defined in order_items.quantity.object & .id (X points for every Y items excluding free items)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "quantity"
            ],
            "properties": {
              "quantity": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderItemsAmount": {
        "title": "Order Items Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_ITEMS_AMOUNT",
            "enum": [
              "ORDER_ITEMS_AMOUNT"
            ],
            "description": "ORDER_ITEMS_AMOUNT; Pre-discount amount spent on items defined in the order_items.amount.object & .id (X points for every Y spent on items excluding discounts)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalOrderItemsSubtotalAmount": {
        "title": "Order Items Subtotal Amount",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "ORDER_ITEMS_SUBTOTAL_AMOUNT",
            "enum": [
              "ORDER_ITEMS_SUBTOTAL_AMOUNT"
            ],
            "description": "ORDER_ITEMS_SUBTOTAL_AMOUNT; Amount spent on items defined in the order_items.subtotal_amount.object & .id (X points for every Y spent on items including discounts)"
          },
          "order_items": {
            "type": "object",
            "required": [
              "subtotal_amount"
            ],
            "properties": {
              "subtotal_amount": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "object",
                  "id"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "object": {
                    "type": "string",
                    "description": "Type of object taken under consideration.",
                    "enum": [
                      "products_collection",
                      "product",
                      "sku"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "order_items"
        ]
      },
      "EarningRuleProportionalCustomerMetadata": {
        "title": "Customer Metadata",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "CUSTOMER_METADATA",
            "enum": [
              "CUSTOMER_METADATA"
            ],
            "description": "CUSTOMER_METADATA: Customer Metadata (X points for every Y in metadata attribute, defined in the property key under the customer.metadata object)"
          },
          "customer": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the customer metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "Customer metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "customer"
        ]
      },
      "EarningRuleProportionalCustomEvent": {
        "title": "Earning Rule Proportional Custom Event",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "PROPORTIONAL",
            "enum": [
              "PROPORTIONAL"
            ],
            "description": "Defines how the points will be added to the loyalty card.PROPORTIONAL adds points based on a pre-defined ratio."
          },
          "calculation_type": {
            "type": "string",
            "default": "CUSTOM_EVENT_METADATA",
            "enum": [
              "CUSTOM_EVENT_METADATA"
            ],
            "description": "CUSTOM_EVENT_METADATA: Custom event metadata (X points for every Y in metadata attribute)."
          },
          "custom_event": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "type": "object",
                "required": [
                  "every",
                  "points",
                  "property"
                ],
                "description": "Defines the ratio based on the property defined in the calculation_type parameter. For every given increment of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every order metadata property value, give points.",
                "properties": {
                  "every": {
                    "type": "integer",
                    "description": "For how many increments of the customer metadata property to grant points for."
                  },
                  "points": {
                    "type": "integer",
                    "description": "Number of points to be awarded, i.e. how many points to be added to the loyalty card."
                  },
                  "property": {
                    "type": "string",
                    "description": "\nCustom event metadata property."
                  }
                }
              }
            }
          }
        },
        "required": [
          "type",
          "calculation_type",
          "custom_event"
        ]
      },
      "EarningRuleProportional": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrder"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItems"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalCustomerMetadata"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalCustomEvent"
          }
        ],
        "title": "Calculate points proportionally"
      },
      "EarningRuleProportionalOrderItems": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsQuantity"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsAmount"
          },
          {
            "$ref": "#/components/schemas/EarningRuleProportionalOrderItemsSubtotalAmount"
          }
        ],
        "title": "Order Items"
      },
      "LoyaltiesListMemberRewardsRequestQuery": {
        "title": "Loyalties List Member Rewards Request Query",
        "type": "object",
        "properties": {
          "affordable_only": {
            "type": "string"
          },
          "limit": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          }
        }
      },
      "LoyaltiesGetPointsExpirationRequestQuery": {
        "title": "Loyalties Get Points Expiration Request Query",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "multipleOf": 100
          },
          "page": {
            "type": "integer"
          }
        }
      },
      "LoyaltiesListCardTransactionsRequestQuery": {
        "title": "Loyalties List Card Transactions Request Query",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "multipleOf": 100
          },
          "page": {
            "type": "integer"
          }
        }
      },
      "LoyaltyCardTransactionsType": {
        "title": "LoyaltyCardTransactionsType",
        "type": "string",
        "enum": [
          "POINTS_ACCRUAL",
          "POINTS_CANCELLATION",
          "POINTS_REDEMPTION",
          "POINTS_REFUND",
          "POINTS_ADDITION",
          "POINTS_REMOVAL",
          "POINTS_EXPIRATION",
          "POINTS_TRANSFER_IN",
          "POINTS_TRANSFER_OUT"
        ]
      },
      "VoucherTransaction": {
        "title": "Voucher Transaction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique transaction ID."
          },
          "source_id": {
            "type": "string",
            "nullable": true,
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service. In case of a redemption, this value is null."
          },
          "voucher_id": {
            "type": "string",
            "description": "Unique voucher ID."
          },
          "campaign_id": {
            "type": "string",
            "description": "Unqiue campaign ID of the voucher's parent campaign if it is part of campaign that generates bulk codes."
          },
          "source": {
            "type": "string",
            "nullable": true,
            "description": "The channel through which the transaction took place, whether through the API or the the Dashboard. In case of a redemption, this value is null."
          },
          "reason": {
            "type": "string",
            "nullable": true,
            "description": "Reason why the transaction occurred. In case of a redemption, this value is null."
          },
          "type": {
            "description": "Type of transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LoyaltyCardTransactionsType"
              }
            ]
          },
          "details": {
            "type": "object",
            "description": "Contains the detailed information about the transaction.",
            "properties": {
              "balance": {
                "type": "object",
                "description": "Contains information on how the balance was affected by the transaction.",
                "properties": {
                  "type": {
                    "type": "string",
                    "pattern": "loyalty_card",
                    "default": "loyalty_card",
                    "enum": [
                      "loyalty_card"
                    ],
                    "description": "The type of voucher whose balance is being adjusted due to the transaction."
                  },
                  "total": {
                    "type": "integer",
                    "description": "The available points prior to the transaction."
                  },
                  "object": {
                    "type": "string",
                    "pattern": "balance",
                    "default": "balance",
                    "enum": [
                      "balance"
                    ],
                    "description": "The type of object represented by the JSON."
                  },
                  "points": {
                    "type": "integer",
                    "description": "The amount of points being used up in the transaction."
                  },
                  "balance": {
                    "type": "integer",
                    "description": "The points balance on the loyalty card after the points in the transaction are subtracted from the loyalty card."
                  },
                  "related_object": {
                    "type": "object",
                    "required": [
                      "id",
                      "type"
                    ],
                    "description": "Defines the resource that is being modified with the values that are returned in the balance object.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Identifies the voucher that is being modified, this is the ID that was assigned by the Voucherify API."
                      },
                      "type": {
                        "type": "string",
                        "pattern": "voucher",
                        "default": "voucher",
                        "enum": [
                          "voucher"
                        ],
                        "description": "The object being modified, i.e. voucher."
                      }
                    }
                  }
                },
                "required": [
                  "type",
                  "total",
                  "object",
                  "points",
                  "balance",
                  "related_object"
                ]
              },
              "order": {
                "type": "object",
                "description": "Contains information about the original order.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique order ID."
                  },
                  "source_id": {
                    "type": "string",
                    "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
                  }
                },
                "required": [
                  "id",
                  "source_id"
                ]
              },
              "event": {
                "type": "object",
                "description": "Contains information about the event that triggers the point accrual.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique event ID."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of event."
                  }
                },
                "required": [
                  "id",
                  "type"
                ]
              },
              "earning_rule": {
                "type": "object",
                "description": "Contains information about the earning rule.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique earning rule ID."
                  },
                  "source": {
                    "type": "object",
                    "required": [
                      "banner"
                    ],
                    "description": "Contains the custom earning rule name.",
                    "properties": {
                      "banner": {
                        "type": "string",
                        "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "source"
                ]
              },
              "segment": {
                "type": "object",
                "description": "Contains information about the segment.",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "loyalty_tier": {
                "type": "object",
                "description": "Contains information about the loyalty tier.",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "redemption": {
                "type": "object",
                "description": "Contains information about the original redemption.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique redemption ID."
                  }
                },
                "required": [
                  "id"
                ]
              },
              "rollback": {
                "type": "object",
                "description": "Contains information about the redemption rollback.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique redemption rollback ID."
                  }
                },
                "required": [
                  "id"
                ]
              },
              "custom_event": {
                "type": "object",
                "description": "Contains information about the custom event that triggers the point accrual.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique event ID."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of custom event."
                  }
                },
                "required": [
                  "id",
                  "type"
                ]
              },
              "event_schema": {
                "type": "object",
                "description": "Contains information about the custom event metadata schema.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique metadata schema ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "Type of custom event."
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "reward": {
                "type": "object",
                "description": "Contains information about the pay with points reward.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique reward ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "Reward name."
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "source_voucher": {
                "description": "Contains information on how the balance on the donor loyalty card was affected by the transaction.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SimpleVoucher"
                  }
                ]
              },
              "destination_voucher": {
                "description": "Contains information on how the balance on the receiving loyalty card was affected by the transaction.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SimpleVoucher"
                  }
                ]
              }
            }
          },
          "related_transaction_id": {
            "type": "string",
            "nullable": true,
            "description": "The related transaction ID on the receiving card."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the transaction was created in ISO 8601 format."
          }
        },
        "required": [
          "id",
          "source_id",
          "voucher_id",
          "campaign_id",
          "source",
          "reason",
          "type",
          "details",
          "related_transaction_id",
          "created_at"
        ]
      },
      "LoyaltyCardTransaction": {
        "title": "Loyalty Card Transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/VoucherTransaction"
          }
        ]
      },
      "LoyaltyCardTransactionsFields": {
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "type",
          "source_id",
          "reason",
          "source",
          "balance",
          "amount",
          "related_transaction_id",
          "created_at",
          "details"
        ]
      },
      "Reward": {
        "type": "object",
        "title": "Reward",
        "properties": {
          "id": {
            "type": "string",
            "example": "rew_nIy4gHpQHle2c3pNMwuj7G6j",
            "description": "Unique reward ID, assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Reward name."
          },
          "stock": {
            "type": "integer",
            "nullable": true,
            "description": "Configurable for **material rewards**. The number of units of the product that you want to share as reward."
          },
          "redeemed": {
            "type": "integer",
            "nullable": true,
            "description": "Defines the number of already invoked (successful) reward redemptions.\t"
          },
          "attributes": {
            "type": "object",
            "description": "These properties are configurable for **material rewards**.",
            "properties": {
              "image_url": {
                "type": "string",
                "description": "The HTTPS URL pointing to the .png or .jpg file."
              },
              "description": {
                "type": "string",
                "description": "An arbitrary string that you can attach to a material reward."
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format."
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN",
              "COIN",
              "MATERIAL"
            ],
            "description": "Reward type."
          },
          "parameters": {
            "description": "Defines how the reward is generated.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardType"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the reward was created in ISO 8601 format.",
            "example": "2022-08-11T14:49:22.586Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp representing the date and time when the reward was updated in ISO 8601 format.",
            "example": "2022-08-11T16:01:34.885Z",
            "format": "date-time"
          },
          "object": {
            "description": "The type of object represented by the JSON. This object stores information about the reward.",
            "default": "reward",
            "enum": [
              "reward"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "stock",
          "redeemed",
          "metadata",
          "created_at",
          "updated_at",
          "object"
        ]
      },
      "RewardType": {
        "title": "Reward type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RewardTypeCampaign"
          },
          {
            "$ref": "#/components/schemas/RewardTypeCoin"
          },
          {
            "$ref": "#/components/schemas/RewardTypeMaterial"
          }
        ]
      },
      "RewardTypeCoin": {
        "title": "Pay with Points",
        "type": "object",
        "properties": {
          "coin": {
            "type": "object",
            "required": [
              "exchange_ratio"
            ],
            "description": "Defines the ratio by mapping the number of loyalty points in points_ratio to a predefined cash amount in exchange_ratio.",
            "properties": {
              "exchange_ratio": {
                "type": "number",
                "description": "The cash equivalent of the points defined in the points_ratio property."
              },
              "points_ratio": {
                "type": "integer",
                "description": "The number of loyalty points that will map to the predefined cash amount defined by the exchange_ratio property."
              }
            }
          }
        },
        "required": [
          "coin"
        ]
      },
      "RewardTypeMaterial": {
        "title": "Material",
        "type": "object",
        "properties": {
          "product": {
            "type": "object",
            "required": [
              "id",
              "sku_id"
            ],
            "description": "Contains information about the product given as a reward.",
            "properties": {
              "id": {
                "type": "string",
                "example": "prod_0b7d7dfb05cbe5c616",
                "description": "Unique product ID, assigned by Voucherify."
              },
              "sku_id": {
                "type": "string",
                "nullable": true,
                "example": "sku_0b7d7dfb090be5c619",
                "description": "Unique SKU ID, assigned by Voucherify, of the SKU given as a reward."
              }
            }
          }
        },
        "required": [
          "product"
        ]
      },
      "RewardTypeCampaign": {
        "title": "Digital",
        "type": "object",
        "properties": {
          "campaign": {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "description": "Objects stores information about the campaign related to the reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique campaign ID, assigned by Voucherify."
              },
              "balance": {
                "type": "integer",
                "description": "The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "type": {
                "type": "string",
                "enum": [
                  "DISCOUNT_COUPONS",
                  "PROMOTION",
                  "GIFT_VOUCHERS",
                  "REFERRAL_PROGRAM",
                  "LOYALTY_PROGRAM"
                ],
                "description": "Campaign type."
              }
            }
          }
        },
        "required": [
          "campaign"
        ]
      },
      "LoyaltiesTransferPoints": {
        "title": "Loyalties Transfer Points",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique loyalty card code from which the user wants to transfer loyalty points (source)."
          },
          "points": {
            "type": "integer",
            "description": "The number of loyalty points that the user wants to transfer to another loyalty card. The number of points cannot be higher than the current balance on the loyalty card (source)."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transfer."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          }
        },
        "required": [
          "code",
          "points",
          "source_id"
        ]
      },
      "PointsExpirationTypes": {
        "title": "Points Expiration Types",
        "type": "string",
        "enum": [
          "PROGRAM_RULES",
          "CUSTOM_DATE",
          "NON_EXPIRING"
        ]
      },
      "ExportsCreateRequestBody": {
        "description": "Request body schema for **POST** `/exports`.",
        "title": "Exports Create Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsBase"
          }
        ],
        "type": "object"
      },
      "ExportBase": {
        "title": "Export Base",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "default": "export",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format."
          },
          "status": {
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "DONE",
              "ERROR"
            ],
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated."
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "result": {
            "type": "object",
            "nullable": true,
            "description": "Contains the URL of the CSV file.",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL of the CSV file location. It contains the token used for authorization in the Download export method."
              }
            },
            "required": [
              "url"
            ]
          },
          "user_id": {
            "type": "string",
            "nullable": true,
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "result",
          "user_id"
        ]
      },
      "Export": {
        "title": "Export",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucher"
          },
          {
            "$ref": "#/components/schemas/ExportRedemption"
          },
          {
            "$ref": "#/components/schemas/ExportCustomer"
          },
          {
            "$ref": "#/components/schemas/ExportPublication"
          },
          {
            "$ref": "#/components/schemas/ExportOrder"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpiration"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactions"
          }
        ]
      },
      "ExportScheduledBase": {
        "title": "Export Scheduled Base",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique export ID."
          },
          "object": {
            "type": "string",
            "default": "export",
            "enum": [
              "export"
            ],
            "description": "The type of object being represented. This object stores information about the export."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the export was scheduled in ISO 8601 format."
          },
          "status": {
            "type": "string",
            "description": "Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.",
            "default": "SCHEDULED",
            "enum": [
              "SCHEDULED"
            ]
          },
          "channel": {
            "type": "string",
            "description": "The channel through which the export was triggered."
          },
          "result": {
            "type": "null",
            "description": "Contains the URL of the CSV file."
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE."
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "status",
          "result",
          "user_id"
        ]
      },
      "ExportsCreateResponseBody": {
        "title": "Exports Create Response Body",
        "description": "Response body schema for **POST** `/exports`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExportVoucherScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportOrderScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationScheduled"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsScheduled"
          }
        ]
      },
      "ExportVoucherBase": {
        "title": "Export Vouchers",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "default": "voucher",
            "enum": [
              "voucher"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportVoucherFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherFilters"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportVoucherScheduled": {
        "title": "Export Vouchers Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          }
        ]
      },
      "ExportVoucher": {
        "title": "Export Voucher",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherBase"
          }
        ]
      },
      "FieldConditions": {
        "title": "Field Conditions",
        "type": "object",
        "properties": {
          "conditions": {
            "description": "Data filters used to narrow the data records to be returned in the result.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FiltersCondition"
              }
            ]
          }
        }
      },
      "FiltersCondition": {
        "title": "Filters Condition",
        "type": "object",
        "properties": {
          "$in": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_in": {
            "$ref": "#/components/schemas/Any"
          },
          "$is": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_days_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_days_in_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_not": {
            "$ref": "#/components/schemas/Any"
          },
          "$has_value": {
            "$ref": "#/components/schemas/Any"
          },
          "$is_unknown": {
            "$ref": "#/components/schemas/Any"
          },
          "$contains": {
            "$ref": "#/components/schemas/Any"
          },
          "$not_contain": {
            "$ref": "#/components/schemas/Any"
          },
          "$starts_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$ends_with": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_ago": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_future": {
            "$ref": "#/components/schemas/Any"
          },
          "$more_than_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$less_than_equal": {
            "$ref": "#/components/schemas/Any"
          },
          "$after": {
            "$ref": "#/components/schemas/Any"
          },
          "$before": {
            "$ref": "#/components/schemas/Any"
          },
          "$count": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_less": {
            "$ref": "#/components/schemas/Any"
          },
          "$count_more": {
            "$ref": "#/components/schemas/Any"
          }
        }
      },
      "ExportVoucherFilters": {
        "title": "Export Voucher Filters",
        "description": "Allowed additional properties must start with \"metadata.\" or \"redemption.\"",
        "type": "object",
        "properties": {
          "junction": {
            "description": "Filter by conditions set on the junction parameter indicating how the conditions should be accounted for in the query. An AND is an all-inclusive logical operator, meaning the AND operator displays a record if ALL the conditions separated by AND are TRUE, while an OR operator displays a record if ANY of the conditions separated by OR is TRUE.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Junction"
              }
            ]
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "updated_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "created_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "active": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "redemption_status": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "start_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_day_of_week": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "categories": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "vouchers": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "holder_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "is_referral_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "published_for_customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "validity_timeframe": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "category_ids": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/FieldConditions"
        }
      },
      "Junction": {
        "title": "Junction",
        "description": "Logical Operator Between Filters. Filter by conditions set on the `junction` parameter indicating how the `conditions` should be accounted for in the query. An `AND` is an all-inclusive logical operator, meaning the `AND` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an `OR` operator displays a record if **ANY** of the conditions separated by OR is TRUE.",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      },
      "ExportRedemptionBase": {
        "title": "Export Redemptions",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "default": "redemption",
            "enum": [
              "redemption"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportRedemptionOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportRedemptionFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportRedemptionFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportRedemptionScheduled": {
        "title": "Export Redemptions Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          }
        ]
      },
      "ExportRedemption": {
        "title": "Export Redemption",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportRedemptionBase"
          }
        ]
      },
      "ExportRedemptionFilters": {
        "title": "Export Redemption Filters",
        "description": "Allowed additional properties must start with \"metadata.\"",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "created_at": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$after": {
                    "$ref": "#/components/schemas/Any"
                  },
                  "$before": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "campaign": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$is": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$is": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "voucher": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$is": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "related_object": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$in": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "voucher_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "related_object_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "related_object_parent_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "parent_redemption_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "failure_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "result": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "object": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_name": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "user_login": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "status": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/FieldConditions"
        }
      },
      "ExportCustomerBase": {
        "title": "Export Customers",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "default": "customer",
            "enum": [
              "customer"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportCustomerOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportCustomerFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportCustomerFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportCustomerScheduled": {
        "title": "Export Customers Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          }
        ]
      },
      "ExportCustomer": {
        "title": "Export Customers",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportCustomerBase"
          }
        ]
      },
      "ExportCustomerFilters": {
        "title": "Export Customer Filters",
        "description": "Allowed additional properties must start with \"metadata.\" or \"address.\" or \"summary.\" or \"loyalty.\" or \"loyalty_tier.\" or \"loyalty_points.\" or \"system_metadata.\"",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "created_at": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$after": {
                    "$ref": "#/components/schemas/Any"
                  },
                  "$before": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "email": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "name": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "city": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$is": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "phone": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "birthday": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "publications.created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "publications.related_object_id": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/FieldConditions"
        }
      },
      "ExportPublicationBase": {
        "title": "Export Publications",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "default": "publication",
            "enum": [
              "publication"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPublicationOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportPublicationFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPublicationFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportPublicationScheduled": {
        "title": "Export Publications Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          }
        ]
      },
      "ExportPublication": {
        "title": "Export Publication",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportPublicationBase"
          }
        ]
      },
      "ExportPublicationFilters": {
        "title": "Export Publication Filters",
        "description": "Allowed additional properties must start with \"metadata.\"",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "created_at": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$after": {
                    "$ref": "#/components/schemas/Any"
                  },
                  "$before": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "campaign": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$is": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$is": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "voucher": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$is": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "failure_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "result": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "customer_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_name": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_type": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "is_referral_code": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "parent_object_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "related_object_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/FieldConditions"
        }
      },
      "ExportOrderBase": {
        "title": "Export Orders",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "default": "order",
            "enum": [
              "order"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportOrderFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportOrderScheduled": {
        "title": "Export Orders Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "ExportOrder": {
        "title": "Export Orders",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "ExportOrderFilters": {
        "title": "Export Order Filters",
        "description": "Allowed additional properties must start with \"metadata.\"",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "created_at": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$after": {
                    "$ref": "#/components/schemas/Any"
                  },
                  "$before": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "updated_at": {
            "type": "object",
            "properties": {
              "conditions": {
                "title": "Filters Condition",
                "type": "object",
                "properties": {
                  "$after": {
                    "$ref": "#/components/schemas/Any"
                  },
                  "$before": {
                    "$ref": "#/components/schemas/Any"
                  }
                }
              }
            }
          },
          "status": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "source_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "total_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "total_discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "items_discount_amount": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/FieldConditions"
        }
      },
      "ExportPointsExpirationBase": {
        "title": "Export Points Expirations",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "default": "points_expiration",
            "enum": [
              "points_expiration"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPointsExpirationOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportPointsExpirationFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportPointsExpirationFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportPointsExpirationScheduled": {
        "title": "Export Points Expiration Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          }
        ]
      },
      "ExportPointsExpiration": {
        "title": "Export Points Expiration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportPointsExpirationBase"
          }
        ]
      },
      "ExportPointsExpirationFilters": {
        "title": "Export Points Expiration Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_id": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportVoucherTransactionsBase": {
        "title": "Export Vouchers Transactions",
        "type": "object",
        "properties": {
          "exported_object": {
            "type": "string",
            "default": "voucher_transactions",
            "enum": [
              "voucher_transactions"
            ],
            "description": "The type of object to be exported."
          },
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportVoucherTransactionsFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        },
        "required": [
          "exported_object"
        ]
      },
      "ExportVoucherTransactionsScheduled": {
        "title": "Export Vouchers Transactions Scheduled",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsBase"
          }
        ]
      },
      "ExportVoucherTransactions": {
        "title": "Export Vouchers Transactions",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportBase"
          },
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsBase"
          }
        ]
      },
      "ExportVoucherTransactionsFilters": {
        "title": "Export Voucher Transactions Filters",
        "type": "object",
        "properties": {
          "junction": {
            "$ref": "#/components/schemas/Junction"
          },
          "created_at": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "voucher_id": {
            "$ref": "#/components/schemas/FieldConditions"
          },
          "campaign_id": {
            "$ref": "#/components/schemas/FieldConditions"
          }
        }
      },
      "ExportsGetResponseBody": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Export"
          }
        ],
        "description": "Response body schema for **GET** `/exports/{exportId}`.",
        "title": "Exports Get Response Body"
      },
      "ExportsListResponseBody": {
        "title": "Exports List Response Body",
        "description": "Response body schema for **GET** `/exports`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about exports."
          },
          "data_ref": {
            "type": "string",
            "default": "exports",
            "enum": [
              "exports"
            ],
            "description": "Identifies the name of the attribute that contains the array of exports."
          },
          "exports": {
            "type": "array",
            "description": "An array of export objects.",
            "items": {
              "$ref": "#/components/schemas/Export"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of exports."
          }
        },
        "required": [
          "object",
          "data_ref",
          "exports",
          "total"
        ]
      },
      "ExportCustomerFields": {
        "type": "string",
        "enum": [
          "name",
          "id",
          "description",
          "email",
          "source_id",
          "created_at",
          "address_city",
          "address_state",
          "address_line_1",
          "address_line_2",
          "address_country",
          "address_postal_code",
          "redemptions_total_redeemed",
          "redemptions_total_failed",
          "redemptions_total_succeeded",
          "redemptions_total_rolled_back",
          "redemptions_total_rollback_failed",
          "redemptions_total_rollback_succeeded",
          "orders_total_amount",
          "orders_total_count",
          "orders_average_amount",
          "orders_last_order_amount",
          "orders_last_order_date",
          "loyalty_points",
          "loyalty_referred_customers",
          "updated_at",
          "phone",
          "birthday",
          "metadata",
          "birthdate"
        ],
        "title": "Export Customer Fields"
      },
      "ExportCustomerOrder": {
        "title": "Export Customer Order",
        "type": "string",
        "enum": [
          "-name",
          "name",
          "-id",
          "id",
          "-email",
          "email",
          "-source_id",
          "source_id",
          "-created_at",
          "created_at",
          "-updated_at",
          "updated_at"
        ]
      },
      "ExportPublicationFields": {
        "title": "Export Publication Fields",
        "type": "string",
        "enum": [
          "voucher_code",
          "customer_id",
          "customer_source_id",
          "date",
          "channel",
          "campaign",
          "is_winner",
          "metadata"
        ]
      },
      "ExportPublicationOrder": {
        "title": "Export Publication Order",
        "type": "string",
        "enum": [
          "-id",
          "id",
          "-voucher_code",
          "voucher_code",
          "-tracking_id",
          "tracking_id",
          "-customer_id",
          "customer_id",
          "-created_at",
          "created_at",
          "-channel",
          "channel"
        ]
      },
      "ExportRedemptionFields": {
        "title": "Export Redemption Fields",
        "type": "string",
        "enum": [
          "id",
          "object",
          "date",
          "voucher_code",
          "campaign",
          "promotion_tier_id",
          "customer_id",
          "customer_source_id",
          "customer_name",
          "tracking_id",
          "order_amount",
          "gift_amount",
          "loyalty_points",
          "result",
          "failure_code",
          "failure_message",
          "metadata"
        ]
      },
      "ExportRedemptionOrder": {
        "title": "Export Redemption Order",
        "type": "string",
        "enum": [
          "-id",
          "id",
          "-voucher_code",
          "voucher_code",
          "-tracking_id",
          "tracking_id",
          "-customer_id",
          "customer_id",
          "-created_at",
          "created_at"
        ]
      },
      "ExportVoucherFields": {
        "title": "Export Voucher Fields",
        "type": "string",
        "enum": [
          "code",
          "voucher_type",
          "value",
          "discount_type",
          "campaign",
          "category",
          "start_date",
          "expiration_date",
          "gift_balance",
          "loyalty_balance",
          "redemption_quantity",
          "redemption_count",
          "active",
          "qr_code",
          "bar_code",
          "metadata",
          "id",
          "is_referral_code",
          "created_at",
          "updated_at",
          "validity_timeframe_interval",
          "validity_timeframe_duration",
          "validity_day_of_week",
          "discount_amount_limit",
          "campaign_id",
          "additional_info",
          "customer_id",
          "discount_unit_type",
          "discount_unit_effect",
          "customer_source_id"
        ]
      },
      "ExportVoucherOrder": {
        "title": "Export Voucher Order",
        "type": "string",
        "enum": [
          "-created_at",
          "created_at",
          "-updated_at",
          "updated_at",
          "-code",
          "code"
        ]
      },
      "ExportOrderFields": {
        "title": "Export Order Fields",
        "type": "string",
        "enum": [
          "id",
          "source_id",
          "created_at",
          "updated_at",
          "status",
          "amount",
          "discount_amount",
          "items_discount_amount",
          "total_discount_amount",
          "total_amount",
          "customer_id",
          "referrer_id",
          "metadata"
        ]
      },
      "ExportOrderOrder": {
        "title": "Export Order Order",
        "type": "string",
        "enum": [
          "-created_at",
          "created_at",
          "-updated_at",
          "updated_at",
          "-status",
          "status"
        ]
      },
      "ExportPointsExpirationFields": {
        "title": "Export Points Expiration Fields",
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "points",
          "status",
          "expires_at"
        ]
      },
      "ExportPointsExpirationOrder": {
        "title": "Export Points Expiration Order",
        "type": "string",
        "enum": [
          "-expires_at",
          "expires_at"
        ]
      },
      "ExportVoucherTransactionsFields": {
        "title": "Export Voucher Transactions Fields",
        "type": "string",
        "enum": [
          "id",
          "campaign_id",
          "voucher_id",
          "type",
          "source_id",
          "reason",
          "source",
          "balance",
          "amount",
          "related_transaction_id",
          "created_at",
          "details"
        ]
      },
      "ExportVoucherTransactionsOrder": {
        "title": "Export Voucher Transactions Order",
        "type": "string",
        "enum": [
          "-created_at",
          "created_at"
        ]
      },
      "Any": {
        "oneOf": [
          {
            "title": "array",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "title": "string",
                  "type": "string"
                },
                {
                  "title": "number",
                  "type": "number"
                },
                {
                  "title": "object",
                  "type": "object"
                }
              ]
            }
          },
          {
            "title": "string",
            "type": "string"
          },
          {
            "title": "number",
            "type": "number"
          },
          {
            "title": "object",
            "type": "object"
          }
        ],
        "title": "Any"
      },
      "LoyaltiesTiersCreateInBulkRequestBody": {
        "title": "Loyalties Tiers Create Request Body",
        "description": "Request body schema for **POST** `/loyalties/{campaignId}/tiers`",
        "type": "array",
        "items": {
          "title": "Loyalties Tiers Create In Bulk Request Body Item",
          "allOf": [
            {
              "$ref": "#/components/schemas/LoyaltyTierBase"
            },
            {
              "type": "object",
              "properties": {
                "metadata": {
                  "description": "The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format.",
                  "type": "object"
                }
              }
            }
          ]
        }
      },
      "LoyaltiesTiersCreateInBulkResponseBody": {
        "title": "Loyalties Tiers Create Response Body",
        "type": "array",
        "description": "Response body schema for **POST** `/loyalties/{campaignId}/tiers`.",
        "items": {
          "$ref": "#/components/schemas/LoyaltyTier"
        }
      },
      "LoyaltiesListTiersRequestQuery": {
        "title": "Loyalties List Tiers Request Query",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "multipleOf": 100,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
          },
          "page": {
            "type": "integer",
            "description": "Which page of results to return."
          },
          "order": {
            "type": "string",
            "enum": [
              "created_at",
              "-created_at",
              "updated_at",
              "-updated_at"
            ],
            "description": "Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order."
          }
        }
      },
      "LoyaltiesListLoyaltyTierEarningRulesRequestQuery": {
        "title": "LoyaltiesListLoyaltyTierEarningRulesRequestQuery",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "multipleOf": 100,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
          },
          "page": {
            "type": "integer",
            "description": "Which page of results to return."
          }
        }
      },
      "LoyaltiesTiersGetResponseBody": {
        "type": "object",
        "title": "Loyalties Tiers Get Response Body",
        "allOf": [
          {
            "$ref": "#/components/schemas/LoyaltyTier"
          }
        ],
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/tiers/{loyaltyTierId}`."
      },
      "LoyaltiesTiersListResponseBody": {
        "title": "Loyalties Tiers List Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/tiers`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty tier objects."
          },
          "data": {
            "type": "array",
            "description": "This is an object representing a loyalty tier. Loyalty tiers are used to create a loyalty program with different levels of membership and varied earning rules and rewards based on customer’s tiers.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "EarningRule": {
        "title": "Earning Rule",
        "allOf": [
          {
            "$ref": "#/components/schemas/EarningRuleBase"
          },
          {
            "type": "object",
            "properties": {
              "validation_rule_id": {
                "type": "string",
                "nullable": true,
                "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance."
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format."
              },
              "active": {
                "type": "boolean",
                "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date.\n\n- `true` indicates an active earning rule\n- `false` indicates an inactive earning rule"
              }
            },
            "required": [
              "validation_rule_id",
              "updated_at",
              "active"
            ]
          }
        ]
      },
      "LoyaltiesTiersEarningRulesListResponseBody": {
        "title": "Loyalties Tiers Earning Rules List Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about earning rules in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of earning rule objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of earning rule objects.",
            "items": {
              "$ref": "#/components/schemas/EarningRule"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of earning rule objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltyTierBase": {
        "title": "Loyalty Tier Base",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Loyalty Tier name."
          },
          "earning_rules": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MappingPoints"
            },
            "description": "Contains a list of earning rule IDs and their points mapping for the given earning rule."
          },
          "rewards": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MappingPoints"
            },
            "description": "Contains a list of reward IDs and their points mapping for the given reward."
          },
          "points": {
            "type": "object",
            "description": "Defines range of loyalty tier in points.",
            "properties": {
              "from": {
                "type": "integer",
                "description": "Bottom points threshold value."
              },
              "to": {
                "type": "integer",
                "description": "Top points threshold value."
              }
            }
          }
        },
        "required": [
          "name",
          "points"
        ]
      },
      "LoyaltyTier": {
        "title": "Loyalty Tier",
        "allOf": [
          {
            "$ref": "#/components/schemas/LoyaltyTierBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique loyalty tier ID."
              },
              "campaign_id": {
                "type": "string",
                "description": "Unique parent campaign ID."
              },
              "metadata": {
                "type": "object",
                "nullable": true,
                "description": "The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the loyalty tier was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Timestamp representing the date and time when the loyalty tier was updated in ISO 8601 format."
              },
              "config": {
                "type": "object",
                "description": "Defines loyalty tier range in points.",
                "required": [
                  "points"
                ],
                "properties": {
                  "points": {
                    "type": "object",
                    "description": "Defines range of loyalty tier in points.",
                    "properties": {
                      "from": {
                        "type": "integer",
                        "description": "Bottom points threshold value."
                      },
                      "to": {
                        "type": "integer",
                        "description": "Top points threshold value."
                      }
                    }
                  }
                }
              },
              "expiration": {
                "$ref": "#/components/schemas/LoyaltyTierExpiration"
              },
              "object": {
                "type": "string",
                "default": "loyalty_tier",
                "enum": [
                  "loyalty_tier"
                ],
                "description": "The type of object represented by JSON. This object stores information about the loyalty."
              }
            },
            "required": [
              "id",
              "campaign_id",
              "metadata",
              "created_at",
              "config",
              "object"
            ]
          }
        ]
      },
      "MappingMultiply": {
        "title": "MappingMultiply",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "MULTIPLY",
            "enum": [
              "MULTIPLY"
            ],
            "description": "Type of calculation."
          },
          "multiplier": {
            "type": "number",
            "description": "Multiplication factor used to multiply the points to obtain the mapped points."
          }
        }
      },
      "MappingFixed": {
        "title": "MappingFixed",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "CUSTOM",
            "enum": [
              "CUSTOM"
            ],
            "description": "Type of calculation.\n\n"
          },
          "points": {
            "type": "integer",
            "description": "Fixed number of points to be applied."
          }
        }
      },
      "MappingPoints": {
        "title": "MappingPoints",
        "oneOf": [
          {
            "$ref": "#/components/schemas/MappingMultiply"
          },
          {
            "$ref": "#/components/schemas/MappingFixed"
          }
        ]
      },
      "Category": {
        "title": "Category",
        "description": "This is an object representing a category.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ],
            "description": "The type of object represented by the JSON. This object stores information about the category."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-08-16T10:52:08.094Z",
            "description": "Timestamp representing the date and time when the category was updated in ISO 8601 format.",
            "format": "date-time"
          },
          "stacking_rules_type": {
            "type": "string",
            "description": "The type of the stacking rule eligibility.",
            "enum": [
              "JOINT",
              "EXCLUSIVE"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object"
        ]
      },
      "CategoriesListResponseBody": {
        "title": "Categories List Response Body",
        "type": "object",
        "description": "Response body schema for **GET** `/categories`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about categories in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of category objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of categories."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CategoriesCreateRequestBody": {
        "title": "Categories Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** `/categories`.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          }
        },
        "required": [
          "name",
          "hierarchy"
        ]
      },
      "CategoriesCreateResponseBody": {
        "title": "Categories Create Response Body",
        "description": "Response body schema for **POST** `/categories`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object"
        ]
      },
      "CategoriesGetResponseBody": {
        "type": "object",
        "title": "Categories Get Response Body",
        "description": "Response body schema for **GET** `/categories/{categoryId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          }
        ]
      },
      "CategoriesUpdateRequestBody": {
        "title": "Categories Update Request Body",
        "description": "Request body schema for **PUT** `/categories/{categoryId}`.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          }
        },
        "required": [
          "name",
          "hierarchy"
        ]
      },
      "CategoriesUpdateResponseBody": {
        "title": "Categories Update Response Body",
        "description": "Response body schema for **PUT** `/categories/{categoryId}`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique category ID assigned by Voucherify."
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "hierarchy": {
            "type": "integer",
            "description": "Category hierarchy."
          },
          "object": {
            "type": "string",
            "default": "category",
            "enum": [
              "category"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the category was created in ISO 8601 format.",
            "example": "2022-07-14T10:45:13.156Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2022-08-16T10:52:08.094Z",
            "description": "Timestamp representing the date and time when the category was updated in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "hierarchy",
          "created_at",
          "object",
          "updated_at"
        ]
      },
      "ImportCSVRequestBody": {
        "type": "object",
        "title": "Import CSV file",
        "description": "Request body schema for importing data using a CSV file.",
        "format": "binary",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File path."
          }
        },
        "required": [
          "file"
        ]
      },
      "VouchersImportCSVRequestBody": {
        "type": "object",
        "title": "Vouchers Import CSV Request Body",
        "description": "Request body schema for **POST** `/vouchers/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "CampaignsVouchersImportCSVRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Import CSV Request Body",
        "description": "Request body schema for **POST** `/campaigns/{campaignId}/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "CustomersImportCSVRequestBody": {
        "type": "object",
        "title": "Customers Import CSV Request Body",
        "description": "Response body schema for **POST** `/customers/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "ProductsImportCSVRequestBody": {
        "type": "object",
        "title": "Products Import CSV Request Body",
        "description": "Response body schema for **POST** `/products/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "SkusImportCSVRequestBody": {
        "type": "object",
        "title": "Skus Import Csv Request Body",
        "description": "Response body schema for **POST** `/skus/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ImportCSVRequestBody"
          }
        ]
      },
      "AsyncActions": {
        "type": "object",
        "title": "Asynchronous Actions",
        "description": "Response to requests that are processed asynchronously.",
        "additionalProperties": false,
        "properties": {
          "async_action_id": {
            "type": "string",
            "example": "aa_0a875d56c805df6601",
            "description": "The ID of the scheduled asynchronous action."
          }
        },
        "required": [
          "async_action_id"
        ]
      },
      "e_error": {
        "title": "Error Object",
        "type": "object",
        "description": "Error details",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "error": {
            "type": "object",
            "description": "Contains custom user-defined error message translation.",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message translation defined in Dashboard &rarr; Project Settings &rarr; Error Messages"
              }
            }
          }
        }
      },
      "e_error_expanded": {
        "title": "Error Object",
        "type": "object",
        "description": "Error details",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "resource_id": {
            "type": "string",
            "description": "Unique resource ID that can be used in another endpoint to get more details.",
            "example": "rf_0c5d710a87c8a31f86"
          },
          "resource_type": {
            "type": "string",
            "description": "The resource type.",
            "example": "redemption"
          },
          "error": {
            "type": "object",
            "description": "Contains custom user-defined error message translation.",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message translation defined in Dashboard &rarr; Project Settings &rarr; Error Messages"
              }
            }
          }
        }
      },
      "Error": {
        "title": "Error Object",
        "type": "object",
        "description": "Error details",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "resource_id": {
            "type": "string",
            "description": "Unique resource ID that can be used in another endpoint to get more details.",
            "example": "rf_0c5d710a87c8a31f86"
          },
          "resource_type": {
            "type": "string",
            "description": "The resource type.",
            "example": "voucher"
          }
        },
        "required": [
          "code",
          "key",
          "message",
          "details",
          "request_id"
        ]
      },
      "ResourceInUseError": {
        "title": "Resource in Use Error Object",
        "type": "object",
        "description": "Error: Bad Request - Resource in use",
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "related_object_ids": {
                "type": "array",
                "description": "Name or ID of the resources that are related.",
                "items": {
                  "type": "string",
                  "example": "rewa_5WV7H3y2lT3GGl03Xjw29IEc"
                }
              },
              "related_object_type": {
                "type": "string",
                "description": "Specifies the type of resource that is related."
              },
              "related_object_total": {
                "type": "integer",
                "description": "Specifies the total resource that are related."
              }
            }
          }
        ]
      },
      "e_integration_key": {
        "title": "Error Object",
        "type": "object",
        "description": "Error details",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error's HTTP status code."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "key": {
            "type": "string",
            "description": "Short string describing the kind of error which occurred."
          }
        }
      },
      "e_400_missing_param": {
        "description": "Error: Bad Request &rarr; Missing Parameters",
        "type": "object",
        "title": "Missing Parameters",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "missing_param",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Missing required parameter",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Parameter 'custom_event.schema_id' is required",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a96c19b1a41c03999",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "e_400_invalid_payload": {
        "title": "Invalid Payload",
        "type": "object",
        "description": "Error: Bad Request &rarr; Invalid Payload",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "invalid_payload",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Invalid payload",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a884c6be8c3756f42",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "e_400_invalid_balance": {
        "title": "Invalid Balance",
        "type": "object",
        "description": "Error: Bad Request &rarr; Invalid Balance",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "invalid_balance",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a884c6be8c3756f42",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "e_400_invalid_export_fields": {
        "title": "Invalid Export Fields",
        "type": "object",
        "description": "Error: Bad Request &rarr; Invalid Export Fields",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "invalid_export_fields",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Invalid Export",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a884c6be8c3756f42",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "e_400_invalid_voucher": {
        "title": "Invalid Voucher",
        "type": "object",
        "description": "Error: Bad Request &rarr; Invalid Voucher",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "invalid_voucher",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Invalid Voucher",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a884c6be8c3756f42",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "e_400_invalid_validation_rules": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error's HTTP status code.",
            "default": 400
          },
          "key": {
            "type": "string",
            "default": "invalid_validation_rules",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          }
        },
        "title": "Invalid Validation Rules",
        "description": "Error: Bad Request &rarr; Invalid Validation Rules"
      },
      "e_400_not_enough_codes": {
        "title": "Not Enough Codes",
        "type": "object",
        "description": "Error: Bad Request &rarr; Not enough codes",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "not_enough_codes",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Not enough codes",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Specify at least 1 code in codes.",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "e_400_metadata_validation_failed": {
        "title": "Metadata Validation Failed",
        "type": "object",
        "description": "Error: Bad Request &rarr; Metadata validation failed",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "metadata_validation_failed",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Metadata validation failed",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Ranking: must be a number (actual value is 'true')",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "e_400_missing_reward": {
        "title": "Missing Reward",
        "type": "object",
        "description": "Error: Bad Request &rarr; Missing Reward",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "missing_reward",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Missing reward",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "A reward is required when redeeming a LOYALTY_CARD",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "resource_id": {
            "type": "string",
            "example": "rf_0b3a1814550e5aaa34",
            "description": "Unique resource ID that can be used in another endpoint to get more details."
          },
          "resource_type": {
            "type": "string",
            "example": "redemption",
            "description": "The resource type."
          },
          "error": {
            "type": "object",
            "description": "Contains error message translation.",
            "properties": {
              "message": {
                "type": "string",
                "example": "Missing reward = please add one.",
                "description": "Error message translation defined in Dashboard &rarr; Project Settings &rarr; Error Messages"
              }
            }
          }
        }
      },
      "e_400_missing_order": {
        "title": "Missing Order",
        "type": "object",
        "description": "Error: Bad Request &rarr; Missing Order",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "missing_order",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Missing order",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "An order is required when redeeming a LOYALTY_CARD",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "resource_id": {
            "type": "string",
            "example": "rf_0b3a1814550e5aaa34",
            "description": "Unique resource ID that can be used in another endpoint to get more details."
          },
          "resource_type": {
            "type": "string",
            "example": "redemption",
            "description": "The resource type."
          },
          "error": {
            "type": "object",
            "description": "Contains error message translation.",
            "properties": {
              "message": {
                "type": "string",
                "example": "Missing order = please add one.",
                "description": "Error message translation defined in Dashboard &rarr; Project Settings &rarr; Error Messages"
              }
            }
          }
        }
      },
      "e_400_loyalty_card_points_exceeded": {
        "title": "Loyalty Card Points Exceeded",
        "type": "object",
        "description": "Error: Bad Request &rarr; Loyalty Card Points Exceeded",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "loyalty_card_points_exceeded",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "loyalty card points exceeded",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "SoAm6kbC",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          },
          "resource_id": {
            "type": "string",
            "example": "rf_0b3a1814550e5aaa34",
            "description": "Unique resource ID that can be used in another endpoint to get more details."
          },
          "resource_type": {
            "type": "string",
            "example": "redemption",
            "description": "The resource type."
          },
          "error": {
            "type": "object",
            "description": "Contains error message translation.",
            "properties": {
              "message": {
                "type": "string",
                "example": "There are not enough loyalty points on the card.",
                "description": "Error message translation defined in Dashboard &rarr; Project Settings &rarr; Error Messages"
              }
            }
          }
        }
      },
      "e_400_duplicate_key": {
        "title": "Duplicated Key",
        "type": "object",
        "description": "Error: Conflict &rarr; Duplicated key found",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "duplicate_key",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Duplicate codes",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0aa36e570e44cb3bdd",
            "description": "This ID is useful when troubleshooting and/or finding the root cause of an error response by our support team."
          }
        }
      },
      "ProductCollectionsCreateRequestBody": {
        "title": "Product Collections Create Request Body",
        "description": "Response body schema for **POST** `/product-collections`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsCreateStaticRequestBody"
          },
          {
            "$ref": "#/components/schemas/ProductCollectionsCreateDynamicRequestBody"
          }
        ]
      },
      "ProductCollectionsCreateStaticRequestBody": {
        "title": "Product Collections Create Dynamic Request Body",
        "description": "Response body schema for **POST** `/product-collections`.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Show that the product collection is static (manually selected products).",
            "default": "STATIC",
            "enum": [
              "STATIC"
            ]
          },
          "name": {
            "type": "string",
            "description": "Unique user-defined product collection name."
          },
          "products": {
            "type": "array",
            "description": "Defines a set of products for a `STATIC` product collection type.",
            "items": {
              "title": "Product Collections Create Dynamic Request Body Products Item",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "prod_0a41bcf807c5fcaaf6",
                  "description": "The product ID."
                },
                "product_id": {
                  "type": "string",
                  "description": "Product ID for SKUs."
                },
                "object": {
                  "description": "Denotes the type of object represented by the ID.",
                  "enum": [
                    "sku",
                    "product"
                  ]
                }
              },
              "required": [
                "id",
                "object"
              ]
            }
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ProductCollectionsCreateDynamicRequestBody": {
        "title": "Product Collections Create Dynamic (Auto Update) Request Body",
        "description": "Response body schema for **POST** `/product-collections`.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Show that the product collection is dynamic (products come in and leave based on set criteria).",
            "default": "AUTO_UPDATE",
            "enum": [
              "AUTO_UPDATE"
            ]
          },
          "name": {
            "description": "Unique user-defined product collection name.",
            "type": "string"
          },
          "filter": {
            "type": "object",
            "description": "Defines a set of criteria and boundary conditions for an `AUTO_UPDATE` product collection type.",
            "additionalProperties": false,
            "required": [
              "junction"
            ],
            "properties": {
              "junction": {
                "$ref": "#/components/schemas/Junction"
              },
              "id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "product_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "source_id": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "name": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "price": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "object": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "attributes": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "metadata": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "image_url": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "skus": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "created_at": {
                "$ref": "#/components/schemas/FieldConditions"
              },
              "updated_at": {
                "$ref": "#/components/schemas/FieldConditions"
              }
            }
          }
        },
        "required": [
          "type",
          "name",
          "filter"
        ]
      },
      "SimpleCustomerRequiredObjectType": {
        "type": "object",
        "description": "This is an object representing a customer with limited properties used in Event Tracking endpoints.",
        "title": "Customer Object Required Object Type",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of a customer that is assigned by Voucherify.",
            "example": "cust_CSnYd37MXmrbS19XCrghjBsv"
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s customer ID if it is different from the Voucherify customer ID. It is really useful in case of an integration between multiple systems. It can be a customer ID from a CRM system, database or 3rd-party service."
          },
          "name": {
            "type": "string",
            "description": "Customer's first and last name."
          },
          "email": {
            "type": "string",
            "description": "Customer's email address."
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments. "
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by the JSON. This object stores information about the customer.",
            "default": "customer"
          }
        },
        "required": [
          "object"
        ]
      },
      "InapplicableToResultList": {
        "title": "Inapplicable To Result List",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains array of items to which the discount cannot apply.",
            "items": {
              "$ref": "#/components/schemas/InapplicableTo"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of objects defining included products, SKUs, or product collections."
          },
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "data",
            "enum": [
              "data"
            ]
          }
        },
        "required": [
          "data",
          "total",
          "object",
          "data_ref"
        ]
      },
      "ApplicableToResultList": {
        "title": "Applicable To Result List",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Contains array of items to which the discount can apply.",
            "items": {
              "$ref": "#/components/schemas/ApplicableTo"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of objects defining included products, SKUs, or product collections."
          },
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "data",
            "enum": [
              "data"
            ]
          }
        },
        "required": [
          "data",
          "total",
          "object",
          "data_ref"
        ]
      },
      "InapplicableTo": {
        "title": "Inapplicable To",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicableTo"
          }
        ]
      },
      "ApplicableTo": {
        "title": "Applicable To",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "product",
              "sku",
              "products_collection"
            ],
            "description": "This object stores information about the product collection."
          },
          "id": {
            "type": "string",
            "description": "Unique product collection ID assigned by Voucherify."
          },
          "source_id": {
            "type": "string",
            "description": "The source ID from your inventory system."
          },
          "product_id": {
            "type": "string",
            "description": "Parent product's unique ID assigned by Voucherify."
          },
          "product_source_id": {
            "type": "string",
            "description": "Parent product's source ID from your inventory system."
          },
          "strict": {
            "type": "boolean"
          },
          "price": {
            "type": "number",
            "description": "New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the price_formula parameter is present in the fixed price definition, this value becomes the fallback value. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price."
          },
          "price_formula": {
            "type": "number",
            "description": "Formula used to calculate the discounted price of an item."
          },
          "effect": {
            "description": "Defines how the discount is applied to the customer's order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicableToEffect"
              }
            ]
          },
          "quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted per order line item."
          },
          "aggregated_quantity_limit": {
            "type": "integer",
            "description": "The maximum number of units allowed to be discounted combined across all matched order line items."
          },
          "amount_limit": {
            "type": "integer",
            "description": "Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600."
          },
          "aggregated_amount_limit": {
            "type": "integer",
            "description": "Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects:\n- `APPLY_TO_ITEMS` (each item subtotal is discounted equally)\n- `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)"
          },
          "order_item_indices": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "object",
          "id",
          "strict",
          "effect"
        ]
      },
      "ApplicableToEffect": {
        "title": "Applicable To Effect",
        "type": "string",
        "enum": [
          "APPLY_TO_EVERY",
          "APPLY_TO_CHEAPEST",
          "APPLY_TO_MOST_EXPENSIVE"
        ]
      },
      "VouchersValidateResponseBody": {
        "title": "Vouchers Validate Response Body",
        "description": "Response body schema for **POST** `/vouchers/{code}/validate`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/VouchersValidateValidResponseBody"
          },
          {
            "$ref": "#/components/schemas/VouchersValidateInvalidResponseBody"
          }
        ]
      },
      "CampaignsGetResponseBody": {
        "type": "object",
        "title": "Campaigns Get Response Body",
        "description": "Response body schema for **GET** `/campaigns/{campaignId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Create Response Body",
        "description": "Response body schema for **POST** `/campaigns/{campaignId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsUpdateResponseBody": {
        "type": "object",
        "title": "Campaigns Update Response Body",
        "description": "Response body schema for **PUT** `/campaigns/{campaignId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignsDeleteResponseBody": {
        "type": "object",
        "title": "Campaigns Delete Response Body",
        "description": "Response body schema for **DELETE** `/campaigns/{campaignId}`.",
        "properties": {
          "async_action_id": {
            "type": "string",
            "example": "aa_0a875d56c805df6601",
            "description": "The ID of the scheduled asynchronous action."
          }
        }
      },
      "CampaignsEnableResponseBody": {
        "type": "object",
        "title": "Campaigns Enable Response Body",
        "description": "Response body schema for **POST** `/campaigns/{campaignId}/enable`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmptyJson"
          }
        ]
      },
      "CampaignsDisableResponseBody": {
        "type": "object",
        "title": "Campaigns Disable Response Body",
        "description": "Response body schema for **POST** `/campaigns/{campaignId}/disable`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmptyJson"
          }
        ]
      },
      "LoyaltiesDeleteResponseBody": {
        "type": "object",
        "title": "LoyaltiesDeleteResponseBody",
        "description": "Response body schema for **DELETE** `/loyalties/{campaignId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersMetadataUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Customers Metadata Update In Bulk Response Body",
        "description": "Response body schema for **POST** `/customers/metadata/async`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Customers Update In Bulk Response Body",
        "description": "Response body schema for **POST** `/customers/bulk/async`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CustomersSegmentsListResponseBody": {
        "type": "object",
        "title": "Customers Segments List Response Body",
        "description": "Response body schema for **GET** `/customers/{customerId}/segments`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerSegmentsList"
          }
        ]
      },
      "ProductsListResponseBody": {
        "type": "object",
        "title": "Products List Response Body",
        "description": "Response body schema for **GET** `/products`.",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about products in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of product objects.",
            "default": "products"
          },
          "products": {
            "type": "array",
            "description": "Contains array of product objects.",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of product objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "products",
          "total"
        ]
      },
      "ProductsGetResponseBody": {
        "type": "object",
        "title": "Products Get Response Body",
        "description": "Response body schema for **GET** `/products/{productId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "ProductsCreateResponseBody": {
        "type": "object",
        "title": "Products Create Response Body",
        "description": "Response body schema for **POST** `/products`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "ProductsUpdateResponseBody": {
        "type": "object",
        "title": "Products Update Response Body",
        "description": "Response body schema for **PUT** `/products/{productId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "ProductsUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Products Update In Bulk Response Body",
        "description": "Response body schema for **POST** `/products/bulk/async`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "SkusGetResponseBody": {
        "type": "object",
        "title": "Skus Get Response Body",
        "description": "Response body schema for **GET** `/skus/{skuId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "ProductsSkusListResponseBody": {
        "type": "object",
        "title": "Products Skus List Response Body",
        "description": "Response body schema for **GET** `/products/{productId}/skus`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SkusList"
          }
        ]
      },
      "ProductCollectionsListResponseBody": {
        "type": "object",
        "title": "Product Collections List Response Body",
        "description": "Response body schema for **GET** `/product-collections`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsList"
          }
        ]
      },
      "ProductCollectionsGetResponseBody": {
        "type": "object",
        "title": "Product Collections Get Response Body",
        "description": "Response body schema for **GET** `/product-collections/{productCollectionId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsItem"
          }
        ]
      },
      "ProductCollectionsCreateResponseBody": {
        "type": "object",
        "title": "Product Collections Create Response Body",
        "description": "Response body schema for **POST** `/product-collections`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsItem"
          }
        ]
      },
      "ProductCollectionsProductsListResponseBody": {
        "type": "object",
        "title": "Product Collections Products List Response Body",
        "description": "Response body schema for **GET** `/product-collections/{productCollectionId}/products`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductCollectionsProductsList"
          }
        ]
      },
      "VouchersGenerateResponseBody": {
        "type": "object",
        "title": "Vouchers Generate Response Body",
        "description": "Response body schema for **POST** `/vouchers`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "VouchersBalanceUpdateResponseBody": {
        "description": "Response body schema for `vouchers/{code}/balance.`",
        "type": "object",
        "title": "Vouchers Balance Update Response Body",
        "required": [
          "amount",
          "total",
          "balance",
          "type",
          "object",
          "related_object",
          "operation_type"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amount added (positive integer) or subtracted (negative integer) to the current balance on the gift card or loyalty card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "total": {
            "type": "integer",
            "description": "Total income incurred over the lifespan of the gift card or loyalty card."
          },
          "balance": {
            "type": "integer",
            "description": "The balance after adding or subtracting a specified amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "type": {
            "type": "string",
            "description": "The type of voucher being modified.",
            "enum": [
              "gift_voucher",
              "loyalty_card"
            ]
          },
          "operation_type": {
            "type": "string",
            "default": "MANUAL",
            "enum": [
              "MANUAL"
            ]
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `balance`.",
            "default": "balance",
            "enum": [
              "balance"
            ]
          },
          "related_object": {
            "type": "object",
            "description": "Defines the resource that is being modified with the values that are returned in the balance object.",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The object being modified, i.e. `voucher`.",
                "default": "voucher",
                "enum": [
                  "voucher"
                ]
              },
              "id": {
                "type": "string",
                "description": "Identifies the voucher that is being modified, this is the ID that was assigned by the Voucherify API.",
                "example": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
              }
            }
          }
        }
      },
      "VouchersTransactionsExportCreateResponseBody": {
        "type": "object",
        "title": "Vouchers Transactions Export Create Response Body",
        "description": "Response body schema for **POST** `/vouchers/{code}/transactions/export`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VoucherTransactionsExport"
          }
        ]
      },
      "VouchersImportCreateResponseBody": {
        "title": "Vouchers Import Create Response Body",
        "description": "Response body schema for **post** `/vouchers/import`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "VouchersImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Vouchers Import Csv Create Response Body",
        "description": "Response body schema for **POST** `/vouchers/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "VouchersUpdateInBulkResponseBody": {
        "title": "Vouchers Update In Bulk Response Body",
        "description": "Response body schema for **post** `/vouchers/bulk/async`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "VouchersMetadataUpdateInBulkResponseBody": {
        "title": "Vouchers Metadata Update In Bulk Response Body",
        "description": "Response body schema for **post** `/vouchers/metadata/async`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsVouchersCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create Response Body",
        "description": "Response body schema for **POST** `/campaigns/{campaignId}/vouchers/{code}` and **POST** `/campaigns/{campaignId}/vouchers`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Voucher"
          }
        ]
      },
      "CampaignsVouchersCreateInBulkResponseBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create In Bulk Response Body",
        "description": "Response body schema for **POST** `/campaigns/{campaignId}/vouchers/{code}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsImportCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Import Create Response Body",
        "description": "Response body schema for **POST** `/campaigns/{campaignId}/import`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "CampaignsImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Campaigns Import Csv Create Response Body",
        "description": "Response body schema for **POST** `/campaigns/{campaignId}/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "PromotionsTiersListResponseBody": {
        "type": "object",
        "title": "Promotions Tiers List Response Body",
        "description": "Response body schema for **GET** `/promotions/{campaignId}/tiers`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTiersList"
          }
        ]
      },
      "PromotionsTiersCreateResponseBody": {
        "title": "Promotions Tiers Create Response Body",
        "description": "Response body schema for **post** `/promotions/{campaignId}/tiers`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersGetResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Get Response Body",
        "description": "Response body schema for **GET** `/promotions/tiers/{promotionTierId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersUpdateResponseBody": {
        "title": "Promotions Tiers Update Response Body",
        "description": "Response body schema for **put** `/promotions/tiers/{promotionTierId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersEnableResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Enable Response Body",
        "description": "Response body schema for **POST** `/promotions/tiers/{promotionTierId}/enable`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsTiersDisableResponseBody": {
        "type": "object",
        "title": "Promotions Tiers Disable Response Body",
        "description": "Response body schema for **POST** `/promotions/tiers/{promotionTierId}/disable`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionTier"
          }
        ]
      },
      "PromotionsStacksListResponseBody": {
        "title": "Promotions Stacks List Response Body",
        "description": "Response body schema for **GET** `/promotions/stacks` and for **GET** `/promotions/{campaignId}/stacks`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about promotion stacks in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of promotion stack objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of promotion stack objects.",
            "items": {
              "$ref": "#/components/schemas/PromotionStack"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of promotion stacks."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "PromotionsStacksCreateResponseBody": {
        "title": "Promotions Stacks Create Response Body",
        "description": "Response body schema for **POST** `/promotions/{campaignId}/stacks`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "default": "promotion_stack",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON."
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/PromotionStackBase"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "PromotionsStacksGetResponseBody": {
        "type": "object",
        "title": "Promotions Stacks Get Response Body",
        "description": "Response body schema for **GET** `/promotions/{campaignId}/stacks/{stackId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStack"
          }
        ]
      },
      "PromotionsStacksUpdateResponseBody": {
        "title": "Promotions Stacks Update Response Body",
        "description": "Response body schema for **PUT** `/promotions/{campaignId}/stacks/{stackId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique promotion stack ID."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was created in ISO 8601 format."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp representing the date and time when the promotion stack was updated in ISO 8601 format."
              },
              "campaign_id": {
                "type": "string",
                "description": "Promotion stack's parent campaign's unique ID."
              },
              "object": {
                "type": "string",
                "default": "promotion_stack",
                "enum": [
                  "promotion_stack"
                ],
                "description": "The type of object represented by JSON. "
              },
              "category_id": {
                "type": "string",
                "nullable": true,
                "description": "Promotion stack category ID."
              },
              "categories": {
                "type": "array",
                "description": "Details about the category assigned to the promotion stack.",
                "items": {
                  "$ref": "#/components/schemas/PromotionStackBase"
                }
              }
            },
            "required": [
              "id",
              "created_at",
              "updated_at",
              "campaign_id",
              "object",
              "category_id",
              "categories"
            ]
          }
        ]
      },
      "RewardsAssignmentsListResponseBody": {
        "type": "object",
        "description": "Response body schema for **GET** `/rewards/{rewardID}/assignments`.",
        "title": "Rewards Assignments List Response Body",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. This object stores information about reward assignments in a dictionary.",
            "default": "list"
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of reward assignments.",
            "default": "data"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardAssignment"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of reward assignments."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "RewardsAssignmentsCreateResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Create Response Body",
        "description": "Response body schema for **GET** `/rewards/{rewardId}/assignments/{assignmentId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "RewardsAssignmentsUpdateResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Update Response Body",
        "description": "Response body schema for **GET** `/rewards/{rewardId}/assignments/{assignmentId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "RewardsAssignmentsGetResponseBody": {
        "type": "object",
        "title": "Rewards Assignments Get Response Body",
        "description": "Response body schema for **GET** `/rewards/{rewardId}/assignments/{assignmentId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "VouchersRedemptionGetResponseBody": {
        "type": "object",
        "title": "Vouchers Redemption Get Response Body",
        "description": "Response body schema for **GET** `/vouchers/{code}/redemption`.",
        "properties": {
          "quantity": {
            "type": "integer",
            "nullable": true,
            "description": "The maximum number of times a voucher can be redeemed."
          },
          "redeemed_quantity": {
            "type": "integer",
            "description": "The number of times the voucher was redeemed successfully."
          },
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. This object stores information about redemptions in a dictionary."
          },
          "url": {
            "type": "string",
            "example": "/v1/vouchers/PROMO-CODE2/redemptions?page=1&limit=10",
            "description": "URL"
          },
          "data_ref": {
            "type": "string",
            "default": "redemption_entries",
            "description": "Identifies the name of the attribute that contains the array of `redemption_entries`."
          },
          "total": {
            "type": "integer",
            "description": "Total number of redemption objects."
          },
          "redemption_entries": {
            "type": "array",
            "description": "Contains the array of successful and failed redemption objects.",
            "items": {
              "title": "Vouchers Redemption Get Response Body Redemption Entries Item",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Redemption"
                },
                {
                  "$ref": "#/components/schemas/RedemptionRollback"
                }
              ]
            }
          }
        },
        "required": [
          "quantity",
          "redeemed_quantity",
          "object",
          "url",
          "data_ref",
          "total",
          "redemption_entries"
        ]
      },
      "RedemptionsRollbackCreateResponseBody": {
        "title": "Redemptions Rollback Create Response Body",
        "description": "Response body schema for **POST** `/redemptions/{redemptionId}/rollback`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RedemptionRollback"
          }
        ]
      },
      "ClientRedemptionsRedeemResponseBody": {
        "description": "Response body schema for **POST** `/redemptions`.",
        "type": "object",
        "title": "Client Redemptions Redeem Response Body",
        "properties": {
          "redemptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Redemption"
            }
          },
          "parent_redemption": {
            "$ref": "#/components/schemas/Redemption"
          },
          "order": {
            "description": "Contains the order details associated with the redemption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderCalculated"
              }
            ]
          },
          "inapplicable_redeemables": {
            "type": "array",
            "description": "Lists validation results of each inapplicable redeemable.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableInapplicable"
            }
          },
          "skipped_redeemables": {
            "type": "array",
            "description": "Lists validation results of each redeemable. If a redeemable can be applied, the API returns `\"status\": \"APPLICABLE\"`.",
            "items": {
              "$ref": "#/components/schemas/ValidationsRedeemableSkipped"
            }
          }
        }
      },
      "ClientValidationsValidateResponseBody": {
        "description": "Response body schema for POST `/validations`.",
        "title": "Client Validations Validate Response Body",
        "allOf": [
          {
            "$ref": "#/components/schemas/ValidationsValidateResponseBody"
          }
        ]
      },
      "RedemptionsRollbacksCreateResponseBody": {
        "title": "Redemptions Rollbacks Create Response Body",
        "description": "Response body schema for POST `/redemptions/{parentRedemptionID}/rollbacks`.",
        "type": "object",
        "properties": {
          "rollbacks": {
            "type": "array",
            "description": "Contains the rollback redemption objects of the particular incentives.",
            "items": {
              "$ref": "#/components/schemas/RedemptionRollback"
            }
          },
          "parent_rollback": {
            "$ref": "#/components/schemas/RedemptionRollback"
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculatedNoCustomerData"
          }
        }
      },
      "LoyaltiesMembersBalanceUpdateResponseBody": {
        "title": "Loyalties Members Balance Update Response Body",
        "type": "object",
        "description": "Response schema for **POST** `/loyalties/members/{memberId}/balance` and for **POST** `/loyalties/{campaignId}/members/{memberId}/balance`.",
        "properties": {
          "points": {
            "type": "integer",
            "description": "The incremental points removed or added to the current balance on the loyalty card."
          },
          "total": {
            "type": "integer",
            "description": "The total of points accrued over the lifetime of the loyalty card."
          },
          "balance": {
            "type": "integer",
            "minimum": 0,
            "description": "The balance after adding/removing points."
          },
          "type": {
            "type": "string",
            "enum": [
              "loyalty_card",
              "gift_voucher"
            ],
            "description": "The type of voucher being modified."
          },
          "object": {
            "type": "string",
            "pattern": "balance",
            "default": "balance",
            "enum": [
              "balance"
            ],
            "description": "The type of object represented by JSON. Default is balance."
          },
          "related_object": {
            "type": "object",
            "required": [
              "type",
              "id"
            ],
            "description": "Defines the object that is being modified with the values that are returned in the balance object.",
            "properties": {
              "type": {
                "type": "string",
                "default": "voucher",
                "enum": [
                  "voucher"
                ],
                "description": "The object being modified."
              },
              "id": {
                "type": "string",
                "description": "Identifies the loyalty card that is being modified, this is the ID that was assigned by the Voucherify API."
              }
            }
          },
          "operation_type": {
            "type": "string",
            "enum": [
              "MANUAL",
              "AUTOMATIC"
            ]
          }
        },
        "required": [
          "points",
          "total",
          "balance",
          "type",
          "object",
          "related_object"
        ]
      },
      "LoyaltiesMembersTransfersCreateResponseBody": {
        "title": "Loyalties Members Transfers Create Response Body",
        "description": "Response body schema for **POST** `/loyalties/{campaignId}/members/{memberId}/transfers`.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "description": "A unique campaign name, identifies the voucher's parent campaign."
          },
          "campaign_id": {
            "type": "string",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign."
          },
          "category": {
            "type": "string",
            "nullable": true,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "category_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique category ID assigned by Voucherify."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "type": {
            "type": "string",
            "default": "LOYALTY_CARD",
            "enum": [
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of the voucher."
          },
          "loyalty_card": {
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if type is LOYALTY_CARD.",
            "required": [
              "points",
              "balance"
            ],
            "properties": {
              "points": {
                "type": "integer",
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "description": "Points available for reward redemption."
              },
              "next_expiration_date": {
                "type": "string",
                "description": "The next closest date when the next set of points are due to expire."
              },
              "next_expiration_points": {
                "type": "integer",
                "description": "The amount of points that are set to expire next."
              }
            }
          },
          "start_date": {
            "type": "string",
            "nullable": true,
            "description": "Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is inactive before this date.",
            "format": "date-time"
          },
          "expiration_date": {
            "type": "string",
            "nullable": true,
            "description": "Expiration timestamp defines when the code expires in ISO 8601 format. Voucher is inactive after this date.",
            "format": "date-time"
          },
          "validity_timeframe": {
            "type": "object",
            "nullable": true,
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.start_date required when including the validity_timeframe.",
            "properties": {
              "interval": {
                "type": "string",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a duration of PT1H will be valid for a duration of one hour."
              },
              "duration": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an interval of P2D will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "nullable": true,
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0` Sunday\n- `1` Monday\n- `2` Tuesday\n- `3` Wednesday\n- `4` Thursday\n- `5` Friday\n- `6` Saturday",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 6
            }
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event. A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or publish voucher API method.",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "enum": [
                  "list"
                ],
                "description": "The type of object represented is by default list. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "count": {
                "type": "integer",
                "description": "Publication events counter."
              },
              "entries": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "description": "The endpoint where this list of publications can be accessed using a GET method. /v1/vouchers/{voucher_code}/publications"
              }
            },
            "required": [
              "object"
            ]
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "How many times a voucher can be redeemed. A null value means unlimited."
              },
              "redeemed_points": {
                "type": "integer",
                "description": "Total loyalty points redeemed."
              },
              "redeemed_quantity": {
                "type": "integer",
                "description": "How many times a voucher has already been redeemed."
              },
              "redemption_entries": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "object": {
                "type": "string",
                "default": "list",
                "enum": [
                  "list"
                ],
                "description": "The type of object represented is by default list. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. /v1/vouchers/{voucher_code}/redemptions"
              }
            },
            "required": [
              "quantity"
            ]
          },
          "active": {
            "type": "string",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the start_date and expiration_date.\n\n- `true` indicates an active voucher\n- `false` indicates an inactive voucher"
          },
          "additional_info": {
            "type": "string",
            "nullable": true,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code ID."
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`."
          },
          "holder_id": {
            "type": "string",
            "description": "Unique customer ID of voucher owner."
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format.",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "code",
          "category",
          "category_id",
          "type",
          "loyalty_card",
          "start_date",
          "expiration_date",
          "validity_timeframe",
          "validity_day_of_week",
          "active",
          "additional_info",
          "metadata",
          "is_referral_code",
          "created_at"
        ]
      },
      "LoyaltiesMembersTransactionsListResponseBody": {
        "title": "Loyalties Members Transactions List Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/members/{memberId}/transactions` and `/loyalties/members/{memberId}/transactions`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "pattern": "list",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON."
          },
          "data_ref": {
            "type": "string",
            "pattern": "data",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of transaction objects."
          },
          "data": {
            "type": "array",
            "description": "A dictionary that contains an array of transactions. Each entry in the array is a separate transaction object.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyCardTransaction"
            }
          },
          "has_more": {
            "type": "boolean",
            "description": "As query results are always limited (by the limit parameter), the has_more flag indicates whether there are more records for given filter parameters. This let's you know if you are able to run another request (with a different page or a different start date filter) to get more records returned in the results."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "has_more"
        ]
      },
      "LoyaltiesMembersTransactionsExportCreateResponseBody": {
        "title": "Loyalties Members Transactions Export Create Response Body",
        "description": "Response body schema for **POST** `/loyalties/members/{memberId}/transactions/export` and for **POST** `/loyalties/{campaignId}/members/{memberId}/transactions/export`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportVoucherTransactionsScheduled"
          }
        ]
      },
      "LoyaltiesMembersPointsExpirationListResponseBody": {
        "title": "Loyalties Members Points Expiration List Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/members/{memberId}/points-expiration`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "pattern": "list",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty points expiration buckets in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "pattern": "data",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty points expiration bucket objects."
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty points expiration buckets.",
            "items": {
              "title": "Loyalties Members Points Expiration List Response Body Data Item",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique loyalty points bucket ID."
                },
                "voucher_id": {
                  "type": "string",
                  "description": "Unique parent loyalty card ID."
                },
                "campaign_id": {
                  "type": "string",
                  "description": "\nUnique parent campaign ID."
                },
                "bucket": {
                  "type": "object",
                  "required": [
                    "total_points"
                  ],
                  "description": "Defines the number of points stored in the given loyalty points bucket.",
                  "properties": {
                    "total_points": {
                      "type": "integer",
                      "description": "Total number of points in the loyalty points bucket."
                    }
                  }
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp representing the date and time when the loyalty points bucket object was created in ISO 8601 format.",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Loyalty points bucket point status."
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date when the number of points defined in the bucket object are due to expire."
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp representing the date and time when the loyalty points bucket object was updated in ISO 8601 format."
                },
                "object": {
                  "type": "string",
                  "pattern": "loyalty_points_bucket",
                  "default": "loyalty_points_bucket",
                  "enum": [
                    "loyalty_points_bucket"
                  ],
                  "description": "The type of object represented by JSON. This object stores information about the loyalty points bucket."
                }
              },
              "required": [
                "id",
                "voucher_id",
                "campaign_id",
                "bucket",
                "created_at",
                "status",
                "expires_at",
                "object"
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of point expiration buckets."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesMembersRewardsListResponseBody": {
        "title": "Loyalties Members Rewards List Response Body",
        "description": "Response body schema for **GET** `/loyalties/members/{memberId}/rewards`",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "list",
            "enum": [
              "list"
            ]
          },
          "data_ref": {
            "type": "string",
            "description": "Identifies the name of the attribute that contains the array of loyalty reward objects.",
            "default": "data",
            "enum": [
              "data"
            ]
          },
          "data": {
            "type": "array",
            "description": "Contains array of loyalty reward objects.",
            "items": {
              "title": "Loyalties Members Rewards List Response Body Data Item",
              "type": "object",
              "properties": {
                "reward": {
                  "description": "This is an object representing a reward.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Reward"
                    }
                  ]
                },
                "assignment": {
                  "description": "This is an object representing a reward assignment.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RewardAssignment"
                    }
                  ]
                },
                "object": {
                  "type": "string",
                  "description": "The type of object represented by JSON.",
                  "default": "loyalty_reward",
                  "enum": [
                    "loyalty_reward"
                  ]
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty reward objects.",
            "minimum": 0
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "LoyaltiesRewardAssignmentsRewardGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Reward Get Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward`",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reward"
          }
        ]
      },
      "LoyaltiesMembersRedemptionRedeemResponseBody": {
        "title": "Loyalties Members Redemption Redeem Response Body",
        "description": "Response body schema for **POST** `/loyalties/{campaignId}/members/{memberId}/redemption` and for **POST** `/loyalties/members/{memberId}/redemption`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Redemption"
          },
          {
            "title": "RedemptionRewardRequired",
            "type": "object",
            "required": [
              "reward"
            ]
          }
        ]
      },
      "LoyaltiesMembersTiersListResponseBody": {
        "title": "Loyalties Members Tiers List Response Body",
        "description": "Response body schema for **GET** `/loyalties/members/{memberId}/tiers`.",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "enum": [
              "list"
            ],
            "description": "The type of object represented by JSON. This object stores information about loyalty tiers in a dictionary."
          },
          "data_ref": {
            "type": "string",
            "default": "data",
            "enum": [
              "data"
            ],
            "description": "Identifies the name of the attribute that contains the array of loyalty tier objects."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltyTier"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of loyalty tier objects."
          }
        },
        "required": [
          "object",
          "data_ref",
          "data",
          "total"
        ]
      },
      "CustomersPermanentDeletionCreateResponseBody": {
        "type": "object",
        "title": "Customers Permanent Deletion Create Response Body",
        "description": "Response body schema for **POST** `/customers/{customerId}/permanent-deletion`.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique permanent deletion object ID.",
            "example": "del_mgzqZNwUnwnt1Ddw6phEG90Q"
          },
          "created_at": {
            "type": "string",
            "example": "2022-09-02T17:55:47.865Z",
            "description": "Timestamp representing the date and time when the customer was requested to be deleted in ISO 8601 format.",
            "format": "date-time"
          },
          "related_object_id": {
            "type": "string",
            "example": "cust_m557pDDl4IGXexkU6KOQ2Dwi",
            "description": "Unique customer ID that is being deleted."
          },
          "related_object": {
            "type": "string",
            "description": "Object being deleted.",
            "default": "customer"
          },
          "status": {
            "type": "string",
            "description": "Deletion status.",
            "default": "DONE"
          },
          "data_json": {
            "type": "object",
            "description": "Statistics summarizing the number of related information that was deleted.",
            "required": [
              "events",
              "customer_events",
              "daily_events",
              "segments",
              "orders",
              "order_events",
              "customer"
            ],
            "properties": {
              "events": {
                "type": "integer",
                "description": "Number of events deleted."
              },
              "customer_events": {
                "type": "integer",
                "description": "Number of customer events deleted."
              },
              "daily_events": {
                "type": "integer",
                "description": "Number of daily events deleted."
              },
              "segments": {
                "type": "integer",
                "description": "Number of segments deleted."
              },
              "orders": {
                "type": "integer",
                "description": "Number of orders deleted."
              },
              "order_events": {
                "type": "integer",
                "description": "Number of order events deleted."
              },
              "customer": {
                "type": "integer",
                "description": "Number of customers deleted.",
                "default": 1
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON.",
            "default": "pernament_deletion"
          }
        },
        "required": [
          "id",
          "created_at",
          "related_object_id",
          "related_object",
          "status",
          "data_json",
          "object"
        ]
      },
      "CustomersImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Customers Import Csv Create Response Body",
        "description": "Response body schema for **POST** `/customers/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "OrdersImportCreateResponseBody": {
        "type": "object",
        "title": "Orders Import Create Response Body",
        "description": "Response body schema for **POST** `/orders/import`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "OrdersExportCreateResponseBody": {
        "title": "Orders Export Create Response Body",
        "description": "Response body schema for **POST** `/orders/export`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportScheduledBase"
          },
          {
            "$ref": "#/components/schemas/ExportOrderBase"
          }
        ]
      },
      "ProductsMetadataUpdateInBulkResponseBody": {
        "type": "object",
        "title": "Products Metadata Update In Bulk Response Body",
        "description": "Response body schema for **POST** `/products/metadata/async`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "ProductsSkusCreateResponseBody": {
        "type": "object",
        "title": "Products Skus Create Response Body",
        "description": "Response body schema for **PUT** `/products/{productId}/skus`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "ProductsSkusUpdateResponseBody": {
        "type": "object",
        "title": "Products Skus Update Response Body",
        "description": "Response body schema for **PUT** `/products/{productId}/skus/{skuId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sku"
          }
        ]
      },
      "ProductsImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Products Import Csv Create Response Body",
        "description": "Response body schema for **POST** `/products/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "SkusImportCsvCreateResponseBody": {
        "type": "object",
        "title": "Skus Import Csv Create Response Body",
        "description": "Response body schema for **POST** `/skus/importCSV`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncActions"
          }
        ]
      },
      "EventsCreateResponseBody": {
        "title": "Events Create Response Body",
        "type": "object",
        "description": "Response body schema for **POST** `/events`.",
        "properties": {
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an `event`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "null",
            "description": "A `null` referral object."
          },
          "loyalty": {
            "type": "null",
            "description": "A `null` loyalty object."
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "ClientEventsCreateResponseBody": {
        "description": "Response body schema for **POST** `/events`.",
        "title": "Client Events Create Response Body",
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "event",
            "description": "The object represented is an `event`.",
            "enum": [
              "event"
            ]
          },
          "type": {
            "type": "string",
            "description": "The event name."
          },
          "customer": {
            "description": "A simple customer object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleCustomerRequiredObjectType"
              }
            ]
          },
          "referral": {
            "type": "null",
            "description": "A `null` referral object."
          },
          "loyalty": {
            "type": "null",
            "description": "A `null` loyalty object."
          }
        },
        "required": [
          "object",
          "type",
          "customer",
          "referral",
          "loyalty"
        ]
      },
      "ClientQualificationsCheckEligibilityResponseBody": {
        "description": "Response body schema for **POST** `/qualifications`.",
        "title": "Client Qualifications Check Eligibility Response Body",
        "type": "object",
        "properties": {
          "redeemables": {
            "$ref": "#/components/schemas/QualificationsRedeemables"
          },
          "tracking_id": {
            "type": "string",
            "description": "This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID."
          },
          "order": {
            "$ref": "#/components/schemas/OrderCalculated"
          },
          "stacking_rules": {
            "$ref": "#/components/schemas/StackingRules"
          }
        }
      },
      "VouchersBalanceUpdateRequestBody": {
        "title": "Vouchers Balance Update Request Body",
        "type": "object",
        "description": "Request body schema for `vouchers/{code}/balance`.",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amount to be added to or removed from the current balance on the gift card or loyalty card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000. To remove balance, simply add a minus sign before the value, i.e. to remove $20, use -2000."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          },
          "reason": {
            "type": "string",
            "description": "Reason why the transaction occurred."
          }
        },
        "required": [
          "amount"
        ]
      },
      "VouchersTransactionsExportCreateRequestBody": {
        "description": "Request body schema for **POST** `/vouchers/transactions/export`.",
        "type": "object",
        "title": "Vouchers Transactions Export Create Request Body",
        "properties": {
          "parameters": {
            "description": "Contains the parameters that define the data to be exported.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VoucherTransactionsExportParameters"
              }
            ]
          }
        }
      },
      "CampaignsVouchersCreateBaseRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create Base Request Body",
        "properties": {
          "category": {
            "type": "string",
            "description": "The category assigned to the campaign. Either pass this parameter OR the `category_id`."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. ",
            "example": "2022-09-20T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date.",
            "example": "2022-09-30T00:00:00.000Z"
          }
        }
      },
      "CampaignsVouchersCreateInBulkRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create In Bulk Request Body",
        "description": "Request body schema for **POST** `/campaigns/{campaignId}/vouchers`.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Unique voucher code."
              },
              "code_config": {
                "$ref": "#/components/schemas/CodeConfig"
              }
            }
          },
          {
            "$ref": "#/components/schemas/CampaignsVouchersCreateBaseRequestBody"
          }
        ]
      },
      "CampaignsVouchersCreateRequestBody": {
        "type": "object",
        "title": "Campaigns Vouchers Create Request Body",
        "description": "Request body schema for **POST** `/campaigns/{campaignId}/vouchers/{code}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignsVouchersCreateBaseRequestBody"
          }
        ]
      },
      "CampaignsImportCreateRequestBody": {
        "type": "array",
        "title": "Campaigns Import Create Request Body",
        "description": "Request body schema for **POST** `/campaigns/{campaignId}/import`.",
        "items": {
          "$ref": "#/components/schemas/CampaignsImportVoucherItem"
        }
      },
      "PromotionsStacksCreateRequestBody": {
        "title": "Promotions Stacks Create Request Body",
        "description": "Request body schema for **POST** `/promotions/{campaignId}/stacks`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PromotionStackBase"
          },
          {
            "type": "object",
            "properties": {
              "category_id": {
                "type": "string",
                "description": "Promotion stack category ID."
              }
            }
          }
        ]
      },
      "PromotionsStacksUpdateRequestBody": {
        "description": "Request Body schema for **put** `/promotions/{campaignId}/stacks/{stackId}`.",
        "title": "Promotions Stacks Update Request Body",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Promotion stack name."
          },
          "tiers": {
            "type": "object",
            "description": "Contains the tier configuration.",
            "properties": {
              "ids": {
                "type": "array",
                "description": "Contains the list of tiers in a pre-defined sequence.",
                "items": {
                  "type": "string"
                }
              },
              "hierarchy_mode": {
                "type": "string",
                "default": "MANUAL",
                "enum": [
                  "MANUAL"
                ],
                "description": "Category hierarchy."
              }
            }
          },
          "category_id": {
            "type": "string",
            "description": "Promotion stack category ID."
          }
        }
      },
      "RewardsAssignmentsCreateRequestBody": {
        "description": "Request body schema for **POST** `/rewards/{rewardID}/assignments`.",
        "title": "Rewards Assignments Create Request Body",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RewardAssignmentsCreateDigitalOrMaterialRewardRequestBody"
          },
          {
            "$ref": "#/components/schemas/RewardAssignmentsCreateCoinRewardRequestBody"
          }
        ]
      },
      "RewardsAssignmentsUpdateRequestBody": {
        "title": "Rewards Assignments Update Request Body",
        "type": "object",
        "description": "Request body schema for **PUT** `/loyalties/{campaignId}/rewards/{assignmentId}` and **PUT** `/rewards/{rewardId}/assignments/{assignmentId}`.",
        "properties": {
          "parameters": {
            "type": "object",
            "description": "An object that defines the price of the reward in loyalty points.",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Stores the points parameter.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "Defines how many points are required to obtain the reward."
                  }
                }
              }
            }
          }
        }
      },
      "RedemptionsRollbackCreateRequestBody": {
        "title": "Redemptions Rollback Create Request Body",
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the rollback."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's `source_id`."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to update **redemption** metadata."
          }
        },
        "description": "Request body schema for **POST** `/redemptions/{redemptionId}/rollback`."
      },
      "ClientRedemptionsRedeemRequestBody": {
        "description": "Response body schema for **POST** `/redemptions`.",
        "type": "object",
        "title": "Client Redemptions Redeem Request Body",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "Expand array lets you configure params included in the response. Depending on the strings included in the array, the response will contain different details. \n\n| **Expand Option** | **Response Body** |\n|:---|:---|\n| [\"order\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\n| [\"redeemable\"] | Expands redeemable objects by including `metadata` for each discount type. |\n| [\"order\", \"redeemable\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes `metadata` for each discount type. |\n| [\"redeemable\", \"redemption\", \"category\"] | - Returns each discount type's `metadata` in each child redemption object.<br>- Returns redemption object `metadata`.<br>- Returns an expanded `categories` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "ClientValidationsValidateRequestBody": {
        "description": "Response body schema for **POST** `/validations`.",
        "title": "Client Validations Validate Request Body",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "options": {
                "type": "object",
                "description": "Configure parameters returned in the response.",
                "properties": {
                  "expand": {
                    "type": "array",
                    "description": "The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details. \n\n| **Expand Option** | **Response Body** |\n|:---|:---|\n| [\"order\"] | - Same response as fallback response (without an options object).<br>- Order data with calculated discounts are listed in each child redeemable object.<br>- Metadata not included for each discount type. |\n| [\"redeemable\"] | Expands redeemable objects by including `metadata` for each discount type. |\n| [\"order\", \"redeemable\"] | - Order data with calculated discounts are listed in each child redeemable object.<br>- Includes `metadata` for each discount type. |\n| [\"category\"] | - Returns an expanded `categories` object, showing details about the category. |",
                    "items": {
                      "type": "string",
                      "enum": [
                        "order",
                        "redemption",
                        "redeemable",
                        "category"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/StackableValidateRedeemBase"
          }
        ]
      },
      "RedemptionsRollbacksCreateRequestBody": {
        "title": "Redemptions Rollbacks Create Request Body",
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the rollback."
          },
          "tracking_id": {
            "type": "string",
            "description": "Customer's `source_id`."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to update **redemption** metadata."
          }
        },
        "description": "Request body schema for **POST** `/redemptions/{parentRedemptionId}/rollbacks`."
      },
      "LoyaltiesMembersBalanceUpdateRequestBody": {
        "description": "Request Body schema for **post** `/loyalties/members/{memberId}/balance` and **POST** `/loyalties/{campaignId}/members/{memberId}/balance`.",
        "title": "Loyalties Members Balance Update Request Body",
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "description": "Incremental balance to be added to/subtracted from the loyalty card.\n\n- To add points: 100\n- To subtract points, add a minus: -100"
          },
          "expiration_type": {
            "description": "Set the type of expiration for added points.\n\n`PROGRAM_RULES`: Inherit rules from campaign.\n`NON_EXPIRING`: Points never expire.\n`CUSTOM_DATE`: Points expire on a particular date. Requires expiration_date parameter.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PointsExpirationTypes"
              }
            ]
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "Set expiration date for added points, i.e. `YYYY-MM-DD`. This parameter is required only when expiration_type is set to `CUSTOM_DATE`."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the transfer."
          },
          "source_id": {
            "type": "string",
            "description": "The merchant’s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service."
          }
        },
        "required": [
          "points"
        ]
      },
      "LoyaltiesMembersTransfersCreateRequestBody": {
        "title": "Loyalties Members Transfers Create Request Body",
        "description": "Response body schema for **POST** `/loyalties/{campaignId}/members/{memberId}/transfers`.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LoyaltiesTransferPoints"
        }
      },
      "LoyaltiesMembersTransactionsExportCreateRequestBody": {
        "title": "Loyalties Members Transactions Export Create Request Body",
        "description": "Request body schema for **POST** `/loyalties/members/{memberId}/transactions/export` and for **POST** `/loyalties/{campaignId}/members/{memberId}/transactions/export`.",
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportVoucherTransactionsFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportVoucherTransactionsFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        }
      },
      "LoyaltiesRewardsUpdateRequestBody": {
        "title": "Loyalties Rewards Update Request Body",
        "type": "object",
        "description": "Request body schema for **PUT** `/loyalties/{campaignId}/rewards/{assignmentId}` and **PUT** `/rewards/{rewardId}/assignments/{assignmentId}`.",
        "properties": {
          "parameters": {
            "type": "object",
            "description": "An object that defines the price of the reward in loyalty points.",
            "properties": {
              "loyalty": {
                "type": "object",
                "description": "Stores the points parameter.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "Defines how many points are required to obtain the reward."
                  }
                }
              }
            }
          }
        }
      },
      "LoyaltiesMembersRedemptionRedeemRequestBody": {
        "description": "Request body schema for **POST** `/loyalties/{campaignId}/members/{memberId}/redemption` and for **POST** and `/loyalties/members/{memberId}/redemption`.",
        "type": "object",
        "title": "Loyalties Members Redemption Redeem Request Body",
        "properties": {
          "reward": {
            "type": "object",
            "description": "Contains information about the reward that the customer wants to redeem and the number of points the customer is choosing to use for the reward if the reward is a pay with points reward.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique reward ID assigned by Voucherify. The reward must be assigned to the campaign in order for the user to be able to use the reward.",
                "example": "rew_eSi4eYJk7o3tOycvweicR2z7"
              },
              "points": {
                "type": "integer",
                "description": "The number of loyalty points that the user wants to spend in order to fulfill the order. The number of points cannot be higher than the current balance on the loyalty card."
              }
            }
          },
          "order": {
            "description": "Order object that is **required** when redeeming a pay with points reward.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "CustomersConsentsUpdateRequestBody": {
        "type": "object",
        "title": "Customers Consents Update Request Body",
        "description": "Request body schema for **PUT** `/customers/{customerId}/consents`.",
        "properties": {
          "unsubscribed": {
            "type": "boolean",
            "description": "To deny all consents, use `unsubscribed` as a consent identifier and `true` as a value."
          }
        },
        "additionalProperties": {
          "type": "boolean",
          "description": "Key-value pair where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not."
        }
      },
      "ClientCustomersConsentsUpdateRequestBody": {
        "description": "Request body schema for **PUT** `/customers/{customerId}/consents`.",
        "type": "object",
        "title": "Client Customers Consents Update Request Body",
        "properties": {
          "unsubscribed": {
            "type": "boolean",
            "description": "To deny all consents, use `unsubscribed` as a consent identifier and `true` as a value."
          }
        },
        "additionalProperties": {
          "type": "boolean",
          "description": "Key-value pair where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not."
        }
      },
      "OrdersImportCreateRequestBody": {
        "type": "array",
        "title": "Orders Import Create Request Body",
        "description": "Request body schema for POST `/orders/import`.",
        "items": {
          "title": "Orders Import Create Request Body Item",
          "type": "object",
          "allOf": [
            {
              "title": "Order Ids",
              "type": "object",
              "properties": {
                "source_id": {
                  "type": "string",
                  "description": "Unique source ID of an existing order that will be linked to the redemption of this request."
                }
              }
            },
            {
              "$ref": "#/components/schemas/OrderBase"
            }
          ]
        }
      },
      "OrdersExportCreateRequestBody": {
        "title": "Orders Export Create Request Body",
        "description": "Request body schema for **POST** `/orders/export`.",
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "properties": {
              "order": {
                "description": "How the export is filtered, where the dash - preceding a sorting option means sorting in a descending order.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderOrder"
                  }
                ]
              },
              "fields": {
                "type": "array",
                "description": "Array of strings containing the data in the export. These fields define the headers in the CSV file.",
                "items": {
                  "$ref": "#/components/schemas/ExportOrderFields"
                }
              },
              "filters": {
                "description": "Filter conditions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportOrderFilters"
                  }
                ]
              }
            },
            "description": "List of available fields and filters that can be exported with an order along with the sorting order of the returned data."
          }
        }
      },
      "ProductsMetadataUpdateInBulkRequestBody": {
        "type": "object",
        "title": "Products Metadata Update In Bulk Request Body",
        "description": "Request schema for **POST** `/products/metadata/async`.",
        "properties": {
          "source_ids": {
            "type": "array",
            "description": "Array of unique product source IDs.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format."
          }
        },
        "required": [
          "source_ids",
          "metadata"
        ]
      },
      "ProductsSkusCreateRequestBody": {
        "title": "Products Skus Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** `/products/{productId}/skus",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique SKU ID.",
            "example": "sku_0c0c0012a9029bccef"
          },
          "source_id": {
            "type": "string",
            "example": "sku_source_id_4",
            "description": "A unique SKU identifier from your inventory system."
          },
          "sku": {
            "type": "string",
            "example": "Large Pink Shirt",
            "description": "Unique user-defined SKU name."
          },
          "price": {
            "type": "integer",
            "description": "SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`."
          },
          "currency": {
            "type": "string",
            "description": "SKU price currency.",
            "example": "USD"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family."
          },
          "image_url": {
            "type": "string",
            "description": "The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format."
          }
        }
      },
      "EventsCreateRequestBody": {
        "title": "Events Create Request Body",
        "type": "object",
        "description": "Request body schema for **POST** `/events`.",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name. This is the same name that you used to define a custom event in the **Dashboard** > **Project Settings** > **Event Schema**.",
            "minLength": 1,
            "maxLength": 300
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "If a **conversion event** for a referral program is set to a custom event, then you need to send the referral code in the payload to make a record of the conversion event. ",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code through which a new visitor has been referred to a service."
              },
              "referrer_id": {
                "type": "string",
                "description": "Unique ID of the referring person - it is optional and not required if the referral **code** is provided.",
                "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
              }
            },
            "required": [
              "code"
            ]
          },
          "loyalty": {
            "type": "object",
            "description": "If an earning rule in a loyalty program is based on a custom event. This objects let's you specify the loyalty card to which the custom event should be attributed to.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code of the loyalty card to receive points based on the calculation method defined in the related earning rule. An earning rule is triggered for the loyalty card when the event passed in the `event` parameter of the request payload gets sent along with this loyalty card code.",
                "example": "L-CARD-BUHuH6g"
              }
            },
            "required": [
              "code"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** > **Project Settings** > **Event Schema** > **Edit particular event** > **Metadata property definition**."
          }
        },
        "required": [
          "event",
          "customer"
        ]
      },
      "ClientEventsCreateRequestBody": {
        "description": "Request body schema for **POST** `/events`.",
        "title": "Client Events Create Request Body",
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event name. This is the same name that you used to define a custom event in the **Dashboard** > **Project Settings** > **Event Schema**.",
            "minLength": 1,
            "maxLength": 300
          },
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "referral": {
            "type": "object",
            "description": "If a **conversion event** for a referral program is set to a custom event, then you need to send the referral code in the payload to make a record of the conversion event. ",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code through which a new visitor has been referred to a service."
              },
              "referrer_id": {
                "type": "string",
                "description": "Unique ID of the referring person - it is optional and not required if the referral **code** is provided.",
                "example": "cust_Vzck5i8U3OhcEUFY6MKhN9Rv"
              }
            },
            "required": [
              "code"
            ]
          },
          "loyalty": {
            "type": "object",
            "description": "If an earning rule in a loyalty program is based on a custom event. This objects let's you specify the loyalty card to which the custom event should be attributed to.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code of the loyalty card to receive points based on the calculation method defined in the related earning rule. An earning rule is triggered for the loyalty card when the event passed in the `event` parameter of the request payload gets sent along with this loyalty card code.",
                "example": "L-CARD-BUHuH6g"
              }
            },
            "required": [
              "code"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** > **Project Settings** > **Event Schema** > **Edit particular event** > **Metadata property definition**."
          }
        },
        "required": [
          "event",
          "customer"
        ]
      },
      "ClientQualificationsCheckEligibilityRequestBody": {
        "description": "Request body schema for **POST** `/qualifications`.",
        "type": "object",
        "title": "Client Qualifications Check Eligibility Request Body",
        "properties": {
          "customer": {
            "description": "Customer's information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Customer"
              }
            ]
          },
          "order": {
            "description": "Order information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "mode": {
            "type": "string",
            "description": "Defines which resources Voucherify will use.\nThe `ADVANCED` mode is available after purchase only.",
            "enum": [
              "BASIC",
              "ADVANCED"
            ]
          },
          "tracking_id": {
            "description": "Is correspondent to Customer's source_id",
            "type": "string"
          },
          "scenario": {
            "type": "string",
            "description": "Defines the scenario Voucherify should consider during the qualification process.\n\n- `ALL` - Scenario that returns all redeemables available for the customer in one API request. This scenario is used by default when no value is selected.\n- `CUSTOMER_WALLET` - returns vouchers applicable to the customer’s cart based on the vouchers assigned to the customer’s profile.\n- `AUDIENCE_ONLY` - returns all vouchers, promotion tiers, and campaigns available to the customer. Voucherify validates the rules based on the customer profile only.\n- `PRODUCTS` - returns all promotions available for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\n- `PRODUCTS_DISCOUNT` - returns all promotions available for products when a discount is defined as applicable to specific item(s).\n- `PROMOTION_STACKS` - returns the applicable promotion stacks.\n- `PRODUCTS_BY_CUSTOMER` - returns all promotions available for a customer for the products (when a discount is defined to be applied to the item or when the item is required in the validation rule).\n- `PRODUCTS_DISCOUNT_BY_CUSTOMER` - returns all promotions available for a customer for products when a discount is defined as applicable to specific item(s).",
            "enum": [
              "ALL",
              "CUSTOMER_WALLET",
              "AUDIENCE_ONLY",
              "PRODUCTS",
              "PRODUCTS_DISCOUNT",
              "PROMOTION_STACKS",
              "PRODUCTS_BY_CUSTOMER",
              "PRODUCTS_DISCOUNT_BY_CUSTOMER"
            ]
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QualificationsOption"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against redeemables requiring **redemption** metadata validation rules to be satisfied. The validation runs against rules that are defined through the <!-- [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) -->[Create Validation Rules](ref:create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "LoyaltiesRewardsGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Get Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/rewards/{assignmentId}`",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      },
      "LoyaltiesRewardAssignmentsGetResponseBody": {
        "type": "object",
        "title": "Loyalties Reward Assignments Get Response Body",
        "description": "Response body schema for **GET** `/loyalties/{campaignId}/reward-assignments/{assignmentId}`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RewardAssignment"
          }
        ]
      }
    }
  }
}
