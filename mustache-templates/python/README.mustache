![Voucherify Python SDK](././voucherify-python-sdk.png)

## Official [Voucherify](https://www.voucherify.io/) SDK for Python

Voucherify empowers marketers and developers with flexible building blocks to come up with, implement, and track targeted promotional campaigns.

Learn more about Voucherify by visiting [our site](https://www.voucherify.io).

This SDK is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) based on our [Documentation](https://docs.voucherify.io/docs/introduction) with v2018-08-01 version.

The legacy version of Python SDK could be found [here](https://github.com/voucherifyio/voucherify-python-sdk/releases/tag/v2.2.2)

## 📝 Documentation

You will find detailed description and example responses at our [official documentation](https://docs.voucherify.io/reference). Most method headers point to more detailed descriptions of arguments you can use.

📚 Want to learn more? Visit our [official site](https://www.voucherify.io) or our [Success Portal](https://success.voucherify.io).

👽 Having troubles? Check our [Help center](https://support.voucherify.io/).

🧪 Looking for promotion ideas? Check our [Cookbook](https://cookbook.voucherify.io/) to get an inspiration.

🐛 Encounter a bug? Please file a report in the [Issues](https://github.com/voucherifyio/voucherify-python-sdk/issues).

✅ Supported endpoint can be found [here](./ENDPOINTS-COVERAGE.md)

## Requirements.

Python 3.7+

## Installation

To install the API client library to your local Maven repository, simply execute:

```sh
pip install 'Voucherify'
```

Then import the package:

```python
import voucherify
```

## 🚀 Running code

Please follow the [installation](#installation) instruction and execute the following Python code:

```python
import os
import voucherify
from dotenv import load_dotenv

load_dotenv()

HOST = os.getenv('VOUCHERIFY_HOST', 'https://api.voucherify.io')
X_APP_ID = os.getenv('X_APP_ID')
X_APP_TOKEN = os.getenv('X_APP_TOKEN')

if not X_APP_ID or not X_APP_TOKEN:
    raise ValueError("X_APP_ID and X_APP_TOKEN must be set in the .env file.")

configuration = voucherify.Configuration(
    host=HOST,
    api_key={
            "X-App-Id": X_APP_ID,
            "X-App-Token": X_APP_TOKEN
        }
)
# Debugging line
api_key_id = configuration.get_api_key_with_prefix('X-App-Id')
api_key_token = configuration.get_api_key_with_prefix('X-App-Token')

# Print whether both API keys are present and valid
are_keys_present = bool(api_key_id) and bool(api_key_token)
print(f"Configuration loaded: {are_keys_present}")

if(are_keys_present):
    with voucherify.ApiClient(configuration) as api_client:
        customers_api_instance = voucherify.CustomersApi(api_client)

        try:
            result = customers_api_instance.list_customers()
            print(result)

        except voucherifyClient.ApiException as e:
            self.fail(e)
```

It may be useful to check the tests implementation in the folder **tests** `(./__tests__)`

## 🐳 Running local tests with docker

1. Copy `.env.example` to `.env` and fill in the values.
2. Run `docker build -t python .` to build the image.
3. Run `docker run --rm python` to run the tests and delete container immediately after.

## 🛠️ Contributing

Read more about how to Contribute to Voucherify Python SDK by visiting main repo [GENERATING-SDKS.md](https://github.com/voucherifyio/voucherify-openapi/blob/master/GENERATING-SDKS.md)

Remember that this SDK is auto generated (except of the tests) so changes made here will be overwritten by generator.

## 📅 Changelog

- **2024-01-29** - `5.0.3`
  - Added support for **GET** /v1/loyalties/{campaignId}/pending-points
  - Added support for **GET** /v1/loyalties/members/{memberId}/pending-points
  - Added support for **GET** /v1/loyalties/{campaignId}/members/{memberId}/pending-points
  - Added support for **POST** /v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/activate
  - Added support for **POST** /v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/cancel
  - Added types for pending points (loyalties) and access settings (areas and stores)
- **2024-11-26** - `5.0.2`
  - Added support for `STANDALONE` campaign type.
  - Added optional `metadata` in `OrderCalculatedItemSku`
  - New possible value of `ParameterExpandListCampaigns`
  - New optional `error` parameter in `Error`
  - Updated `LoyaltyCardTransactionDetailsBalance`
- **2024-11-04** - `5.0.1`
  - Added support for returning `campaign_id` and `campaign_name` in stackable validation endpoint, when `redeemable` option is expanded
- **2024-10-28** - `5.0.0`
  - Added missing `enums` in few filters models
  - !!! BREAKING CHANGES !!!
    - VouchersApi.generateRandomCode now requires `VouchersCreateResponseBody` instead of plain `object`
    - property `product` in model `Discount` now uses `DiscountProduct` instead of `SimpleProductDiscountUnit`
    - property `filters` of model `ExportsCreateRequestBodyParameters` now uses plain `object` instead of `ExportsCreateRequestBodyParametersFilters`
- **2024-10-25** - `4.0.0`
    - Fix object parsing in query. For example `filters` while listing redemptions.
    - !!! BREAKING CHANGES !!!
        - Remove support for `/client/v1/customers/{customerId}/consents` - put `Update Customer's consents (client-side) [Deprecated]`
        - Pagination changed on listing card transactions(listLoyaltyCardTransactions) - NO `page` param is supported - use `starting_after_id` instead.
        - Pagination changed on listing voucher transactions(listVoucherTransactions) - NO `page` param is supported - use `starting_after_id` instead.
        - ApplicableToEffect - changed - `EVERY` -> `TO_EVERY`, `CHEAPEST` -> `TO_CHEAPEST`, `MOST_EXPENSIVE` -> `TO_MOST_EXPENSIVE`, 2 new values introduced.
        - `listPublications` parameter `filters` have changed - now uses `ParameterFiltersListPublications` instead of `String`
        - `ParameterFiltersListRedemptions` and `ParameterFiltersListCustomerRedeemables` have been updated
        - enum `LUCKY_DRAW`, `LUCKY_DRAW_CODE`, `VOUCHER_LUCKY_DRAW_CODE`, `CAMPAIGN_LUCKY_DRAW` have been deleted from everywhere and no longer supported
        - CampaignsUpdateRequestBody - properties `activityDurationAfterPublishing`, `joinOnce`, `autoJoin`, `type`, `uniqueWinners`, `uniqueWinnersPerDraw` and enum `AUTO_UPDATE` | `STATIC` have been deleted and no longer supported
        - `updateCustomersConsents` has been deleted and no longer supported
        - `FilterConditionsDateTimeConditions` model has been renamed to `FilterConditionsDateTime`
        - FilterConditionsDateTime - `conditions` has been divided on `$after`, `$before`, `$hasValue`, `$isUnknown`, `moreThan`, `lessThan` properties
        - ParamterFiltersListCustomerRedeemables - model name of `createdAt` has been renamed from `FilterConditionsDateTime` to `ParameterFiltersListCustomerRedeemablesCreatedAt`
        - `filter` property in schemas ProductCollectionsCreateRequestBody, ProductCollectionsCreateResponseBody, ProductCollectionsItem and ProductCollectionsGetResponseBody has changed. Uses plain `object`.
        - `discount` property in schema CampaignsUpdateRequestBody now uses `Discount` model
        - properties `winnersCount`, `uniqueWinnersPerDraw`, `uniqueWinners` in model `CampaignsUpdateRequestBody` were deleted.
        - property `stackingRulesType` were deleted from models `CategoriesGetResponseBody`, `Category`
        - property `categories` in model `ClientValidationsValidateResponseBodyRedeemablesItem` uses now Array<CategoryWithStackingRulesType> model
        - model `ParameterFiltersListCustomerRedeemablesCampaignId` has been fixed, can use junction properly.
        - model `ParameterFiltersListRedemptions` has been fixed, can use junction properly.
        - property `filter` in model `ProductCollectionsCreateRequestBody` now uses plain Object
        - property `categories` in model `QualificationsRedeemable` now uses `Array<CategoryWithStackingRulesType>`
    - Added support:
        - /v1/metadata-schemas - get `List Metadata Schemas`
        - /v1/metadata-schemas/{resource} - get `Get Metadata Schema`
        - /v1/locations - `List Locations`
        - /v1/locations/{locationId} - get `Get Location`
        - /v1/referrals/{campaignId}/members/{memberId}/holders - post `Add Referral Code Holders`
        - /v1/referrals/{campaignId}/members/{memberId}/holders - get `List Referral Code Holders`
        - /v1/referrals/{campaignId}/members/{memberId}/holders/{holderId} - delete `Remove Referral Card Holder`
        - /v1/referrals/members/{memberId}/holders - post `Add Referral Code Holders`
        - /v1/referrals/members/{memberId}/holders - get `List Referral Code Holders`
        - /v1/referrals/members/{memberId}/holders/{holderId} - delete `Remove Referral Card Holder`
        - /v1/trash-bin - get `List Bin Entries`
        - /v1/trash-bin/{binEntryId} - delete `Delete Bin Entry`
        - /v1/templates/campaigns - get `List Campaign Templates`
        - /v1/templates/campaigns - post `Create Campaign Template`
        - /v1/templates/campaigns/{campaignTemplateId} - get `Get Campaign Template`
        - /v1/templates/campaigns/{campaignTemplateId} - put `Update Campaign Template`
        - /v1/templates/campaigns/{campaignTemplateId} - delete `Delete Campaign Template`
        - /v1/templates/campaigns/{campaignTemplateId}/campaign-setup - post `Create Campaign From Template`
        - /v1/templates/campaigns/{campaignTemplateId}/tier-setup - post `Add Promotion Tier From Template`
        - /management/v1/projects - post `Create Project`
        - /management/v1/projects - get `List Projects`
        - /management/v1/projects/{projectId} - get `Get Project`
        - /management/v1/projects/{projectId} - put `Update Project`
        - /management/v1/projects/{projectId} - delete `Delete Project`
        - /management/v1/projects/{projectId}/users - post `Assign User`
        - /management/v1/projects/{projectId}/users/{userId} - put `Update User`
        - /management/v1/projects/{projectId}/users/{userId} - delete `Unassign User`
        - /management/v1/projects/users/invite - post `Invite a New User`
        - /management/v1/projects/{projectId}/templates/campaigns - get `List Campaign Templates`
        - /management/v1/projects/{projectId}/templates/campaigns/{campaignTemplateId}/copy - post `Copy Campaign Template to a Project`
        - /management/v1/projects/{projectId}/stacking-rules - post `Create Stacking Rules`
        - /management/v1/projects/{projectId}/stacking-rules - get `List Stacking Rules`
        - /management/v1/projects/{projectId}/stacking-rules/{stackingRulesId} - get `Get Stacking Rules`
        - /management/v1/projects/{projectId}/stacking-rules/{stackingRulesId} - put `Update Stacking Rules`
        - /management/v1/projects/{projectId}/stacking-rules/{stackingRulesId} - delete `Delete Stacking Rules`
        - /management/v1/projects/{projectId}/metadata-schemas - post `Create Metadata Schema`
        - /management/v1/projects/{projectId}/metadata-schemas - get `List Metadata Schemas`
        - /management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId} - get `Get Metadata Schema`
        - /management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId} - put `Update Metadata Schema`
        - /management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId} - delete `Delete Metadata Schema`
        - /management/v1/projects/{projectId}/custom-event-schemas - post `Create Custom Event Schema`
        - /management/v1/projects/{projectId}/custom-event-schemas - get `List Custom Event Schemas`
        - /management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId} - get `Get Custom Event Schema`
        - /management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId} - put `Update Custom Event Schema`
        - /management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId} - delete `Delete Custom Event Schema`
        - /management/v1/projects/{projectId}/webhooks - post `Create Webhook`
        - /management/v1/projects/{projectId}/webhooks - get `List Webhooks`
        - /management/v1/projects/{projectId}/webhooks/{webhookId} - get `Get Webhook`
        - /management/v1/projects/{projectId}/webhooks/{webhookId} - put `Update Webhook`
        - /management/v1/projects/{projectId}/webhooks/{webhookId} - delete `Delete Webhook`
        - /management/v1/projects/{projectId}/branding - post `Create Brand`
        - /management/v1/projects/{projectId}/branding - get `List Brands`
        - /management/v1/projects/{projectId}/branding/{brandingId} - get `Get Brand`
        - /management/v1/projects/{projectId}/branding/{brandingId} - put `Update Brand`
        - /management/v1/projects/{projectId}/branding/{brandingId} - delete `Delete Brand`
- **2024-09-18** - `3.0.0`
    -  The new version of the SDK includes coverage for all the most commonly used Voucherify endpoints and supports typed models.

*Previous versions of the API are no longer supported, and we highly recommend upgrading to version 3.0.0, which is now designated as Long-Term Support (LTS).*

*Changelog for previous versions could be found in [here](./DEPRECATED_CHANGELOG.md)*

## 🔐 Documentation for Authorization

```python
import os
import voucherify
from dotenv import load_dotenv

load_dotenv()

HOST = os.getenv('VOUCHERIFY_HOST', 'https://api.voucherify.io')
X_APP_ID = os.getenv('X_APP_ID')
X_APP_TOKEN = os.getenv('X_APP_TOKEN')

if not X_APP_ID or not X_APP_TOKEN:
    raise ValueError("X_APP_ID and X_APP_TOKEN must be set in the .env file.")

configuration = voucherify.Configuration(
    host=HOST,
    api_key={
            "X-App-Id": X_APP_ID,
            "X-App-Token": X_APP_TOKEN
        }
)
# Debugging line
api_key_id = configuration.get_api_key_with_prefix('X-App-Id')
api_key_token = configuration.get_api_key_with_prefix('X-App-Token')

# Print whether both API keys are present and valid
are_keys_present = bool(api_key_id) and bool(api_key_token)
print(f"Configuration loaded: {are_keys_present}")
```

then use

```python
import voucherify

(...)
    with voucherify.ApiClient(configuration) as api_client:
```

{{> common_README }}
