![Voucherify Java SDK](./voucherify-java-sdk.png)

## Official [Voucherify](https://www.voucherify.io/) SDK for Java

Voucherify empowers marketers and developers with flexible building blocks to come up with, implement, and track targeted promotional campaigns.

Learn more about Voucherify by visiting [our site](https://www.voucherify.io).

This SDK is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) based on our [Documentation](https://docs.voucherify.io/docs/introduction) with v2018-08-01 version.

The legacy version of Java SDK could be found [here](https://github.com/voucherifyio/voucherify-java-sdk/tree/11.2.2)

## üìù Documentation

You will find detailed description and example responses at our [official documentation](https://docs.voucherify.io/reference). Most method headers point to more detailed descriptions of arguments you can use.

üìö Want to learn more? Visit our [official site](https://www.voucherify.io) or our [Success Portal](https://success.voucherify.io).

üëΩ Having troubles? Check our [Help center](https://support.voucherify.io/).

üß™ Looking for promotion ideas? Check our [Cookbook](https://cookbook.voucherify.io/) to get an inspiration.

üêõ Encounter a bug? Please file a report in the [Issues](https://github.com/voucherifyio/voucherify-java-sdk/issues).

‚úÖ Supported endpoint can be found [here](./ENDPOINTS-COVERAGE.md)

## Requirements

Building the API client library requires:
1. Java 1.8+
2. Maven (3.8.3+)/Gradle (7.2+)

## Installation

To install the API client library to your local Maven repository, simply execute:

```shell
mvn clean install
```

To deploy it to a remote Maven repository instead, configure the settings of the repository and execute:

```shell
mvn clean deploy
```

Refer to the [OSSRH Guide](http://central.sonatype.org/pages/ossrh-guide.html) for more information.

### Maven users

Add this dependency to your project's POM:

```xml
<dependency>
  <groupId>{{{groupId}}}</groupId>
  <artifactId>{{{artifactId}}}</artifactId>
  <version>{{{artifactVersion}}}</version>
  <scope>compile</scope>
</dependency>
```

### Gradle users

Add this dependency to your project's build file:

```groovy
  repositories {
    mavenCentral()
  }

  dependencies {
     implementation "{{{groupId}}}:{{{artifactId}}}:{{{artifactVersion}}}"
  }
```

### Others

At first generate the JAR by executing:

```shell
mvn clean package
```

Then manually install the following JARs:

* `target/{{{artifactId}}}-{{{artifactVersion}}}.jar`
* `target/lib/*.jar`

## üöÄ Running code

Please follow the [installation](#installation) instruction and execute the following Java code:

```java
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
// Import classes:
import {{{invokerPackage}}}.ApiClient;
import {{{invokerPackage}}}.ApiException;
import {{{invokerPackage}}}.Configuration;{{#hasAuthMethods}}
import {{{invokerPackage}}}.auth.*;{{/hasAuthMethods}}
import {{{invokerPackage}}}.models.*;
import {{{package}}}.{{{classname}}};

public class Example {
  public static void main(String[] args) {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    defaultClient.setBasePath("{{{basePath}}}");
    {{#withAWSV4Signature}}
    // Configure AWS Signature V4 authorization
    defaultClient.setAWS4Configuration("YOUR_ACCESS_KEY", "YOUR_SECRET_KEY", "REGION", "SERVICE")
    {{/withAWSV4Signature}}
    {{#hasAuthMethods}}
    {{#authMethods}}{{#isBasic}}{{#isBasicBasic}}
    // Configure HTTP basic authorization: {{{name}}}
    HttpBasicAuth {{{name}}} = (HttpBasicAuth) defaultClient.getAuthentication("{{{name}}}");
    {{{name}}}.setUsername("YOUR USERNAME");
    {{{name}}}.setPassword("YOUR PASSWORD");{{/isBasicBasic}}{{#isBasicBearer}}
    // Configure HTTP bearer authorization: {{{name}}}
    HttpBearerAuth {{{name}}} = (HttpBearerAuth) defaultClient.getAuthentication("{{{name}}}");
    {{{name}}}.setBearerToken("BEARER TOKEN");{{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}
    // Configure API key authorization: {{{name}}}
    defaultClient.setAuthentication("{{{name}}}", "YOUR {{{name}}}");{{/isApiKey}}{{#isOAuth}}
    // Configure OAuth2 access token for authorization: {{{name}}}
    OAuth {{{name}}} = (OAuth) defaultClient.getAuthentication("{{{name}}}");
    {{{name}}}.setAccessToken("YOUR ACCESS TOKEN");{{/isOAuth}}
    {{/authMethods}}
    {{/hasAuthMethods}}

        {{{classname}}} apiInstance = new {{{classname}}}(defaultClient);
        {{#allParams}}
        {{{dataType}}} {{{paramName}}} = {{{example}}}; // {{{dataType}}} | {{{description}}}
        {{/allParams}}
        try {
            {{#returnType}}{{{.}}} result = {{/returnType}}apiInstance.{{{operationId}}}({{#allParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/allParams}});{{#returnType}}
            System.out.println(result);{{/returnType}}
        } catch (ApiException e) {
            System.err.println("Exception when calling {{{classname}}}#{{{operationId}}}");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }
}
{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```

It may be useful to check the test implementation in the folder **test** `(./src/test)`

## üê≥ Running local tests with docker

1. Copy `.env.example` to `.env` and fill in the values.
3. Run `docker build -t java .` to build the image.
4. Run `docker run --rm java` to run the tests and delete container immediately after.

## üõ†Ô∏è Contributing

Read more about how to Contribute to Voucherify Java SDK by visiting main repo [GENERATING-SDKS.md](https://github.com/voucherifyio/voucherify-openapi/blob/master/GENERATING-SDKS.md)

Remember that this SDK is auto generated (except of the tests) so changes made here will be overwritten by generator.

## üìÖ Changelog
- **2024-08-XX** - `14.0.0`
  - Added `appliedDiscountAmount`, `appliedDiscountQuantity`, `appliedQuantity`, `subtotalAmount` to `OrderItem` model
  - Added `appliedDiscountAmount`, `appliedDiscountQuantity`, `appliedQuantity`, `subtotalAmount` to `OrderItemCalculated` model
  - Added `holderRole` to `QualificationsOptionFilters` model
  - Added support for POST `/v1/segments` and GET `/v1/segments/{segmentId}`
  - Added support for GET `/v1/promotions/tiers` and GET `/client/v1/promotions/tiers`
  - Added support for GET and POST `/v1/vouchers`
  - Added support for GET and PUT `/v1/vouchers/{code}`
  - Added `loyaltyTier` parameter to models `EarningRuleBase`, `EarningRule`, `LoyaltiesEarningRulesDisableResponseBody`, `LoyaltiesEarningRulesEnableResponseBody` and `LoyaltiesEarningRulesGetResponseBody`
  - Added support for GET and POST `/v1/loyalties/{campaignId}/earning-rules`
  - Added support for GET and PUT `/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}`
  - Added support for POST `v1/vouchers/metadata/async`
  - Added support for POST `/v1/vouchers/import`
  - Added support for GET `/v1/customers/{customerId}/activity`
  - Added support for POST `/v1/vouchers/bulk/async`
  - Added support for GET `/v1/loyalties/{campaignId}/reward-assignments` and GET `/v1/loyalties/{campaignId}/rewards`
  - Added support for POST `/v1/loyalties/{campaignId}/rewards` and PUT `/v1/loyalties/{campaignId}/rewards/{assignmentId}`
  - Added support for POST `/v1/loyalties` and PUT `/v1/loyalties/{campaignId}`
  - Added support for GET `/v1/loyalties/{campaignId}` and GET `/v1/loyalties`
  - Added support for GET `/v1/loyalties/{campaignId}/members/{memberId}` and GET `/v1/loyalties/{campaignId}/members`
  - Added new query option to GET `/v1/vouchers` - `code` and `ids`
- ‚ùó‚ùó‚ùó BREAKING CHANGES ‚ùó‚ùó‚ùó:
    - Property `type` of Model `CampaignVoucher` has no default value anymore.
    - Removed `totalAppliedDiscountAmount` from OrderItemCalculated model
    - Model `RewardsCreateRequestBody`.attributes will now be `RewardsCreateRequestBodyAttributes` instead of `object`
    - Model `RewardsUpdateRequestBody`.attributes will now be `RewardsUpdateRequestBodyAttributes` instead of `object`
    - Method `createReward` will return `RewardsCreateResponseBody` instead of Reward - the new model is compatible with `Reward` model.
    - Method `updateReward` will return `RewardsUpdateResponseBody` instead of Reward - the new model is compatible with `Reward` model.
    - Deleted model `EarningRuleEvent`
    - Models `EarningRuleBase`, `EarningRule`, `LoyaltiesEarningRulesDisableResponseBody`, `LoyaltiesEarningRulesEnableResponseBody` and `LoyaltiesEarningRulesGetResponseBody` parameter `event` is no longer `EarningRuleEvent`, instead this is `String` now.
    - Removed `CampaignsImportVoucherLoyaltyCard`, use `SimpleLoyaltyCard` instead.
    - Property `type` in model `CampaignsImportVoucherItem` has no longer `LUCKY_DRAW_CODE` enum option.
- **2024-07-22** - `13.0.0`
  - Added support for POST `/v1/promotions/{campaignId}/tiers` and PUT `/v1/promotions/tiers/{promotionTierId}`
  - Added support for GET and POST `/v1/rewards`
  - Added support for GET and PUT `/v1/rewards/{rewardId}`
  - ‚ùó‚ùó‚ùó BREAKING CHANGES‚ùó‚ùó‚ùó:
    - Property `key` of model `Session` in now String, not Enum.
    - Renamed model `ValidationsRedeemableSkippedDetails` -> `ValidationsRedeemableSkippedResultDetails`
- **2024-07-12** - `12.0.0`
  -  The new version of the SKD includes coverage for all the most commonly used Voucherify endpoints and supports typed models.

*Previous versions of the API are no longer supported, and we highly recommend upgrading to version 12.0.0, which is now designated as Long-Term Support (LTS).*

*Changelog for previous versions could be found in the [CHANGELOG.md file](./CHANGELOG.md)*

## üîê Documentation for Authorization

```java
// Setup ApiClient Authorization:

import io.voucherify.client.ApiClient;
import io.voucherify.client.Configuration;
import io.voucherify.client.auth.ApiKeyAuth;

public class Main {
    public static ApiClient getClient() {}
        ApiClient defaultClient = Configuration.getDefaultApiClient();

        defaultClient.setBasePath("https://api.voucherify.io");
        defaultClient.setAuthentication("X-App-Id", "YOUR_X_APP_ID");
        defaultClient.setAuthentication("X-App-Token", "YOUR_X_APP_TOKEN");

        return defaultClient;
    }
}
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}}- [{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

<a id="documentation-for-authorization"></a>
## Documentation for Authorization

{{^authMethods}}Endpoints do not require authorization.{{/authMethods}}
{{#hasAuthMethods}}Authentication schemes defined for the API:{{/hasAuthMethods}}
{{#authMethods}}
<a id="{{name}}"></a>
### {{name}}

{{#isApiKey}}- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasicBasic}}- **Type**: HTTP basic authentication
{{/isBasicBasic}}
{{#isBasicBearer}}- **Type**: HTTP Bearer Token authentication{{#bearerFormat}} ({{{.}}}){{/bearerFormat}}
{{/isBasicBearer}}
{{#isHttpSignature}}- **Type**: HTTP signature authentication
{{/isHttpSignature}}
{{#isOAuth}}- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}

## Recommendation

It's recommended to create an instance of `ApiClient` per thread in a multithreaded environment to avoid any potential issues.
