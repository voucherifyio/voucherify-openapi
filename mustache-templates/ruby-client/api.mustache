=begin
{{> api_info}}
=end

require 'cgi'

module {{moduleName}}
{{#operations}}
  class {{classname}}
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
{{#operation}}
    {{#summary}}
    # {{{.}}}
    {{/summary}}
    {{#notes}}
    # {{{.}}}
    {{/notes}}
{{#vendorExtensions.x-group-parameters}}
    # @param [Hash] opts the parameters
{{#allParams}}
{{#required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}} (required)
{{/required}}
{{/allParams}}
{{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
{{#allParams}}
{{#required}}
    # @param {{paramName}} [{{{dataType}}}] {{description}}
{{/required}}
{{/allParams}}
    # @param [Hash] opts the optional parameters
{{/vendorExtensions.x-group-parameters}}
{{#allParams}}
{{^required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
{{/required}}
{{/allParams}}
    # @return [{{{returnType}}}{{^returnType}}nil{{/returnType}}]
    def {{operationId}}({{^vendorExtensions.x-group-parameters}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}opts = {})
      {{#returnType}}data, _status_code, _headers = {{/returnType}}{{operationId}}_with_http_info({{^vendorExtensions.x-group-parameters}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}opts)
      {{#returnType}}data{{/returnType}}{{^returnType}}nil{{/returnType}}
    end

    {{#summary}}
    # {{.}}
    {{/summary}}
    {{#notes}}
    # {{.}}
    {{/notes}}
{{#vendorExtensions.x-group-parameters}}
    # @param [Hash] opts the parameters
{{#allParams}}
{{#required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}} (required)
{{/required}}
{{/allParams}}
{{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
{{#allParams}}
{{#required}}
    # @param {{paramName}} [{{{dataType}}}] {{description}}
{{/required}}
{{/allParams}}
    # @param [Hash] opts the optional parameters
{{/vendorExtensions.x-group-parameters}}
{{#allParams}}
{{^required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
{{/required}}
{{/allParams}}
    # @return [Array<({{{returnType}}}{{^returnType}}nil{{/returnType}}, Integer, Hash)>] {{#returnType}}{{{.}}} data{{/returnType}}{{^returnType}}nil{{/returnType}}, response status code and response headers
    private def {{operationId}}_with_http_info({{^vendorExtensions.x-group-parameters}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: {{classname}}.{{operationId}} ...'
      end
      {{#vendorExtensions.x-group-parameters}}
      # unbox the parameters from the hash
      {{#allParams}}
      {{^isNullable}}
      {{#required}}
      {{{paramName}}} = opts[:'{{{paramName}}}']
      {{/required}}
      {{/isNullable}}
      {{/allParams}}
      {{/vendorExtensions.x-group-parameters}}
      {{#allParams}}
      {{/allParams}}
      # resource path
      local_var_path = '{{{path}}}'{{#pathParams}}.sub('{' + '{{baseName}}' + '}', CGI.escape({{paramName}}.to_s){{^strictSpecBehavior}}.gsub('%2F', '/'){{/strictSpecBehavior}}){{/pathParams}}

      # query parameters
      query_params = opts[:query_params] || {}
      {{#queryParams}}
      {{#required}}
      query_params[:'{{{baseName}}}'] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/queryParams}}
      {{#queryParams}}
      {{^required}}
      query_params[:'{{{baseName}}}'] = {{#collectionFormat}}@api_client.build_collection_param(opts[:'{{{paramName}}}'], :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}opts[:'{{{paramName}}}']{{/collectionFormat}} if !opts[:'{{{paramName}}}'].nil?
      {{/required}}
      {{/queryParams}}

      # header parameters
      header_params = opts[:header_params] || {}
      {{#hasProduces}}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept([{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}])
      {{/hasProduces}}
      {{#hasConsumes}}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type([{{#consumes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      {{/hasConsumes}}
      {{#headerParams}}
      {{#required}}
      header_params[{{#lambdaFixHeaderKey}}:'{{{baseName}}}'{{/lambdaFixHeaderKey}}] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/headerParams}}
      {{#headerParams}}
      {{^required}}
      header_params[{{#lambdaFixHeaderKey}}:'{{{baseName}}}'{{/lambdaFixHeaderKey}}] = {{#collectionFormat}}@api_client.build_collection_param(opts[:'{{{paramName}}}'], :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}opts[:'{{{paramName}}}']{{/collectionFormat}} if !opts[:'{{{paramName}}}'].nil?
      {{/required}}
      {{/headerParams}}

      # form parameters
      form_params = opts[:form_params] || {}
      {{#formParams}}
      {{#required}}
      form_params['{{baseName}}'] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/formParams}}
      {{#formParams}}
      {{^required}}
      form_params['{{baseName}}'] = {{#collectionFormat}}@api_client.build_collection_param(opts[:'{{{paramName}}}'], :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}opts[:'{{{paramName}}}']{{/collectionFormat}} if !opts[:'{{paramName}}'].nil?
      {{/required}}
      {{/formParams}}

      # http body (model)
      post_body = opts[:debug_body]{{#bodyParam}} || @api_client.object_to_http_body({{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:'{{{paramName}}}']{{/required}}){{/bodyParam}}

      # return_type
      return_type = opts[:debug_return_type]{{#returnType}} || '{{{.}}}'{{/returnType}}

      # auth_names
      auth_names = opts[:debug_auth_names] || [{{#authMethods}}'{{name}}'{{^-last}}, {{/-last}}{{/authMethods}}]

      new_options = opts.merge(
        :operation => :"{{classname}}.{{operationId}}",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:{{httpMethod}}, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: {{classname}}#{{operationId}}\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
{{^-last}}

{{/-last}}
{{/operation}}
  end
{{/operations}}
end
